

00:00:40
<transcript>: Subscribe.

00:06:24
jean_gc: hi

00:07:06
okufa_f: HeyGuys

00:10:15
<transcript>: Check.

00:10:23
<transcript>: One to check, check, check.

00:10:30
<transcript>: Check.

00:11:09
<transcript>: Hi. None of you know who I am, probably because I've never streamed it this time before I stream like 12 hours from now. Normally.

00:11:09
<transcript>: so

00:11:11
<transcript>: So early Am in the us.

00:11:18
<transcript>: Not the middle of the night. Well, I see the middle of the night. What is it? It's like it's 08:00.

00:11:18
<transcript>: it's

00:11:20
restarted: I know.

00:11:26
<transcript>: It's 08:00 p.m.. Normally I would go to sleep right now which is stupid but I have young kids restarted nose you know this.

00:11:26
<transcript>: gene

00:11:28
stream_kyle: A real night stream. I thought it was another test.

00:11:29
<transcript>: Gene GC. Welcome to My chat and also Hi.

00:11:36
blakegreendev: I KNOW YOU!

00:11:39
<transcript>: Okay, so maybe some of you know, Whoa, stream. Kyle's here. You okay? No, it's not a test. Oh, I did test. Wow, Kyle, you are an OG.

00:11:39
<transcript>: you

00:11:43
<transcript>: You, sir? Like Greens here. Okay, never mind. It's all people. I know. It's just.

00:11:43
<transcript>: people i

00:11:47
<transcript>: People I know that stay up later than I do.

00:11:52
<transcript>: Kyle, if you remember the night that I accidentally turned on the stream when I was testing something.

00:11:52
<transcript>: that was

00:11:54
<transcript>: That was at the very beginning.

00:11:58
<transcript>: That was early, early days.

00:11:58
<transcript>: so

00:12:01
<transcript>: So it's fitting that I'm doing this stream tonight, because.

00:12:05
<transcript>: I've decided on a new career.

00:12:10
<transcript>: I've decided I'd like to be a competitive, broad programmer.

00:12:10
<transcript>: and

00:12:12
<transcript>: And.

00:12:17
<transcript>: I decided this because I started doing admin of code. I've done admin of code a few years.

00:12:17
<transcript>: never seriously

00:12:19
<transcript>: Never seriously, never done all of them.

00:12:24
<transcript>: But something about it this year, as I'm working through one of the puzzles.

00:12:24
<transcript>: and then

00:12:32
okufa_f: went from working at statmuse to competitive programmer in a span of days

00:12:35
<transcript>: And then I learned that, like, the leaderboard is insane. And like, insanely, competitive, like, who are these people that get really fast times on Advent of Code. That's what I learned of competitive programming.

00:12:43
<transcript>: And when there's something that's, like completely pointless and takes a ton of practice, I am all for it.

00:12:47
<transcript>: From working at statme. Used to competit programmers fan of days.

00:12:47
<transcript>: a coupon i

00:12:51
<transcript>: A coupon. I still work at Statmes. This will be my hobby.

00:12:51
<transcript>: while working

00:12:58
<transcript>: While working at Sat Muse on the side, I'm gonna become a competitive programmer. So my goal is next year to be pretty competitive.

00:12:58
<transcript>: in

00:13:07
<transcript>: In admin of code, and then maybe the following year try to like crack topics or something, and then the following year, take number one so that's the goal.

00:13:07
<transcript>: my credential

00:13:12
<transcript>: My credentials. You might ask Vince Dev. Thank you so much for the following. So, what are my credentials.

00:13:12
<transcript>: well let's

00:13:17
<transcript>: Well, let's see 120 stars on Mario 64. Just saying.

00:13:17
<transcript>: all one hundred and

00:13:23
<transcript>: All 120. I got the golden AK. And call of Duty. Four.

00:13:23
<transcript>: i got

00:13:26
<transcript>: I got the Insane title in World of Warcraft.

00:13:26
<transcript>: so

00:13:35
<transcript>: So, like, basically anything where you just have to, like, drown away for hundreds and hundreds and hundreds of hours until you're really good at something. I've done it.

00:13:35
<transcript>: trying to think of something

00:13:42
<transcript>: Trying to think of something that wasn't involved with gaming. So anything I've done, I did a blindfolded Rubik's Cube. So true story.

00:13:42
okufa_f: the grind

00:13:42
turki_9999999: insane title is rly rare

00:13:47
<transcript>: Right after high school. Right when I went into College, before I went into College.

00:13:47
<transcript>: i spent like

00:13:49
<transcript>: I spent like two months.

00:13:49
<transcript>: getting

00:13:53
<transcript>: Getting super into Rubik's Cubes because I saw somebody.

00:13:53
<transcript>: do the blind

00:14:13
<transcript>: Do the blindfold thing. It was like on a commercial or something. I was like, if a human brain can figure out and learn how to do a Rubik blindfolded, I want to experience that. So I spent, like, two. Maybe it was three months. I know. It was like my whole summer before College, just obsessed with the Ruby shoe. And I just, like, lived in my room with a Rubik's Cube until I did it blindfolded. I did it blindfolded.

00:14:13
<transcript>: exactly one

00:14:21
<transcript>: Exactly one time. So I mean, I've practiced a lot and I had to, like, learn the different it's like a you just memorize, like a series of I think it's twelve or 13 numbers.

00:14:21
<transcript>: basically

00:14:24
blakegreendev: with folks using ChatGPT to solve the puzzles in 13 seconds, I don't think AOC will be the same... :(

00:14:26
<transcript>: Basically, in the time you're inspecting the Cube, you're just memorizing the sequence of numbers that.

00:14:26
<transcript>: you sort of

00:14:29
<transcript>: You sort of, like, play through. Okay.

00:14:29
<transcript>: once you

00:14:39
<transcript>: Once you tilt the blindfold on, you start playing through that series moves. Anyway, I did it once, and I hardly touched a Rubik's Cube ever since. So that's kind of how I work. Like, I like to do stuff.

00:14:43
okufa_f: aoc, in the past, has been an excuse to learn a new language

00:14:44
<transcript>: That's like seems impossible to me. I can't imagine how people do it.

00:14:44
<transcript>: like when i

00:14:46
<transcript>: Like when I see.

00:14:46
<transcript>: i don't know

00:14:47
blakegreendev: unless they have separate leadboards

00:14:55
<transcript>: I don't know. Advent of code. People doing stuff in, like 45 seconds. It takes me like 15 minutes. That sounds impossible. And I want to do it.

00:14:55
<transcript>: so i'm going to

00:14:56
<transcript>: So I'm going to.

00:15:05
<transcript>: With folks using Chat GBD to solve the puzzles of 30 seconds. I don't I don't think AFC will be the same. Yeah. So maybe next year it's advanced enough. I don't think this year.

00:15:05
<transcript>: chat gpt

00:15:26
<transcript>: Chat GPT is that big of a factor. I know. One day it got number one and maybe top five another day. Like, I don't think chat GPT can actually solve the harder puzzles and Avenue code. So I don't I don't think at least this year that's a real threat. Maybe next year there's some new model is fast as AI is going. Maybe it does become an issue. I don't know. I'm not too worried.

00:15:26
<transcript>: about it

00:15:28
<transcript>: About it. I want to be the fastest human.

00:15:31
<transcript>: So there's that.

00:15:40
<transcript>: Aoc in the past has been excused to learn a new language. Yeah. So I was thinking, like.

00:15:40
<transcript>: that

00:15:44
<transcript>: That was an approach. I know a lot of people do that.

00:15:55
<transcript>: It's really either that it's like those are the two options. It's like either go hard and try and be good at it and like get it the topically board, or just learn something new.

00:15:55
<transcript>: and i don't know

00:15:58
<transcript>: And I don't know. I have a lot of things that I like to learn.

00:15:58
<transcript>: like projects

00:16:03
okufa_f: have you never done leetcode

00:16:13
<transcript>: Like projects I like to learn new languages with. I don't really want AOC to be that I guess for me unless it's a leaderboard. Yeah. Maybe they will. Maybe they'll maybe they'll make a separately leaderboard for AI submissions. I don't know how they'll figure out.

00:16:16
<transcript>: It's an AI submission, I guess.

00:16:16
<transcript>: maybe they make

00:16:22
<transcript>: Maybe they make people, like, admit it and just lean into it. And like, you can compete.

00:16:26
<transcript>: Have I ever done leak code? No. I've never done a job interview.

00:16:26
<transcript>: like at all

00:16:29
<transcript>: Like at all. Where they do leak code, never done it.

00:16:43
<transcript>: I have no experience with this concept of competitive programming, but today is day one, and I'm gonna get started, and you guys are gonna watch me. Well, those of you who are here and stick around.

00:16:43
<transcript>: let's get

00:16:46
<transcript>: Let's get to it. I'm gonna actually place the music.

00:16:48
<transcript>: Let's see.

00:16:50
<transcript>: Place the music.

00:16:51
oskrm: First rule of competitive programming?

00:16:57
<transcript>: And here we are. So what? I'm gonna do? My plan, if you will.

00:17:04
<transcript>: My plan is first rule of competitive programming. Oh, what is it? What's the first rule? Oscar? What's the first rule of competitive programming.

00:17:04
<transcript>: you don't

00:17:07
<transcript>: You don't talk about competitive programming.

00:17:07
<transcript>: seth virtual

00:17:08
<transcript>: Seth virtual.

00:17:11
<transcript>: My plan is.

00:17:11
<transcript>: to

00:17:17
oskrm: idk, dont talk about it LUL

00:17:17
okufa_f: if that's the first rule, what's the second rule

00:17:18
<transcript>: To kind of get my process down this year doing AOC. I'll be super slow. It doesn't matter.

00:17:18
<transcript>: i might

00:17:34
<transcript>: I might try tonight if I stream long enough, I might try and do number nine, like when it's actually live because I just don't stay up till that late. That's gonna be another thing I'm gonna have to adjust to during December. Every year is like staying up different hours. I normally go to bed now. I have my watch on.

00:17:51
<transcript>: Don't talk about it. Yeah. If that's the first rule. What's the second rule? Good questions. I don't know. I'm new to this stuff. Okay, so what I'm gonna do? I'm gonna be doing them this year in Python, because I think that's probably the best choice from what I've gathered for competitive programming for stuff like this.

00:17:54
<transcript>: I know you can make really crazy.

00:17:54
<transcript>: solutions

00:18:00
<transcript>: Solutions with like, Mathematica and like, made up languages that's like.

00:18:00
<transcript>: that's

00:18:05
<transcript>: That's cool. But I think I'm probably better off sticking with something that I have some experience with.

00:18:05
<transcript>: so

00:18:10
oskrm: chrome devtools

00:18:11
<transcript>: So I did the first seven days this year with like TypeScript.

00:18:12
okufa_f: python is probably the least terse language, so the velocity would be there

00:18:15
<transcript>: And now I'm gonna start doing the right of the Python.

00:18:15
<transcript>: just to get

00:18:25
<transcript>: Just to get really familiarized. It's been a couple years since I've written Python, like for work, but I did work at a Python shop and I had to know quite a bit of Python.

00:18:25
<transcript>: it's like

00:18:31
<transcript>: It's like been a while, you know? So like list comprehensions. Look weird again. It's like we're there.

00:18:31
<transcript>: okay

00:18:37
pogjar: how long have you been using vim?

00:18:37
<transcript>: Okay. So then I found like there's some libraries for automating, some of the stuff, like submissions.

00:18:37
<transcript>: so

00:18:44
<transcript>: So you can download your data and submit through this AOCD. What is it called.

00:18:48
<transcript>: Requirement. It's this admin of code data.

00:18:48
<transcript>: package

00:18:49
<transcript>: Package.

00:18:51
<transcript>: Chrome DevTools? What's that.

00:18:51
<transcript>: what

00:18:53
oskrm: @adamdotdev Q, how would you handle i18n in Nextjs?

00:19:07
<transcript>: What about Chrome? Devtools? Python is probably the least terse language, so the velocity would be there. Yeah, I think that's what I gathered. It's like I'm wasting a lot of time writing TypeScript, even though I'm more familiar with TypeScript or JavaScript. I'm wasting a lot of time running brackets and stuff like that when I could just be writing Python.

00:19:14
<transcript>: How long have you been using Vim? You know, it's been like four months. It's been since I started streaming on Twitter.

00:19:14
<transcript>: a little after i started

00:19:17
<transcript>: A little after I started streaming. So since I have four months.

00:19:22
<transcript>: And I love it. Neoven is the best. It's great.

00:19:27
<transcript>: Q. How would you handle a localization in next JS.

00:19:27
<transcript>: next

00:19:31
<transcript>: Next has some of that stuff, right? It has some like.

00:19:31
<transcript>: localization

00:19:33
<transcript>: Localization library.

00:19:33
<transcript>: stuff

00:19:39
<transcript>: Stuff. Or it's like baked in to next. Right. I think they've got something with middleware. I don't know.

00:19:39
<transcript>: i

00:19:44
<transcript>: I would if I were building something that needed to be localized, I would.

00:19:44
<transcript>: look at

00:19:50
<transcript>: Look at the next GS Docs. I'm pretty sure if you go to the next Docs. Maybe if we go beta.

00:19:54
<transcript>: I do the latest box and then local.

00:19:54
<transcript>: localization

00:19:56
<transcript>: Localization.

00:19:58
<transcript>: I guess the new.

00:20:03
<transcript>: The new ha? Is there nothing in the dock.

00:20:09
<transcript>: The new version next 13 they might have gotten rid of some of the localization stuff actually.

00:20:09
<transcript>: let's go

00:20:11
<transcript>: Let's go to the docs.

00:20:14
oskrm: they said they won't provide it an im stuck

00:20:15
<transcript>: Localization internet.

00:20:15
<transcript>: what was that

00:20:17
<transcript>: What was that? International.

00:20:17
<transcript>: intern

00:20:20
<transcript>: International Lies routing.

00:20:22
<transcript>: Outside, here.

00:20:22
<transcript>: i'm just gonna

00:20:23
adamdotdev: https://nextjs.org/docs/advanced-features/i18n-routing

00:20:24
<transcript>: I'm just gonna paste this in chat.

00:20:24
<transcript>: they said

00:20:26
<transcript>: They said they won't provide it.

00:20:26
<transcript>: and i

00:20:36
<transcript>: And I'm stuck. Oh, so they're getting rid of the like the new next 13 app directory. Stuff is not gonna support this routing stuff anymore.

00:20:36
<transcript>: that's a bummer

00:20:37
<transcript>: That's a bummer.

00:20:48
oskrm: sorry to derail the stream LUL

00:20:49
<transcript>: I mean, if you dependent on that feature, I guess that means you're gonna have rely on like third party, which is maybe what the next best team would say. Like they're just not gonna support that stuff baked into next.

00:20:56
<transcript>: Okay. So what I want to do tonight is I want to make, like.

00:20:59
<transcript>: A main Pi.

00:20:59
<transcript>: and

00:21:05
okufa_f: does working back at statmuse mean that you have to religiously follow sports again?

00:21:15
<transcript>: And in this main PY, I'm gonna actually have it like here's. Here's my thought. So I haven't done a yet. Actually, I've got this one to do today. My thought is I make a script and I need to look into this Python have like a watcher.

00:21:15
<transcript>: run

00:21:16
<transcript>: Run, Python.

00:21:16
<transcript>: script

00:21:20
<transcript>: Script every time file changes.

00:21:20
<transcript>: watcher

00:21:21
<transcript>: Watcher.

00:21:24
<transcript>: Now to do this in TypeScript.

00:21:24
<transcript>: i don't want to

00:21:26
<transcript>: I don't want to file for changes.

00:21:29
<transcript>: What's the best way to do it in Python.

00:21:30
tnkhanh: anyone knows what the @@##~ mean?

00:21:32
<transcript>: So here's my thought. Oh, watch DogMy.

00:21:35
<transcript>: Every time I change a file so as I'm working through the solution.

00:21:35
<transcript>: i

00:21:38
<transcript>: I want to run.

00:21:38
<transcript>: this

00:21:44
tnkhanh: hehe, good morning

00:21:58
<transcript>: This main PY and it's gonna run. I'm gonna provide the sample data somehow. It's gonna run the sample data through and check it against the sample answer. And as soon as that is correct, like it's gonna run this function. Run it. Keep running. Every time it changes the file. Save the file. Soon as that sample data matches the sample answer, it's gonna run it the real input data.

00:22:10
<transcript>: Myinpop file and submit it. So just kind of automate that part of it. You know, I'm saying so I can just work on the function because I'm watching people's videos from this year. And like even people this year that are like, top five.

00:22:10
<transcript>: they're like

00:22:16
<transcript>: They're like copying and pasting the number into the thing and hitting submit. And I just feel like that's like.

00:22:16
<transcript>: suboptimal

00:22:18
okufa_f: python doesn't have an easy answer for hot reloading. some python libraries have it built in, but it's not easy as slapping nodemon in front of it

00:22:26
<transcript>: Suboptimal now their brain moves about 10 times faster than mine so they're still gonna beat me by I don't know a hundred times but.

00:22:32
<transcript>: At least you squeeze out that last little second. You know, I'm saying I gotta get that process down.

00:22:34
<transcript>: You didn't derail you're good. Oscar.

00:22:34
<transcript>: those working

00:22:41
<transcript>: Those working back at St. You have to religiously follow Sports again. I never really religiously followed sports.

00:22:41
<transcript>: even

00:22:54
<transcript>: Even in, like the early days of Stat Muse. In fact, starting status eight years, eight years ago, was like the end of being able to follow sports. I just didn't have time anymore. We were running a startup. I had my first kid.

00:22:54
<transcript>: who

00:22:57
<transcript>: Who's seven. Now that's crazy.

00:22:57
<transcript>: yeah

00:23:13
<transcript>: Yeah. It was like my entrance into fatherhood and having no more time left and having a startup. So yeah, I don't pay attention to sports. You don't really have to. I mean, like, I know enough from being a sports fan for, like, the first 20 years of my life.

00:23:13
<transcript>: felt like

00:23:15
<transcript>: Felt like no kind of what's going on.

00:23:15
<transcript>: but yeah

00:23:21
<transcript>: But yeah, I never really followed it religiously Yay Linux thank you so much for the follow.

00:23:27
<transcript>: Anyone knows what the at pound, whatever whatever means.

00:23:27
<transcript>: raid

00:23:29
<transcript>: Raid.

00:23:29
<transcript>: ao

00:23:30
<transcript>: Ao.

00:23:35
<transcript>: Ayo. I do this when I get a raid, I've got this confetti thing.

00:23:37
<transcript>: Thank you so much for the raid.

00:23:40
aaoa_: Heyo

00:23:41
<transcript>: Good morning. Is it morning for you? What.

00:23:41
nekoheavy: woop woop

00:23:50
<transcript>: So this the pounds. Do you mean this thing, this stuff. I think it's gonna make, like a Christmas tree or something, right? Advanco does that.

00:23:54
<transcript>: It's just like a.

00:23:54
<transcript>: this is like

00:23:56
<transcript>: This is like a.

00:23:57
okufa_f: you can take a look at this https://github.com/breuleux/jurigged

00:24:02
aaoa_: Yes yes morning ish like 11am

00:24:02
<transcript>: Mask. And it's slowly gonna be colored in to the look like something I don't know.

00:24:02
<transcript>: something like that

00:24:10
<transcript>: Something like that. Python doesn't have an easy answer for hot reloading. Some Python libraries have it built in, but it's not easy as slapping node mod in front of it. Oh bummer.

00:24:13
<transcript>: Hey oh AO.

00:24:13
<transcript>: welcome

00:24:14
<transcript>: Welcome.

00:24:14
<transcript>: welcome

00:24:18
tnkhanh: oh, yay Christmas tree

00:24:18
<transcript>: Welcome to my chat. Thank you for the raid.

00:24:18
<transcript>: nico heavy

00:24:23
<transcript>: Nico heavy. Also, welcome to my chat. Whoopoop you can take a look at this.

00:24:23
<transcript>: jur

00:24:32
<transcript>: Jur jurigd jurigged morningish like 11:00 a.m. Where do you live? Where is it? 11:00 a.m. Australia.

00:24:34
<transcript>: Southeast Asia.

00:24:34
<transcript>: maybe

00:24:35
ifillz: aaoaHI

00:24:36
<transcript>: Maybe.

00:24:41
<transcript>: Someone like that? I fills? Welcome to chat.

00:24:41
aaoa_: Japan

00:24:50
<transcript>: Welcome, welcome, welcome. So we're becoming Japan. Oh, very cool. We're becoming competitive programmers today. Starting today.

00:24:50
<transcript>: and for

00:24:53
stoney_eagle: lol, howdy

00:25:01
nekoheavy: lol Japan gang

00:25:09
oskrm: howdy @Stoney_Eagle

00:25:10
<transcript>: And for the next in number of years, I'm dedicating myself to competitive programming. I'm obsessive. And when I decide there's something I really want to do, even if it takes lots and lots of time, I will throw time at that problem. And in this case I want to be number one on AOC one of these years. I don't care what year, as long as it keeps going.

00:25:10
<transcript>: at some point

00:25:12
<transcript>: At some point in the future.

00:25:12
<transcript>: on some timeline

00:25:16
aaoa_: He wanna compete!

00:25:22
<transcript>: On some timeline, I will be number one. One year. It might be 2028. It might be 2035. I don't know if I'm still like mentally. There enough in ten years.

00:25:25
<transcript>: I am 36. So we'll see.

00:25:30
<transcript>: Okay. So somebody said somebody said something.

00:25:30
<transcript>: how do you

00:25:33
okufa_f: senile at age 40

00:25:34
<transcript>: How do you, Stony Eagle, Eagle, welcome to my chat.

00:25:36
<transcript>: Somebody said this thing.

00:25:36
<transcript>: jer jer

00:25:41
davur_: There's a super easy way to achieve that you know

00:25:42
<transcript>: Jer, Jerrigd, let's see if this thing. I'm trying to find something to reload a Python script.

00:25:47
<transcript>: Let's do update your code while it runs using it is trivial.

00:25:47
<transcript>: oh this looks good

00:25:48
<transcript>: Oh, this looks good.

00:25:48
<transcript>: yeah

00:25:50
<transcript>: Yeah.

00:25:50
<transcript>: this looks

00:25:50
devinda_me: evening strim today @adamdotdev ?

00:25:51
stoney_eagle: hey, @oskrM are you behaving here? 😂

00:25:51
<transcript>: This looks good.

00:25:51
<transcript>: it's

00:25:56
<transcript>: It's. That's the that's what it does. So I Yeah, Yeah.

00:25:59
<transcript>: Optionally install the.

00:25:59
<transcript>: vel lo

00:26:01
oskrm: @Stoney_Eagle sure I am

00:26:05
<transcript>: Vel Loop, a terminal based live development environment. I don't want that. I just want this.

00:26:05
<transcript>: so we'll

00:26:07
philipjayfry: is it like nodemon?

00:26:09
<transcript>: So we'll just put this into the requirements.

00:26:09
<transcript>: hips

00:26:10
<transcript>: Hips.

00:26:10
<transcript>: for

00:26:12
<transcript>: For dot, tics.

00:26:15
davur_: just create yourself a private leaderboard... and only invite you worst programmer friends :P

00:26:18
stoney_eagle: @Stoney_Eagle haha

00:26:20
tnkhanh: deveLOOP monkaS

00:26:20
<transcript>: Barely. I remember a lot about Python. I just. I thought the requirements file ended in dot Pip.

00:26:23
<transcript>: This is gonna go well.

00:26:24
<transcript>: Let's see.

00:26:24
<transcript>: what else did i miss

00:26:26
<transcript>: What else did I miss.

00:26:26
<transcript>: japan

00:26:28
<transcript>: Japan gang.

00:26:38
blakegreendev: hahaha dot pip

00:26:40
<transcript>: I want to compete. That's exactly right. Seeing how at age 40, I do wonder sometimes this profession, like, I don't know, housing. It How's it gonna age me. I've been doing this a long time now.

00:26:44
<transcript>: Super way to achieve that, you know, is there, Daver? What is it.

00:26:44
<transcript>: evening

00:26:50
<transcript>: Evening. Streamed. That's right. This is my first ever nighttime stream. I normally stream 12 hours from now.

00:26:54
aaoa_: Aging you faster aaoaEyesA

00:26:57
<transcript>: So it's in a interesting to see who's like, this is morning for some of the crowd. I guess sometimes I get Australians right before they go to bed.

00:26:57
<transcript>: now we've got

00:27:01
<transcript>: Now we've got people from Japan in the morning.

00:27:01
<transcript>: that's new for me

00:27:09
oskrm: it's 4:20AM here in Egypt

00:27:10
stoney_eagle: it's 3:20 am here

00:27:11
<transcript>: That's new for me. I'm mostly stream for like really early risers in the US or Europeans who watch me instead of working or while they work, I guess.

00:27:15
davur_: Aussie here... still at work :P

00:27:18
<transcript>: That's generally who my audience is. Is it like Node Mom? That's what it sounds like. Also, welcome to Chat, Phillip.

00:27:25
<transcript>: Oscar, you behaving here. Just create yourself a private leader board, and only invite your worst programmer, for instance.

00:27:28
<transcript>: That's a good place to start. I think.

00:27:37
<transcript>: Pip, let's see. 04:20. A.m.. In Egypt and you're awake? Are you got? You haven't gone to bed yet. Is that the idea.

00:27:37
<transcript>: dave

00:27:41
oskrm: I just woke

00:27:44
<transcript>: Daver's still at work. Okay, let's get back to here. So we're gonna add jurigged. I'm gonna do Pip.

00:27:44
<transcript>: install

00:27:45
<transcript>: Install.

00:27:45
<transcript>: like this

00:27:46
<transcript>: Like this.

00:27:52
<transcript>: Add jurigd. I saying that right. Jurigged.

00:27:56
<transcript>: So now I can just say Python.

00:27:59
<transcript>: Imaged and then.

00:27:59
<transcript>: the script

00:28:01
<transcript>: The script. I want to keep running.

00:28:01
<transcript>: or i can

00:28:05
<transcript>: Or I can just say jurigged the script, right.

00:28:09
<transcript>: Okay. So we need to write some code.

00:28:13
<transcript>: In Maine, Pi. And what do we want to do here? We want to.

00:28:16
<transcript>: So I wanted to figure out the current day.

00:28:16
<transcript>: two thousand and

00:28:24
<transcript>: 2022. I wanted to figure out what file based on some naming convention. Thank you for the follow Stoney Eagle Eagle.

00:28:37
aaoa_: How long you gone night stream today? aaoaEyesA

00:28:40
oskrm: are you gonna build each day as a module?

00:28:41
<transcript>: I want to figure out what file, and then I want to import like a common function name. So let's say this thing. Let's say it exported. How do you even export in Python? Okay, it's been forever. I hope there's some Python developers in this stream because I basically don't learn anything unless Twitch Chat teaches me.

00:28:41
<transcript>: i think

00:28:41
davur_: How does jurigged differ from "watch 'python scrypt.py'"

00:28:43
philipjayfry: you dont lol its all public

00:28:44
<transcript>: I think you'd say def for functions.

00:28:44
<transcript>: does it just export

00:28:49
oskrm: you don't export, you just import

00:28:55
<transcript>: Does it just export everything? I think it does. It's like if you put an underscore, it's expected to be private, but you technically could import it. Still, that's how it works. Right? So if I said def solve.

00:28:58
<transcript>: Rinse.

00:28:59
philipjayfry: correct

00:29:00
<transcript>: Why that.

00:29:01
davur_: I just use watch... run it every 2 seconds... it works

00:29:02
<transcript>: Am I looking.

00:29:02
<transcript>: return

00:29:06
<transcript>: Return one. I don't know if I did that.

00:29:06
<transcript>: i did that

00:29:07
<transcript>: I did that right there.

00:29:07
<transcript>: best

00:29:11
<transcript>: Best solve return one can I import that.

00:29:14
<transcript>: From Maine. Py.

00:29:14
<transcript>: do

00:29:17
devd0: yap that works

00:29:20
devd0: thats 100% legal

00:29:21
<transcript>: Do I have to make a new folder for day one so that I can do that whole, like a knit pie thing.

00:29:21
<transcript>: yep that works

00:29:26
<transcript>: Yep, that works. Thank you so much. Dev, Dough, Dev, Do. Welcome to chat.

00:29:39
<transcript>: You just want to use watch. Run it every 2 seconds. It works. But what if DAVR? What if five years from now I've got this system in place. I'm competing for number one on AOC. It's day 25 and I lose.

00:29:39
<transcript>: by a second

00:29:44
<transcript>: By a second because watch didn't trigger for 2 seconds.

00:29:44
<transcript>: what if

00:29:47
<transcript>: What if what if.

00:29:47
<transcript>: you got

00:29:49
<transcript>: You got think about that. You know what I'm saying.

00:29:49
<transcript>: you don't

00:29:51
<transcript>: You don't export. You just import. Okay.

00:29:51
<transcript>: it's all public

00:29:53
davur_: watch -n1

00:29:54
<transcript>: It's all public. That works.

00:30:00
<transcript>: Are you gonna build each day as a module? I guess should I guess I should.

00:30:00
<transcript>: how long

00:30:08
<transcript>: How long you get a night stream today? I think so. My wife is out of town. This looks for some life. Ever gone out of town. We have a seven year old and a three year old.

00:30:13
davur_: i know, I know... now you'll loose at 0.5 of a second I'm sure

00:30:21
stoney_eagle: WHAHAHAHAHAHAHAHH WTF

00:30:25
<transcript>: So she's out of town tonight, and that's the only reason I'm streaming at night. I'm probably gonna stream until the next advent of code. I don't know if I should stream actually solve it. I think you're not supposed to do that. Maybe. I don't know if it's okay. I'll stream doing number nine after I've got my system down, we're gonna system right now.

00:30:32
<transcript>: You're gonna build each day as a module so that's the question, should I should I build each day as a module? Is that how I would import it.

00:30:42
<transcript>: Watch in one. I know, I know. Now you're. Now you lose it. Zero five of the second. I'm sure exactly.

00:30:44
<transcript>: Exactly.

00:30:47
<transcript>: That's 100% legal.

00:30:47
<transcript>: okay

00:30:49
<transcript>: Okay. So.

00:30:49
<transcript>: do i need

00:30:58
<transcript>: Do I need to just make these models? Is that how this works people? So if I say 2022 and then I'll have like, one. And then if I move this guy.

00:31:01
<transcript>: Move this guy into.

00:31:01
<transcript>: a one

00:31:05
<transcript>: A one and then, oh, what I do.

00:31:08
<transcript>: If I do this guy.

00:31:08
<transcript>: let's name it

00:31:10
<transcript>: Let's name it one slash.

00:31:10
<transcript>: index

00:31:12
<transcript>: Index.

00:31:15
davur_: If you're interested... I have a python setup for AoC davur/adventofcoud/main.py on Github

00:31:15
<transcript>: Or what would I name this.

00:31:15
<transcript>: init

00:31:17
<transcript>: Init.

00:31:17
<transcript>: not pie is that

00:31:18
<transcript>: Not pie. Is that what you do.

00:31:18
<transcript>: is that a module

00:31:22
<transcript>: Is that a module now and now I can import from it. Let's just try.

00:31:25
<transcript>: Over here if I say.

00:31:25
<transcript>: import

00:31:25
okufa_f: yes

00:31:26
<transcript>: Import.

00:31:31
<transcript>: For what do you say? Import? I don't even remember Python.

00:31:31
<transcript>: i remember

00:31:33
<transcript>: I remember nothing.

00:31:33
<transcript>: import

00:31:34
<transcript>: Import.

00:31:34
<transcript>: or

00:31:39
<transcript>: Or from it's like from I just saw this. It was in.

00:31:39
<transcript>: front

00:31:39
okufa_f: from _ import _

00:31:40
<transcript>: Front.

00:31:40
<transcript>: thing import

00:31:41
tnkhanh: lol

00:31:43
<transcript>: Thing. Import thing. Okay, so from.

00:31:49
<transcript>: 2022.

00:31:51
<transcript>: One.

00:31:51
<transcript>: no

00:31:52
cowfacedude99: python?

00:31:52
<transcript>: No.

00:31:57
<transcript>: I'm doing. 2022.

00:32:00
<transcript>: Flash, dot.

00:32:05
cowfacedude99: goodmorning from india btw

00:32:06
<transcript>: Faces here to save the day from import.

00:32:06
<transcript>: oh

00:32:09
oskrm: I doubt numbers would work

00:32:13
<transcript>: Oh, yeah, yeah. You're saying from underscore good morning from India, cowpace, you've never watched me at this time of day, have you.

00:32:14
devd0: why we using python?

00:32:16
<transcript>: Oh, you have a Python setup for AOC. Yes.

00:32:16
<transcript>: yes

00:32:20
pogjar: ask gpt!

00:32:20
<transcript>: Yes, Daver, I am interested. Let's do this.

00:32:20
<transcript>: github

00:32:21
<transcript>: Github.

00:32:24
<transcript>: githubber

00:32:25
<transcript>: Githubber.

00:32:25
<transcript>: advent

00:32:27
<transcript>: Adventure.

00:32:29
<transcript>: Of.

00:32:29
<transcript>: code

00:32:30
<transcript>: Code.

00:32:36
<transcript>: You're an advent of cloud, because that should be a thing, right.

00:32:39
tnkhanh: wow nice

00:32:44
<transcript>: A cloud person. So what do you do in Maine? Py. Let's see. 2022 day four. What do you do here.

00:32:47
<transcript>: What do you do.

00:32:51
<transcript>: Year See Get your year.

00:32:57
<transcript>: Result.

00:32:57
<transcript>: so where

00:32:59
<transcript>: So where do you import solution.

00:33:04
<transcript>: Oh, day sleep. Oh, here we go. This is exactly what I want to do. Okay.

00:33:04
<transcript>: so

00:33:06
<transcript>: So Yeah.

00:33:06
<transcript>: so here's what we're gonna

00:33:09
<transcript>: So here's what we're gonna do? We're gonna say.

00:33:09
<transcript>: i need to

00:33:13
<transcript>: I need to do that whole if name thing if name.

00:33:16
<transcript>: Like that.

00:33:24
<transcript>: I remember nothing. I did Python, for, like a year. That's all I did. And I remember literally nothing.

00:33:26
<transcript>: Args.

00:33:29
<transcript>: Equals what's that dough like.

00:33:33
davur_: dynamically import the dayX.py file from the correct year from --day / --year params

00:33:35
<transcript>: There's not gonna be argument.

00:33:35
<transcript>: i don't

00:33:37
<transcript>: I don't think.

00:33:37
<transcript>: i'm just gonna run

00:33:38
davur_: docopt is amazing

00:33:39
<transcript>: I'm just gonna run the script.

00:33:39
<transcript>: no

00:33:41
<transcript>: No, ARGs. It's gonna be.

00:33:43
<transcript>: Year.

00:33:45
<transcript>: Equals.

00:33:50
<transcript>: Maybe like the current year. I need to figure out how to do that in Python. Don't remember.

00:33:50
<transcript>: they

00:33:52
<transcript>: They equals.

00:33:52
<transcript>: eight

00:33:52
devd0: its for parsing cli args right?

00:33:53
<transcript>: Eight.

00:33:53
<transcript>: and

00:33:54
davur_: it parses the doc string at the top and makes that into args you can pass to functions

00:33:54
<transcript>: And.

00:33:57
<transcript>: Here, I'm gonna say.

00:34:01
davur_: @devd0 correct

00:34:04
<transcript>: Here. I'll turn on my key code. Key things. You guys can watch me type. Terrible.

00:34:04
<transcript>: what we're

00:34:08
<transcript>: What? We're. Oh, I didn't. It's not running keycaster.

00:34:14
<transcript>: Why are we using Python? Because Dev does.

00:34:14
<transcript>: i've decided

00:34:15
<transcript>: I've decided.

00:34:15
<transcript>: i'm going to

00:34:16
davur_: docopt is my all time favourite python package

00:34:19
<transcript>: I'm going to be a professional, competitive programmer.

00:34:19
<transcript>: and if

00:34:20
devd0: man its been a while since ive used python too lol

00:34:26
<transcript>: And if I'm gonna be a competitive programmer, I have to use Python because it's faster. It's more terse.

00:34:29
<transcript>: That numbers would work.

00:34:29
<transcript>: ask gcp

00:34:32
devd0: rust?

00:34:38
<transcript>: Ask GCP that's a good point. We can do the chat GPT thing to get answers to all these questions. Dynamically import the Day XPY file from the correct year from day.

00:34:38
<transcript>: we've got

00:34:40
cowfacedude99: there was a python library that I used.

00:34:41
<transcript>: We've got this dough. Cop is amazing.

00:34:41
<transcript>: for parsing

00:34:44
<transcript>: For parsing, CLI, arcs.

00:34:44
<transcript>: so when i

00:34:47
cowfacedude99: I need to find it though

00:34:50
<transcript>: So when I've used Python two rest, I don't think Russ would be the fastest thing to solve with.

00:34:53
stewartjarod: chat got ftw

00:34:54
<transcript>: There was a Python library. I'm using a Python library as.

00:34:54
<transcript>: calf

00:34:59
aaoa_: !brb Food hunting indoors aaoaShinyA

00:34:59
<transcript>: Calf that's like downloads your file for you and it has submission code as well.

00:34:59
<transcript>: i found

00:35:01
stewartjarod: gpt

00:35:01
okufa_f: rust may be the slowest lol

00:35:01
<transcript>: I found it in the subreddit.

00:35:01
<transcript>: okay

00:35:03
<transcript>: Okay. So.

00:35:06
cowfacedude99: oh.

00:35:08
<transcript>: We're not gonna do the most module thing.

00:35:12
<transcript>: I guess I want to do part one. Part two, separately.

00:35:14
<transcript>: Like separate files.

00:35:14
<transcript>: okay

00:35:17
<transcript>: Okay. So this is gonna be like.

00:35:23
<transcript>: They equals. I'm just doing what you're doing here? Import. So what does that magic function do.

00:35:23
<transcript>: f

00:35:27
<transcript>: F, and then it's gonna be like, this.

00:35:32
davur_: you'll find that part1 and part2 are almost identical questions in most cases

00:35:33
<transcript>: Fyear. Well, I'm just gonna be like.

00:35:35
<transcript>: Here.

00:35:41
<transcript>: Not day. So how do you how do you do your files.

00:35:44
<transcript>: You've got.

00:35:44
<transcript>: year

00:35:47
<transcript>: Year 2022.

00:35:47
<transcript>: day

00:35:47
davur_: they are usually different questions based on the same parsed input

00:35:48
<transcript>: Day one.

00:35:51
<transcript>: That's the end. Okay.

00:35:57
<transcript>: Usually different questions based on the same parsed input. Oh, that's true.

00:35:59
<transcript>: Yeah, yeah, you're right.

00:36:03
<transcript>: You are right. Stuart. Jared.

00:36:03
<transcript>: i know

00:36:05
<transcript>: I know you I know you.

00:36:09
<transcript>: Do I know you from Twitter? From here.

00:36:09
<transcript>: do we hang

00:36:11
aj_stuyvenberg: oh wow, an evening stream

00:36:11
oskrm: could be 2 functions

00:36:12
<transcript>: Do we hang out on I know you. I can picture your avatar on Twitter.

00:36:22
<transcript>: Have you been in my I don't know if you've been in my stream. I mean, you're not first time chatter. So I guess you have. I just don't remember seeing you in Twitch.

00:36:31
<transcript>: Yeah, it'll be two functions. We'll just do two functions. We'll have a part one. Aj's. Here. Evening stream. It's my first evening stream. Aj. I'm still on Vegas time.

00:36:38
<transcript>: Or Pacific Time, I guess would be the more accurate term. I'm not actually on Vegas time.

00:36:40
<transcript>: Okay. So we're gonna have like.

00:36:40
<transcript>: year

00:36:40
aj_stuyvenberg: Ugh same

00:36:43
<transcript>: Year slash so 2020.

00:36:45
aj_stuyvenberg: still feels like it

00:36:47
<transcript>: They.

00:36:51
<transcript>: This is how I'm gonna do it. And then I'm gonna have, like.

00:36:56
<transcript>: Part one and part two is different files. Maybe we'll just be like one.

00:36:56
<transcript>: py

00:36:59
<transcript>: Py. Let's just imagine I had it like that.

00:36:59
<transcript>: right

00:37:00
<transcript>: Right.

00:37:04
<transcript>: But they would need to be like formatted.

00:37:04
<transcript>: is this it's like

00:37:08
<transcript>: Is this. It's like a thing like this, right? This is how you format in Python.

00:37:12
<transcript>: How do you do that? Let's see.

00:37:12
<transcript>: chat

00:37:15
<transcript>: Chat Openai.com. We're gonna do this.

00:37:15
<transcript>: how do you

00:37:17
<transcript>: How do you.

00:37:21
<transcript>: Add a leading zero and Python.

00:37:24
<transcript>: Love it.

00:37:29
<transcript>: Oh, I have to use the format function. Okay.

00:37:33
<transcript>: I guess.

00:37:35
<transcript>: Or is that what the F does.

00:37:38
<transcript>: What.

00:37:43
<transcript>: Oh, so much.

00:37:43
<transcript>: what

00:37:45
oskrm: tell it you're nerd

00:37:45
<transcript>: What are these? Called? F strings.

00:37:50
<transcript>: How about with F string.

00:37:54
aj_stuyvenberg: ask the question again for python 3

00:37:58
<transcript>: Yeah, that's a that's a term F string. I knew it, I knew it.

00:37:58
<transcript>: okay

00:37:59
oskrm: f'{var}'

00:37:59
<transcript>: Okay.

00:38:02
okufa_f: f is python 3. gpt gave you old version

00:38:03
<transcript>: So day and it's gonna be like, zero.

00:38:09
okufa_f: its called template strings

00:38:10
<transcript>: Greater than two D zero greater than 2D like that.

00:38:12
<transcript>: Is that gonna work.

00:38:14
<transcript>: Will it work.

00:38:17
<transcript>: Put your nerd.

00:38:18
aj_stuyvenberg: allll that pain for a fancy format string

00:38:28
aj_stuyvenberg: (pain of upgrading)

00:38:29
<transcript>: F is Python. Three GPT gave you old version. It's called Template strings. Okay, all that pain for a fancy format string. That's right.

00:38:29
<transcript>: that was a lot

00:38:33
<transcript>: That was a lot of text, like they could have it could have just not put all that text in there.

00:38:37
<transcript>: Four. Two. Okay. So.

00:38:40
<transcript>: The I did it right.

00:38:40
<transcript>: two d is gonna

00:38:47
<transcript>: 2d is gonna give me a leading zero when it needs it and then one P is so this will be.

00:38:49
<transcript>: Part one.

00:38:49
<transcript>: guess we'll

00:38:53
<transcript>: Guess we'll do it underscore, and then we'll have part two.

00:38:55
<transcript>: Which will be.

00:39:04
<transcript>: Okay, year, day one and two. Those are gonna be our files.

00:39:06
<transcript>: Why is it indented like that.

00:39:16
<transcript>: Feel like Black did that like it format it that way. Okay, there we go.

00:39:22
<transcript>: Okay, so year and day. I need to calculate those. Let's just chat me. Chat. Gvt.

00:39:22
<transcript>: in python

00:39:23
<transcript>: In. Python.

00:39:23
<transcript>: how

00:39:27
<transcript>: How do I get the current year.

00:39:27
<transcript>: and day

00:39:28
<transcript>: And day.

00:39:33
<transcript>: Just the code, please. No explanation.

00:39:36
<transcript>: At DBT is pretty great.

00:39:39
<transcript>: Pretty fantastic.

00:39:45
<transcript>: Hassan, thank you so much for the follow. I appreciate your follow.

00:39:53
<transcript>: I stumped chat. Gpt. No, I didn't. It's just not scrolling. Well, there goes the explanation. They didn't listen. Didn't listen to me.

00:39:54
<transcript>: That's okay.

00:39:59
<transcript>: Let's say import date time.

00:40:03
<transcript>: And then this is Gonna be.

00:40:09
<transcript>: Today.

00:40:11
<transcript>: Oh today.

00:40:11
<transcript>: year

00:40:12
<transcript>: Year.

00:40:12
<transcript>: okay

00:40:15
<transcript>: Okay. Okay.

00:40:25
<transcript>: Year, and then.

00:40:28
<transcript>: A dot day like that.

00:40:40
<transcript>: All right. Yeah. And that's Z. That's one base. Right. So on the 9th day, it'll be nine. It's not some dumb JavaScript thing where you have to add one or something, I guess.

00:40:40
<transcript>: i don't know

00:40:43
<transcript>: I don't know. Okay. So that's a year in our day.

00:40:43
<transcript>: like today

00:40:52
<transcript>: Like today is the eight. Now the problem is I have to make sure it handles when it clicks over at eleven. My time I'm in central time.

00:40:55
<transcript>: So if I'm on the East Coast, this would work great.

00:40:55
<transcript>: but

00:40:58
<transcript>: But since I'm not I have to actually.

00:41:04
tnkhanh: ohh yeahh

00:41:06
<transcript>: You know, I'm saying we might have to do something with that today to say, like in a certain time zone. I don't know. Can you do that.

00:41:06
<transcript>: no

00:41:09
<transcript>: No Python documentation found for today cool.

00:41:15
<transcript>: I am spoiled by the TypeScript language server. It's pretty good.

00:41:23
<transcript>: I don't know what the Python ones gonna be like, okay, so we're gonna have this structure like this. So that's gonna be.

00:41:23
<transcript>: one

00:41:25
go_guppy: oh yes! finally found a time to pop on.

00:41:28
<transcript>: One so one Pi or I guess I need to have one. It's one file.

00:41:28
<transcript>: different

00:41:34
<transcript>: Different functions in each right is what we said. Yeah. Okay.

00:41:34
<transcript>: so

00:41:35
<transcript>: So.

00:41:43
<transcript>: Then I guess I could just have 2022 one dot, PY, two PY for the different days. We could just do that.

00:41:46
<transcript>: Yeah. Let's just do that. 25 to.

00:41:46
<transcript>: one

00:41:48
<transcript>: One.

00:41:48
<transcript>: pi

00:41:49
<transcript>: Pi.

00:41:57
<transcript>: Did I? Yeah.

00:42:02
<transcript>: That's fine. Do I need anything other than just a single file for each.

00:42:02
<transcript>: maybe just a single

00:42:04
<transcript>: Maybe just a single file size.

00:42:04
<transcript>: so this

00:42:07
<transcript>: So this can now change. This is just going to be.

00:42:18
<transcript>: Now I don't need the after all that.

00:42:21
<transcript>: What's.

00:42:21
<transcript>: after all

00:42:23
<transcript>: After all that. I don't need any of this.

00:42:23
<transcript>: so it's just

00:42:25
<transcript>: So it's just years.

00:42:31
tnkhanh: each day has 2 tasks, too

00:42:31
<transcript>: Py. Right Yeah.

00:42:34
<transcript>: Year.

00:42:34
<transcript>: day p

00:42:40
<transcript>: Day, Pi. That's our file. And then what did you do, Daver? After that? You said.

00:42:43
<transcript>: We're gonna solve Puzzle eight here soon.

00:42:46
tnkhanh: so its like 2 functions?

00:42:48
<transcript>: So you have your day and then you have solution.

00:42:48
<transcript>: so we're gonna

00:42:52
<transcript>: So we're gonna have like a part one and a part two function. Right.

00:43:01
<transcript>: So like part one equals file that part one.

00:43:04
<transcript>: Right.

00:43:09
<transcript>: And then that's gonna be part two.

00:43:16
<transcript>: Okay, so there's file part one. Part two. Just go ahead and make a part one function.

00:43:19
<transcript>: Part Part one.

00:43:24
<transcript>: And Oops.

00:43:27
<transcript>: Part two.

00:43:29
<transcript>: What.

00:43:29
<transcript>: what

00:43:30
<transcript>: What.

00:43:33
<transcript>: Okay.

00:43:33
<transcript>: so

00:43:36
<transcript>: So we have part one, part two.

00:43:43
<transcript>: Let's see this. Let's go back here. I just want to get the like file thing working.

00:43:45
<transcript>: So for.

00:43:45
<transcript>: ds

00:43:47
davur_: you need to spezify what to impressive in the __import

00:43:48
<transcript>: Ds in data sources. Print DS.

00:43:48
<transcript>: solution

00:43:52
<transcript>: Solution. Part One. Result. Okay.

00:43:57
<transcript>: Finally found the time to pop in Go Guppy welcome to chat.

00:43:57
<transcript>: i'm so glad you found

00:44:05
<transcript>: I'm so glad you found a time I never stream at this time. And I may not ever again. So I apologize for anybody who joined and I might like to come back.

00:44:05
<transcript>: it'll be

00:44:07
<transcript>: It'll be 12 hours from now.

00:44:16
<transcript>: Because that's when I stream. But it's been great to have new faces. I'm enjoying new faces. Mr. Vandalay, you're a new face. Thanks for the following.

00:44:20
<transcript>: Each day has two tasks, too. So it's like two functions. Yeah, Yeah.

00:44:20
<transcript>: yeah you

00:44:22
davur_: at least I think you do

00:44:22
<transcript>: Yeah? You need to specify.

00:44:22
<transcript>: what

00:44:27
<transcript>: What to impress in the import. At least I think you do. Wait. What.

00:44:27
<transcript>: so here

00:44:35
<transcript>: So here, you just imported? Oh, oh, Global's locals? And then the five? Oh, I see, I see? So I.

00:44:35
<transcript>: just way over

00:44:38
<transcript>: Just way over simplified that, didn't I.

00:44:38
<transcript>: so this

00:44:40
<transcript>: So this needs to be.

00:44:41
<transcript>: Global.

00:44:41
<transcript>: local

00:44:48
<transcript>: Locals and then the function name, part One and part.

00:44:50
<transcript>: Part.

00:44:50
<transcript>: two

00:44:52
<transcript>: Two. Right. Okay.

00:44:56
<transcript>: So then.

00:45:00
<transcript>: I guess I'm downloading the code.

00:45:04
<transcript>: Using that tool and I'm gonna Pat or I'm downloading the input.

00:45:09
<transcript>: Right. And I'm gonna pass it to the function.

00:45:15
<transcript>: I need a way to so I want the actual files here.

00:45:15
<transcript>: to export

00:45:16
tnkhanh: you mean, I can't just put everything in the function? Kappa

00:45:17
<transcript>: To export sample data.

00:45:22
<transcript>: I want to do that.

00:45:29
<transcript>: Like when you have a puzzle, there's always that sample data. Right. Like this.

00:45:34
<transcript>: Your puzzle input. Like sample input. I want to be able to copy that real quick.

00:45:34
<transcript>: and then

00:45:38
<transcript>: And then there should be like a sample answer. Right.

00:45:44
<transcript>: With 16 trees of the little edge total of 21 trees are visible. Yeah so.

00:45:53
paloran: NA primetime stream

00:45:54
<transcript>: That would be like the sample answer. Given this sample input, I want to like, use that as a way to check that I don't have a bug.

00:45:54
<transcript>: and automate

00:45:56
paloran: noice

00:45:59
<transcript>: And automate the solve like where it'll submit for me once the test pass.

00:45:59
<transcript>: like test drive

00:46:01
<transcript>: Like test driven development.

00:46:17
<transcript>: Calorien in a North America Prime time stream. Yeah. Yeah. I think this is when people normally would stream. I just wake up really early, and that's when I stream. So I'm mostly streamed to a bunch of Europeans. All the Europeans are asleep right now. So this is a different crowd tonight.

00:46:17
<transcript>: very different

00:46:19
<transcript>: Very different crowd.

00:46:22
<transcript>: Can't just put everything in the function.

00:46:27
<transcript>: So how can I how can I organize this like I could have a separate.

00:46:30
<transcript>: Separate function.

00:46:37
<transcript>: How do you just export? Like, variable? Like a variable. I wanted to have, like.

00:46:40
<transcript>: Sample one, and.

00:46:44
<transcript>: It's like sample sample. One equals.

00:46:46
<transcript>: This string.

00:46:50
<transcript>: How do I do a string.

00:46:55
<transcript>: Python. Multiling. String in Python.

00:46:56
nexxeln: hihi adam

00:46:58
<transcript>: How do I do mult.

00:46:58
<transcript>: multi

00:47:00
okufa_f: """ """

00:47:01
<transcript>: Multi line strings in Python.

00:47:04
<transcript>: Python this is probably not the best.

00:47:06
okufa_f: triple quotations

00:47:07
<transcript>: Oh, those backslashes, that is.

00:47:17
oskrm: it's exported

00:47:17
<transcript>: A MultiLing string. Oh, no, it's triple quote.

00:47:17
<transcript>: triple quote

00:47:18
<transcript>: Triple quote.

00:47:18
<transcript>: triple

00:47:20
<transcript>: Triple, triple quote.

00:47:31
<transcript>: A copy. This is the only manual part of the process, right? I copy that.

00:47:31
<transcript>: that's my sample

00:47:32
<transcript>: That's my sample.

00:47:32
<transcript>: and then

00:47:35
<transcript>: And then sample two.

00:47:35
<transcript>: have

00:47:38
<transcript>: Have the same kind of thing.

00:47:40
<transcript>: And then.

00:47:49
<transcript>: Assertion. One. What do I want to say for the answer? One.

00:47:54
<transcript>: Answer one equals.

00:47:56
<transcript>: 21.

00:47:59
<transcript>: Answer.

00:47:59
<transcript>: to

00:48:00
<transcript>: To.

00:48:01
<transcript>: Equals.

00:48:10
<transcript>: You know, I'm saying everyone get what I'm saying here. So if every file every day's file does this.

00:48:12
<transcript>: Then.

00:48:14
<transcript>: My main file here.

00:48:14
<transcript>: can go

00:48:16
<transcript>: Can go.

00:48:16
<transcript>: well so first we'd

00:48:18
<transcript>: Well, so first we'd have to let's see.

00:48:22
davur_: one of the questions gave 5 samples 5 answers

00:48:23
<transcript>: Sample one.

00:48:26
<transcript>: And sample.

00:48:26
<transcript>: two

00:48:31
<transcript>: Two, and answer one, and answer two.

00:48:35
<transcript>: Right.

00:48:35
<transcript>: or one part

00:48:41
<transcript>: Or one part two. Sample one, sample, two. Answer, one answer, two. So it just automate, like running the test.

00:48:44
<transcript>: It's exported. Perfect.

00:48:53
<transcript>: And next is here. Next is it morning for you. So I do still get some of the crafts that's like Australia, India.

00:48:53
<transcript>: japan

00:48:54
<transcript>: Japan.

00:48:59
<transcript>: You folks are waking up. The Europeans are still asleep.

00:48:59
nexxeln: i just woke up

00:49:04
<transcript>: One of the questions gave five samples. Five answers. Oh, no.

00:49:05
nexxeln: like 5 mins ago

00:49:06
dedadev: european here lol

00:49:09
<transcript>: Tartar? Tart? Address.

00:49:09
<transcript>: thank you for the follow

00:49:11
<transcript>: Thank you for the follow.

00:49:16
<transcript>: European dead. So Europeans just up late. Or up early.

00:49:20
<transcript>: Have you not gone to bed yet? Or did you get up earlier.

00:49:21
tardidriss: hey french here

00:49:22
dedadev: late

00:49:25
<transcript>: And we're at in the next question. We talk in like.

00:49:25
<transcript>: western

00:49:29
tardidriss: did not go to bed yet

00:49:33
<transcript>: Western Europe, French. Okay, so Tartaris. Okay. I don't know anything about geography or when people sleep. It turns out.

00:49:33
<transcript>: you're up

00:49:36
<transcript>: You're up late. Okay? Did not go to bed yet. Got it.

00:49:36
<transcript>: so

00:49:40
standardrobot: Cheer100 i am a real human ha ha ha, hello!

00:49:40
philipjayfry: do you really get jobs off AWS IQ? I always see trash on there lol

00:49:43
standardrobot: o/

00:49:48
<transcript>: So I'm probably when I think I'm streaming to a bunch of early risers in America, like 12 hours from now. I'm really probably streaming to a bunch of late Owls, like late night people.

00:49:48
<transcript>: i just

00:49:54
<transcript>: I just don't know I just know I never, never streamed at this time. Standard robot thank you so much for the bits.

00:49:58
<transcript>: I am a real human haha Hello.

00:49:58
<transcript>: are you

00:49:59
<transcript>: Are you.

00:49:59
<transcript>: are you a robot

00:50:00
<transcript>: Are you a robot.

00:50:06
dedadev: my sleep hours is Math.random()

00:50:12
dedadev: are*

00:50:16
standardrobot: ye, just activated a new card, just making sure everything's good.

00:50:16
nexxeln: standardrobot sounds like an AI

00:50:21
<transcript>: Do you really get jobs off a Tobis IQ? I always see trash on there. Yeah, it's 95% trash. And I haven't been on there and now getting close to a year. I guess it's been eight months. Maybe something like that. I have heard a lot of people ask me that and say that it's garbage. So I don't know, maybe it fell off, but when I was on there, the diamonds were, you know.

00:50:21
<transcript>: longterm

00:50:30
<transcript>: Longterm relationships. I had clients that I did work for six months for them. Then I just met them on IQ. So there are some good ones, at least in my experience.

00:50:34
<transcript>: My sleep hours is MAS random.

00:50:34
<transcript>: just activ

00:50:40
<transcript>: Just activated a new card. Just making sure everything's good. It's good. I appreciate your bits.

00:50:48
<transcript>: Standard robot? Are you actually chat GPT that's question.

00:50:48
<transcript>: sam

00:50:50
<transcript>: Sample one.

00:50:50
<transcript>: equals

00:50:55
<transcript>: Equals a file that sample one. Is there a better way to destructor all these.

00:50:55
standardrobot: absolutely

00:50:57
standardrobot: not

00:50:59
<transcript>: Is there like a way to do that.

00:51:03
<transcript>: Then answer one, and then.

00:51:06
<transcript>: Answer one.

00:51:09
<transcript>: Nope.

00:51:14
<transcript>: Okay.

00:51:14
<transcript>: there's probably

00:51:20
<transcript>: There's probably a better way to do that. I know how I do it in TypeScript, but I don't. I don't know how to do it. Here.

00:51:22
<transcript>: That's okay.

00:51:22
<transcript>: so here's

00:51:27
<transcript>: So here's all our things so what we're gonna do every time this file runs.

00:51:27
<transcript>: right

00:51:28
philipjayfry: x , y = 1, 2 i think you can do that

00:51:31
<transcript>: Right. Every time it runs, it's going to.

00:51:34
nexxeln: no deno anymore?

00:51:35
standardrobot: i like that i was able to grab this name on twitch, but it's truly unfortunate how many genuinely long discussions i've had with other streamers about whether i'm an actual bot or not lmao

00:51:36
<transcript>: It's gonna check if part one. So it's gonna do this.

00:51:42
<transcript>: If. Oh, wait, wait. Do I use prints? I don't use prints, too. I.

00:51:42
<transcript>: okay

00:51:45
<transcript>: Okay. Python.

00:51:52
<transcript>: If statement oh, my word. I used to do this for a living people. I used to write Python for a living.

00:51:52
<transcript>: is this gonna

00:51:58
<transcript>: Is this gonna screw up everything I know about TypeScript. And we're gonna start writing TypeScript. Weird because Python.

00:52:00
<transcript>: So if.

00:52:02
<transcript>: Part one.

00:52:07
<transcript>: Part one is a function that takes.

00:52:12
<transcript>: The sample one sample one.

00:52:15
<transcript>: If that.

00:52:15
<transcript>: double

00:52:16
<transcript>: Double equals.

00:52:19
nexxeln: thats hillarious @standardrobot

00:52:21
<transcript>: Is it double equals.

00:52:24
<transcript>: Is it just equals no.

00:52:29
<transcript>: Okay, someone just tell me. Is it double equal.

00:52:29
<transcript>: and that's

00:52:30
aj_stuyvenberg: double

00:52:31
<transcript>: And that's not triple equal.

00:52:31
<transcript>: that's a dumb

00:52:34
<transcript>: That's a dumb job script thing. Yeah, double equal.

00:52:34
<transcript>: thank

00:52:35
nexxeln: ==

00:52:35
<transcript>: Thank you.

00:52:35
<transcript>: no

00:52:37
philipjayfry: its double lol

00:52:41
<transcript>: No, Dino. Yeah. Next, I've decided I'm gonna be a competitive programmer. Okay, next, I'm gonna give everybody.

00:52:41
<transcript>: here

00:52:43
<transcript>: Here.

00:52:51
<transcript>: Some more people have arrived since I started this dream. So I'm gonna explain.

00:52:51
<transcript>: my

00:52:52
<transcript>: My change of career.

00:52:52
<transcript>: i

00:53:08
<transcript>: I went from being a software developer to today is day one of being a competitive programmer. What is competitive programming? I'm glad you asked. It's where you waste a whole lot of time and invest in a whole lot of useless skills.

00:53:08
<transcript>: for the sake

00:53:10
<transcript>: For the sake of.

00:53:10
<transcript>: competing

00:53:14
nexxeln: i got 750 something rank with ts yesterday LUL

00:53:15
<transcript>: Competing in these arbitrary competitions like Aven of code. It's not arbitrary, but like.

00:53:15
<transcript>: there's

00:53:17
standardrobot: for internet points

00:53:23
<transcript>: There's no there's no, like good reason to do it. It's just gonna be fun for internet Point. There you go.

00:53:27
nexxeln: but python much better yeah

00:53:31
<transcript>: You got 750. Rank 750 with high script yesterday. Nice. So top 1000. That's when you find out what you got right.

00:53:34
tnkhanh: lol

00:53:36
<transcript>: Yeah. So I'm doing it in Python because I know, years from now, when I've developed all these skills.

00:53:36
<transcript>: i can compete with

00:53:44
<transcript>: I can compete with the best of them. I'm gonna need to be doing it in Python. So I gotta start today. So we're starting my competitive programming journey today.

00:53:54
oskrm: AOC 2025 will be lit

00:53:59
<transcript>: That's basically that's basically what the stream is. I'm starting at nighttime, which is terrible, because I've been up for a long time and I'm sleeping. But I think for this stuff right now, like, I'm just getting reps in, you know, like, I'm gonna I'm gonna just, like, get my process down.

00:53:59
<transcript>: aoc

00:54:04
nexxeln: are you gonna do aoc live

00:54:06
<transcript>: Aoc? 25. Something like that. 20, 25, 20, 28. Somewhere in there. Bacal, thank you so much for the following.

00:54:10
standardrobot: @oskrM GPT vs everyone

00:54:14
<transcript>: Is it okay? Can I do that? If I do Day Nine live? Is that okay.

00:54:14
<transcript>: gpt

00:54:17
standardrobot: i mean that's already happening but

00:54:18
<transcript>: Gpt first, everyone. Yeah, whatever. The next thing is. Gpt.

00:54:18
<transcript>: seven or

00:54:22
<transcript>: Seven or whatever ten years from now is gonna Just Smoke me.

00:54:29
<transcript>: Yeah, it is happening. But I don't. I don't think you would say that, wouldn't you? Standard robot? I know who you are.

00:54:35
standardrobot: UHHH NO I WON'T UHHH I MEAN

00:54:36
<transcript>: You're. You're one of them. Your GPT, aren't you? Gpt herself.

00:54:37
standardrobot: fuck

00:54:39
standardrobot: blew my cover

00:54:39
devinda_me: the maker of aoc does ask in his faq to not do it live :(

00:54:40
<transcript>: No, I won't.

00:54:40
oskrm: Top 10 will be different AIs competing LUL

00:54:43
nexxeln: ULL

00:54:50
nexxeln: BRO I SPELLED LUL WRONG

00:54:54
standardrobot: @nexxeln LUL

00:54:55
<transcript>: The maker of AOC does ask in a sack to not do it live. Yeah, that's what I thought I saw. So I won't. I won't do it live. I guess top ten will be different. Ai's competing yet I'm gonna I'm gonna try and become the best human.

00:54:55
<transcript>: competitive

00:54:57
<transcript>: Competitive programmer.

00:55:01
<transcript>: For just like a little bit. And then one. I've reached that pinnacle.

00:55:01
<transcript>: i'll probably

00:55:04
<transcript>: I'll probably retire and get back to doing other stuff.

00:55:12
<transcript>: But I'm obsessive and you all think I'm probably joking. You probably think that I'm joking. I am not joking. I am really going to get obsessed with this.

00:55:19
<transcript>: I've done dumber things that were bigger, wastes of time.

00:55:20
okufa_f: i believe you

00:55:21
standardrobot: he just wants internet points in off season

00:55:24
nexxeln: idon't think you're joking

00:55:24
<transcript>: Yeah, I'm pretty pumped. So day one.

00:55:24
<transcript>: i just want

00:55:27
<transcript>: I just want Internet points in off seasons.

00:55:27
<transcript>: yeah i guess

00:55:37
<transcript>: Yeah, I guess there's stuff I can do like to compete and tell AOC right there's a world there's a world where I have a year now to get really good.

00:55:37
<transcript>: and compete

00:55:47
<transcript>: And compete in Next Advent of Code because other people like they do advent of Code. And I think there's quite a few people who've been pretty competitive that they just practices stuff during advance of code.

00:55:47
<transcript>: i'm gonna go like

00:55:48
<transcript>: I'm gonna go like.

00:55:48
<transcript>: super hard

00:55:50
<transcript>: Super hard.

00:55:50
<transcript>: in

00:55:52
<transcript>: In the paint.

00:55:52
<transcript>: this entire

00:55:53
nexxeln: the leader in aoc is doing in his own language

00:55:57
<transcript>: This entire year, I'm gonna put hours every day into getting really good at this.

00:55:57
<transcript>: yeah i saw that

00:56:01
<transcript>: Yeah, I saw that his own language. That's nut stuff. I will not be doing that. I'll be using post.

00:56:01
<transcript>: but

00:56:03
<transcript>: But.

00:56:06
<transcript>: See if I can compete with that guy.

00:56:06
<transcript>: maybe he'll get

00:56:08
standardrobot: I'm largely just doing advent of code for fun. Doing it alongside leetcode for interview prep

00:56:12
<transcript>: Maybe he'll get tired of writing his own language or whatever he's done. Okay, let's get back to it. I got a lot to do. We got a lot to learn.

00:56:12
<transcript>: like pyth

00:56:14
<transcript>: Like Python.

00:56:20
<transcript>: Santa Robots largely just doing as a code for fun doing it alongside leak code for interview prep.

00:56:20
<transcript>: i've never even

00:56:23
<transcript>: I've never even had an interview.

00:56:23
<transcript>: like i've not had

00:56:25
<transcript>: Like I've not had a real job in my life.

00:56:34
<transcript>: So I don't even know what leak code exercises are like I have no experience with this field. Like the music's a little loud.

00:56:41
<transcript>: Okay. So if part one with the sample input is equal to answer one.

00:56:41
<transcript>: this is

00:56:49
<transcript>: This is the moment where we do a solve. This is where we right. This is where we do the solve.

00:56:55
<transcript>: But how do I? How do I Zin like turn off? How do I move on to part two.

00:56:58
philipjayfry: are you using python 10?

00:57:04
<transcript>: Well, I think this library won't actually solve it won't actually do it if you've already sent it.

00:57:05
tnkhanh: many people are wasting time like you're doing. You got some competition ahead Kappa

00:57:06
<transcript>: Okay.

00:57:06
<transcript>: so

00:57:08
<transcript>: So let's see.

00:57:08
<transcript>: if i

00:57:09
philipjayfry: 3.10*

00:57:11
<transcript>: If I say data and submit, okay.

00:57:11
<transcript>: thank you so much

00:57:16
<transcript>: Thank you so much for the Follow Nicholas Costa Dev.

00:57:19
<transcript>: Are using Python. Ten wait a minute.

00:57:19
<transcript>: pretty sure pyth

00:57:21
2dorkstv: I mostly have just gotten through interviews thanks to good soft skills. a real programmming test might kill me

00:57:25
<transcript>: Pretty sure Python just goes to three, right? Are you messing with me? Oh, 310.

00:57:25
<transcript>: many

00:57:41
<transcript>: Many people are wasting time like you're doing. You got some competition ahead. Oh, I know, I know this. There's a lot of people super into this and have been for years. I'm coming very late to the party, but I will make up for it. And also, I don't care how long it takes me if it takes me ten years.

00:57:47
aj_stuyvenberg: BUT he's coming in hot

00:57:54
<transcript>: Ten years from now, I'll be number one on AOC. I just want to do it. One year. I want to be number one at the end of the 25 days, one year. That is my goal. Once I've done that, I'll be over it. I'll probably retire from competitive gaming.

00:58:03
<transcript>: Mostly have just gotten through interviews thanks to good soft skills. Wait, two dorks is here. When did you did I see that you're here? I didn't see that you were here.

00:58:12
<transcript>: Real programming test might kill me. Yes. Same. Yeah, I'm okay with talking to people. That's the only reason I've gotten jobs.

00:58:12
<transcript>: coming

00:58:14
tnkhanh: Pog nice

00:58:17
<transcript>: Coming in hot. That's right. Aj coming in hot. So I haven't figured out how I'm going to.

00:58:22
<transcript>: Not do this. Oh, I decided. But it doesn't matter. Because.

00:58:27
<transcript>: I had like actual language servers, stuff.

00:58:30
<transcript>: That's a bummer with Python. Let's go.

00:58:30
<transcript>: let's see

00:58:32
<transcript>: Let's see.

00:58:32
<transcript>: advent

00:58:33
<transcript>: Advent.

00:58:33
<transcript>: of

00:58:35
<transcript>: Of code.

00:58:39
<transcript>: Advent of Code Python.

00:58:39
<transcript>: libr

00:58:43
<transcript>: Library. There's? What is it? This one.

00:58:49
<transcript>: Yeah, it's this one. I'm just want the GitHub, though.

00:58:49
<transcript>: i wanted to

00:58:55
<transcript>: I wanted to see the docs for how this thing works again. I guess there are right here in front of me.

00:58:55
<transcript>: so

00:58:59
<transcript>: So import data, we can save it to a file.

00:59:05
<transcript>: To convenience transforms.

00:59:09
<transcript>: Whereas the solve thing yeah automated submission.

00:59:12
<transcript>: Solve for.

00:59:12
<transcript>: but

00:59:13
<transcript>: But.

00:59:13
<transcript>: oh

00:59:16
<transcript>: Oh, it's submit. It's not solved. It's.

00:59:16
<transcript>: submit

00:59:24
<transcript>: Submit. Okay. So my answer. And then the part A or B, the day and the year.

00:59:24
<transcript>: okay

00:59:25
<transcript>: Okay.

00:59:29
<transcript>: Okay, so submit.

00:59:34
<transcript>: And then they're not going to give me anything, are they.

00:59:34
<transcript>: what

00:59:35
<transcript>: What.

00:59:38
<transcript>: S nothing? Okay.

00:59:43
<transcript>: What is that? Okay. Submit. And then it's gonna be.

00:59:48
<transcript>: So I have to run. So at this point, I have to run.

00:59:51
<transcript>: After run. Part one.

00:59:51
<transcript>: with

00:59:53
<transcript>: With the actual data.

00:59:59
<transcript>: I haven't actually gotten that yet. And then do I just do it like this? Like.

01:00:03
nexxeln: anyone wanna see an elixir solution to day 4 that im really proud of

01:00:09
<transcript>: Result equals that. Is that how I did it in Python. Probably. So I don't have data one. I got to actually fetch the data at this point.

01:00:12
<transcript>: So that would be like.

01:00:14
<transcript>: Data.

01:00:17
<transcript>: How's that work? I guess it's right here.

01:00:24
<transcript>: Important data.

01:00:28
2dorkstv: always, @nexxeln!

01:00:31
<transcript>: How do I choose? Oh, yeah? Get data. Here we go. Get data. That's what I want.

01:00:34
<transcript>: It data.

01:00:35
nexxeln: https://github.com/nexxeln/aoc-2022/blob/main/day-4/2.ex

01:00:37
<transcript>: Okay.

01:00:40
<transcript>: So it's going to be gift data.

01:00:47
<transcript>: One equals get data, and then I can say update.

01:00:50
<transcript>: A equals.

01:00:50
<transcript>: a

01:00:52
<transcript>: A.

01:00:54
<transcript>: Near equal here.

01:00:59
<transcript>: So I get that day's data. Right.

01:00:59
<transcript>: and

01:01:08
<transcript>: And we send that to the function that is just past the sample test, and that result gets submitted. But we're gonna say submit it.

01:01:08
<transcript>: for

01:01:11
<transcript>: For day one.

01:01:14
<transcript>: Part oh, we got a part.

01:01:17
<transcript>: A day.

01:01:21
<transcript>: Year year year year you following everybody following me.

01:01:24
<transcript>: Okay.

01:01:24
<transcript>: anyone

01:01:29
<transcript>: Anyone see? Anyone want to see an elixir solution today? For that I'm really proud of. I do. I want to see it next.

01:01:31
<transcript>: I definitely want to see it.

01:01:35
<transcript>: I would love to see it.

01:01:35
<transcript>: can you see my

01:01:37
<transcript>: Can you see my heart glasses? I would love to.

01:01:37
<transcript>: oh you already

01:01:39
<transcript>: Oh, you already pasted it.

01:01:39
<transcript>: i

01:01:42
<transcript>: I haven't written elixir in.

01:01:49
<transcript>: I haven't written any elixir in over three years.

01:01:49
<transcript>: that

01:01:56
tnkhanh: Elixir !

01:01:57
2dorkstv: @nexxeln I'm very unfamiliar with Elixir, but I know a couple folks using it for AoC. Looks neato

01:02:07
<transcript>: That news is like the Web part is entirely built in elixir. This is pretty. I love functional burglar. I do. I love the way functional stuff looks. I don't love necessarily the way it looks or functional stuff looks like this is a little less attractive to me than some of the other languages, but.

01:02:07
<transcript>: that's just

01:02:09
nexxeln: it is so beautiful

01:02:12
<transcript>: That's just aesthetic. I love the way you think when you write this stuff.

01:02:12
<transcript>: so beautiful

01:02:13
oskrm: I like the pipe operator

01:02:14
<transcript>: So, beautiful.

01:02:19
<transcript>: Very unfamiliar with elixir, but I know a couple folks using for AOC.

01:02:26
<transcript>: Yeah. I've enjoyed looking at teaches. Okayamel.

01:02:26
<transcript>: is okay

01:02:28
<transcript>: Is okayamel solutions are pretty.

01:02:32
oskrm: no unnecessary vars

01:02:33
<transcript>: Okay. So this is how we do part one, and then.

01:02:33
<transcript>: ultimately

01:02:39
<transcript>: Ultimately, I want to, like, not keep trying to submit after I've gotten it right, you know, part two.

01:02:39
<transcript>: sample

01:02:41
<transcript>: Samples two.

01:02:41
<transcript>: equals

01:02:42
<transcript>: Equals.

01:02:42
<transcript>: answer

01:02:44
<transcript>: Answer, two.

01:02:44
<transcript>: then

01:02:47
<transcript>: Then we want to do.

01:02:48
aj_stuyvenberg: I love FP when writing but hate when debugging or reading someone elses' FP code LUL

01:02:51
<transcript>: Data to equals get data.

01:02:51
<transcript>: oh wait

01:02:53
<transcript>: Oh, wait already have the data.

01:02:53
<transcript>: there's

01:02:56
<transcript>: There's only one data.

01:02:59
<transcript>: It's just data. Right.

01:03:07
2dorkstv: I've been going through aoc using python and it has been the scrappiest code I've ever written. embarrassing :P

01:03:07
<transcript>: So there's like that. And then.

01:03:10
oskrm: its pronounced data

01:03:12
<transcript>: Here we're gonna say result equals part two data.

01:03:12
<transcript>: we're going to

01:03:15
<transcript>: We're going to say submit.

01:03:15
<transcript>: result

01:03:17
<transcript>: Result. Part.

01:03:20
<transcript>: A or B day equals.

01:03:20
<transcript>: say

01:03:21
aj_stuyvenberg: lol the eyes

01:03:26
<transcript>: Say and here equals U. Okay, so we're just trying to automate the.

01:03:30
<transcript>: Automate, the submission.

01:03:30
<transcript>: once

01:03:33
<transcript>: Once the sample data passes right.

01:03:39
<transcript>: I'm relying on the fact that this library.

01:03:40
nexxeln: @adamdotdev something is messed up with the minion glasses

01:03:45
<transcript>: Has like some small mechanisms and caches to not submit if you've already submitted.

01:03:45
nexxeln: we can see the text behind you

01:03:47
<transcript>: So if you submitted a.

01:03:47
<transcript>: particular

01:03:51
<transcript>: Particular result it won't submit it again.

01:03:51
<transcript>: so

01:03:53
<transcript>: So I'm kind of relying on that.

01:03:57
<transcript>: I hope that doesn't bite me at some point when I'm Super competitive.

01:04:01
<transcript>: Alex the raid.

01:04:01
<transcript>: welcome

01:04:06
<transcript>: Welcome, welcome? Something is messed up with the minion glasses? Oh.

01:04:06
<transcript>: my

01:04:06
alexandersix_: Hey hello!

01:04:10
<transcript>: My eyes. It's pronounced Data. Got it.

01:04:15
<transcript>: Two doorwicks you've been going through? Aoc's? Oh, I forgot raid, raid, raid.

01:04:16
<transcript>: raids

01:04:17
<transcript>: Raids.

01:04:17
<transcript>: welcome

01:04:19
<transcript>: Welcome.

01:04:19
<transcript>: alexander

01:04:20
<transcript>: Alexander.

01:04:20
<transcript>: welcome

01:04:23
<transcript>: Welcome. Thank you for the raid. Thank you so much.

01:04:25
nexxeln: welcome raiders

01:04:30
<transcript>: I love functional program with riding, but hate when debugging or reading someone else's.

01:04:38
randak37: Woo hoo!

01:04:40
<transcript>: And then two. Dorks you've been going through AOC using Python and has been the scrappiest code I've ever written. Embarrassing. Yeah. I think AOC is minimum.

01:04:40
<transcript>: code i think

01:04:42
oskrm: that confetti should be redeemable

01:04:43
<transcript>: Code. I think it's just part of it. I think it's fine.

01:04:49
kevinzunigacuellar: :o

01:04:51
<transcript>: Something is messed up with a mini glasses. That's a feature. Next. It's a feature you can see through my eyes. Feature. Not a bug.

01:04:56
<transcript>: Hello, hey, Hello? Welcome to Chat, Alex, welcome, welcome, welcome.

01:04:56
<transcript>: randek

01:05:00
<transcript>: Randek to Chat. Thank you for the follow moment.

01:05:06
<transcript>: That confetti should be redeemable. It should be Oscar. That's a good call. Welcome to Chat, Kevin.

01:05:06
<transcript>: zuning

01:05:07
<transcript>: Zuninga.

01:05:09
<transcript>: Okay.

01:05:12
<transcript>: So we're on my.

01:05:12
<transcript>: competitive program

01:05:13
kevinzunigacuellar: what are you working on?

01:05:19
<transcript>: Competitive programming. Journey. Day one. I'm gonna become a competitive programmer. I have decided that's what I'd like to do with my life.

01:05:24
<transcript>: A lot of the things I'd like to do with my life, but that's the one of the things I want to do with my life.

01:05:24
<transcript>: so this

01:05:26
<transcript>: So this code all looks pretty good.

01:05:26
<transcript>: now we

01:05:30
<transcript>: Now we just have to actually implement all that stuff.

01:05:35
<transcript>: And then put a watcher in place. So what we'll do is we'll say.

01:05:40
<transcript>: I want to output some stuff like prints and stuff.

01:05:43
<transcript>: Yes.

01:05:47
<transcript>: So part one sample one. So.

01:05:50
<transcript>: Let's say.

01:05:53
<transcript>: Sample.

01:05:55
<transcript>: One.

01:06:00
<transcript>: Result. One equals part one.

01:06:00
<transcript>: sample

01:06:03
<transcript>: Sample One. Okay.

01:06:06
<transcript>: And then we'll do result two.

01:06:14
<transcript>: Okay. So result two. Result. Wait. What was sample to? Yeah, Yeah.

01:06:14
<transcript>: sample

01:06:14
cowfacedude99: @kevinzunigacuellar advent of code

01:06:16
<transcript>: Sample. Wait. Are there two samples.

01:06:19
nexxeln: are you setting up auto submit and stuff

01:06:21
<transcript>: Yeah, there's multiple samples, right? There can be. I think. I think they should each export their own sample.

01:06:27
<transcript>: Result to okay. So we're gonna look print those I think print line.

01:06:27
<transcript>: is that right

01:06:28
<transcript>: Is that right.

01:06:30
<transcript>: Result one.

01:06:35
<transcript>: Oh, that is not a function in Python. Print.

01:06:35
<transcript>: it's just print

01:06:37
<transcript>: It's just print.

01:06:40
<transcript>: If I was thinking of print F.

01:06:40
<transcript>: no i

01:06:41
<transcript>: No, I was up.

01:06:41
<transcript>: i

01:06:43
davur_: just print

01:06:44
<transcript>: I don't remember if I thought at all.

01:06:44
<transcript>: kevin

01:06:52
<transcript>: Kevin Zuninga We are working on my professional competitive programming journey.

01:06:52
<transcript>: and

01:06:55
<transcript>: And we're doing admin of code.

01:06:55
<transcript>: this is how

01:06:57
<transcript>: This is how I'm starting.

01:06:57
<transcript>: yeah admin

01:07:16
<transcript>: Yeah. Admin. Of course you just said that. Are you setting up auto submit and stuff? Yes. Next. Yes, we are. We want to shave off seconds so that when I spend ten times longer solving a puzzle than the top people on the leader board. At least I didn't waste any time submitting. You know, I'm saying, get the process in place. Just print. Okay.

01:07:16
<transcript>: if i

01:07:20
<transcript>: If I want to do like a template string, let's say I wanted to print like.

01:07:26
<transcript>: I would do it like this, right? So result one.

01:07:32
<transcript>: Equals. And I would just do it like this, right? Does that work.

01:07:37
<transcript>: That works. Someone tell me.

01:07:40
<transcript>: Yeah, I think so. I think so.

01:07:45
nexxeln: yep thats how you do it

01:07:46
<transcript>: Okay. So we're gonna print our result one and our result two. And then here I can just say.

01:07:48
<transcript>: Delete.

01:07:52
<transcript>: To there, I can say.

01:07:52
<transcript>: result

01:07:55
<transcript>: Result one equals answers one? Yeah.

01:07:58
<transcript>: And then that can be.

01:08:00
<transcript>: Result. Two.

01:08:00
<transcript>: okay

01:08:02
<transcript>: Okay.

01:08:06
<transcript>: Submitting.

01:08:09
<transcript>: Okay.

01:08:09
<transcript>: that's good enough

01:08:11
<transcript>: That's good enough, I think.

01:08:11
<transcript>: so

01:08:15
<transcript>: So. Oh, wait. Part One beta. Yeah, Yeah.

01:08:20
<transcript>: Even on part Two, right. I just don't remember.

01:08:26
<transcript>: I just did the first seven days, like yesterday. And I don't remember any of this.

01:08:26
<transcript>: okay

01:08:33
nexxeln: yep same input

01:08:37
<transcript>: Okay, so let's go to day One. We're outputting sample one. Answer one, sample two, and answer two. We have this function part One. Okay.

01:08:43
<transcript>: It takes in a variable. The variable is called data.

01:08:49
<transcript>: Right data.

01:08:49
<transcript>: and then

01:08:49
davur_: try f"{result1=}"

01:08:50
<transcript>: And then I'm going.

01:08:50
<transcript>: all the way up

01:08:53
<transcript>: All the way up here and deleting that.

01:08:53
<transcript>: okay

01:08:57
<transcript>: Okay. So it takes in data and it returns a solution.

01:08:59
<transcript>: Right.

01:09:02
<transcript>: Answer one. So. Okay.

01:09:02
<transcript>: if

01:09:05
<transcript>: If I want to.

01:09:07
<transcript>: Now I want to run this thing.

01:09:07
<transcript>: on a

01:09:13
<transcript>: On a loot or I just want to keep running it with this thing. This jurigged.

01:09:16
<transcript>: And I'm gonna do like this can be.

01:09:16
<transcript>: just

01:09:18
<transcript>: Just rigged.

01:09:22
<transcript>: Vmaine. Pi.

01:09:26
<transcript>: No module named 2022.

01:09:26
<transcript>: eight

01:09:28
<transcript>: Eight. Okay.

01:09:28
<transcript>: so

01:09:32
<transcript>: So I can't do it like this. 22. Oh.

01:09:34
<transcript>: That's day. One.

01:09:34
<transcript>: we need

01:09:36
<transcript>: We need to put.

01:09:36
<transcript>: a day eight

01:09:41
<transcript>: A day eight in there, because that's the current day, right? If I'm gonna run this thing.

01:09:41
<transcript>: this thing

01:09:43
<transcript>: This thing needs to be.

01:09:43
<transcript>: that eight

01:09:44
<transcript>: That eight.

01:09:49
<transcript>: Pi, right.

01:09:51
<transcript>: Try it again.

01:09:52
<transcript>: No.

01:09:52
<transcript>: do i need

01:09:56
<transcript>: Do I need to do something to make it a module.

01:10:00
<transcript>: I don't know Python.

01:10:00
<transcript>: help

01:10:01
<transcript>: Help.

01:10:01
<transcript>: help me

01:10:02
<transcript>: Help me.

01:10:02
<transcript>: so i was trying

01:10:04
standardrobot: a

01:10:05
<transcript>: So I was trying to import it dynamically. Right here.

01:10:06
standardrobot: "module"

01:10:09
standardrobot: "" ""

01:10:09
<transcript>: Year Day PY apparently can't do that.

01:10:11
<transcript>: Thought okay.

01:10:13
<transcript>: Try F.

01:10:13
<transcript>: result equals

01:10:14
<transcript>: Result equals one.

01:10:23
oskrm: __init__.py in the folder

01:10:31
<transcript>: You're saying that's like a shortcut dabber. It's like some syntactical sugar. I have to put in knit Pi in the folder. Is that it as long as there's.

01:10:31
<transcript>: an it

01:10:35
<transcript>: An it. I remember this. I think I remember being annoyed by this.

01:10:39
<transcript>: Is that gonna do it.

01:10:42
<transcript>: No. Still no module named 2022 slash.

01:10:42
<transcript>: eight

01:10:44
<transcript>: Eight.

01:10:44
<transcript>: do i have to

01:10:45
<transcript>: Do I have to make that.

01:10:45
<transcript>: a folder

01:10:47
<transcript>: A folder.

01:10:50
<transcript>: I'm going to make an eight folder. No.

01:10:50
<transcript>: what do i do

01:10:51
<transcript>: What do I do.

01:10:55
<transcript>: Module.

01:10:58
davur_: I had year2022 and day1 thinking a module may not be just numbers

01:10:59
<transcript>: I'm module.

01:10:59
<transcript>: import

01:11:00
<transcript>: Import.

01:11:02
<transcript>: 2022.

01:11:06
<transcript>: Pi.

01:11:06
<transcript>: not a thing i can do

01:11:08
<transcript>: Not a thing I can do.

01:11:13
<transcript>: Wait. Do I not put PY? Did he not put that pie? No, dot pie.

01:11:15
oskrm: prefix it with y

01:11:16
<transcript>: No, there's no Dot. Py.

01:11:16
<transcript>: that's not how

01:11:17
davur_: not sure I was right about that

01:11:18
<transcript>: That's not how it works.

01:11:22
<transcript>: But I guess.

01:11:22
<transcript>: we'll

01:11:23
<transcript>: We'll see if this works.

01:11:26
<transcript>: No.

01:11:29
<transcript>: Not sure I was right about that.

01:11:34
<transcript>: You had Year 2022 and day One thinking a module may not be just numbers.

01:11:34
<transcript>: oh

01:11:38
<transcript>: Oh maybe maybe it can't be.

01:11:39
<transcript>: So maybe.

01:11:39
<transcript>: this

01:11:42
<transcript>: This is a highphone limitation.

01:11:42
<transcript>: let's try it

01:11:47
<transcript>: Let's try it. Let's try day eight. Pi. I always do that.

01:11:47
<transcript>: day

01:11:49
<transcript>: Day eight.

01:11:53
<transcript>: Pi, try that.

01:11:56
<transcript>: So here it's gonna be.

01:11:58
<transcript>: Day.

01:11:58
<transcript>: that

01:12:02
<transcript>: That maybe, but not PY. Right.

01:12:02
oskrm: and the 2022

01:12:05
<transcript>: Now.

01:12:05
<transcript>: no module

01:12:07
2dorkstv: should be `year.date` right?

01:12:08
<transcript>: No Module Name 22. Slash Day eight.

01:12:08
<transcript>: oh you

01:12:11
<transcript>: Oh, you don't have a slash. You have.

01:12:16
<transcript>: Should be used date. Right, I guess.

01:12:16
<transcript>: thanks for the

01:12:19
<transcript>: Thanks for the follow Mecco.

01:12:22
<transcript>: Maco choosing I should do.

01:12:22
<transcript>: i like having

01:12:27
<transcript>: I like having these in folders like separate folders for every year. Can I not do that.

01:12:28
oskrm: y2022/day8

01:12:29
davur_: also it is dot not slash

01:12:35
<transcript>: You're saying I should just change it? If I change this, it should work. Oh, Geez.

01:12:37
<transcript>: I just do that.

01:12:39
2dorkstv: you can do that. You just have to put __init__.py in the folder to tell python its a module

01:12:43
tardidriss: do you need help ?

01:12:43
<transcript>: Is dot, not slash? Yeah. Yeah. Okay. So I can have it in a separate folder.

01:12:45
2dorkstv: then use dots and not slashes

01:12:46
<transcript>: Okay. There we go.

01:12:46
<transcript>: so

01:12:47
<transcript>: So.

01:12:47
<transcript>: watch though it

01:12:57
<transcript>: Watch, though it doesn't seem to be actually watching it. Result one equals one. Result two equals two. But it didn't stay watching. You know what's that about.

01:12:57
<transcript>: i expect

01:13:02
<transcript>: I expected this process to keep running and then rerun every time.

01:13:02
<transcript>: loop

01:13:06
<transcript>: Loop over a function only stop on executions.

01:13:08
<transcript>: What, what.

01:13:12
<transcript>: Add the M.

01:13:15
<transcript>: Or to use that you can use Z.

01:13:23
<transcript>: So if I if I run it again or if I save a file.

01:13:23
<transcript>: i'm gonna run it again

01:13:27
<transcript>: I'm gonna run it again. It's not. The process is no longer running, right.

01:13:37
<transcript>: That's not running again.

01:13:37
<transcript>: what's this

01:13:38
<transcript>: What's this about.

01:13:38
<transcript>: watch

01:13:41
<transcript>: Watch? Oh, do I have to say watch.

01:13:41
<transcript>: oh

01:13:42
<transcript>: Oh.

01:13:42
<transcript>: i have to

01:13:44
<transcript>: I have to say, watch.

01:13:46
cowfacedude99: I tend to throw nodemon at this kind of problems LUL

01:13:48
<transcript>: Then why would I do this? What does this do for me.

01:13:56
<transcript>: Do I need help? Yes.

01:14:00
<transcript>: I just saw that. And yes, I do.

01:14:00
<transcript>: you can do that

01:14:15
<transcript>: You can do that. You just have to put a knit Pi in the folder as hope I found some. I think we got through all that. You guys. I just. I'm just now reading all your stuff. I tend to throw nodemon at this kind of problem. Yeah, me too. I just. I felt like there should be something in the Python ecosystem. And it sounds like there is. I just have to say.

01:14:15
<transcript>: i say

01:14:18
<transcript>: I say, Watch, and then a directory.

01:14:20
<transcript>: So.

01:14:25
<transcript>: Watch or W in the path.

01:14:25
<transcript>: everything

01:14:25
mr_yan19: I usually try some aoc in a new language, but this year i'm learning Spanish

01:14:27
<transcript>: Everything in there, right.

01:14:31
<transcript>: Now still not watching.

01:14:34
<transcript>: Unless I have to do.

01:14:39
<transcript>: Oh, I have to do that first. Probably so jurig.

01:14:39
<transcript>: we're gonna say

01:14:42
<transcript>: We're gonna say, what's the verbose.

01:14:50
<transcript>: Interactive.

01:14:57
<transcript>: Wild card path directory for which files to watch. Oh, so I need to put a wild card in there.

01:14:57
<transcript>: okay let's

01:15:01
<transcript>: Okay. Let's try that. Let's try jurigged.

01:15:04
<transcript>: Watch? And we're gonna say.

01:15:10
<transcript>: We're gonna just do that like that. And then we're gonna say.

01:15:12
nexxeln: spanish do be turing complete

01:15:16
<transcript>: V, and then main Pi.

01:15:16
nexxeln: OMEGALUL

01:15:18
<transcript>: Right.

01:15:21
<transcript>: Nope. Still not watching.

01:15:24
<transcript>: It is not watching.

01:15:25
cowfacedude99: this year I have my aoc solutions in go but I am still using nodemon to run my stuff

01:15:37
<transcript>: I usually try to do some AOC in a new language, but this year I'm learning Spanish.

01:15:40
nexxeln: @cowfacedude99 there's node --watch now

01:15:41
<transcript>: That's too much to learn it once Spanish, and a new language.

01:15:45
nexxeln: why nodemon?

01:15:47
<transcript>: You have your AOC solutions in Go, but I'm used still using nodemont to run my stuff.

01:15:49
<transcript>: So.

01:15:56
<transcript>: Is your rigged is not the answer. Is there a better thing for Python? Well, I don't understand what I'm doing wrong here.

01:15:56
<transcript>: feel like it

01:15:59
<transcript>: Feel like it should just be watching it right.

01:16:01
oskrm: @nexxeln you don't always run the latest node

01:16:06
<transcript>: A Python script so that is live editable.

01:16:07
nexxeln: oh nvm you're using go LUL

01:16:14
<transcript>: Hold for changes. I don't want I just want to watch a folder.

01:16:15
nexxeln: how does nodemon work with go

01:16:19
2dorkstv: I may have missed the objective here, but do you not just want to do a while loop in main.py?

01:16:22
<transcript>: There's a problem. Use the verb flag.

01:16:33
<transcript>: In the current working directory, try.

01:16:33
<transcript>: w

01:16:38
<transcript>: W. File to watch a specific file or slash. Watch all files.

01:16:47
<transcript>: There we go. Well, maybe. I don't think it's watching.

01:16:49
<transcript>: I don't think it's watching.

01:16:51
tardidriss: I would do the import like this eval(f"""from year{year}.day{day} import sample1, sample2, answer1, answer2, part1, part2""")

01:16:53
mr_yan19: should we just ask chatGPT?  LUL

01:16:55
<transcript>: No, it's not. It's. The process just dies. I don't understand. Why.

01:17:03
<transcript>: Oh, do I need to do this.

01:17:07
<transcript>: I might need to do this.

01:17:13
<transcript>: Jurge works in a surprisingly large number of.

01:17:13
<transcript>: functions

01:17:16
<transcript>: Functions are already running. We'll keep running with exist code.

01:17:16
<transcript>: changing initial

01:17:18
<transcript>: Changing initializers.

01:17:18
<transcript>: so

01:17:20
<transcript>: So.

01:17:25
<transcript>: Okay. Can I just do that kind of just import it and do this thing? I'm just gonna do this.

01:17:27
<transcript>: Like right here.

01:17:27
<transcript>: right

01:17:28
<transcript>: Right.

01:17:31
<transcript>: In maine.com.

01:17:36
<transcript>: Nope.

01:17:42
<transcript>: Go to the bottom. Here.

01:17:46
<transcript>: So I put it in the function.

01:17:48
cowfacedude99: ${pkgs.nodePackages.nodemon}/bin/nodemon --watch . --exec ${pkgs.go}/bin/go test ./... -e go || exit 1 this is using nix. but you get the idea @nexxeln

01:17:54
<transcript>: Should I do that.

01:17:58
<transcript>: Let's try it.

01:18:02
<transcript>: Oh, can I add watch.

01:18:04
<transcript>: Is already scheduled.

01:18:10
<transcript>: Is this thing doing things I don't understand.

01:18:14
<transcript>: I would do the import like this Eval.

01:18:19
<transcript>: Oh, is that an easier way.

01:18:29
nexxeln: interesting

01:18:30
<transcript>: I may have missed the objective here, but you not just want to do a while loop in main PY.

01:18:50
<transcript>: No, I don't. I don't think I want to do a while loop. I think I'll only want to run it every time I change, every time I save the buffer. So when I I'm working in a file, like, I'm working on the solution. I don't want to just, like, pulling or running all the time. I just want to be like, oh, I saved the buffer. The whole thing runs the game. You know, I'm saying, like, I make a change. I'm feverishly.

01:18:50
<transcript>: writing

01:18:52
<transcript>: Writing a bunch of code.

01:18:52
<transcript>: this is

01:18:54
<transcript>: This is how I'm gonna look later.

01:18:59
<transcript>: And then I'm like, Save the buffer. You know, I'm saying.

01:19:03
2dorkstv: Oh! Okay. now I get what you're up to

01:19:05
<transcript>: When I save it, I want that to trigger.

01:19:05
<transcript>: run

01:19:08
<transcript>: Run the stuff. Test the stuff. You know what I'm saying.

01:19:09
cowfacedude99: you could attach it to autocmd @adamdotdev

01:19:14
<transcript>: So tardy, Dris. I'm gonna look at this. This import looks better than what I'm doing.

01:19:19
<transcript>: Should we just ask chat GPT? Maybe.

01:19:19
<transcript>: maybe

01:19:20
<transcript>: Maybe.

01:19:26
<transcript>: You could attach it to Autocomand. What is that? What is autocomand.

01:19:29
<transcript>: What's that? Chat? Gbt.

01:19:31
<transcript>: What.

01:19:31
<transcript>: 's the best

01:19:38
<transcript>: 's the best way to watch a Python script and run it again on changes.

01:19:39
hussanhijazi: -w file.py

01:19:45
<transcript>: I've heard my mouth. So if it looks like I'm like groping my tongue, that's why.

01:19:48
<transcript>: No.

01:19:51
oskrm: LUL

01:19:52
<transcript>: There you go.

01:19:55
<transcript>: I guess that's what we're doing.

01:19:58
<transcript>: I guess we're using nodemon.

01:20:01
sasankthapa: wow

01:20:04
<transcript>: So Hasan, welcome to chat.

01:20:04
<transcript>: her son is

01:20:05
sasankthapa: gotta use nodemon

01:20:06
<transcript>: Her son is saying.

01:20:09
<transcript>: You're saying it would be.

01:20:10
oskrm: whats that apt-get?

01:20:12
<transcript>: W.

01:20:13
oskrm: entr?

01:20:14
<transcript>: Or yeah, like this.

01:20:16
<transcript>: Oh.

01:20:18
<transcript>: Doing it.

01:20:25
<transcript>: Don't watch Main Pi and all the other files in this directory. Like if I change date eight.

01:20:25
<transcript>: i'm saying

01:20:26
<transcript>: I'm saying.

01:20:30
<transcript>: I want that to.

01:20:39
<transcript>: Now if I change main PY if I save it, does it do something now.

01:20:44
<transcript>: Enter. I don't know what that is.

01:20:46
<transcript>: I might just use nodemon.

01:20:49
<transcript>: I mean, Why not? I guess.

01:20:53
<transcript>: Any objections to nodemon.

01:20:56
<transcript>: Uhoh.

01:20:56
<transcript>: i don't know how to

01:20:58
<transcript>: I don't know how to exit this.

01:21:02
<transcript>: Well, I know how if I do that.

01:21:06
mr_yan19: if it works, it works

01:21:08
2dorkstv: use `quit()`g

01:21:09
<transcript>: We're installing nodemon.

01:21:11
cowfacedude99: https://www.youtube.com/watch?v=9gUatBHuXE0 teej has a pretty cood video on this

01:21:13
<transcript>: Leaving the Python ecosystem.

01:21:13
<transcript>: feel

01:21:14
2dorkstv: errr without the g. I can't type

01:21:15
<transcript>: Feels a little bad but.

01:21:15
<transcript>: see if it works

01:21:18
<transcript>: See if it works nodemon.

01:21:18
<transcript>: then we're gonna

01:21:20
<transcript>: Then we're gonna say.

01:21:23
<transcript>: Main PY. Is it that simple.

01:21:25
<transcript>: Put that easy.

01:21:30
<transcript>: Waiting for changes before restart. So there you see my result. One.

01:21:30
<transcript>: okay let's do it

01:21:37
<transcript>: Okay, let's do it. Let's say if I'm working in day eight, and then I'm like, oh, that's actually gonna return.

01:21:37
<transcript>: that's gonna

01:21:38
2dorkstv: you're good using nodemon. Nothing wrong with using the right tool for the job

01:21:39
<transcript>: That's gonna return five.

01:21:39
<transcript>: and i save

01:21:46
<transcript>: And I save it. There it goes. Result five. Result two. Okay. Cool. So nodemon works.

01:21:51
oskrm: @2DorksTV "the right tool"

01:21:53
<transcript>: It's a bummer. I wanted to work with something that could just be in my requirement. Txt file.

01:21:55
<transcript>: But.

01:21:55
<transcript>: i don't want to

01:21:58
<transcript>: I don't want to get hung up on this. This is dumb.

01:22:04
<transcript>: Let's see TJ's are pretty cool video on this. On what.

01:22:10
<transcript>: Pretty cool. Video on Rerunning Python Scripts cafes are you talking about something else.

01:22:10
<transcript>: or without

01:22:13
antithrust: what does the nodemon module do?

01:22:16
<transcript>: Or without the G. I can't type you're good using nodemon. Nothing wrong with using the right tools for the job. Exactly.

01:22:16
<transcript>: it's a right tool

01:22:18
<transcript>: It's a right tool.

01:22:18
cowfacedude99: rerunning everything

01:22:30
<transcript>: Antitrust. Welcome to Chat. What does the nodemon module do? It reruns it. So we just want to rerun the thing. We're watching all these files. When I change one, we're gonna rerun the thing.

01:22:30
<transcript>: okay

01:22:30
oskrm: @antithrust re run stuff on file change

01:22:35
<transcript>: Okay. So now I could work on my solution. And theoretically.

01:22:36
2dorkstv: bedtime for me! Ya'll have a great night. it's been fun hanging out

01:22:39
antithrust: Ah without close and re-init... noice

01:22:46
<transcript>: That so like when I get part one done here and it starts for turning the right answer. As long as I don't accidentally stumble in for the right answer, then it should submit with the actual beta.

01:22:46
<transcript>: and

01:22:47
sasankthapa: so what is the question that you're solving?

01:22:50
<transcript>: And I should get a result back. Right. Let's do it.

01:22:50
<transcript>: what's

01:22:53
the_maunda: like you nvim set up

01:22:55
<transcript>: What's the question? We're about to find out. It's about the trees or something. It's day eight. See a 20.

01:22:55
<transcript>: thank you

01:22:58
<transcript>: Thank you so much for coming along.

01:23:01
<transcript>: Rerun the stuff on file change.

01:23:01
<transcript>: have a great

01:23:03
<transcript>: Have a great night It's been fun it's been so fun.

01:23:03
<transcript>: without clothes

01:23:06
<transcript>: Without clothes and reenit noise.

01:23:06
<transcript>: so

01:23:13
<transcript>: So what is the question that you're solving? We're gonna jump in that like your invent setup. Thank you so much. Welcome to Chat Lamanda.

01:23:15
<transcript>: So let's open the.

01:23:18
<transcript>: Eight, is right here.

01:23:24
<transcript>: Now I gotta figure out how I want to handle the cut over to day nine, because it technically happens while it's still day eight for me.

01:23:24
<transcript>: it's an hour

01:23:29
<transcript>: It's an hour before midnight here. So I'll figure that out. Maybe. Maybe.

01:23:34
<transcript>: Let's move to the East Coast for the month of December every year. That's an option.

01:23:37
<transcript>: Not really. I'm not gonna do that.

01:23:40
<transcript>: All right.

01:23:43
<transcript>: So I need to learn how to just skim these.

01:23:53
<transcript>: Consider your map, how many trees are visible from outside the grid? So I just jumped straight to this right now, I'm gonna start trying to find the details that I care about.

01:23:53
<transcript>: launch

01:24:07
the_maunda: have you open sourced your .files?

01:24:08
sasankthapa: autocmds are vim cmds that run on events like BufWrite, you can run python on saving the buffer... I have 1 autocmd that auto formats files when I save

01:24:13
<transcript>: Launch of quadrocopter. What is that link? I'm so distracted. Okay, to generate a map with the height of each tree. Okay, so these are tree heights. Each tree represented as a single digit whose value is a tight zero is a short nine. As a toss tree is visible of all the other trees between it and an edge of the grid are shorter than it. Only. Consider trees in the same row or column.

01:24:13
<transcript>: that

01:24:17
nexxeln: !dotfiles

01:24:17
fossabot: Adam's dotfiles live here: https://github.com/adamelmore/dotfiles The repository for bitter is here: https://github.com/adamelmore/bitter

01:24:18
<transcript>: That is only look up, down, left or right from any given tree. I'm not skimming very well.

01:24:21
<transcript>: That only leaves interior.

01:24:21
<transcript>: nine

01:24:21
oskrm: answer is 42

01:24:23
<transcript>: Nine trees to consider.

01:24:24
nexxeln: @the_maunda ^^^

01:24:24
aaoa_: Imma skim all this *Hoooo shiny link*

01:24:25
<transcript>: And then what am I doing? How many trees are visible.

01:24:31
<transcript>: But the sample answers 21 trees. I thought there's only nine trees. What.

01:24:31
<transcript>: what

01:24:32
<transcript>: What.

01:24:32
blakegreendev: there's a py-mon lol https://github.com/kevinjosethomas/py-mon

01:24:38
<transcript>: Okay, these are Heights. Right.

01:24:38
<transcript>: like

01:24:44
<transcript>: Like in feet. What are these? I thought Zero and Nine were the.

01:24:50
<transcript>: Like, I'm terrible at this. I'm a terrible. The answer is 42. Okay. Good to know.

01:25:10
<transcript>: Nine is the tallest trade of all the other trees. Between it and an edge of the grid are shorter than it only considers trees in the same row or column that is only look up down. Okay, all the trees are on the edges of the greater visible since they are already on the edge. There are no trees to block the view. In this example they only leave the interior nine trees.

01:25:10
<transcript>: to consider

01:25:13
<transcript>: To consider top left.

01:25:13
<transcript>: five

01:25:18
<transcript>: Five is visible from the left and top. It isn't visible from the right. This is by sample input, right.

01:25:26
<transcript>: This tree heights. But Where's the grid.

01:25:33
<transcript>: Competitive programming? I'm gonna get good, I'm gonna get good just wait.

01:25:33
<transcript>: only look

01:25:36
aaoa_: Send it to ChatGPT sgreyShrug

01:25:36
chillpine: its the 3x3 inside the 5x5

01:25:41
<transcript>: Only look Uptown Where's the grid top, left is visible from the left and top. It isn't visible from right or bottom, since other trees of height five are in the way.

01:25:41
<transcript>: top middle

01:25:44
<transcript>: Top middle. Oh, wait, wait.

01:26:04
<transcript>: These are all individual trees. I thought these were like, this was the first tree, and it's three 3373 something high. I'm like, I don't get it, but this is a grid of trees. That's a three height, a zero height, a three high. Okay, it makes sense. Now. Thanks for the follow antithrust. Send it to.

01:26:04
<transcript>: chat gpt

01:26:06
chillpine: top-left 5 referenced is row 2 col 2

01:26:07
<transcript>: Chat. Gpt. No, we're trying to get good here.

01:26:07
<transcript>: it's

01:26:11
davur_: they are saying the 16 around the edge are always visible

01:26:17
<transcript>: It's the three by three inside the five by five. So these nine in the middle. That's the ones I care about. All the other ones are already visible by default. What you're saying.

01:26:17
<transcript>: that's what they said

01:26:19
cowfacedude99: it was interesting yesterday.

01:26:20
<transcript>: That's what they said. Yeah. Okay.

01:26:22
davur_: the internal 9 need to be checked

01:26:23
<transcript>: Left middle is visible only from the right.

01:26:23
<transcript>: yeah

01:26:27
<transcript>: Yeah. So just which trees can be seen.

01:26:27
<transcript>: at all

01:26:29
<transcript>: At all right.

01:26:29
<transcript>: we

01:26:35
tuugen3213: i bruteforced chatGPT , it couldn't get it after 300 tries

01:26:43
<transcript>: We know the outside ones can all be seen. So which of these nine in the middle can also be seen? Okay, let's start pretending like I'm elite Codr, and I can do this really fast. So what do I want to do? I want to take lines. And I think there's like.

01:26:49
<transcript>: Lines, equal data getlines or something. I need to learn all this.

01:26:52
<transcript>: Thing.

01:26:53
<transcript>: This thing.

01:26:53
<transcript>: it's like

01:26:57
<transcript>: It's like the data you import. Get data.

01:26:59
<transcript>: Has a.

01:27:04
<transcript>: I want to say it has like a getlines function or something.

01:27:10
<transcript>: Maybe not.

01:27:13
<transcript>: Like data that split lines.

01:27:13
<transcript>: okay

01:27:13
cowfacedude99: import lines

01:27:15
<transcript>: Okay.

01:27:15
<transcript>: so data

01:27:19
<transcript>: So data split lines like that.

01:27:21
<transcript>: Let's just print that.

01:27:28
<transcript>: See the same working. I worked. Okay. So it's an array of the numbers.

01:27:33
<transcript>: Okay, so I'm gonna be doing lots of list, comprehensive.

01:27:36
<transcript>: And solving leak code stuff.

01:27:40
<transcript>: I'm gonna have to learn what those are again. It's been a while.

01:27:40
<transcript>: so if i have

01:27:44
nexxeln: why is there no autocomplete

01:27:44
<transcript>: So if I have all the lines, I should probably just pass the lines in.

01:27:44
<transcript>: this is

01:27:47
<transcript>: This is I want to get the lines a bit like this.

01:27:52
<transcript>: So lines, and then we're gonna go, four lines.

01:27:55
<transcript>: In lines that's pipe on right.

01:27:55
<transcript>: yeah

01:27:57
<transcript>: Yeah. Pretty sure.

01:28:02
<transcript>: For line in lines, we're gonna take each tree.

01:28:06
<transcript>: Is a character.

01:28:06
<transcript>: in that line

01:28:09
<transcript>: In that line. So now I want to build up like a matrix.

01:28:11
<transcript>: Matrix.

01:28:11
<transcript>: why is there

01:28:15
<transcript>: Why is there no autocomplete? I don't know. It's Python.

01:28:20
<transcript>: Should Python have autocomplete.

01:28:23
<transcript>: Let's see.

01:28:30
<transcript>: Mason, see if it's actually a tap or I guess the LSP info.

01:28:34
<transcript>: Two clients, high, right, and null. Ls you know that's, right.

01:28:34
<transcript>: i've

01:28:41
<transcript>: I've got Pyrite. Is that not what I should use? Someone said use Pyrite. I said okay, because I don't know better.

01:28:43
nexxeln: python had nice autocomplete back in last december

01:28:45
<transcript>: For line in lines, then we're gonna say, like.

01:28:45
<transcript>: the

01:28:47
<transcript>: The.

01:28:49
nexxeln: but used to use vscode LUL

01:28:50
<transcript>: Is it always five trees.

01:28:50
<transcript>: it's always

01:28:54
<transcript>: It's always this size of a grid. Or is this is the sample data like way bigger.

01:28:56
<transcript>: Oh.

01:28:59
tnkhanh: yes pyright is good!

01:29:02
<transcript>: Okay. It's way bigger. So I can't assume.

01:29:04
nexxeln: i don't even have python set up in my nvim

01:29:04
<transcript>: Got it.

01:29:05
cowfacedude99: there is a neat one liner for converting to grid

01:29:09
<transcript>: Okay. Well then tree.

01:29:19
<transcript>: Or we'll say row equals. And this is where elite coders would be like, this, R like, I know what that means. I'm not gonna type more up here. Would have been like.

01:29:19
<transcript>: elves

01:29:21
<transcript>: Elves.

01:29:21
<transcript>: and then

01:29:24
<transcript>: And then this would have been L in.

01:29:24
<transcript>: l's

01:29:26
<transcript>: L's.

01:29:30
<transcript>: You got to type less. You know, I'm saying you got to be real fast.

01:29:30
<transcript>: so

01:29:36
<transcript>: So R equals. It sounds like I'm trolling. Like, I'm just making fun of this, but I really do want to get good at it. Like, honestly.

01:29:36
<transcript>: so i'm gonna

01:29:40
nexxeln: adam taking those Ls

01:29:42
<transcript>: So I'm gonna set Santa. I'm trolling. You don't even have Python setup in my Inv. I didn't until this morning.

01:29:44
tnkhanh: lol true, lines -> ls

01:29:45
cowfacedude99: @nexxeln vscode does not allow it's lsp to be used independently of vscode

01:29:47
<transcript>: Had nice autocomplete back in December.

01:29:50
<transcript>: I don't know.

01:29:53
<transcript>: There's a neat one liner for converting to grid.

01:29:55
nexxeln: @cowfacedude99 interesting

01:30:01
<transcript>: Vs. Code does not allow its LC to be used independently of this code.

01:30:04
mr_yan19: what made you start working towards competitive programming?

01:30:04
<transcript>: I'm learning new things.

01:30:07
<transcript>: Okay. So.

01:30:07
<transcript>: our

01:30:08
<transcript>: Our.

01:30:13
<transcript>: Let's stand for row equals L dot split. What is it? In Python.

01:30:15
<transcript>: Like that.

01:30:17
<transcript>: That split.

01:30:21
<transcript>: Yeah, I have no autocompleplete. I feel like I should.

01:30:21
<transcript>: like

01:30:25
nexxeln: yup

01:30:25
<transcript>: Like Why does that say no Python documentation fail for L.

01:30:28
<transcript>: It's just a it's a.

01:30:30
<transcript>: Where's all the types.

01:30:33
<transcript>: Is all the types stuff.

01:30:53
<transcript>: Made you start working towards competitive programming, Mr. Yann. Well, it was yesterday when I was doing evidence of code, and I saw the leaderboard. I was like, how could someone do it that fast? That's why I learned about competitive programming. That's why I decided I'm obsessed with competitive programming. And I have to get good at it. That's basically what happened.

01:31:01
<transcript>: I'm a simple man. I hear that there's a really challenging thing you can waste lots of lots of time on.

01:31:01
<transcript>: i do that thing

01:31:03
<transcript>: I do that thing.

01:31:08
<transcript>: R L split so that should be.

01:31:12
nexxeln: i had my best day on day 7, rank 509

01:31:16
<transcript>: Should be all of them, right? Nope. Split is not a function, so I got to learn all the Python stuff again. I guess.

01:31:18
mr_yan19: codingSeemsGood

01:31:18
<transcript>: How.

01:31:18
<transcript>: how

01:31:21
<transcript>: How to get characters.

01:31:26
<transcript>: From a string into a list in Python.

01:31:37
<transcript>: Get the characters from a string and put them into a list. You can use the list function. Oh, I'm just do list string. Oh, interesting. Okay.

01:31:40
<transcript>: So R equals list.

01:31:47
<transcript>: Here we go. Now. We're printing them.

01:31:47
<transcript>: so

01:31:55
cowfacedude99: get jedi-language-server too @adamdotdev

01:31:55
<transcript>: So 30. Okay. So now we have an array. Yeah. Do I want them in the matrix? Am I doing, like, matrix things.

01:31:55
<transcript>: i guess

01:31:59
<transcript>: I guess I don't. I'm not smart enough. I'm not elite coder.

01:32:02
<transcript>: Get Jedi language straight server.

01:32:02
<transcript>: oh is that better

01:32:03
<transcript>: Oh, is that better.

01:32:03
<transcript>: i need that one

01:32:05
<transcript>: I need that one as well.

01:32:05
<transcript>: both at

01:32:07
<transcript>: Both at the same time.

01:32:10
<transcript>: Next had a rank 509.

01:32:10
<transcript>: on day seven

01:32:17
<transcript>: On day seven. I guess I'm doing the one tonight. I'm gonna do it live. Because I'm gonna be awake. Why not.

01:32:17
<transcript>: i haven't done any of

01:32:21
<transcript>: I haven't done any of them when they actually happened because I'm asleep.

01:32:25
<transcript>: Jedi Language server. Are we sure.

01:32:25
<transcript>: are you

01:32:27
<transcript>: Are you positive.

01:32:29
<transcript>: Positive.

01:32:35
tardidriss: you don't need to split the line , just iter on the native string --> for c in l: print(int(c))

01:32:43
<transcript>: Here.

01:32:46
<transcript>: Do you know.

01:32:46
<transcript>: server

01:32:55
<transcript>: Server. So here I've got Pyrite. And you're telling me I should do the language Jedi language server, too. So Mason, install.

01:32:55
<transcript>: jedi

01:33:02
<transcript>: Jedi Language server and that won't conflict or something like the two of them can work together for good.

01:33:09
<transcript>: And also, do you know how to configure it in my LSP insting right here.

01:33:09
<transcript>: did i

01:33:10
<transcript>: Did I.

01:33:16
<transcript>: Don't need to split the line? Just ITER on the native string? Oh.

01:33:18
<transcript>: Oh.

01:33:18
<transcript>: nice

01:33:21
<transcript>: Nice tardy. Thank you so much.

01:33:23
<transcript>: For the tip.

01:33:24
cowfacedude99: you need to pass your on attach too.

01:33:25
<transcript>: Jedi.

01:33:30
<transcript>: Language server.

01:33:31
<transcript>: Yeah.

01:33:36
<transcript>: Gentle Language server.

01:33:39
<transcript>: In them. Ellis.

01:33:42
<transcript>: Here we go.

01:33:45
<transcript>: I want to get this part. Jedi.

01:33:56
<transcript>: Okay. So there I do the setup, and I need to go into.

01:34:00
<transcript>: Saying I need to do on the unattached thing. Where is that.

01:34:08
<transcript>: I remember where that is.

01:34:13
<transcript>: No LS no.

01:34:14
cowfacedude99: maybe that's why cmp hasn't recognised pyright

01:34:19
<transcript>: I need to. I need to. Oh, the audit that you're saying I need to do this. Oh, yeah, yeah. Okay.

01:34:25
<transcript>: Deni Language server.

01:34:25
<transcript>: set

01:34:29
<transcript>: Set up. And I passed it the on attached. That's good.

01:34:29
nobic574: I know nothing about coding but the mustache was convincing

01:34:33
<transcript>: That's why CMP hasn't been Oh.

01:34:35
<transcript>: Oh.

01:34:39
<transcript>: I guess I should do that.

01:34:39
<transcript>: thanks for

01:34:41
<transcript>: Thanks for following nobik.

01:34:42
tnkhanh: your pyright doesn't have on_attach monkaS

01:34:48
<transcript>: Maybe that's why I know nothing about coding. But the mustache was convincing. I'm glad. I'm glad the mustache did it for you.

01:34:48
<transcript>: welcome to

01:34:53
<transcript>: Welcome to my chat. Nobik, your pirate doesn't have an auto attached. It does now, now, doesn't it.

01:34:54
tnkhanh: lol

01:34:58
<transcript>: Say that, but look, I don't know what she's talking about. I'd seen on a hatch.

01:35:04
<transcript>: Okay. Let's go back over here and let's restart. And then.

01:35:07
<transcript>: Okay.

01:35:11
<transcript>: So now can I do stuff? Can I say like.

01:35:11
<transcript>: what

01:35:23
<transcript>: What is this thing? Unknown? Well, that's fair, because split lines comes out of a library. Maybe it just can't do that. Apparently. There we go. Let's see. Data is unknown. That's fair.

01:35:23
<transcript>: again

01:35:27
<transcript>: Again, if it comes out of one of those things, I guess.

01:35:27
<transcript>: that is

01:35:29
<transcript>: That is a literal.

01:35:31
<transcript>: That sounds good.

01:35:31
<transcript>: literal too

01:35:33
<transcript>: Literal too. Okay.

01:35:37
<transcript>: Literal. Okay.

01:35:37
<transcript>: i guess

01:35:39
<transcript>: I guess I don't know when it's gonna be handy.

01:35:39
<transcript>: until

01:35:48
<transcript>: Until that's a little unknown. How do I tell it what this is? If I need to tell it, like in TypeScript, I was just like, cast it or something.

01:35:50
nobic574: I know 0000.1% linux by that i know sudo does things LUL LUL

01:35:52
<transcript>: And I need to do that.

01:36:00
<transcript>: You know Zero 1% Linux by that I know pseudo does things.

01:36:02
<transcript>: That's funny.

01:36:06
cowfacedude99: python does not have types by default LUL

01:36:12
<transcript>: Okay, I guess I have better. I have better Python LSP stuff going on now, but it's still not great.

01:36:18
<transcript>: Because I don't know what these would be. It's like, I need the hints or something. There's, like, hints. Right.

01:36:25
<transcript>: Okay, so Python, I don't have to turn it into a list.

01:36:25
<transcript>: you're saying i

01:36:31
<transcript>: You're saying I could just iterate over the but I guess I need to turn this into a matrix.

01:36:35
<transcript>: So Python create.

01:36:35
<transcript>: a matrix

01:36:37
<transcript>: A Matrix in Python.

01:36:41
<transcript>: Does not have types. I default. Yeah.

01:36:49
<transcript>: One of those dynamic languages, isn't it? Is a matrix, just a two dimensional. Yeah, it's just a okay array of rays.

01:36:49
<transcript>: i gotta figure

01:36:52
<transcript>: I gotta figure out like what? It.

01:37:01
<transcript>: What is the way I'm gonna solve this? If I had it in a matrix, what is the matrix? Math magic. I'm gonna do.

01:37:01
<transcript>: to figure

01:37:06
<transcript>: To figure out those inner ones. I guess first of all, I can say.

01:37:14
<transcript>: So if that's split lines.

01:37:17
<transcript>: What was data before that.

01:37:20
<transcript>: An array of strings.

01:37:23
<transcript>: Yeah.

01:37:26
<transcript>: So if I just said.

01:37:26
<transcript>: how can i immediately

01:37:31
<transcript>: How can I immediately put that into a what's the fastest way.

01:37:31
<transcript>: that

01:37:39
<transcript>: That I would put data into a matrix of characters where each string is a row. Each character is a column.

01:37:39
<transcript>: what's the fastest

01:37:42
<transcript>: What's the fastest way to do that in Python? I wonder.

01:37:48
<transcript>: Is it some kind of list comprehension like this.

01:37:52
<transcript>: Is it like matrix equals.

01:37:52
<transcript>: and it's gonna

01:37:54
<transcript>: And it's gonna be like.

01:37:55
<transcript>: I.

01:37:59
<transcript>: In something.

01:37:59
<transcript>: data

01:38:00
<transcript>: Data.

01:38:04
<transcript>: Anybody know.

01:38:09
<transcript>: So each, I guess.

01:38:09
<transcript>: each

01:38:10
nobic574: I am getting a pc soon any form of coding that would be smart to know 🤔

01:38:14
<transcript>: Each eye in Data is a string.

01:38:17
<transcript>: Right.

01:38:23
<transcript>: Like that's. What printed when I printed data.

01:38:23
<transcript>: wait

01:38:29
<transcript>: Wait. Data is just a string. Data is a string. I need to do split lines.

01:38:32
<transcript>: Get into.

01:38:32
<transcript>: an array

01:38:34
<transcript>: An array of strings.

01:38:34
<transcript>: and for

01:38:36
<transcript>: And for each array.

01:38:41
<transcript>: I need to do.

01:38:45
<transcript>: List.

01:38:47
<transcript>: I.

01:38:50
<transcript>: Can do for me.

01:38:52
<transcript>: I just do it.

01:38:52
<transcript>: so i just create a

01:38:57
<transcript>: So I just create a matrix. I created a matrix. People. I did it.

01:38:57
<transcript>: with that list conference

01:38:58
<transcript>: With that list. Conference.

01:39:03
<transcript>: Look at me. I was just asking like I didn't know. Py five. I still know. Pipe off.

01:39:05
ryankhawkins: nICE

01:39:09
<transcript>: I'm getting a PC soon. Any form of coding that would be smart to know.

01:39:12
<transcript>: None of this stuff I'm doing would be spark to no, I'm just gonna tell you that right now.

01:39:17
<transcript>: Because what I'm doing right now is.

01:39:19
<transcript>: Edited programming. I'm trying.

01:39:19
<transcript>: to learn

01:39:21
<transcript>: To learn.

01:39:21
<transcript>: how to get into

01:39:22
<transcript>: How to get into the mindset.

01:39:22
<transcript>: of a competitive

01:39:28
<transcript>: Of a competitive programmer who writes a bunch of Python and goes as fast as possible. And then it's like.

01:39:34
<transcript>: That I'm not there yet, but I got to get the reps in, you know.

01:39:34
<transcript>: so that's

01:39:39
<transcript>: So that's my matrix. If I have a matrix, I can do something with that. I can say.

01:39:39
<transcript>: four

01:39:43
tnkhanh: you can just use the strings as is and pretend its a matrix, I think

01:39:47
<transcript>: Four. This feels kind of dumb to, like, create a matrix, and then just, like, loop over every cell. But that's what I'm gonna do. So I'm gonna say, four.

01:39:47
<transcript>: ro

01:39:50
<transcript>: Row, in.

01:39:51
<transcript>: Matrix.

01:39:54
<transcript>: For C.

01:39:56
<transcript>: And R.

01:39:58
<transcript>: Print.

01:39:58
<transcript>: c

01:39:59
<transcript>: C.

01:40:07
<transcript>: Okay. So we just. Iterate it over.

01:40:07
<transcript>: each of

01:40:10
<transcript>: Each of the rows and columns in the matrix.

01:40:10
<transcript>: and

01:40:14
tnkhanh: u got a real matrix tho!

01:40:16
<transcript>: And how do I get the index in Python? Can I do this kind of do, like.

01:40:18
<transcript>: I do like that.

01:40:22
<transcript>: Thing.

01:40:24
tardidriss: I will probably watch you for several days instead of trying to solve the problems by myself, look like much more fun

01:40:24
mattt156: in enumrate

01:40:26
<transcript>: Print.

01:40:26
<transcript>: r

01:40:28
<transcript>: Ri.

01:40:34
mattt156: i,v in enumerate(matrix)

01:40:40
<transcript>: No. So that's that doesn't work.

01:40:44
tnkhanh: dang live python lesson

01:40:48
<transcript>: How do I get the index of an.

01:40:52
<transcript>: Iterator.

01:40:54
<transcript>: Iterable.

01:40:59
<transcript>: Item in a loop in Python.

01:41:03
<transcript>: Thanks for the follow synthetic and snake.

01:41:03
<transcript>: and transner

01:41:04
tranziner: LUL

01:41:06
<transcript>: And Transner. I miss that one. Sorry.

01:41:08
<transcript>: In enumerate.

01:41:11
tnkhanh: ^ enumerate for index

01:41:18
<transcript>: Let's see. I got a real matrix. I did. You can just use the string as is and pretend it's a matrix, I think. Okay.

01:41:30
<transcript>: Yeah. I don't know why I made a Matrix. I just kind of wanted to. I would probably watch you for several days instead of trying to solve the problems by myself. Look like much more fun.

01:41:30
<transcript>: so

01:41:34
<transcript>: So IV in Enumerate matrix. Thank you so much, Matt. That is kind of familiar.

01:41:34
<transcript>: live pyth

01:41:39
<transcript>: Live Python lesson. So I just made a YouTube video. It'll be out tomorrow.

01:41:39
<transcript>: but i

01:41:47
<transcript>: But I mentioned in the YouTube video that what was it in Enumerate Ivy? And oh, the index is first.

01:41:47
<transcript>: okay

01:41:50
<transcript>: Okay. I.

01:41:50
<transcript>: just mentioned

01:42:00
<transcript>: Just mentioned in this YouTube video that like learning things while streaming on Twitch is the best possible way to learn because it's like I think what I said was it's like having.

01:42:00
<transcript>: a stack

01:42:03
<transcript>: A stack overflow and Google.

01:42:03
<transcript>: like a push

01:42:05
<transcript>: Like a push version where.

01:42:10
<transcript>: It gives you answers to things you didn't even know to ask. It's the best.

01:42:10
<transcript>: foot chat you all

01:42:12
<transcript>: Foot chat you all. You're the best.

01:42:12
<transcript>: so

01:42:15
<transcript>: So in enumerate.

01:42:18
<transcript>: Okay like that.

01:42:22
<transcript>: And then this one as well. Enumerate.

01:42:27
<transcript>: Okay.

01:42:35
<transcript>: How about that? There we go. So it's going through each row. I got the index now and I've got the value.

01:42:39
<transcript>: So what I want to do is.

01:42:39
<transcript>: if

01:42:41
<transcript>: If the row is zero.

01:42:41
<transcript>: if

01:42:43
<transcript>: If.

01:42:43
<transcript>: ro

01:42:46
<transcript>: Row index equals zero.

01:42:48
<transcript>: Then we want to say.

01:42:52
<transcript>: So I think at the top, I need to always have, like.

01:42:54
<transcript>: The result.

01:42:54
<transcript>: no

01:42:55
<transcript>: No.

01:43:00
<transcript>: Or the total. Why can't I type A. T? There we go.

01:43:00
<transcript>: total

01:43:01
<transcript>: Total zero.

01:43:05
<transcript>: And then I'm gonna return.

01:43:08
<transcript>: We'll do that here. Right.

01:43:13
<transcript>: Okay, totally zero. And we're gonna just like, return total here.

01:43:16
<transcript>: Okay.

01:43:16
<transcript>: so

01:43:17
<transcript>: So if.

01:43:20
<transcript>: Row index is zero.

01:43:20
<transcript>: then

01:43:23
<transcript>: Then Total plus equals one.

01:43:23
<transcript>: right

01:43:27
<transcript>: Right. Is that how you do it in Python? Or you're kind of just do, like, plus plus.

01:43:32
<transcript>: Is that a thing.

01:43:34
<transcript>: Mutable variables.

01:43:34
<transcript>: as they say

01:43:35
<transcript>: As they say.

01:43:38
<transcript>: Things that okay.

01:43:38
nexxeln: t++ works too

01:43:42
<transcript>: For row index if row index equals zero.

01:43:42
<transcript>: do that

01:43:44
nexxeln: oh wait no it doesn't

01:43:45
<transcript>: Do that and then continue.

01:43:45
<transcript>: is that a thing

01:43:47
<transcript>: Is that a thing in Python? No.

01:43:50
<transcript>: Do you like exit the loop.

01:43:52
nexxeln: t += 1 yeah

01:43:54
<transcript>: T works. Oh, no, it doesn't. Okay.

01:43:54
<transcript>: t

01:43:56
<transcript>: T plus equals one.

01:43:56
<transcript>: okay

01:43:57
<transcript>: Okay.

01:43:57
<transcript>: yes that's

01:44:02
<transcript>: Yes, that's fine. It's continue a concept. Can I continue in the loop? Yeah, I think so.

01:44:03
mattt156: break

01:44:05
<transcript>: So if.

01:44:05
<transcript>: row

01:44:07
mattt156: continue also a concept

01:44:09
nexxeln: yep you can

01:44:11
<transcript>: Row index is zero. This go ahead because we know or or.

01:44:13
<transcript>: Is it just type or in Python.

01:44:15
<transcript>: I have so many questions.

01:44:21
<transcript>: Continuing. Also a concept. Cool and break is the same. Okay, cool, cool.

01:44:21
<transcript>: thank you so much

01:44:22
mattt156: yeah it's or

01:44:24
<transcript>: Thank you so much, Everybody, for making this so much easier.

01:44:24
<transcript>: or

01:44:29
<transcript>: Or if a row index equals to.

01:44:33
<transcript>: The link of the matrix matrix.

01:44:35
<transcript>: Matrix.

01:44:37
<transcript>: Link.

01:44:41
<transcript>: That count in Python. It's count.

01:44:41
<transcript>: okay

01:44:42
<transcript>: Okay. So like that.

01:44:43
mattt156: len(matrix)

01:44:44
<transcript>: Start.

01:44:46
nexxeln: len(matrix)

01:44:47
<transcript>: One is one.

01:44:52
<transcript>: Is it Count? Minus one. Yeah.

01:44:56
tardidriss: len(matrix)

01:44:59
<transcript>: Unsupported operating types for wet.

01:45:04
<transcript>: Oh, does that need to be in like Paren.

01:45:11
<transcript>: That works. Now. I can't do that. What? What's wrong with this.

01:45:15
<transcript>: Subtract something from that thing.

01:45:21
<transcript>: Length of matrix thank you so much.

01:45:33
<transcript>: I think I said.

01:45:36
<transcript>: Oh, Yep.

01:45:37
<transcript>: Okay.

01:45:37
<transcript>: so if it's

01:45:40
<transcript>: So if it's the first or the last row.

01:45:47
<transcript>: We know it's good. Oh, wait, wait, no, it's every cell in here needs to be.

01:45:47
<transcript>: yeah so

01:45:51
<transcript>: Yeah. So this whole thing is down here.

01:46:02
<transcript>: Indentation is a funny thing.

01:46:02
<transcript>: i

01:46:04
<transcript>: I'm used to working with.

01:46:07
<transcript>: Okay.

01:46:07
<transcript>: any less

01:46:09
<transcript>: Any less indentation. How do I do that.

01:46:09
<transcript>: that's gonna be

01:46:12
<transcript>: That's gonna be in my dot files, right.

01:46:15
<transcript>: It's probably in like my.

01:46:15
<transcript>: black

01:46:17
<transcript>: Black settings.

01:46:17
<transcript>: so

01:46:19
<transcript>: So black.

01:46:19
<transcript>: i

01:46:21
<transcript>: I did like.

01:46:24
nexxeln: you can do > in visual mode to indent easily

01:46:27
<transcript>: That with and then I said.

01:46:30
<transcript>: Indent.

01:46:32
<transcript>: Equals.

01:46:33
<transcript>: Two.

01:46:42
<transcript>: Who think this is gonna work? I should do a poll who thinks that change is gonna make my black format the way I want it to.

01:46:46
nexxeln: 2 in python is cringe

01:46:53
<transcript>: Know man I sword is not executable make sure it's installed.

01:46:55
<transcript>: Okay. I broke.

01:46:55
<transcript>: everything

01:46:56
<transcript>: Everything.

01:46:58
<transcript>: With.

01:47:05
<transcript>: All right, we're gonna do null LS.

01:47:05
<transcript>: two

01:47:08
<transcript>: Two, and Python is cringe.

01:47:12
<transcript>: Do arrow.

01:47:12
<transcript>: do open

01:47:16
<transcript>: Do open brackets in visual mode to end either. Oh really.

01:47:16
<transcript>: okay

01:47:23
<transcript>: Okay, I'll do that. But I still want it to be smaller than it is. We're talking about competitive programming here. Next. Competitive.

01:47:23
<transcript>: no ls

01:47:24
<transcript>: No LS.

01:47:24
<transcript>: black

01:47:25
<transcript>: Black.

01:47:25
<transcript>: indent

01:47:27
<transcript>: Indentation.

01:47:38
nexxeln: might as well make it 1 OMEGALUL

01:47:46
mattt156: just have chatgpt write your config files for you

01:47:46
<transcript>: Are there ARGs? There may not be yards? They might just be like, whatever it's black? You're gonna live with the way we format.

01:47:50
<transcript>: In this.

01:47:52
<transcript>: Oh no.

01:48:00
<transcript>: Python, black.

01:48:00
<transcript>: indent

01:48:01
<transcript>: Indent.

01:48:07
<transcript>: It's not gonna.

01:48:14
<transcript>: Okay. Well, I just have to learn how to end.

01:48:20
<transcript>: All right.

01:48:21
nexxeln: black is opinionated

01:48:26
<transcript>: We're using the app. Just kidding. I'm gonna stick with it. I'm just not happy about it.

01:48:29
<transcript>: Okay.

01:48:31
<transcript>: Let's just let's see.

01:48:35
<transcript>: Okay.

01:48:41
<transcript>: Bummer.

01:48:41
<transcript>: will make it

01:48:43
<transcript>: Will make it work.

01:48:43
<transcript>: i like that

01:48:47
<transcript>: I like that I had to name them day eight. Are we sure I had to.

01:48:47
<transcript>: let's try something

01:48:50
<transcript>: Let's try something. Here. Let's say.

01:48:52
<transcript>: Eight, Pi.

01:48:57
<transcript>: And then let's go in here. And let's say.

01:48:57
<transcript>: i think

01:49:01
<transcript>: I think the problem was not that it was a number, right.

01:49:04
<transcript>: Problem with yeah. There we go. Okay.

01:49:04
<transcript>: but there was

01:49:17
<transcript>: But there was a better way to import. We might do that in a bit. Somebody told me Black is opinionated. Just have the DPP write your config files for you. That would be amazing, actually. Like Chappie, I want Chat GPT to like.

01:49:17
<transcript>: refactor

01:49:21
<transcript>: Refactor all of my Invig that'd be cool.

01:49:26
<transcript>: Okay. So if I want to indent quickly, you're saying I can do.

01:49:29
<transcript>: So if I'm like.

01:49:29
<transcript>: here you're

01:49:31
<transcript>: Here. You're saying just like arrows.

01:49:34
<transcript>: That's pretty cool. Okay.

01:49:34
<transcript>: good to

01:49:49
<transcript>: Good to know. So I can, like, visual select and yeah, that feels good. I can't believe I just learned that. Okay, so if row index is zero or row index equals link minus. Yeah. Link the one. Okay.

01:49:49
<transcript>: or

01:49:51
<transcript>: Or. Or.

01:49:53
<transcript>: If.

01:49:56
<transcript>: Elite coders. They'd be like.

01:49:56
<transcript>: yanking

01:50:00
<transcript>: Yanking that and just paste in it. They'd be like, CI equals.

01:50:03
<transcript>: Zero, or yeah, or.

01:50:09
<transcript>: Ci equals.

01:50:09
<transcript>: length of

01:50:12
<transcript>: Length of not the matrix. It'd be the link.

01:50:12
<transcript>: of

01:50:14
<transcript>: Of R.

01:50:16
<transcript>: Right.

01:50:21
nexxeln: i challenge you to make a O(log n) solution LUL

01:50:22
<transcript>: The same with the column. Right. We need to add up the columns.

01:50:26
<transcript>: The first column in the last column.

01:50:26
<transcript>: yeah

01:50:27
<transcript>: Yeah.

01:50:27
<transcript>: yeah

01:50:29
<transcript>: Yeah. Okay.

01:50:29
<transcript>: so i could have

01:50:29
tardidriss: the matrix is square

01:50:32
<transcript>: So I could have done that in one big conditional, I guess.

01:50:34
<transcript>: But I didn't. Okay.

01:50:40
<transcript>: So slow, but we're getting there. We're figuring out how to write Python. That's part of it.

01:50:45
<transcript>: I feel good about the system I'm putting in place, you know, I'm saying.

01:50:45
<transcript>: system it's

01:50:47
<transcript>: System. It's there.

01:50:47
<transcript>: i'm forming

01:50:49
<transcript>: I'm forming a system.

01:50:49
<transcript>: the matrix

01:50:52
<transcript>: The matrix is square exactly.

01:51:03
<transcript>: You challenge me to make a zero login solution or Bigo login solution? Yeah, I'm not gonna do that. I mean, I don't even know how to do that so clearly, I'm not gonna do that.

01:51:08
<transcript>: I don't think.

01:51:08
<transcript>: the the

01:51:12
nexxeln: OMEGALUL

01:51:12
<transcript>: The the competitive programmers I don't think they care about.

01:51:12
<transcript>: how long it takes

01:51:14
<transcript>: How long it takes to execute the code.

01:51:17
<transcript>: Okay.

01:51:17
<transcript>: so

01:51:24
<transcript>: So we've done. We've handled the outside and like the outside boundaries. Now we have to figure out within the things.

01:51:30
<transcript>: You know, I'm saying so within the things we got to say, let's just do this.

01:51:34
<transcript>: So for each cell.

01:51:37
<transcript>: Each C.

01:51:37
<transcript>: we're checking

01:51:37
nexxeln: my soln for pt.2 yesterday was O(n^3)

01:51:40
nexxeln: so bad OMEGALUL

01:51:44
<transcript>: We're checking to see. Did I even understand the problem? Right. If my tree is shorter.

01:51:46
<transcript>: Each reserve is in Singapore.

01:51:50
<transcript>: If all of the other trees between it.

01:51:50
<transcript>: and

01:51:52
<transcript>: And an edge of the grid.

01:51:58
<transcript>: Are shorter than it if all of the trees between it.

01:52:02
<transcript>: And an edge of the grid are shorter.

01:52:02
<transcript>: than

01:52:07
<transcript>: Than it only consider trees in the same row or cost.

01:52:10
<transcript>: That is only look up down, Yeah.

01:52:10
<transcript>: okay

01:52:13
<transcript>: Okay. So maybe we should just make like a function.

01:52:13
<transcript>: make

01:52:15
<transcript>: Make like a function.

01:52:15
<transcript>: and

01:52:17
<transcript>: And let's call it.

01:52:20
<transcript>: Deaf, visible.

01:52:22
<transcript>: Tree. Okay.

01:52:26
<transcript>: And a tree is visible. Return.

01:52:29
<transcript>: Oh, we need the whole.

01:52:32
<transcript>: Matrix. What do we need.

01:52:35
nexxeln: interestingly, bun too 11 secs to run the program on a 26mb input.txt file whereas deno took 5 secs

01:52:36
<transcript>: To need the whole matrix.

01:52:44
nexxeln: took*

01:52:45
<transcript>: Your solution for Part Two, yesterday was.

01:52:49
<transcript>: O into the third. Sounds bad.

01:52:57
<transcript>: Bun took 11 seconds to run the program on a 26 megabit input file, whereas D not took 5 seconds. Oh, interesting.

01:52:57
<transcript>: there's

01:53:00
<transcript>: There's a new button coming right.

01:53:03
<transcript>: Or whatever.

01:53:03
<transcript>: it's gonna be super

01:53:06
<transcript>: It's gonna be super fast, super memory efficient.

01:53:11
<transcript>: If I'm making this function, why am I even making this function.

01:53:15
<transcript>: Yes. Because I want to be able to reuse it in part two.

01:53:15
<transcript>: so

01:53:17
<transcript>: So return.

01:53:20
<transcript>: It's gonna need.

01:53:21
tardidriss: you need matrix, and (x, y) coordinate of the treee

01:53:23
<transcript>: This is going to need the.

01:53:26
<transcript>: Forest.

01:53:28
<transcript>: Right.

01:53:32
<transcript>: And the tree. What is the tree? Is it's not the value it's got.

01:53:32
<transcript>: the

01:53:34
<transcript>: The coordinate.

01:53:37
<transcript>: Why am I even doing this.

01:53:41
<transcript>: Like Why am I even.

01:53:49
<transcript>: Let's forget about the function for a bit because.

01:53:51
<transcript>: What.

01:53:53
<transcript>: Can I.

01:53:56
<transcript>: Okay.

01:54:02
<transcript>: So here we are. So we've counted the outside rows. Now we're on an actual one.

01:54:02
<transcript>: and it's

01:54:05
<transcript>: And it's a value C.

01:54:14
<transcript>: I'm not gonna use the R at all. Right? The whole row. I'm just gonna use the individual cells.

01:54:17
<transcript>: So we're gonna say.

01:54:25
<transcript>: I'm gonna be so bad at the solution. If.

01:54:37
<transcript>: So there's the Seah. And we need all of the things between.

01:54:42
<transcript>: It and any boundary to be less than its height. So.

01:54:51
<transcript>: If we're loop just the first thing that comes to mind. The first thing comes by is we loop through the row.

01:54:53
<transcript>: First.

01:54:57
<transcript>: So we say.

01:54:58
<transcript>: Four.

01:55:09
<transcript>: I'm gonna say T is in tree for T in.

01:55:13
<transcript>: Row.

01:55:26
<transcript>: I couldn't do a comprehension here I guess.

01:55:26
<transcript>: to do only

01:55:28
<transcript>: To do only the rows.

01:55:28
<transcript>: to the

01:55:32
<transcript>: To the left, and then only the rows to the right.

01:55:32
<transcript>: is that what i want to do

01:55:33
<transcript>: Is that what I want to do.

01:55:39
tardidriss: for t in range(r)

01:55:40
<transcript>: Yeah. Let's do this.

01:55:44
<transcript>: X in.

01:55:44
<transcript>: x

01:55:46
<transcript>: X Four X.

01:55:46
<transcript>: in

01:55:47
<transcript>: In R.

01:55:54
<transcript>: Where is it? Where? How do you do the filtering.

01:55:54
<transcript>: okay python

01:55:54
tardidriss: mistake for my part

01:55:55
<transcript>: Okay. Python.

01:55:57
<transcript>: Python.

01:55:57
<transcript>: list

01:55:58
<transcript>: List.

01:55:58
<transcript>: comprehend

01:56:01
<transcript>: Comprehendion filter.

01:56:05
<transcript>: Or T in range are.

01:56:09
<transcript>: You need matrix and XY coordinates of the tree.

01:56:13
<transcript>: Tell me the function if I use a function.

01:56:15
<transcript>: So here's how you filter.

01:56:15
<transcript>: if

01:56:18
<transcript>: If, yeah, yeah? So I could say.

01:56:20
<transcript>: If.

01:56:24
<transcript>: R. I guess the index of R.

01:56:31
<transcript>: Our is an array. Right.

01:56:31
<transcript>: let's

01:56:33
<transcript>: Let's the whole row.

01:56:43
<transcript>: I.

01:56:43
<transcript>: ix for

01:56:44
<transcript>: Ix. For.

01:56:46
<transcript>: Enumerate.

01:56:46
<transcript>: this is not

01:56:49
<transcript>: This is not efficient.

01:56:49
<transcript>: at all

01:56:50
<transcript>: At all.

01:56:50
<transcript>: if

01:56:51
<transcript>: If.

01:56:51
<transcript>: i

01:56:55
<transcript>: I is less than R. I.

01:56:55
<transcript>: this

01:56:58
<transcript>: This would be just the ones to the left, right.

01:57:03
<transcript>: I could do oh, yeah? I could do or.

01:57:10
<transcript>: To the right.

01:57:18
<transcript>: Or.

01:57:18
<transcript>: i

01:57:19
<transcript>: I.

01:57:19
<transcript>: is greater than

01:57:21
<transcript>: Is greater than.

01:57:24
<transcript>: Try right.

01:57:33
<transcript>: What did I do wrong here? I wrote something. X. Oh, I.

01:57:37
<transcript>: Do that I X.

01:57:37
<transcript>: no sorry

01:57:39
<transcript>: No, sorry. That's. That's.

01:57:41
nexxeln: you've inspired me to use python from today for aoc

01:57:44
<transcript>: For enumerate. X.

01:57:44
<transcript>: no in

01:57:45
<transcript>: No in.

01:57:51
<transcript>: Word.

01:57:51
<transcript>: like this

01:57:53
<transcript>: Like this enumerate.

01:57:55
<transcript>: R.

01:57:55
<transcript>: oh python

01:58:01
<transcript>: Oh Python does not stick with me like riding a bike for X for IX.

01:58:04
<transcript>: Can I do this.

01:58:06
<transcript>: For now.

01:58:12
<transcript>: I like a tuple. Is it.

01:58:12
<transcript>: gonna do that

01:58:14
<transcript>: Gonna do that. Oh, can I do that.

01:58:14
<transcript>: no

01:58:15
<transcript>: No.

01:58:15
<transcript>: operator plus

01:58:19
<transcript>: Operator. Plus not. Then what's wrong with tea.

01:58:19
<transcript>: did i

01:58:23
<transcript>: Did. I did I start using tea again? Oh, I did right here. This should be.

01:58:27
<transcript>: Dr.

01:58:33
<transcript>: Oh, man, I'm getting sleepy. I know sleep an hour ago.

01:58:37
<transcript>: 2 hours ago it's hitting me.

01:58:47
<transcript>: It inspired you to use Python from today for AOC. Well, if I accomplished nothing else in this stream, next. Feels good. Feels good. Feels good that I inspired you to do that.

01:58:51
<transcript>: Print the tree.

01:58:53
alvee__: myyy gooood

01:58:55
<transcript>: So those are the indexes in the heights.

01:58:55
alvee__: coodiinngg

01:58:57
tardidriss: you have to do one check for r<r1 and for r>r1 because you can be visible one one side and not the other one

01:58:59
<transcript>: So it would be like if.

01:59:01
<transcript>: If.

01:59:04
<transcript>: Tree.

01:59:19
<transcript>: For I would be like that right. If.

01:59:21
<transcript>: Tr.

01:59:21
<transcript>: is

01:59:22
<transcript>: Is greater than.

01:59:26
<transcript>: C.

01:59:30
<transcript>: cnn

01:59:31
<transcript>: Cnn.

01:59:31
<transcript>: so if it

01:59:36
<transcript>: So if it's greater than the C, this one is not going to work.

01:59:37
cowfacedude99: well, I am sticking to go for this year LUL

01:59:38
<transcript>: We just bail, right.

01:59:42
<transcript>: Continue.

01:59:46
<transcript>: Oh, what did I do.

01:59:58
cowfacedude99: at this point, I can't read python at all

01:59:59
<transcript>: Okay, so if PR is greater than C, continue any tree greater than C in this range of trees.

02:00:04
<transcript>: Ails this whole thing out though we're not gonna plus equal one this thing right.

02:00:10
<transcript>: And then we do the same thing for the.

02:00:14
<transcript>: Column. Right. So for.

02:00:14
<transcript>: i

02:00:17
<transcript>: Ipr in IX. Numerator.

02:00:17
<transcript>: instead

02:00:19
nexxeln: go makes me feel dumb

02:00:20
<transcript>: Instead of R. Here it's gonna be.

02:00:21
<transcript>: C.

02:00:25
<transcript>: No enumerate the column.

02:00:25
<transcript>: the column

02:00:27
<transcript>: The column would be what.

02:00:33
<transcript>: It doesn't exist. It would be maderix.

02:00:37
<transcript>: No, it doesn't exist.

02:00:41
<transcript>: There's not an array of just all the column values, is there.

02:00:44
<transcript>: At this point.

02:00:44
<transcript>: you're seeking

02:00:46
<transcript>: You're seeking to go.

02:00:46
<transcript>: at this point

02:00:52
<transcript>: At this point, you can't repart on all well, I'm also trying to do it the leak code way where you just, like, had the smallest possible.

02:00:54
<transcript>: The.

02:00:54
<transcript>: variable

02:00:56
<transcript>: Variable Names right.

02:01:08
<transcript>: Coding Alvi you have to do one check for R is less than our one and one for R is greater than our own. Because you can be visible one.

02:01:08
<transcript>: on one side

02:01:13
<transcript>: On one side and not the other one. So those may be separate checks. You're saying.

02:01:13
<transcript>: yeah i think

02:01:15
<transcript>: Yeah, I think you're right.

02:01:18
<transcript>: So now.

02:01:20
cowfacedude99: @nexxeln the lack of nice collections has me banging my head on the desk but otherwise it is manageable.

02:01:23
<transcript>: Delete.

02:01:28
<transcript>: Like that. So if I's lesson and then or.

02:01:34
<transcript>: Greater than right.

02:01:37
<transcript>: What I'm gonna be equal to.

02:01:42
<transcript>: I'm not sure.

02:01:42
<transcript>: but

02:01:48
<transcript>: But now I need to do the bailing out on the column, but I don't actually have an array for the column, do I.

02:01:55
nexxeln: go just feels ancient to me

02:01:56
<transcript>: Sleepy. My brain is so slow. I mean, it's always slow. I'm not trying to make excuses. I'm just actually really sleepy.

02:02:00
nexxeln: and the type system OMEGALUL

02:02:02
<transcript>: Lack of nice collections has me banging my head on the desk, but otherwise it was manageable.

02:02:05
cowfacedude99: you might have overcounting

02:02:13
<transcript>: You might have overcounting.

02:02:14
<transcript>: Me.

02:02:14
<transcript>: autonomy

02:02:16
<transcript>: Autonomy coffee.

02:02:18
<transcript>: Over counting.

02:02:21
<transcript>: I mean, I know I do right now.

02:02:25
<transcript>: I haven't handled the column case right.

02:02:25
<transcript>: like if

02:02:27
<transcript>: Like if I if I just comment out this and we've.

02:02:35
<transcript>: Plus equals one. So we're gonna continue. We're gonna continue in those cases.

02:02:38
<transcript>: Actually, I could just delete all of this.

02:02:40
<transcript>: I can.

02:02:43
<transcript>: Okay.

02:03:03
<transcript>: So we continue on those cases. Then we can sit. We bail out when it's not the tallest tree here. Okay. So this is gonna give us some answers. It's like 25. Okay. So that's not the correct answer. And so it hasn't tried to submit my thing, which is good. I do think there's gonna be cases where I accidentally solve for the sample input, but it doesn't.

02:03:03
<transcript>: work for all

02:03:19
<transcript>: Work for all input, and that'll be a bummer if this is accidentally been 21. So there's four trees that we still need to rule out based on columns. Now we can figure this out. I don't care. I'm sleepy, but I'm doing this. We're doing day eight, and then we're gonna move on, and we're gonna do day nine. We're doing it live.

02:03:19
<transcript>: in one hour

02:03:20
<transcript>: In 1 hour.

02:03:20
<transcript>: okay

02:03:22
<transcript>: Okay.

02:03:25
<transcript>: For I. Prn. Okay, so now.

02:03:25
<transcript>: i just need

02:03:31
<transcript>: I just need an array of the column. I guess I don't need I don't need.

02:03:31
<transcript>: i just

02:03:32
<transcript>: I just need to like, I.

02:03:49
<transcript>: Using the index, I'm just create a range, right? I'm doing all this so badly. Like someday, when I'm elite coatr, I will know this is dumb. I don't need the values. I just need the indices. I should just created ranges from the start based on the length.

02:03:57
<transcript>: And then just gotten indices and then looked up the value, right? I should just die that whatever I did here was the dumb way.

02:03:57
<transcript>: but it's

02:03:59
<transcript>: But it's fine.

02:03:59
<transcript>: so here's

02:04:02
<transcript>: So here's what I'm gonna do? I'm gonna say for.

02:04:02
<transcript>: i

02:04:04
lopta: What's in the array?

02:04:04
<transcript>: I and tree.

02:04:07
<transcript>: In. I'm not gonna need the index.

02:04:11
<transcript>: No, I didn't need the index in the first place.

02:04:11
<transcript>: so

02:04:13
<transcript>: So this can just be.

02:04:21
<transcript>: X. I could have done that on all these. Like.

02:04:28
<transcript>: That and then like.

02:04:33
<transcript>: X.

02:04:42
<transcript>: I'm not actually using the index here.

02:04:44
<transcript>: But on this one.

02:04:47
<transcript>: It's gonna be.

02:04:49
<transcript>: A numerate.

02:04:57
<transcript>: So C is actually a cell, not a column. We just want to range, which is the.

02:05:03
<transcript>: So we know our Row index.

02:05:03
<transcript>: okay

02:05:07
<transcript>: Okay, we know where we are on the row. We just need.

02:05:12
<transcript>: We just need a range that is the length.

02:05:15
<transcript>: Of the matrix.

02:05:15
<transcript>: yeah yeah

02:05:17
<transcript>: Yeah, yeah, okay.

02:05:17
<transcript>: so

02:05:20
<transcript>: So let's just bleed everything in here. So let's say.

02:05:24
<transcript>: For tree in second.

02:05:29
<transcript>: In.

02:05:35
<transcript>: X Four X in range.

02:05:37
<transcript>: Major.

02:05:37
<transcript>: length

02:05:39
<transcript>: Length, matrix.

02:05:39
<transcript>: should name matrix

02:05:42
<transcript>: Should name matrix like M. You know what I'm saying.

02:05:44
<transcript>: So.

02:05:48
<transcript>: X for X in range.

02:05:48
<transcript>: yeah yeah

02:05:48
nexxeln: range() is so useful

02:05:51
<transcript>: Yeah. Yeah. So that's our indices.

02:05:51
<transcript>: where

02:05:53
<transcript>: Where I guess we need to say if.

02:05:56
<transcript>: If.

02:05:58
<transcript>: X.

02:06:04
<transcript>: Does not equal is that does not equal in Python. Probably if X does not equal.

02:06:04
<transcript>: we don't

02:06:07
<transcript>: We don't want our current index, right.

02:06:07
<transcript>: which is

02:06:09
<transcript>: Which is the.

02:06:13
<transcript>: Row index. Okay.

02:06:14
<transcript>: So.

02:06:19
<transcript>: Here we say Tr equals.

02:06:23
<transcript>: Matrix.

02:06:23
<transcript>: then we

02:06:26
<transcript>: Then we do our Y first.

02:06:28
<transcript>: I.

02:06:28
lopta: I should probably take me another Python class.

02:06:31
<transcript>: And then our.

02:06:33
<transcript>: X Nick.

02:06:38
<transcript>: And our X is row index.

02:06:42
<transcript>: I think this is it.

02:06:42
<transcript>: let's see

02:06:43
<transcript>: Let's see.

02:06:43
<transcript>: no

02:06:46
<transcript>: No. 25. We're still over counting.

02:06:48
<transcript>: What's in the air.

02:06:48
<transcript>: lot welcome

02:06:49
<transcript>: Lot. Welcome to chat.

02:06:56
<transcript>: Range and so useful it is nice. I should probably take me another Python class. Me too.

02:07:01
<transcript>: What did I do wrong here. So I still didn't rule out.

02:07:01
<transcript>: let's see

02:07:02
<transcript>: Let's see.

02:07:04
<transcript>: Oh, wait, wait.

02:07:07
<transcript>: I gotta go up and not gonna go down.

02:07:07
<transcript>: right

02:07:08
<transcript>: Right.

02:07:13
<transcript>: They don't have to all be yeah, yeah no I'm so dumb.

02:07:19
<transcript>: We're gonna have two of these. It's gonna be if X is less than.

02:07:20
tardidriss: for i in [x for x in range(len(matrix)]: can be replaced by for i in range(len(matrix)):

02:07:21
<transcript>: Right. Yes. So.

02:07:26
<transcript>: All right, let's do.

02:07:26
<transcript>: less

02:07:28
davur_: and you got to account for double counting

02:07:34
<transcript>: Less than first. So if X is less than the row index now we're going up. Yeah, yeah, less than the row index.

02:07:35
tardidriss: my mistake

02:07:37
<transcript>: Then do this.

02:07:44
<transcript>: If any of them. Yeah, that direction. And then same.

02:07:46
<transcript>: For.

02:07:49
<transcript>: This simple.

02:07:49
<transcript>: i mean

02:07:51
lopta: Not sure whether to take a class or just buy a book.

02:07:54
<transcript>: I mean, the code is terrible, but is it that is it just X is greater than a row index.

02:07:57
<transcript>: We do the same thing. We get the values.

02:08:01
<transcript>: And FTR is Yeah.

02:08:07
<transcript>: I think so. Nope. 2025. That's that's not right.

02:08:14
<transcript>: Where am I missing this up. So range length of the matrix. The matrix is.

02:08:14
<transcript>: rows

02:08:19
<transcript>: Rows, right. Oh, did I do these backward? Is it? Is it actually Ri.

02:08:21
<transcript>: And like that.

02:08:26
<transcript>: I might have gotten this backwards because I don't understand. Python.

02:08:26
<transcript>: i

02:08:33
<transcript>: I think I got a backward. It goes rows in column no. Still 25. Is that right, though? Did I get that right? Is it? Let's just print.

02:08:35
<transcript>: Tr.

02:08:36
<transcript>: triangle

02:08:37
<transcript>: Triangle.

02:08:44
<transcript>: Our matrix. Print our matrix. Let's just go up here.

02:08:50
<transcript>: My kids is up.

02:08:56
<transcript>: 30, three, so it's rows.

02:09:00
<transcript>: It's an array of rows that each have.

02:09:00
<transcript>: their

02:09:03
<transcript>: Their each. Arrays. An array of cells.

02:09:07
<transcript>: So yeah. The length of that matrix.

02:09:10
davur_: look up pprint

02:09:12
<transcript>: That.

02:09:14
<transcript>: Five.

02:09:14
<transcript>: there's

02:09:16
<transcript>: There's five rows, Yeah.

02:09:20
<transcript>: So what am I doing wrong here.

02:09:20
<transcript>: look

02:09:22
<transcript>: Look up key, print.

02:09:33
<transcript>: I think my kids awake and I don't let me check the hang on.

02:09:50
nexxeln: easier to read print statements

02:09:50
<transcript>: Somebody is running around above me.

02:10:29
<transcript>: Okay. Up here, back.

02:11:15
lopta: Shh... nobody tell 'im.

02:12:44
lopta: Were they awake?

02:12:50
nexxeln: welcome back

02:13:00
<transcript>: Hey, thanks for the welcome back. Thank you for the follow beds and roses and your.

02:13:12
<transcript>: Sorry for boutching your names also Lopa. I think I got that one right? Also. Zwilliam? Tm. I don't think I saw that. Were they awake? I don't know. Someone ran around above me for a brief moment.

02:13:22
<transcript>: They got back in bed. So somebody was awake for a moment. Maybe they had to pee. I don't know. They did really fast because they're both in bed. So I don't know.

02:13:26
<transcript>: Nobody tell me what look up PPRINT.

02:13:26
<transcript>: easier to

02:13:28
<transcript>: Easier to read print statements.

02:13:39
<transcript>: Not sure. Not sure whether to take a class or just buy a book. What are we talking about here? You gotta account for double counting. Am I double counting? Saudi.

02:13:41
lopta: brb, the pog wants out...

02:13:44
<transcript>: Oh, of course, of course if the row.

02:13:49
<transcript>: Is. It is. It passes on the row and the columns. We can't cut that one twice.

02:13:50
gravelink: aws ? like amazon ? sorry im new here lol

02:13:53
<transcript>: Right.

02:13:53
<transcript>: is that what you mean

02:14:00
<transcript>: Is that what you mean for I in X for X and range length matrix can be replaced by four I and range link matrix.

02:14:03
<transcript>: That makes sense.

02:14:05
<transcript>: Thank you. Tardy.

02:14:10
<transcript>: I love it. Okay. Yeah. This is so great. Learning Python again.

02:14:10
<transcript>: on stream

02:14:11
<transcript>: On stream.

02:14:19
davur_: that is what I mean... a tree can be visible from multiple directions

02:14:21
<transcript>: Welcome to Chat Gravelink. Aws. Like Amazon. Yeah, I didn't do a lot of stuff with Amazon Web Services. The POG once out.

02:14:21
<transcript>: was that dog

02:14:22
<transcript>: Was that dog.

02:14:22
<transcript>: a tree

02:14:35
<transcript>: A tree can be visible from multiple directions. That's right. So I'm double counting. That's the problem. One of the problems. So let's simplify because I'm trying to like, learn Python. Again. I'm not trying to do this fast. This is day eight.

02:14:45
<transcript>: We want to make that better. So in range. Oh, Geez, are you serious? It's somebody's usually Rick rolling me right now. Cow face. Come on, now.

02:14:49
<transcript>: That's so loud.

02:14:52
<transcript>: Well, this is what's happening now.

02:14:52
<transcript>: cathy

02:14:57
<transcript>: Cathy's never wants to have a oneonone with me. That's what he's telling me. Every time he ripples me.

02:14:57
<transcript>: it's okay

02:14:57
tardidriss: the continue escape the inner loop only

02:14:59
<transcript>: It's okay. I understand.

02:15:04
<transcript>: The Continue Escapes the Inner Loop only.

02:15:07
<transcript>: The inner loop only.

02:15:14
<transcript>: Wait. Am I double counting? I'm only going through every cell one time. Right.

02:15:26
<transcript>: Oh, I'm double counting the outside edges, the outside corners. I'm double counting the corners. That's it. That's the only thing I'm doing wrong.

02:15:26
<transcript>: yeah

02:15:29
<transcript>: Yeah Yep Yep.

02:15:29
<transcript>: okay

02:15:30
<transcript>: Okay.

02:15:30
<transcript>: so

02:15:32
<transcript>: So.

02:15:35
<transcript>: That's all it is.

02:15:39
<transcript>: Let's exit this. Let's reopen it. Chrome.

02:15:42
<transcript>: And let's restore it.

02:15:44
<transcript>: Okay.

02:15:46
nexxeln: be a competitve programmer and just add -4 to the total LUL

02:15:49
<transcript>: Yeah, I'm just double counting the corners. I want to do the thing that you said, though.

02:15:49
<transcript>: which

02:16:00
<transcript>: Which is I want to clean this up. So this instead of a comprehension. Oh, no. I need the comprehension because I'm doing the if X is less than or greater than Ri. Right.

02:16:13
<transcript>: Be a competitive programmer and just add minus four of the tool. Honestly, that's probably what a competitive programmer would do, right? They would just say, return T minus four because we know I'm double counting all the corners.

02:16:13
<transcript>: that

02:16:26
<transcript>: That's actually a legitimate. I was trying to think, like, how do I want to handle that? That's the way, right? That's actually the way. Okay. It's gonna submit my answer. I think if it's working, I don't know if it's working, though.

02:16:28
<transcript>: Did it work.

02:16:31
<transcript>: It did not submit.

02:16:31
<transcript>: so let's look

02:16:35
<transcript>: So let's look at our main PY. Maybe a problem with main diamonds. Pi.

02:16:42
<transcript>: Let's see current result so and answer one.

02:16:42
<transcript>: let's

02:16:44
<transcript>: Let's print made it.

02:16:48
gravelink: this is the way SeemsGood lol

02:16:48
<transcript>: Did not made it.

02:16:48
<transcript>: okay so

02:16:54
<transcript>: Okay, so it didn't actually run the submit code. That's good answer. One must not be what I thought it was.

02:17:00
cowfacedude99: are you not double counting from two directions?

02:17:07
<transcript>: 21 21? Oh, one's a string one's a number I bet.

02:17:10
<transcript>: So it's happening.

02:17:13
<transcript>: 21.

02:17:13
<transcript>: and then this one

02:17:19
<transcript>: And then this one's a number. Yeah. So I need to always return these as a string or something.

02:17:19
<transcript>: or

02:17:20
<transcript>: Or.

02:17:26
<transcript>: I guess just in the main PY need to handle that right.

02:17:31
<transcript>: So here result.

02:17:31
<transcript>: if even

02:17:40
<transcript>: If even if result is a number, I want to make it a string. Right? I just do that. Is this Python? This Alpine works? No.

02:17:40
tardidriss: the "if tr > c:  continue"  continue the for loop just above

02:17:44
<transcript>: That. No. Okay.

02:17:44
<transcript>: good enough

02:17:46
nexxeln: str(vra)

02:17:47
<transcript>: Good enough good to know.

02:17:47
<transcript>: do i do

02:17:48
nexxeln: var*

02:17:50
<transcript>: Do I do like two strings.

02:17:54
<transcript>: Python. Is it really.

02:17:55
<transcript>: Oh STR.

02:17:57
<transcript>: Is that it.

02:17:57
<transcript>: are you

02:17:59
nexxeln: camel case LUL

02:18:04
<transcript>: Are you not double counting from two directions? No, no. Because I only go through each cell one time. Right.

02:18:08
<transcript>: Camel case. Is that not it? Oh, yeah, that wouldn't be it.

02:18:08
<transcript>: it's python

02:18:09
<transcript>: It's. Python.

02:18:14
<transcript>: Okay. So you're saying I just do like strike.

02:18:17
<transcript>: That.

02:18:22
nexxeln: yup

02:18:27
<transcript>: 's It there goes, oh, wrong answer.

02:18:27
<transcript>: nine

02:18:31
<transcript>: 9797. I'm sorry. What.

02:18:32
lopta: Is Python not case sensitive?

02:18:34
nexxeln: but python shouldn't care

02:18:39
<transcript>: I should not have guessed that. Oh, yeah, I should, because the input is different than the. Yeah. Okay. So still bug in my implementation.

02:18:44
<transcript>: And that's a bummer because I got the right answer in the sample data.

02:18:47
<transcript>: So why not the right answer with the real beta.

02:18:52
<transcript>: So there's still a bug. Okay, so my whole system.

02:18:55
<transcript>: My whole plan for like.

02:19:05
<transcript>: Running the sample data, get the right answer. Oh, then submit. It was a terrible plan, because we've already hit a say a scenario. Here where.

02:19:07
<transcript>: The sample data.

02:19:07
<transcript>: happens

02:19:08
nexxeln: maybe you're aren't double counting corners after all OMEGALUL

02:19:13
<transcript>: Happens to work with this, but it doesn't work in the real data. Bummer. Maybe you aren't.

02:19:15
davur_: will your watching tool keep resubmitting?

02:19:17
<transcript>: Maybe you aren't double counting corners, after all.

02:19:30
<transcript>: The watching tools. It'll resubmit whenever the number changes. So as long as the answer is the same, it will not. So if I save this, it's not going to resubmit. That's not the right answer. Your interest too high.

02:19:41
<transcript>: Wait. Yeah. Aoc D will not submit that answer again. You've previously guessed 9797 and the server responded, so it's just telling me again so it's pretty nice. Like this is a pretty nice system.

02:19:44
<transcript>: But we do need to figure out the bug.

02:19:47
<transcript>: So the four corners.

02:19:50
<transcript>: I definitely need to subtract four. That's still fine.

02:19:50
<transcript>: but there's

02:19:53
<transcript>: But there's something wrong in here.

02:19:53
nexxeln: @adamdotdev you should prolly not do this watch mode cause you'll get rate limited if you get it wrong a bunch of times

02:20:01
nexxeln: theo got rate limited for like 10 mins

02:20:02
<transcript>: We go through every cell one time. We only go through them one time. Is it a. Is it a less than an equal versus.

02:20:02
<transcript>: something

02:20:04
<transcript>: Something off by one or something.

02:20:07
cowfacedude99: I meant are you not double counting from when the tree is visible from two sides?

02:20:12
<transcript>: You should probably not do this watch mode because you'll get rate limited if you get it wrong a bunch of times.

02:20:12
<transcript>: oh yeah

02:20:20
gravelink: im not gunna lie, i wish i new what yall were tallking about T_T </3  i wanna learn coding lol

02:20:23
<transcript>: Oh, yeah, no, I know. Every time I mess it up, I will definitely it'll push out the timer, but the idea is that like you're just not you can't mess up. You just gotta get it right.

02:20:34
<transcript>: It does suck that my sample data work. That's probably gonna happen a lot, isn't it? It's gonna work for my sample. It's not gonna be the right solution. And I'm gonna get rate limited that's that's not good.

02:20:40
<transcript>: Are you not double counting from when the tree is visible from two sides.

02:20:44
<transcript>: No. Because. See, we just bail out like.

02:20:44
<transcript>: the

02:20:48
<transcript>: The all these checks are just bailing us out.

02:20:54
<transcript>: So we plus one if it's if it's the first last.

02:20:54
<transcript>: column

02:21:04
<transcript>: Column. We've plus one it and we bail out. Right. And then here we're just bailing for that cell if it doesn't meet these, if it doesn't check the box.

02:21:04
<transcript>: right

02:21:06
<transcript>: Right.

02:21:10
<transcript>: Oh. Is it greater than or equal to? Is it greater equal to.

02:21:10
<transcript>: from rider

02:21:13
<transcript>: From rider bottoms since the other trees of height.

02:21:16
<transcript>: Wait, wait. Interior.

02:21:16
<transcript>: where is it

02:21:17
<transcript>: Where is it.

02:21:17
<transcript>: shorter

02:21:20
<transcript>: Shorter than only considered trees in same row or column.

02:21:25
<transcript>: It has to be shorter. Right? Can be equal.

02:21:32
<transcript>: Yeah. Other trees of high five. Yeah. No. If those same height doesn't count. So that's not it.

02:21:33
tardidriss: "line 42 : co,ntinue" is wrong

02:21:34
<transcript>: Wrong here.

02:21:37
davur_: you bail the inner loop only... right?

02:21:42
<transcript>: 's a continue with a comment in it.

02:21:42
<transcript>: sounds bad

02:21:43
cowfacedude99: that continue is for the inner column right?

02:21:43
<transcript>: Sounds bad.

02:21:44
lopta: gravelink: What sort of things would you like to do with code?

02:21:47
<transcript>: I'm 42.

02:21:50
<transcript>: Sure.

02:21:57
<transcript>: You've bailed the inner loop, only right.

02:22:01
<transcript>: I mean.

02:22:03
<transcript>: Oh.

02:22:05
davur_: yeah you will always add 1

02:22:05
<transcript>: This is a loop.

02:22:14
<transcript>: Oh, what am I thinking? I'm dumb. Yeah, these aren't gonna bail. What up? How did this work for the sample.

02:22:20
<transcript>: So this one works because this is an aloo. But I'm going through every.

02:22:28
<transcript>: Yeah. No, this. This doesn't make this break make sense. Here. Now. How do I. How do I move on from this.

02:22:28
<transcript>: here

02:22:30
<transcript>: Here.

02:22:33
<transcript>: Oh, well, I can just do, like.

02:22:36
<transcript>: Yeah. We'll have like a bail.

02:22:41
<transcript>: I'm just gonna say Z, false.

02:22:43
<transcript>: False, false knot.

02:22:50
<transcript>: False. Is it that yes. So if I say Z, then like, here, we're gonna say Z is true.

02:22:50
<transcript>: right

02:22:50
nexxeln: False

02:22:51
<transcript>: Right.

02:23:07
gravelink: @lopta 1 make game apps, and 2nd make web pages cause i know alot of people who have asked me to help them make them cause i know how to build pc's not code them lol

02:23:10
<transcript>: Does this make sense? And then I can say.

02:23:18
<transcript>: Any of these being true means we bail. Right.

02:23:21
<transcript>: So if.

02:23:21
<transcript>: the

02:23:22
<transcript>: The iz.

02:23:24
<transcript>: Continue.

02:23:34
<transcript>: That gets the that gets the thing wrong. The sample is now wrong.

02:23:37
<transcript>: Did this wrong? What do I do wrong here.

02:23:39
<transcript>: Any of those cases.

02:23:43
tardidriss: you must return  t-4 --> return t

02:23:44
<transcript>: We want to we want to continue here. Right.

02:23:49
lopta: gravelink: Nice. Do already know some HTML and CSS?

02:23:50
<transcript>: Return P minus four.

02:23:57
<transcript>: You're saying I don't want to subtract for now? No, that doesn't get me to the right number anyway.

02:24:01
<transcript>: Let's see.

02:24:03
<transcript>: False.

02:24:06
<transcript>: You will always add one.

02:24:09
<transcript>: I will.

02:24:12
<transcript>: Honest Z is true.

02:24:14
<transcript>: Right.

02:24:16
<transcript>: Yeah.

02:24:22
<transcript>: Z we can continue.

02:24:26
davur_: that was from before the z change

02:24:27
<transcript>: Otherwise we're gonna do this. T plus equals one, right.

02:24:29
<transcript>: What am I missing.

02:24:29
gravelink: @lopta no... Iv never done anything of this nature

02:24:33
woofwoofdude: but now you ain't failing fast your iner loops (idk if it's what you wanted to do)

02:24:34
<transcript>: I continues for the inner column. Yeah, yeah, we figured that out.

02:24:39
<transcript>: I was from before the Z change.

02:24:43
<transcript>: What? Oh. Okay. Yeah.

02:24:46
<transcript>: Now you ain't failing fast.

02:24:51
<transcript>: Your inner loops. I don't know if that's what you wanted to do.

02:24:54
<transcript>: Oh, oh, good call? Yeah.

02:24:59
<transcript>: I still need the continue, man, I'm really bad at leak coding.

02:25:09
<transcript>: Really bad at it. People that didn't fix it. If Tr is greater than C, we say Z is true.

02:25:15
<transcript>: Oh, we need to then we need to.

02:25:27
davur_: a continue at the end of the loop is a noop

02:25:27
<transcript>: Do that. The bailing on each iteration. This is such bad code. Okay, so don't ever write this code for a real thing, but I think.

02:25:29
<transcript>: Still wrong.

02:25:32
<transcript>: What am I missing? Here.

02:25:32
<transcript>: basically

02:25:41
davur_: you can break if you want to bail

02:25:42
<transcript>: Basically, if any of these conditions happens, we want to get out of this whole cell. We want to know, add anything for this whole cell, right.

02:25:42
<transcript>: so

02:25:43
<transcript>: So.

02:25:51
<transcript>: Z equals true.

02:25:55
<transcript>: Wait it's tree is greater than.

02:25:57
<transcript>: Sell.

02:25:57
<transcript>: or

02:26:01
woofwoofdude: and you break in the iner loops to get out and continue the outer

02:26:02
<transcript>: Or equal to or equal to it's. Equal greater than or equal to.

02:26:05
<transcript>: Keep messing this stupid stuff up.

02:26:10
<transcript>: I mean, it's all stupid stuff, but we need to bail each time, right? Like.

02:26:18
<transcript>: Yeah, we need to do the IfZ continue on each step.

02:26:23
<transcript>: I can't believe it worked the first. How did that work.

02:26:23
<transcript>: it's not

02:26:27
<transcript>: It's not gonna work, is it? Now? It's twelve. Okay. I'm terrible at this.

02:26:30
<transcript>: You can break if you want a bail.

02:26:30
<transcript>: i continue at

02:26:33
<transcript>: I continue at the end of the loop is a Noop.

02:26:41
<transcript>: You break in the inner loops to get out and continue the outer.

02:26:45
<transcript>: So.

02:26:50
<transcript>: Now I'm.

02:26:50
<transcript>: bailing

02:26:52
<transcript>: Bailing out too often.

02:26:57
<transcript>: I'm so confused now, like I'm so removed from what I was originally riding.

02:26:57
<transcript>: that

02:27:02
<transcript>: That these seem right. Okay. So this code seems to check out that's handling.

02:27:02
<transcript>: the

02:27:04
<transcript>: The outer boundary.

02:27:05
davur_: most of those continues need to be breaks

02:27:09
<transcript>: Right.

02:27:14
<transcript>: I don't need to anymore.

02:27:20
<transcript>: And here I'm trying to say.

02:27:23
<transcript>: No, this is it's. His backward.

02:27:23
<transcript>: so

02:27:27
<transcript>: So I'm looking for a case where.

02:27:28
<transcript>: Any trees.

02:27:28
<transcript>: in that direction

02:27:31
<transcript>: In that direction is greater than.

02:27:35
<transcript>: C. I think I should invert that so we should assume.

02:27:39
<transcript>: We should assume that it can be seen.

02:27:41
<transcript>: Now.

02:27:46
<transcript>: No, we should assume that it can't be seen right.

02:27:51
<transcript>: And then.

02:27:54
lopta: Sea trees?

02:27:57
<transcript>: Try to prove that it could be seen from some direction? Yeah? Yeah? So we say.

02:27:57
<transcript>: true

02:27:58
<transcript>: True.

02:28:10
<transcript>: You know, I'm saying I had it backward, like we want to go through each of these and try and find a case where you can see it.

02:28:10
<transcript>: and

02:28:13
<transcript>: And if you can see it from any direction.

02:28:13
<transcript>: we're gonna

02:28:15
<transcript>: We're gonna add plus one.

02:28:26
<transcript>: So I need to like, invert so we're gonna say false. This is going away. That's good, because that was really ugly.

02:28:28
<transcript>: And then Z.

02:28:28
<transcript>: this is

02:28:30
<transcript>: This is gonna be like this.

02:28:37
<transcript>: So if tree.

02:28:37
<transcript>: no so

02:28:39
<transcript>: No. So it's got to be all the trees.

02:28:42
<transcript>: We gotta go through all the trees.

02:28:42
<transcript>: in that

02:28:44
<transcript>: In that loop.

02:28:47
<transcript>: I'm so tired.

02:28:52
<transcript>: Most of those continues need to be breaks.

02:28:57
<transcript>: Let me think about this for a second. So.

02:28:57
<transcript>: i'm

02:29:00
<transcript>: I'm going through each.

02:29:00
<transcript>: tree

02:29:02
<transcript>: Tree to the left of it.

02:29:05
<transcript>: If all of those trees pass the test.

02:29:09
<transcript>: Then it should be visible.

02:29:12
<transcript>: Okay. So.

02:29:18
<transcript>: It's not visible by the default here. That's our first right, and then.

02:29:23
<transcript>: If all the trees.

02:29:23
<transcript>: or any

02:29:26
<transcript>: Or any tree is greater than or equal in that direction.

02:29:37
<transcript>: Now.

02:29:38
davur_: ifX then you continue the loop... else? you also continue

02:29:41
<transcript>: If any tree is less than.

02:29:45
<transcript>: Every tree is less than.

02:29:53
<transcript>: Is this so hard? I'm so I'm so dead? My brain is dead.

02:29:57
<transcript>: If X then you continue to loop L to also continue.

02:30:01
<transcript>: Yeah.

02:30:02
davur_: that continue does nothing

02:30:12
<transcript>: So I think I need to invalidate. I need to be going through all the trees and looking for a case where I invalidate this bird.

02:30:14
<transcript>: Like.

02:30:25
<transcript>: If the tree is greater than or equal to see this thing, this whole thing.

02:30:32
<transcript>: Is not a valid path, but that doesn't mean they couldn't still be a valid tree in another direction.

02:30:32
<transcript>: so

02:30:33
<transcript>: So.

02:30:33
<transcript>: okay

02:30:34
<transcript>: Okay.

02:30:43
<transcript>: False.

02:30:52
<transcript>: Okay. So now we have a state that represents.

02:30:52
<transcript>: wait why

02:30:53
lopta: gravelink: ...and you can learn to code for non-Web stuff too of course.

02:30:55
<transcript>: Wait. Why am I continuing here.

02:30:57
<transcript>: Why am I even continuing.

02:30:57
<transcript>: i don't need to

02:30:59
<transcript>: I don't need to do that.

02:31:02
<transcript>: If okay. So we go through all the direction.

02:31:09
<transcript>: Any of them being taller now makes Z one true. Which means.

02:31:18
<transcript>: All of these. All the Z one. All the Z's are gonna have to be false. Yeah, yeah. Okay. Z two equals false.

02:31:18
<transcript>: and

02:31:22
<transcript>: And this is gonna be.

02:31:22
<transcript>: z two

02:31:24
<transcript>: Z Two. Okay.

02:31:26
<transcript>: Z two, and then.

02:31:31
<transcript>: Z.

02:31:38
<transcript>: Oh, these three equals false. Am I gonna finish this puzzle before the next one? Yeah, I've got 30 minutes. Okay.

02:31:38
<transcript>: z three

02:31:42
<transcript>: Z three equals False. That's gonna be.

02:31:45
<transcript>: Three equals true.

02:31:46
gravelink: @lopta what do you recommend to start? for a decent job .... ha...

02:31:46
okufa_f: i see you're using enumerate, did you at first go like, why the hell can't i just natively have index, javascript is so much better

02:31:48
<transcript>: Okay.

02:31:48
<transcript>: and then

02:31:49
<transcript>: And then.

02:31:49
<transcript>: forget

02:31:51
<transcript>: Forget those.

02:31:55
<transcript>: Before equals fall.

02:32:02
<transcript>: As bad as you can botch one.

02:32:02
nexxeln: im back, are you still on part 1

02:32:13
<transcript>: Before falls, we're getting all the bad stuff out, you know, shaking it off, and then we're gonna do so good on this next one. I'm gonna need this continues. Okay, so now the only way we can add.

02:32:20
<transcript>: The only way we can add a one is if any of those are false, right.

02:32:24
<transcript>: Right.

02:32:29
<transcript>: If any of those are false, we add one.

02:32:33
<transcript>: So if.

02:32:37
<transcript>: Not.

02:32:41
<transcript>: Z two, right.

02:32:44
<transcript>: Or not. Z three.

02:32:44
<transcript>: or

02:32:47
<transcript>: Or not.

02:32:47
<transcript>: the four there

02:32:49
<transcript>: The Four. There's a better way to do that. Right.

02:32:52
<transcript>: Oh, well, for one thing.

02:32:57
<transcript>: Like that.

02:33:02
<transcript>: Is that not you do it. You can't just do not. Can you? I have to say like.

02:33:08
nexxeln: its or

02:33:09
<transcript>: Equals false. This is terrible. What is the there's something obvious here about.

02:33:09
<transcript>: what

02:33:11
tardidriss: maybe you should try check if the exemple tree given as example of visible/not visible correct

02:33:12
<transcript>: What this boolean would be.

02:33:12
<transcript>: i'm still

02:33:15
<transcript>: I'm still on part one. Next. No judging.

02:33:15
<transcript>: see you're using

02:33:16
davur_: stop saying "not z" it sounds like...

02:33:23
<transcript>: See you're using enumerate. Did you at first go like why the hell can't I just natively have index JavaScript is so much better. Yeah, kind of.

02:33:23
<transcript>: what do you

02:33:26
<transcript>: What do you recommend to start for decent. Oh, wait. You guys.

02:33:26
tardidriss: || --> or

02:33:29
lopta: gravelink: It has been a very, very long time since I did any software professionally. I'm too old-fashioned for today's stuff.

02:33:30
<transcript>: Or.

02:33:31
<transcript>: Oh.

02:33:37
<transcript>: Okay, so the knots were okay. I just shouldn't have used JavaScript, Ors is that what you're telling me.

02:33:45
<transcript>: Is that valid.

02:33:45
<transcript>: can i

02:33:47
<transcript>: Can I do not like that.

02:33:50
<transcript>: Now.

02:33:51
tardidriss: ! --> not

02:33:54
<transcript>: Z equals false.

02:33:56
<transcript>: Four.

02:33:56
<transcript>: that

02:33:58
<transcript>: That equals false.

02:34:00
<transcript>: Four.

02:34:04
<transcript>: That equals false.

02:34:04
<transcript>: or

02:34:06
<transcript>: Or.

02:34:12
<transcript>: That equals false. So I think to be a good, competitive programmer, you probably need to know the language that you're using.

02:34:12
<transcript>: that's probably

02:34:18
<transcript>: That's probably a first step. Okay. Still not getting the right answer on the sample data.

02:34:24
davur_: if a or b or c or d:

02:34:25
<transcript>: We're getting 15 or seven trees short. What am I doing wrong here.

02:34:29
<transcript>: D four, Z, three, Z, Two Z one. If any of those is true.

02:34:29
<transcript>: or

02:34:31
<transcript>: Or false? I'm sorry.

02:34:31
<transcript>: then that means

02:34:34
<transcript>: Then that means it's visible from the outside, right.

02:34:39
<transcript>: I'm missing some trees, though.

02:34:42
<transcript>: Missing some trees.

02:34:42
<transcript>: the four z three

02:34:45
<transcript>: The four Z, three Z, two Z, one.

02:34:49
<transcript>: If A or B or C or D.

02:34:50
davur_: if not ( a or b or c or d):

02:34:54
<transcript>: Oh, you can say not thank you.

02:35:01
<transcript>: If not A or B or C or D if not A or B? Is that right.

02:35:07
<transcript>: Because if in of those are false.

02:35:11
<transcript>: Wait.

02:35:11
lopta: If you're testing for any of them to be false, couldn't you just and them?

02:35:14
<transcript>: They just can't all be true.

02:35:17
<transcript>: Yeah.

02:35:19
<transcript>: Wait.

02:35:24
davur_: maybe I have the logic wrong...

02:35:25
lopta: if (a and b and c and d) ?

02:35:28
<transcript>: Yeah. Could we just end them? Is that what it is? I mean, it's all wrong anyway. Everything's wrong.

02:35:33
<transcript>: I'm bad at this. I don't know what I'm doing here.

02:35:35
<transcript>: Z, two.

02:35:45
<transcript>: Or equal to I've got those right. Right. If the tree is greater than equal to the current cell.

02:35:49
<transcript>: Yeah.

02:35:52
cowfacedude99: do you want a hint?

02:35:52
lilfreezi: you look so handsome today

02:35:55
<transcript>: I have these right? Is it matrix row index, then column index.

02:35:57
<transcript>: Is that right.

02:36:02
lilfreezi: i feel the moisture formulating

02:36:05
<transcript>: I do want to hint. Yes. Well, thank you, Lil. Freezie. I believe Lil Freeze is the person who's always telling me.

02:36:08
lilfreezi: LUL

02:36:11
<transcript>: That I'm looking handsome or them breedable. Or you said a lot of things.

02:36:14
<transcript>: That I've known you.

02:36:15
lilfreezi: it might be me

02:36:18
<transcript>: I want to hint cow face give me a hint.

02:36:18
lopta: I'm off to play Minecraft for a bit while my computer builds the GIMP...

02:36:21
lilfreezi: i call it "i got hacked"

02:36:25
okufa_f: @LilFreezi monkaHmm

02:36:26
<transcript>: No problem. Laughter thanks for coming and hanging out for a bit.

02:36:29
<transcript>: I'm really sleepy.

02:36:29
<transcript>: so

02:36:31
<transcript>: So it's hard to imagine.

02:36:35
<transcript>: That in 30 minutes, I'm gonna do another coding puzzle.

02:36:35
<transcript>: my brain

02:36:37
<transcript>: My brain wants to be asleep.

02:36:43
lilfreezi: bro day 8 murdered me

02:36:46
<transcript>: What do we think? Am I gonna make it? I think in December's, I'm gonna have to drastically change my lifestyle to be an admin of Code competitor.

02:36:50
<transcript>: They ate mergered you.

02:36:50
<transcript>: okay

02:36:56
<transcript>: Okay. Let's think about this cafe. So I'll take that hint whenever. But let's think about what I did wrong here.

02:37:01
okufa_f: drink an espresso

02:37:02
<transcript>: So Z, one.

02:37:09
<transcript>: Z two. Z two is freeze. And just make sure I have all the basic stuff, right? Wonderful.

02:37:16
cowfacedude99: You can start at the tree and go in 4 directions and check if there is a tree that is equal or bigger.

02:37:18
<transcript>: The first index would be the row index. Yeah. And then the next index would be, Yeah.

02:37:23
<transcript>: Unless I have that backward because Python and I just am done.

02:37:23
<transcript>: do i have

02:37:26
<transcript>: Do I have these right? X is less than row index.

02:37:26
<transcript>: x is

02:37:29
<transcript>: X is greater than row index.

02:37:48
<transcript>: If all of them are false, or if any of them are false.

02:37:51
<transcript>: We add plus one Yeah.

02:37:52
lopta: I was thinking earlier today that I shouldn't watch coding streams because a) I don't know modern languages and b) I can't read the text anyway.  You have yours set to a nice size, which helps.

02:38:03
<transcript>: You can start at the tree and go in four directions and check if there's a tree that is equal or bigger.

02:38:05
lopta: ...so of course I followed you this evening ;-)

02:38:07
<transcript>: I think that's what we're doing, isn't it.

02:38:07
<transcript>: we're

02:38:15
<transcript>: We're going through each tree, and we're going an awkward directions and check if there's a tree that is equal or bigger. Yeah, we're doing that right.

02:38:25
<transcript>: I was thinking earlier today that I shouldn't watch coding streams because A, I don't know modern languages, and B, I can't read the text anyway.

02:38:25
<transcript>: you have

02:38:31
<transcript>: You have your set to a nice size, which helps. Oh, I'm going to read it. It's a terrible font, probably, but.

02:38:31
<transcript>: my

02:38:34
<transcript>: My size. That's cool.

02:38:38
<transcript>: Aws is live.

02:38:38
<transcript>: what are

02:38:39
<transcript>: What are you doing.

02:38:43
<transcript>: Just chatting. Eks clusters. Something.

02:38:48
lopta: if !(a AND b AND c AND d) { do the thing }

02:38:49
lopta: ?

02:38:52
<transcript>: We've reached the point where my voice is beginning to fail because my body is like, Whoa, why are you still awake? This is weird.

02:39:00
<transcript>: Top middle five is visible from top and right. I guess we could read more. Top right. One is not visible for me director to be visible there would need to only be.

02:39:04
<transcript>: Trees of height zero between an edge.

02:39:07
tiredbeaver: 27 min until day9

02:39:09
tiredbeaver: I'm ready

02:39:11
<transcript>: I'm doing something done, but I don't know what.

02:39:15
<transcript>: 27 minutes until day Nine. You're ready? Tired. Beaver.

02:39:15
<transcript>: if

02:39:20
<transcript>: If not A and B and C and D do the thing.

02:39:20
<transcript>: yeah i think

02:39:21
cowfacedude99: me too.

02:39:22
nexxeln: i gotta take a shower before aoc

02:39:23
nexxeln: brb

02:39:23
<transcript>: Yeah, I think you're right. Laughter I think so.

02:39:24
timtechv2: your code looks exactly like mine LUL

02:39:30
timtechv2: great minds think alike

02:39:31
<transcript>: My code looks exactly like your Tim Tech. Does yours work.

02:39:31
nexxeln: !lurk

02:39:33
<transcript>: Mine doesn't work.

02:39:36
<transcript>: Next.

02:39:37
timtechv2: yea

02:39:43
tardidriss: you always compare with ri

02:39:44
<transcript>: Ways I could be messing this up it's really hard to say.

02:39:51
<transcript>: This one's gonna return wrong until I've started.

02:39:51
<transcript>: actually

02:39:54
<transcript>: Actually working on it, you know.

02:40:07
<transcript>: My experiment in competitive programming so far, Rocky Start. But you know it's day one, it's day one.

02:40:10
<transcript>: It's getting the Reds in learning Python.

02:40:10
<transcript>: i'm just

02:40:12
<transcript>: I'm just paving the way.

02:40:16
<transcript>: For what will be a long and illustrious career.

02:40:16
<transcript>: i get off the ground

02:40:18
<transcript>: I get off the ground.

02:40:19
tiredbeaver: wait it's day 8 though

02:40:22
tiredbeaver: im confused

02:40:23
<transcript>: For Tr in X for IX in a numerate R if.

02:40:23
<transcript>: i

02:40:26
tiredbeaver: day 9*

02:40:27
<transcript>: I. So if the index is less than the row index.

02:40:27
<transcript>: so the

02:40:30
<transcript>: So the row index could be one.

02:40:35
<transcript>: If it's less than so, only zero would count.

02:40:37
<transcript>: Oh.

02:40:41
<transcript>: No.

02:40:50
<transcript>: And then we also check for if I is greater than the row index. So throw index is one if it's two.

02:40:53
<transcript>: And greater.

02:40:53
<transcript>: yep

02:40:56
<transcript>: Yep. Okay. So that's all of them.

02:41:00
<transcript>: If the tree is greater than or equal to C.

02:41:00
<transcript>: then that

02:41:03
<transcript>: Then that one is failed.

02:41:04
<transcript>: Right.

02:41:15
<transcript>: Can mess these up the column ones. So for I and extra X and range length matrix.

02:41:20
<transcript>: So I've got from zero.

02:41:22
<transcript>: To the length of the matrix.

02:41:22
<transcript>: the

02:41:25
<transcript>: The links? Oh, Oh.

02:41:28
<transcript>: The length of the matrix.

02:41:32
<transcript>: Like in this case would be five.

02:41:40
<transcript>: So when we do a range with five in it, do we get zero through four? Or do we get zero through.

02:41:43
<transcript>: Python branch.

02:41:46
<transcript>: Wrote.

02:41:46
<transcript>: let's

02:41:48
<transcript>: Let's try it ourselves.

02:41:52
<transcript>: I could just read if it says like, Inclusive or whatever.

02:41:57
davur_: you can count backwards with range "for i in range(ci,-1,-1):

02:41:57
<transcript>: So.

02:41:57
<transcript>: range six

02:42:00
<transcript>: Range Six gives you Zero through five.

02:42:00
<transcript>: so

02:42:03
<transcript>: So for X in range.

02:42:03
<transcript>: link

02:42:05
<transcript>: Links of the matrix of these zero.

02:42:05
<transcript>: through

02:42:07
<transcript>: Through four.

02:42:07
<transcript>: if

02:42:10
<transcript>: If X is less than.

02:42:13
<transcript>: An Astral.

02:42:22
<transcript>: If X is less than the row index.

02:42:22
<transcript>: yeah

02:42:24
<transcript>: Yeah.

02:42:26
<transcript>: I don't see what's wrong with this.

02:42:30
tiredbeaver: my day 8 in rust was also messy but it worked

02:42:31
<transcript>: Let me do if X is greater than the row index here.

02:42:40
<transcript>: We got all our greater than our equals, right? Yeah.

02:42:47
<transcript>: So what we could do.

02:42:54
<transcript>: For running all those to be false, right.

02:43:04
<transcript>: I don't know my brain is so tired.

02:43:08
tardidriss: there is always comparison with row index never with column index

02:43:11
<transcript>: Anybody see it. It makes the problem. You can count backwards with range for I and range.

02:43:13
<transcript>: Ci minus one minus one one.

02:43:21
<transcript>: It's day nine for you tired beat Beaver. Maybe but I'm in the Central time in the United States.

02:43:30
<transcript>: You can always you always compare with Row index. Is that wrong? Oh, should it be Colin Index? Wait a minute.

02:43:32
<transcript>: Wait.

02:43:32
<transcript>: it should

02:43:35
<transcript>: It should be column index wait.

02:43:35
<transcript>: yeah yeah

02:43:36
<transcript>: Yeah, Yeah.

02:43:45
<transcript>: But for the first one, I'm trying to see the one to the left of it. If I is less than that should be. Oh, that should be.

02:43:46
<transcript>: Oh.

02:43:51
<transcript>: Still not right? 17.

02:43:51
<transcript>: are we

02:43:56
<transcript>: Are we four short? Are we seriously foreshort? Should I not be surprised.

02:43:58
<transcript>: Should I not be doing this.

02:44:01
<transcript>: I should not be doing that.

02:44:03
<transcript>: That's funny.

02:44:03
<transcript>: oh nothing

02:44:05
<transcript>: Oh, Nothing. Right answer.

02:44:07
<transcript>: Interest too high.

02:44:07
<transcript>: what i

02:44:10
<transcript>: What I what I guess earlier.

02:44:18
<transcript>: 97, 97. That was way high.

02:44:18
<transcript>: okay

02:44:19
<transcript>: Okay.

02:44:22
<transcript>: So.

02:44:22
<transcript>: i don't think

02:44:25
<transcript>: I don't think I should have subtracted for because.

02:44:35
<transcript>: Well, no. Yeah, I should have. No, I should. It should be subject for the subtracting. For is just the corners because we're double counting them, right? Yeah. The rain.

02:44:35
<transcript>: rosy ro

02:44:38
<transcript>: Rosy Row Calendar. Yeah, yeah, we're double counting them.

02:44:44
<transcript>: So we're still getting 17. We're still short.

02:44:52
<transcript>: Oh, if it's I is less than let me see about this. Did I get these wrong? So.

02:44:56
<transcript>: Let's.

02:45:04
<transcript>: Guessing at this point. But is it is it here that I messed this up.

02:45:07
<transcript>: Now.

02:45:14
<transcript>: I should be able to think through it. So this is going we're trying to go through all the columns.

02:45:19
<transcript>: All the cells in one column.

02:45:20
tardidriss: there result2 is wrong but result1?

02:45:27
davur_: i may have brought up the double counting... but I'm not sure you are double counting at all anymore

02:45:28
<transcript>: Those should be the row index. Right? The row? Yeah. These should have been CI. So that was a good change. Right.

02:45:43
<transcript>: And enumerate R? R is the row.

02:45:43
<transcript>: renewal

02:45:44
<transcript>: Renewal.

02:45:53
<transcript>: If the index is less than the column index.

02:46:03
<transcript>: Serena through all the other records in that row.

02:46:09
<transcript>: All the other trees in the row.

02:46:15
<transcript>: If the index is less than the column index, or if it's greater than the column index.

02:46:18
<transcript>: Yeah.

02:46:18
<transcript>: that

02:46:21
<transcript>: That seems seems more right now.

02:46:27
<transcript>: Do I have the backward.

02:46:27
<transcript>: let's just

02:46:28
<transcript>: Let's just.

02:46:33
<transcript>: Imagine here. Oh, wait, wait.

02:46:33
<transcript>: wait

02:46:34
<transcript>: Wait.

02:46:34
<transcript>: row index

02:46:37
<transcript>: Row, index. And index. Yeah, that's right.

02:46:40
<transcript>: But should it be index.

02:46:40
<transcript>: and row in

02:46:44
<transcript>: And row INEX. Is this backward? Do I not know how Python works.

02:46:46
<transcript>: That backward.

02:46:49
<transcript>: Now.

02:46:54
<transcript>: And that would make sense. I think the way I the way that matrix.

02:46:59
<transcript>: C, is I'll.

02:47:01
<transcript>: Tree height right.

02:47:01
<transcript>: he is

02:47:04
<transcript>: He is the value. Yeah.

02:47:04
<transcript>: we're enumerating

02:47:06
<transcript>: We're enumerating R.

02:47:08
<transcript>: How's.

02:47:09
<transcript>: This so hard.

02:47:20
<transcript>: Count backwards with rain. Let's see it's always comparison with row index. Never with comment X. Yeah, we fix that.

02:47:20
<transcript>: the result

02:47:22
<transcript>: The result. Two.

02:47:25
<transcript>: Is wrong but result one.

02:47:34
<transcript>: May have brought up the double counting, but I'm not sure you are double counting. It all anymore. Yeah. I don't think I'm double counting. I think I'm under. I mean, I'm undercounting.

02:47:41
<transcript>: Like here.

02:47:53
<transcript>: Oh, no, no. I shouldn't subtract for because we're going through everything. We only go through a cell one time. This still doesn't give us the right answer.

02:48:01
<transcript>: Because we just tried that we did. They didn't submit it again because we've previously guessed it.

02:48:05
<transcript>: 22, 58.

02:48:05
<transcript>: so

02:48:08
<transcript>: So we're still off somewhere.

02:48:11
<transcript>: Maybe close. I don't know.

02:48:14
<transcript>: The other corners.

02:48:14
<transcript>: we're only going

02:48:21
<transcript>: We're only going through each cell one time. So there's no subtracting four needed because.

02:48:28
<transcript>: Yeah, we're just gonna go through each cell one time.

02:48:31
<transcript>: Oh, what are these? Minus ones.

02:48:31
<transcript>: or the minus

02:48:32
<transcript>: Or the minus ones.

02:48:38
<transcript>: One of those minus ones.

02:48:46
<transcript>: If if the index is zero, it's a row index is zero or the row index.

02:48:46
<transcript>: the length

02:48:51
<transcript>: The length of the matrix. So if that's five. Yeah, then it would be four. Yeah, that's right.

02:48:51
<transcript>: the length

02:48:55
<transcript>: The length of R minus one.

02:49:00
<transcript>: So CI equals Zero. Okay.

02:49:03
<transcript>: Is that right? Did I get that right.

02:49:08
<transcript>: Am I getting the first and last rows, first and last columns. Correct.

02:49:11
<transcript>: Throat, OOH.

02:49:30
<transcript>: So we count up all of them in the first row.

02:49:34
<transcript>: And all of them in the first column.

02:49:42
<transcript>: And then all of them in the last row.

02:49:46
<transcript>: And all of them in the last column.

02:49:52
<transcript>: Right.

02:49:54
<transcript>: Yeah.

02:49:57
<transcript>: I don't know.

02:49:57
<transcript>: forgetting

02:50:02
<transcript>: Forgetting the right answer on the sample input now, but we're getting the wrong answer.

02:50:02
<transcript>: actual

02:50:03
<transcript>: Actual input.

02:50:07
<transcript>: Is it possible.

02:50:10
<transcript>: That my input is.

02:50:10
<transcript>: damaged

02:50:11
<transcript>: Damaged.

02:50:14
<transcript>: Is it possible that.

02:50:18
restarted: do you need lines 17-23? can't the rest just loop though it all including the first and last row and first and last column?

02:50:19
<transcript>: Main PY. Is it possible if this gets data.

02:50:22
<transcript>: A year.

02:50:28
<transcript>: You said pprant.

02:50:31
tardidriss: i would rewrite all four "for loop" in the same way to be sure row and column not messed up

02:50:41
<transcript>: Oh, is there like a new line at the end? Is there a new line.

02:50:43
<transcript>: No.

02:50:46
<transcript>: It's not a new line, right.

02:50:51
<transcript>: Or something dumb, but I'm not handling at the end or at the beginning.

02:51:04
<transcript>: Just make sure this looks like our puzzle. And put three.

02:51:04
<transcript>: and then

02:51:06
<transcript>: And then it ends with.

02:51:13
<transcript>: 021-2021 two and Yeah.

02:51:20
davur_: from pprint import pprint

02:51:24
davur_: pprint(data)

02:51:26
<transcript>: Do you need line 17 through 23? Can't the rest just loop through it all, including the first and last row and first and last column.

02:51:34
<transcript>: I would rewrite all four for loop in the same way to be sure row and column not messed up.

02:51:36
<transcript>: Yeah. Let's see here.

02:51:36
<transcript>: i mean i only got

02:51:38
<transcript>: I mean I only got like 15 minutes till the next.

02:51:38
<transcript>: day start

02:51:46
<transcript>: Day starts and I haven't figured out how to do that in my main Pi yet. Let's have that hard code the day.

02:51:50
<transcript>: Let's see.

02:51:55
<transcript>: So I don't want to.

02:51:59
<transcript>: Put the data anymore.

02:52:11
<transcript>: So you're saying you would rewrite what was the first so restarted. Do you need line 17 through 23.

02:52:11
<transcript>: seventeen

02:52:13
<transcript>: 17. Here.

02:52:17
<transcript>: Through 23. Oh, do I not need these.

02:52:20
<transcript>: Oh, maybe not.

02:52:20
<transcript>: that's who you're saying

02:52:24
<transcript>: That's who you're saying, because I should be covered in the other logic.

02:52:31
<transcript>: It gives me the same answer. 22, 58. So, yeah, you're right. I don't need those.

02:52:31
<transcript>: i was dumb

02:52:32
<transcript>: I was dumb.

02:52:32
<transcript>: because all

02:52:34
<transcript>: Because all.

02:52:38
<transcript>: That'll pay off here like these will these will work.

02:52:44
<transcript>: Previously guessed 22, 58.

02:52:44
<transcript>: who thinks

02:52:46
<transcript>: Who thinks it's off by one.

02:52:58
<transcript>: I don't know how it would be off that one.

02:53:00
<transcript>: I is less than.

02:53:04
<transcript>: Then we go through all the.

02:53:07
<transcript>: Greater than.

02:53:16
<transcript>: Numerate the row.

02:53:20
<transcript>: We have the index and the value.

02:53:52
restarted: can you share your input? I just want to see how close you are without saying anything. Need to take off soon.

02:54:00
<transcript>: Can you share your input? Just want to see how close you are with that. Say anything. Yeah, Yeah.

02:54:00
<transcript>: sure

02:54:01
<transcript>: Sure.

02:54:01
<transcript>: how

02:54:03
<transcript>: How do you want me to do that.

02:54:11
restarted: pastebin?

02:54:15
restarted: or that

02:54:26
adamdotdev: https://gist.github.com/adamelmore/0499c5f1ddd22aa90eb618aa641881cb

02:54:37
<transcript>: Okay. What have I done? What have I done.

02:54:46
tardidriss: if z1 == False and z2 == False and z3 == False and z4 == False

02:54:51
<transcript>: Am I double? Yeah, my double counting or an I. So it's too high? So I'm double counting something. I'm double counting.

02:54:54
<transcript>: Somehow.

02:54:54
davur_: waaait... do different users get different inputs??

02:55:00
<transcript>: Maybe.

02:55:05
<transcript>: Yeah? We all get different inputs? Ever.

02:55:05
restarted: Thanks

02:55:12
restarted: yes @davur_

02:55:13
<transcript>: If Z equals false and Z two equals and Z two false and Z four. Why would those be an Zo? Because.

02:55:15
davur_: man didn't know that

02:55:16
tardidriss: (and instead of or)

02:55:17
<transcript>: If it's any direction, it's visible, right.

02:55:17
<transcript>: i guess

02:55:20
<transcript>: I guess that wrong. Is it not if it's.

02:55:22
<transcript>: Is it not.

02:55:25
davur_: but it makes sense

02:55:26
<transcript>: If it's visible for many direction, it's visible right.

02:55:38
<transcript>: So Z. One being false. Means if any of those are false, that means it's visible from that direction.

02:55:41
<transcript>: It means it escapes.

02:55:48
<transcript>: I could have done I could have inverted that I could have said, These are true.

02:55:48
<transcript>: and these

02:55:50
<transcript>: And these are false.

02:55:57
davur_: the z vars are "is_blocked1"

02:56:09
<transcript>: On this and then the down here. I could just say if.

02:56:20
<transcript>: You.

02:56:21
<transcript>: Right.

02:56:27
davur_: so if is_blocked1 == false or is_blocked2 == false ..

02:56:49
<transcript>: The Zivars are is blocked.

02:56:51
davur_: now Z is is_visible....

02:56:59
<transcript>: So I gave the same answer. Obviously.

02:58:19
<transcript>: Now Z is visible.

02:58:23
<transcript>: Yeah, sorry. I was texting my wife.

02:58:32
<transcript>: So if it's visible from any of those directions.

02:58:32
<transcript>: then we add

02:58:35
<transcript>: Then we add one to T.

02:58:36
<transcript>: Right.

02:58:59
<transcript>: Z, one, Z, two, Z, threez, four. I keep checking those variable names, thinking I mess one up.

02:59:02
woofwoofdude: pretty sure those ors should be ands. z=false means it's not visible

02:59:14
<transcript>: Pretty sure those ores should be ansiefold means it's not visible. Wait, wait.

02:59:20
<transcript>: Default means yeah, default means it's not visible.

02:59:24
<transcript>: It's. One of them was too tall.

02:59:24
<transcript>: so

02:59:25
<transcript>: So.

02:59:28
<transcript>: You're saying down here, if it's.

02:59:28
<transcript>: false

02:59:29
<transcript>: False.

02:59:34
<transcript>: I'll my head, my brain if it's false.

02:59:40
<transcript>: If any of them are true.

02:59:44
restarted: I think the or logic is good. if any are true add 1

02:59:46
<transcript>: Wait. Yeah. Any of them are true. That means it's visible.

02:59:54
<transcript>: Right think the or logic is good if any are true ad one yeah I think so.

02:59:59
<transcript>: Oh, man.

03:00:01
woofwoofdude: i need to read the assignment. what's the goal here sorry

03:00:03
<transcript>: I want to do one live because I'm never gonna say it this late again.

03:00:10
<transcript>: So I have to stay up and do this next one, but I can't do I don't want to do the next one until I get this one done.

03:00:32
<transcript>: So easily be.

03:00:38
<transcript>: Misunderstanding in mind in Python. I don't think so. Those ranges are good, right.

03:00:38
<transcript>: link to the matrix

03:00:39
<transcript>: Link to the matrix.

03:00:42
<transcript>: Is us the height.

03:00:47
<transcript>: So we want to loop through every index.

03:00:49
<transcript>: Every Row index.

03:00:52
<transcript>: Right.

03:00:55
<transcript>: Wait a minute, wait a minute.

03:00:55
<transcript>: wait a minute

03:00:57
<transcript>: Wait a minute.

03:00:57
<transcript>: now

03:00:58
<transcript>: Now.

03:01:01
<transcript>: No.

03:01:01
<transcript>: yes

03:01:03
restarted: in a matrix, what is r and c? not familiar with python

03:01:04
<transcript>: Yes. Wait.

03:01:11
<transcript>: So up here we're going left to right. So we're going we're enumerating R.

03:01:11
<transcript>: which is

03:01:13
<transcript>: Which is one of the rows.

03:01:16
<transcript>: If we enumerate a string.

03:01:20
<transcript>: Do I know how enumerating a string works.

03:01:20
<transcript>: if

03:01:21
restarted: index and value?

03:01:23
<transcript>: If you enumerate if R is a string.

03:01:28
<transcript>: R is a string. No.

03:01:28
<transcript>: r

03:01:29
restarted: ci/c that is

03:01:30
<transcript>: R is an array.

03:01:30
<transcript>: which i know that

03:01:32
<transcript>: Which I know that.

03:01:32
<transcript>: yeah

03:01:37
tardidriss: there is 7 example of tree visible or not in the problem i would check if you have them correct

03:01:37
<transcript>: Yeah, I'm just getting the index with yeah, yeah, that's fine. Okay.

03:01:37
<transcript>: so

03:01:41
<transcript>: So I'm like at that sleepy point where you're paranoid.

03:01:50
<transcript>: In a matrix. What is RNC? Not familiar with Python? I mean, I don't know. I'm doing Rowan column.

03:01:57
<transcript>: What's the goal here? We're trying to figure out if how many trees are visible from any direction.

03:02:04
<transcript>: This is I should have just gone to bed and woken up early and done.

03:02:04
<transcript>: in a matrix

03:02:09
<transcript>: In a matrix. Let's see index and value. Cioci is.

03:02:09
<transcript>: column index

03:02:12
<transcript>: Column index C is the actual value.

03:02:12
<transcript>: in that

03:02:19
<transcript>: In that matrix seven example of tree visible or not in the problem. I would check if you have them correct.

03:02:22
<transcript>: Oh like you want to add actually look at.

03:02:22
<transcript>: the

03:02:25
<transcript>: The sample. You mean.

03:02:25
<transcript>: seven example

03:02:27
<transcript>: Seven example of tree visible or not in the problem.

03:02:33
woofwoofdude: yeah okay, my bad, so if it's visible for at least one side (one z is true) then it's good

03:02:34
<transcript>: So like ignoring all those.

03:02:34
<transcript>: saying figure out

03:02:37
<transcript>: Saying, figure out which seven, and make sure I got those right.

03:02:41
<transcript>: Yeah, that's right with dude.

03:02:44
woofwoofdude: the ors are good

03:02:48
<transcript>: Are you saying, tardy, I should go through individually and make sure the ones I think are right or right.

03:02:48
<transcript>: i'm not just accidents

03:02:51
<transcript>: I'm not just accidents. Getting the sample correct.

03:02:55
<transcript>: I was trying to figure out if so if I knew.

03:02:59
<transcript>: That's a whole row. It's gonna give you the index.

03:02:59
<transcript>: and the x

03:03:01
<transcript>: And the X value.

03:03:04
<transcript>: I only am taking the X.

03:03:07
<transcript>: Is be this value.

03:03:09
<transcript>: Right.

03:03:16
<transcript>: But I'm saying if I is less than the column index.

03:03:22
woofwoofdude: why don't you debug from the example data ?

03:03:23
<transcript>: So that's all the ones to the left if I is greater than down here, that's all the ones to the right.

03:03:29
<transcript>: Go through every one of them if any one of them if the tree is too tall.

03:03:29
<transcript>: we

03:03:32
<transcript>: We Mark the thing is false.

03:03:36
<transcript>: If tree is greater than or equal to.

03:03:36
<transcript>: our tree

03:03:37
cowfacedude99: 2 min to go

03:03:38
<transcript>: Our tree in question, which is C.

03:03:41
<transcript>: Right.

03:03:46
<transcript>: Then we say, Nope, not visible. That direction.

03:03:49
<transcript>: Okay.

03:03:56
<transcript>: I is less than CI greater than CI. And then down here we're doing.

03:03:58
<transcript>: Four.

03:03:58
<transcript>: every number

03:04:02
<transcript>: Every number in the length of the matrix.

03:04:10
<transcript>: I got three minutes till the next one. Okay. I'm just gonna try this because it's driven me crazy.

03:04:10
<transcript>: what if i

03:04:12
<transcript>: What if I did the length of.

03:04:16
<transcript>: The length of the row. It's the length of the matrix.

03:04:18
<transcript>: What if I did.

03:04:25
<transcript>: Range.

03:04:29
<transcript>: If we go through every.

03:04:31
<transcript>: Row.

03:04:34
<transcript>: If X.

03:04:38
<transcript>: Is less than the row index.

03:04:39
cowfacedude99: you can circle back to this one later after solving day 9.

03:04:55
<transcript>: So that's the ones above it, and then the ones below it would be X is greater than the row index. Two minutes ago, you can circle back to this one after solving day Nine. Yeah, I guess I can. Yeah. Okay. Let's get prepped for day nine.

03:04:55
<transcript>: so

03:04:59
<transcript>: So to do day nine? I'm gonna need to do what I'm gonna need to create.

03:04:59
<transcript>: a

03:05:00
<transcript>: A.

03:05:04
<transcript>: Nine, Pi.

03:05:07
<transcript>: We're gonna do this.

03:05:15
<transcript>: I'm gonna delete everything.

03:05:26
<transcript>: My brain is so slow right now.

03:05:32
<transcript>: Okay.

03:05:44
<transcript>: So T zero. So I'm gonna delete everything.

03:05:49
<transcript>: I'm gonna leave that.

03:05:52
woofwoofdude: is it possible to do challenges of previous days if i start today ?

03:06:01
<transcript>: Okay.

03:06:03
<transcript>: Just like that.

03:06:07
<transcript>: Now we're all set up for nine.

03:06:07
cowfacedude99: @WoofWoofDude yes

03:06:09
<transcript>: And we got 1 minute.

03:06:09
<transcript>: i got

03:06:14
<transcript>: I gotta go in the main pie and I gotta say manually, I'm just gonna say.

03:06:17
<transcript>: Equals.

03:06:23
<transcript>: What is it? It's like a pound sign. Yeah.

03:06:25
<transcript>: Okay.

03:06:27
<transcript>: Is it started yet.

03:06:33
<transcript>: Calendar, go.

03:06:33
<transcript>: it started

03:06:34
<transcript>: It started. Oh.

03:06:37
<transcript>: Okay.

03:06:37
<transcript>: nine

03:06:38
<transcript>: Nine. Here we go.

03:06:38
<transcript>: sample

03:06:41
<transcript>: Sample. Let's get the sample data.

03:06:44
<transcript>: But we're I just got the address.

03:06:50
<transcript>: In there an extra quote.

03:07:01
<transcript>: Oh, man, this song came on the song. Oh, I'm feeling it now, people, I'm feeling it so head is ever too set directly up? What.

03:07:04
<transcript>: Is this actually.

03:07:06
<transcript>: Okay.

03:07:10
<transcript>: I'm so tired. For example.

03:07:17
<transcript>: What? These are so many sample inputs. What is going on? Okay, I'm not doing this tonight. This looks really hard.

03:07:17
<transcript>: thirteen

03:07:19
<transcript>: 13 is the answer.

03:07:23
oskrm: they should do a tldr for speed runners LUL

03:07:30
<transcript>: Simulate your complete hypothetical series of motions. How many positions? This the tale of the rope visit at least once. Is this okay, that I'm doing this.

03:07:30
<transcript>: just

03:07:32
<transcript>: Just TLDR for speedrunners.

03:07:35
<transcript>: They should do it the other. Yeah, they should.

03:07:40
<transcript>: Is it possible to do challenges of previous day if I start today. Yes. Okay.

03:07:43
<transcript>: So.

03:07:43
<transcript>: everyone's okay

03:07:47
<transcript>: Everyone's okay with me doing this right now. I guess if you don't want to be spoiled.

03:07:47
<transcript>: just get out

03:07:50
<transcript>: Just get out of here. Get out of here.

03:07:52
oskrm: Copy & Paste to chatgpt Kappa

03:07:54
<transcript>: Serious emotions moves ahead so initial state.

03:08:00
<transcript>: This is a sample, right? Did I grab the sample? H covers T.

03:08:05
<transcript>: I'm gonna have to actually read this thing. There's no way I'm figuring this out of the way.

03:08:11
<transcript>: I rope with the knot at each end.

03:08:11
<transcript>: head

03:08:14
<transcript>: Head and tailrope.

03:08:14
<transcript>: the head

03:08:18
<transcript>: The head moves far enough away from the tail of tails pulled toward the head.

03:08:28
<transcript>: Series of Motions Your Puzzle Input for the head, you can determine how the tail will move.

03:08:36
<transcript>: Rot must be quite short. In fact, the head and tail must always be touching diagonally. Json even overlapping. Both count as touching.

03:08:48
<transcript>: Just spaced out. The rope must be quite short. In fact, the head and tail must always be touching diagonally, adjacent and even overlapping. Both count as touching.

03:08:48
<transcript>: oh so the a

03:08:51
<transcript>: Oh, so the A't. Ahead and tail. Okay.

03:08:53
<transcript>: Okay.

03:08:53
<transcript>: h co

03:09:05
<transcript>: H covers tea if there's an H and no T. Okay. If the head is ever two steps directly up, down, left or right from the tail. Tail must also move one step in that direction, so it remains close enough. Okay. So if it gets there.

03:09:05
<transcript>: it's got

03:09:10
<transcript>: It's got to go there. The tail has to move toward the head. Always. Okay.

03:09:15
<transcript>: Otherwise, if the head and tail aren't touching and aren't in the same row.

03:09:18
<transcript>: Or column.

03:09:22
<transcript>: The tail always moves one set diamond to keep up.

03:09:22
<transcript>: so

03:09:24
<transcript>: So.

03:09:28
<transcript>: It moves that way to catch up. Yeah. Okay.

03:09:28
<transcript>: zoom

03:09:36
<transcript>: Zoom just need to work out where the tail goes as the head follows the series of motions. So in the head and the tailbone start at the same position, overlapping. For example.

03:09:44
<transcript>: Right, four. Up, four. Left, three. Get what? Series? Emotions moves ahead. Right. Four steps.

03:09:44
<transcript>: then up

03:09:47
<transcript>: Then up four steps, then the left three steps.

03:09:56
<transcript>: Then down one step and so on. So on. After each step, you'll need to update the position of the tail if the step means the head is no longer adjacent to the tail.

03:09:58
<transcript>: Digitally these motions occur as follows.

03:09:58
<transcript>: sparks the starting

03:10:01
<transcript>: Sparks the starting position as a reference point.

03:10:06
<transcript>: So move right for.

03:10:08
<transcript>: Wait. What.

03:10:08
<transcript>: that's

03:10:14
<transcript>: That's R. Four. Right. So the head moves right? For what.

03:10:17
<transcript>: 1234.

03:10:22
<transcript>: H covers, TS, what.

03:10:25
<transcript>: The starting position as a reference point.

03:10:32
<transcript>: Is anyone following this? Am I this sleepy.

03:10:37
<transcript>: This is.

03:10:37
<transcript>: i'm so

03:10:39
<transcript>: I'm so confused.

03:10:42
<transcript>: Copy and paste the chat GVD.

03:10:53
<transcript>: My brain. After simulating the rope, you can count up all the positions of tail visited at least once in this diagram. S again marks the starting position.

03:10:53
<transcript>: which the tail

03:10:59
<transcript>: Which the Tail also visited, and Pounds marked other positions that Tail visited. Pound, pound, pan, pound.

03:11:03
<transcript>: So there are 13 positions still visually once.

03:11:07
<transcript>: Oh boy.

03:11:11
<transcript>: So where does it start.

03:11:18
<transcript>: What.

03:11:18
<transcript>: these are

03:11:19
<transcript>: These are moves.

03:11:19
<transcript>: from a puzzle

03:11:22
<transcript>: From a puzzle, input is just a bunch of moves.

03:11:23
woofwoofdude: start on s

03:11:29
<transcript>: And there's the initial state. They always the same.

03:11:34
<transcript>: Is this always the initial state.

03:11:43
<transcript>: So here's my sample input. Actually, it's not what I pasted in there.

03:11:52
<transcript>: Okay, so there's my sample input. The answer is, in fact 13.

03:11:57
<transcript>: I got to write a function that turns that into 13, I guess.

03:12:04
<transcript>: Wow.

03:12:14
<transcript>: Do we think I can figure this out in my.

03:12:16
<transcript>: Current state.

03:12:24
<transcript>: I didn't catch how it starts. You seem to work out where the tail goes as I follows.

03:12:34
<transcript>: So it doesn't matter where they start. I guess so. If the head moves four to the right.

03:12:46
<transcript>: After each step, you'll need update position of tail if the step means the head is no longer adjacent to the tail, but if it is adjacent.

03:12:52
<transcript>: Okay, so H covers so initial state if it looked like this.

03:12:52
<transcript>: h cover

03:12:55
<transcript>: H covers T so the head and the tailor in one spot.

03:12:57
<transcript>: And s.

03:13:00
<transcript>: But then R. Four.

03:13:00
<transcript>: move the

03:13:03
<transcript>: Move the head right. Four steps.

03:13:03
<transcript>: what

03:13:04
<transcript>: What is this? Showing me.

03:13:14
<transcript>: Oh, it's showing me each step of the way. 1234 okay, that was so confused.

03:13:14
<transcript>: so there's

03:13:16
<transcript>: So there's how it's moving.

03:13:18
<transcript>: Okay.

03:13:18
<transcript>: and

03:13:22
<transcript>: And the question is, what did the tail touch.

03:13:25
<transcript>: It started one.

03:13:27
<transcript>: Two.

03:13:27
<transcript>: three

03:13:28
<transcript>: Three.

03:13:28
<transcript>: four

03:13:29
<transcript>: Four.

03:13:34
<transcript>: Up for still touching so it doesn't move.

03:13:34
<transcript>: then it goes

03:13:37
<transcript>: Then it goes up here. So it moves one dimensionally.

03:13:44
woofwoofdude: in the end, the T moves where H was only if it's 2 square away (not arround T), else it stays in place

03:13:44
<transcript>: So it's just figuring out when the tail has to move and we.

03:13:44
<transcript>: touch as

03:13:52
<transcript>: Touch as unique spot up, man. Okay, well, do I think I could I could actually do that? I don't know. Maybe.

03:13:56
<transcript>: H covers two.

03:14:02
<transcript>: Count up all up to positions of tail visit at least once so they always start out on top each other, I guess.

03:14:08
<transcript>: Okay, let's try it. I don't know.

03:14:08
<transcript>: i can't just

03:14:20
<transcript>: I can't just go to bed after this would be the most anti climatic thing. Start on S. In the end the T moves where H was only if it's two squares of way, not a round T. Else it stays in place.

03:14:24
<transcript>: This is gonna be funny.

03:14:24
<transcript>: let's see

03:14:26
<transcript>: Let's see.

03:14:31
<transcript>: So we're gonna parse our input by.

03:14:36
<transcript>: First we're gonna get the lines.

03:14:40
<transcript>: Equals data split lines.

03:14:43
<transcript>: Right. And then we're gonna say.

03:14:47
<transcript>: For L and L's.

03:14:50
<transcript>: Gonna say.

03:14:55
<transcript>: D is direction.

03:14:58
<transcript>: These count equals.

03:14:58
<transcript>: l

03:15:03
<transcript>: L dot split. I think you can do that. Is that how it works? In Python.

03:15:14
<transcript>: Does that work? Yeah. Okay. So we're printing directions.

03:15:15
<transcript>: printing

03:15:16
<transcript>: Printing.

03:15:16
<transcript>: numbers cool okay

03:15:17
<transcript>: Numbers. Cool. Okay.

03:15:19
<transcript>: So we have DNC.

03:15:19
<transcript>: that

03:15:26
<transcript>: That represents our direction and our okay, so we're gonna have to keep track of, like.

03:15:28
<transcript>: Coordinates.

03:15:31
<transcript>: So like XY equals zero.

03:15:31
<transcript>: and do that

03:15:32
<transcript>: And do that.

03:15:35
<transcript>: X equals zero.

03:15:41
<transcript>: Five equals zero. So we're starting at zero. Zero. It doesn't really matter.

03:15:41
<transcript>: we're just

03:15:44
<transcript>: We're just trying to count unique positions that it goes to.

03:15:46
<transcript>: So.

03:15:46
<transcript>: d

03:15:49
<transcript>: Dc.

03:15:56
<transcript>: So if direction.

03:16:00
<transcript>: Up.

03:16:23
<transcript>: So I guess the relative position of T to H is what we care about after every move, right.

03:16:29
<transcript>: So okay.

03:16:29
<transcript>: so we're

03:16:31
<transcript>: So we're gonna say.

03:16:33
<transcript>: T X.

03:16:37
<transcript>: And T. Y. And we're gonna have.

03:16:37
<transcript>: hx

03:16:38
<transcript>: Hx.

03:16:49
<transcript>: And H. Y. And what was S? Why do I care about S? Is just where it started, where things started. Does it matter if I just I have a zero, zero.

03:16:52
<transcript>: Like zero. Zero is the origin.

03:16:58
<transcript>: That Matt is s manner. I don't know. What did I miss about s.

03:17:09
<transcript>: I'm having a ball.

03:17:09
<transcript>: stop me

03:17:10
<transcript>: Stop me.

03:17:14
<transcript>: So that's showing all the places that the thing went, Yeah.

03:17:18
<transcript>: Okay. So I need to figure out if.

03:17:18
<transcript>: if

03:17:23
<transcript>: If the table doesn't have to move, it doesn't move, it only moves.

03:17:28
woofwoofdude: s is start point. i don't think it really matters, depends on how you wanna implement the "game"

03:17:31
<transcript>: Oh, I guess like.

03:17:31
<transcript>: after

03:17:33
<transcript>: After each movement.

03:17:38
<transcript>: We're gonna calculate the head, X and Y based on the movement.

03:17:38
<transcript>: and

03:17:40
<transcript>: And then.

03:17:47
<transcript>: And then based on the previous tail, X and Y, figure out how many new spaces it visited.

03:17:54
<transcript>: S is starting. I don't think it really matters. Depends on how you want to implement the game. Yeah.

03:17:54
<transcript>: in the end

03:18:00
<transcript>: In the end, the T moves where H was only that's two squareds. Yeah, yeah. Okay.

03:18:09
<transcript>: So I was using tea to, like, calculate the I guess we should have like, a set.

03:18:14
<transcript>: Of a set of the positions or no, we'll just it'll be a list.

03:18:19
<transcript>: A list of all the coordinates that.

03:18:26
<transcript>: The tail visits. And then we'll like get the unique counter them at the end right.

03:18:28
<transcript>: So.

03:18:32
woofwoofdude: do we know the grid in advance?

03:18:36
<transcript>: This every time the tail visits a spot, we're gonna put it in that T list. Okay.

03:18:36
<transcript>: there's gonna be a bunch

03:18:37
tardidriss: set()

03:18:38
<transcript>: There's gonna be a bunch of tuples.

03:18:38
<transcript>: there's tuples

03:18:40
<transcript>: There's Tuples in Python. Right.

03:18:46
<transcript>: Yeah. And then we'll just see set at the end. Right? So return set.

03:18:47
<transcript>: T.

03:18:51
<transcript>: ting

03:18:51
<transcript>: ting set

03:18:54
<transcript>: Ting set T right see me like something like that.

03:18:57
buffetcodes: Hey Adam <3

03:18:59
<transcript>: But can it can these be toughs or couples of thing in Python like.

03:18:59
<transcript>: one two

03:19:01
<transcript>: One, two.

03:19:04
<transcript>: Three, four. Is that a thing.

03:19:04
<transcript>: let's just see

03:19:07
<transcript>: Let's just see so result two.

03:19:07
<transcript>: so if i

03:19:09
<transcript>: So if I said.

03:19:09
<transcript>: one

03:19:13
woofwoofdude: yes tuples are a thing

03:19:14
<transcript>: One, two. It's fun to learn Python while you're also trying to do something competitive.

03:19:14
<transcript>: yeah that works

03:19:15
<transcript>: Yeah, that works.

03:19:17
<transcript>: So okay.

03:19:28
<transcript>: This is fun, so D I'm kind of half away I'm gonna be so tired tomorrow. Tuples are a thing. Buffet codes. Hey, Buffet, what's going on.

03:19:28
<transcript>: do we know

03:19:32
buffetcodes: Long time!! :D

03:19:33
<transcript>: Do we know the grid in advance? Now we're just gonna figure it out as we go. So D.

03:19:33
<transcript>: dcl

03:19:35
<transcript>: Dcl split.

03:19:35
woofwoofdude: they are immutable tho if i remember

03:19:38
<transcript>: So we're gonna tagulate the.

03:19:38
<transcript>: h

03:19:40
<transcript>: Hx.

03:19:47
<transcript>: Hx and H, y. We're gonna calculate those by taking the direction.

03:19:47
<transcript>: okay

03:19:48
oskrm: you mean remember python

03:19:50
<transcript>: Okay. So let's just do this. If if.

03:19:56
<transcript>: The equals up. Okay then HX.

03:20:00
<transcript>: Equals HX.

03:20:00
<transcript>: i don't need

03:20:02
buffetcodes: Saw your tweet about competitive programming, interesting you started with Python. Here to be a part of it :))

03:20:02
<transcript>: I don't need to say that, do I.

03:20:05
<transcript>: H Y equals.

03:20:07
<transcript>: Plus equals.

03:20:10
<transcript>: The.

03:20:10
<transcript>: minus c

03:20:13
<transcript>: Minus Cels. The count.

03:20:13
<transcript>: okay

03:20:14
<transcript>: Okay.

03:20:17
<transcript>: Yeah.

03:20:17
<transcript>: if

03:20:18
<transcript>: If.

03:20:22
<transcript>: The equals B equals.

03:20:29
<transcript>: Right. We're gonna do it in that order. I don't know why. Then HX plus equals C.

03:20:29
<transcript>: okay

03:20:31
<transcript>: Okay, hear me out.

03:20:32
oskrm: Do I get a cur from the Ray-Ban sponsorship?

03:20:33
<transcript>: Okay.

03:20:35
oskrm: cut*

03:20:41
<transcript>: Yes. Okay. So a upright down.

03:20:43
<transcript>: Left.

03:20:46
<transcript>: Down is gonna be H.

03:20:47
<transcript>: hhy

03:20:52
<transcript>: Hhy plus equal C, and then B is going to be.

03:21:05
<transcript>: Sorry. L is going to be minus. Yeah, the X minus. Okay, so we have our X or HX now. Hx and H y calculated. The head movement has been calculated.

03:21:07
<transcript>: Okay.

03:21:13
<transcript>: So then the question is given a Delta.

03:21:16
<transcript>: Given the Delta.

03:21:21
<transcript>: How many positions.

03:21:24
<transcript>: Did the tail.

03:21:24
<transcript>: have to touch

03:21:28
<transcript>: Have to touch. How many new coordinates? What coordinates did it touch.

03:21:28
<transcript>: in its path

03:21:29
<transcript>: In its path.

03:21:34
<transcript>: To keep up with the head right.

03:21:36
buffetcodes: Uhmm, prefer using elif there? Just for the sake of prog practice? @adamdotdev - though no significant diff

03:21:38
<transcript>: So I gotta cut from the Ray Band? Sponsorship.

03:21:43
<transcript>: Prefer using LF. There just for the sake of programming practice.

03:21:43
<transcript>: you know

03:21:51
<transcript>: You know, I don't really think about programming practice in this mode. I'm just like, I guess that makes sense. I guess. Yeah.

03:21:53
<transcript>: That makes sense.

03:21:53
<transcript>: and

03:21:55
<transcript>: And then.

03:21:55
<transcript>: this is

03:22:01
<transcript>: This is LS, but there is no else. It's gonna have to be. I guess I could say, like.

03:22:01
<transcript>: else

03:22:03
<transcript>: Else.

03:22:03
<transcript>: how do you

03:22:05
<transcript>: How do you throw.

03:22:05
<transcript>: how do you

03:22:08
<transcript>: How do you how do you throw in Python.

03:22:10
buffetcodes: raise

03:22:10
<transcript>: Bro.

03:22:13
oskrm: to solve aoc quick, you just get stuff goin

03:22:14
<transcript>: Raise Ray's.

03:22:14
<transcript>: error

03:22:16
oskrm: raise

03:22:16
<transcript>: Error? I don't know.

03:22:16
buffetcodes: raise ValueError("...")

03:22:18
tardidriss: elif allow you you don't miss a case

03:22:21
<transcript>: It.

03:22:21
<transcript>: raise value

03:22:24
<transcript>: Raise value error value error.

03:22:27
<transcript>: Okay.

03:22:27
<transcript>: so

03:22:34
<transcript>: So we have the X in the oh, what did I do? Something. Crash, UNSPORT. Offering ties.

03:22:40
<transcript>: Oh, yeah. So I'm trying to add what are basically strings we need to.

03:22:49
<transcript>: Like this.

03:22:51
<transcript>: Oh.

03:22:55
<transcript>: Yank that word, and then.

03:23:00
<transcript>: Nope.

03:23:05
<transcript>: Okay, basic. This skills are failing me now.

03:23:08
<transcript>: We're at that point in the night.

03:23:08
<transcript>: okay

03:23:09
<transcript>: Okay. So.

03:23:09
<transcript>: result of zero

03:23:12
<transcript>: Result of zero. That's fine. So.

03:23:17
<transcript>: We have our H.

03:23:17
<transcript>: hy and

03:23:23
<transcript>: Hy and HX calculated. So the next question is, what are the Ty and TX's.

03:23:23
<transcript>: that will

03:23:25
<transcript>: That will happen.

03:23:29
<transcript>: As the head moves to that new location.

03:23:29
<transcript>: right

03:23:31
<transcript>: Right.

03:23:31
<transcript>: right

03:23:32
<transcript>: Right.

03:23:36
<transcript>: Is this just simple math? Somehow.

03:23:43
<transcript>: So saw they're quick.

03:23:43
<transcript>: you just get stuff

03:23:45
<transcript>: You just get stuff going. That's right.

03:23:49
<transcript>: So tailwide the question is.

03:23:54
<transcript>: What is? What are the Tailwise.

03:23:58
<transcript>: So could I do, like a four.

03:23:58
<transcript>: yo can we

03:24:00
<transcript>: Yo, can we do like four.

03:24:02
<transcript>: I and range.

03:24:04
<transcript>: Cnn.

03:24:08
<transcript>: So if it moved a number of places.

03:24:12
<transcript>: Can I calculate? Yeah, I'm gonna go with that.

03:24:17
tardidriss: you can't move four step in a jump,

03:24:18
<transcript>: Calculate the different places the T went. So for instance, if it moved.

03:24:18
<transcript>: four up

03:24:20
<transcript>: Four, up.

03:24:23
<transcript>: Let's go up here if it moves.

03:24:29
<transcript>: I want to visualize something. It moved right. For. Okay.

03:24:29
<transcript>: then

03:24:39
<transcript>: Then for each little movement it made because it did 1234 discrete movements for each movement, I calculate, did the T have to move.

03:24:41
<transcript>: Okay.

03:24:41
<transcript>: so

03:24:43
<transcript>: So.

03:24:49
<transcript>: In this might actually be it might be better to calculate yeah, yeah? We're gonna calculate the HX.

03:24:49
<transcript>: all along

03:24:54
<transcript>: All along the way so for I in range of CN.

03:24:56
<transcript>: If.

03:24:59
<transcript>: The equals U.

03:25:08
<transcript>: I'm gonna I'm gonna be really slow. I don't expect to get anywhere near the late board. Don't. Don't expect that. Please. You can't move four steps in a jump.

03:25:08
<transcript>: no

03:25:13
<transcript>: No right. Right. That's why I have to go through each one.

03:25:13
<transcript>: but that's gonna

03:25:21
<transcript>: But that's gonna be zero through the count. Zero should do nothing. How do I make it range, like starting at one.

03:25:27
<transcript>: You know I'm saying I'll just be plus one, I guess.

03:25:27
<transcript>: i want to count

03:25:30
<transcript>: I want to count from, like.

03:25:32
<transcript>: Yeah, I think so. I don't know.

03:25:32
<transcript>: for

03:25:35
buffetcodes: for i in range(1, cint)

03:25:36
<transcript>: For I in range if D is up.

03:25:39
<transcript>: Then.

03:25:39
<transcript>: a one two

03:25:42
<transcript>: A, one, two, C it.

03:25:42
<transcript>: think

03:25:43
<transcript>: Think.

03:25:43
<transcript>: i actually

03:25:44
buffetcodes: if you wanna start with 1

03:25:45
<transcript>: I actually want one.

03:25:49
<transcript>: To see it plus one, I guess.

03:25:50
buffetcodes: cint is not included :)

03:25:55
<transcript>: Tnt is like four. So I want 1234.

03:26:02
<transcript>: Right? Yeah, one to see I don't think I want zero through.

03:26:02
<transcript>: yeah

03:26:06
<transcript>: Yeah. I think CNN is not included.

03:26:08
<transcript>: So plus one.

03:26:10
<transcript>: If.

03:26:10
<transcript>: d is up

03:26:12
<transcript>: D is up.

03:26:12
<transcript>: we're gonna cal

03:26:13
<transcript>: We're gonna calculate.

03:26:16
<transcript>: H? Y.

03:26:16
<transcript>: equals

03:26:18
<transcript>: Equals.

03:26:20
<transcript>: H? Y.

03:26:22
<transcript>: Plus equals one.

03:26:24
<transcript>: I'm sorry.

03:26:27
<transcript>: H y plus equals one.

03:26:27
<transcript>: now

03:26:29
<transcript>: Now it's minus SQL.

03:26:33
<transcript>: Go up. We subtract. One.

03:26:40
<transcript>: And HX doesn't change.

03:26:44
<transcript>: And now we got to figure out, does the tail need to move.

03:26:44
<transcript>: is the

03:26:47
<transcript>: Is the tail next to the head.

03:26:47
<transcript>: if it is

03:26:52
<transcript>: If it is already next to it still even with that. So I just need a function.

03:26:52
<transcript>: that can calculate

03:26:55
<transcript>: That can calculate if two coordinates are next to each other.

03:26:58
<transcript>: Touching.

03:27:06
<transcript>: It's going to be like, X, one, X, two, Y, one Y, two.

03:27:09
<transcript>: Acting like I know what I'm doing. I really don't.

03:27:11
<transcript>: So touching would be.

03:27:15
<transcript>: If.

03:27:22
<transcript>: How can I figure out.

03:27:26
<transcript>: Where's? Get up copilot when I need it.

03:27:26
<transcript>: where's

03:27:30
<transcript>: Where's my copilot? I had copilot going and it just isn't working.

03:27:42
<transcript>: Like, how do I ride a like.

03:27:45
<transcript>: Function that.

03:27:50
<transcript>: Tells if two forwards then it are touching.

03:27:54
<transcript>: Come on, copilot.

03:28:00
buffetcodes: uhmm, just find the dist?

03:28:01
<transcript>: Do the thing.

03:28:04
<transcript>: Yeah.

03:28:04
<transcript>: do it

03:28:05
<transcript>: Do it.

03:28:07
<transcript>: No.

03:28:09
tardidriss: manhatan distance if i don't make mistake

03:28:11
<transcript>: Sorry? What.

03:28:16
<transcript>: What is all this? Oh, touching, yes, Yes.

03:28:19
<transcript>: This is it.

03:28:23
<transcript>: Okay. We did it.

03:28:27
woofwoofdude: abs(x1-x2) > 1 ?

03:28:27
<transcript>: Okay. So touching. Excellent.

03:28:27
<transcript>: that's

03:28:31
<transcript>: That's awesome. Actually, Go pile is the best. Okay.

03:28:31
<transcript>: i gotta take adv

03:28:35
<transcript>: I gotta take advantage of copilot. That's the trick. It's a competitive programming.

03:28:35
<transcript>: okay

03:28:37
<transcript>: Okay. So if.

03:28:37
<transcript>: i

03:28:40
<transcript>: I say if.

03:28:46
<transcript>: Hatching. And then we say.

03:28:46
<transcript>: the

03:28:47
<transcript>: The T.

03:28:47
<transcript>: x

03:28:49
<transcript>: X.

03:28:54
<transcript>: H? Y.

03:28:56
<transcript>: Then we want to continue.

03:28:56
<transcript>: we

03:29:01
<transcript>: We're gonna skip the ones where it's still touching. If it's not touching.

03:29:01
<transcript>: we

03:29:03
<transcript>: We also need to move.

03:29:03
<transcript>: ty

03:29:04
<transcript>: Ty.

03:29:04
<transcript>: oh no

03:29:08
<transcript>: Oh, no, no, I can't just move it and lock, step, right.

03:29:13
<transcript>: There's a moment where it moves diagonally. What is that moment.

03:29:15
<transcript>: So it's touching.

03:29:15
<transcript>: and then

03:29:22
<transcript>: And then suddenly, okay, so the calculation of how TX and T Y change is not this simple.

03:29:25
<transcript>: Not that simple.

03:29:26
buffetcodes: if two coords are overlapping -> doesn't that mean that they are just same? just thinking out loud

03:29:29
<transcript>: Let's say it was that simple.

03:29:29
<transcript>: okay

03:29:34
<transcript>: Okay. Let's say it was that simple. And then.

03:29:34
<transcript>: it's just

03:29:37
<transcript>: It's just a matter so if you went up.

03:29:37
<transcript>: then we

03:29:45
<transcript>: Then we would just do, like, how do you add to an array in Java and Python? So I would be like, T.

03:29:48
woofwoofdude: yes @buffetcodes

03:29:49
<transcript>: Push pin. Thank you.

03:29:49
<transcript>: lsp

03:29:50
<transcript>: Lsp.

03:29:50
<transcript>: t

03:29:51
<transcript>: T.

03:29:51
<transcript>: tind and

03:29:54
<transcript>: Tind and it would be TX Ty.

03:29:54
<transcript>: so

03:29:57
<transcript>: So that's theoretically.

03:29:59
<transcript>: Okay.

03:29:59
<transcript>: let's

03:30:04
<transcript>: Let's handling the up case. It's not right, because this is not right.

03:30:05
buffetcodes: so couldn't we just do, x1 == x2 and y1 == y2? :O

03:30:09
<transcript>: This needs work.

03:30:13
<transcript>: But let's just let's just kind of like, do this.

03:30:21
<transcript>: Is gonna be if B is up, if it's right.

03:30:21
<transcript>: so

03:30:23
woofwoofdude: that's not what touching means here

03:30:25
<transcript>: So all of this stuff I did up here is just.

03:30:31
<transcript>: Dumb, dumb. Okay, so.

03:30:31
<transcript>: our

03:30:32
<transcript>: Our.

03:30:35
<transcript>: It would be.

03:30:35
<transcript>: hx

03:30:36
<transcript>: Hx.

03:30:39
<transcript>: Plus one.

03:30:41
woofwoofdude: 9x9 square

03:30:47
<transcript>: It's touching even if implemented, right? I didn't check to see if it handles diagonals.

03:30:53
woofwoofdude: 3x3 square *

03:30:54
<transcript>: Including diagonal.

03:30:57
<transcript>: Diagonal.

03:31:01
<transcript>: Goku, go, go, pilot.

03:31:04
<transcript>: Copilot.

03:31:08
<transcript>: And this one copilot just did its thing.

03:31:11
<transcript>: No matter what our acid to or not.

03:31:15
<transcript>: Where are you.

03:31:15
<transcript>: still

03:31:17
<transcript>: Still simple? Still synthesized.

03:31:22
<transcript>: Come on, come on, copilot. There's touching.

03:31:28
<transcript>: Allegedly that's gonna be a better touching algorithm.

03:31:28
<transcript>: i love that

03:31:31
<transcript>: I love that. I called it touching. Actually, that's funny.

03:31:34
buffetcodes: uhmm... okay, maybe I missed some context about touching here :/

03:31:34
<transcript>: Okay.

03:31:36
<transcript>: That's allegedly better.

03:31:37
buffetcodes: thanks but <3

03:31:41
<transcript>: Okay, so if touching continue.

03:31:47
<transcript>: Otherwise it's how.

03:31:49
<transcript>: Hx.

03:31:49
<transcript>: that's gonna

03:31:50
<transcript>: That's gonna be.

03:31:54
<transcript>: Like that.

03:31:56
<transcript>: Right. Okay.

03:32:00
<transcript>: Again, that's not right, but I.

03:32:03
<transcript>: Think I need to get further to really understand.

03:32:03
<transcript>: right

03:32:05
<transcript>: Right.

03:32:06
<transcript>: Down.

03:32:07
woofwoofdude: if H moves around T, T doesn't move

03:32:16
<transcript>: Right now.

03:32:16
<transcript>: feel like

03:32:17
<transcript>: Feel like.

03:32:17
<transcript>: good fitting music

03:32:19
<transcript>: Good fitting music right now.

03:32:22
<transcript>: Down and then left.

03:32:27
<transcript>: The X minus one right.

03:32:32
<transcript>: Okay, now I gotta figure out, how does the pill actually move.

03:32:32
<transcript>: i was at

03:32:35
woofwoofdude: but if H get outside of that, T moves.

03:32:35
<transcript>: I was at actually move so 19.

03:32:38
<transcript>: We're over counting as you say.

03:32:38
<transcript>: if

03:32:40
<transcript>: If H moves around.

03:32:40
<transcript>: t

03:32:42
<transcript>: T doesn't move.

03:32:48
<transcript>: It's H moves around T.

03:32:48
<transcript>: t

03:32:51
woofwoofdude: (takes the place of H)

03:33:07
<transcript>: T doesn't move. But if A gets outside of that T moves, I think I've got that covered. I think I just don't have the where does T move? Like I'm doing a simplified thing where I just do exactly. I mirror the movements of the head. But that's not accurate. It's accurate here. It's just following, right.

03:33:17
woofwoofdude: was explaining the game to @buffetcodes

03:33:19
<transcript>: But it's not accurate in this case, right here. So they're touching here. They're touching. It moves up. One more T. Doesn't just go.

03:33:26
<transcript>: T has to be touching it. So it moves diagonally to move that's the thing I'm missing is this case right here.

03:33:30
<transcript>: Oh, you explain the gotcha.

03:33:41
<transcript>: Manhattan Distance If I don't make mistake.

03:33:44
<transcript>: What's Manhattan distance.

03:33:47
buffetcodes: Thanks @WoofWoofDude <3

03:33:49
buffetcodes: Got it!!

03:33:53
<transcript>: So I need to calculate that diagonal movement somehow. How would I do that if he.

03:33:56
<transcript>: Doesn't have the same X or y.

03:34:01
<transcript>: Yeah. How do I calculate if it's on let's see if they're on a diagonal.

03:34:06
<transcript>: Function that.

03:34:09
<transcript>: Determines.

03:34:09
<transcript>: whether

03:34:10
<transcript>: Whether.

03:34:10
<transcript>: to coordinate

03:34:12
<transcript>: To coordinate.

03:34:21
<transcript>: Go, go, pilot.

03:34:28
woofwoofdude: Manhattan distance is the distance between coords but it's not important here.

03:34:29
<transcript>: Helping me, I guess.

03:34:33
<transcript>: If I don't know what to do with that information.

03:34:37
<transcript>: So diagonal.

03:34:45
<transcript>: Maybe reading it'll help me understand if absolute value of X one minus X two equals one. An absolute.

03:34:45
<transcript>: of y

03:34:47
<transcript>: Of y. One minus y. Two equals one.

03:34:47
<transcript>: then

03:34:49
<transcript>: Then they are on a diagonal.

03:34:49
<transcript>: okay

03:34:58
<transcript>: Okay. If they're on a diagonal, then we need to also move the ya. Okay. So if.

03:35:02
<transcript>: Diagonal.

03:35:04
<transcript>: Tx Ty.

03:35:04
<transcript>: hx

03:35:07
<transcript>: Hx H y.

03:35:12
<transcript>: It's on a diagonal. Then we need to also move.

03:35:12
<transcript>: the

03:35:14
<transcript>: The TX.

03:35:14
<transcript>: equals

03:35:16
<transcript>: Equals one right.

03:35:19
<transcript>: I'm going with that.

03:35:22
<transcript>: I wish I would have.

03:35:33
<transcript>: Gone with that.

03:35:35
<transcript>: Competitive programmer, people.

03:35:39
<transcript>: The X Plus Yeah.

03:35:55
<transcript>: Manhattan. Distance is a distance between Cored. But it's not important here. Okay, got it.

03:35:57
<transcript>: I gotcha.

03:35:58
woofwoofdude: care @adamdotdev, idk what you touching function is but diagonals might already be included

03:36:01
<transcript>: I got you.

03:36:05
<transcript>: Well.

03:36:10
<transcript>: I don't know what you touching function is, but dying a little might already be included.

03:36:17
<transcript>: Oh, of course. Yeah, no.

03:36:17
<transcript>: good call

03:36:20
<transcript>: Good call. Yeah, it's their diagonal.

03:36:22
<transcript>: And separated.

03:36:24
<transcript>: Like.

03:36:27
<transcript>: In this case where.

03:36:36
<transcript>: Head gets away from it. But it's not even like it can just move up one. Like headbid. It needs to move up one and over one, right.

03:36:43
<transcript>: Okay. So here's what it is. It's forget the diagonal thing.

03:36:49
<transcript>: It's a diagonal thing. What it is is if.

03:36:49
<transcript>: if

03:36:51
<transcript>: If after.

03:36:56
<transcript>: If after doing that.

03:36:57
woofwoofdude: tbh diagonal doesn't matter. it just needs to know if you are outside the surrounding of T

03:37:02
<transcript>: It's still doesn't have it still isn't touching. So if not touching.

03:37:08
<transcript>: Then.

03:37:15
<transcript>: Tx mini go one I don't know if that's true if it's always that's the direction.

03:37:25
<transcript>: Hello if that's true but it's my next guess.

03:37:25
<transcript>: not really a guess

03:37:30
<transcript>: Not really a guess. It's just. I know something like this needs to be happening.

03:37:32
<transcript>: Ty.

03:37:33
<transcript>: tyno

03:37:35
<transcript>: Tynox.

03:37:42
<transcript>: Ty.

03:37:54
<transcript>: Okay. I'm way up now, so I'm getting an eight, and I should be getting 13.

03:38:00
<transcript>: After just moving like the head did.

03:38:00
<transcript>: we

03:38:03
<transcript>: We need to do another move.

03:38:05
<transcript>: And in this case it's a.

03:38:05
<transcript>: plus

03:38:07
<transcript>: Plus to the other.

03:38:07
<transcript>: it's like

03:38:14
<transcript>: It's like, you know, but I don't know if that's always the case. So here it moved over here. They're still touching.

03:38:14
<transcript>: what if my touching

03:38:21
<transcript>: What if my touching algorithms right? Then it move left. One left. One did not get it there. So it needs to go.

03:38:21
<transcript>: y

03:38:24
<transcript>: Y minus one, two. I think that's right.

03:38:26
woofwoofdude: and i don't think you need to compute the coords of T, it's literally the old position of H

03:38:29
<transcript>: What am I missing though? So then head.

03:38:29
<transcript>: goes

03:38:33
<transcript>: Goes Here, it goes down. They're touching.

03:38:33
<transcript>: oh headcount

03:38:36
<transcript>: Oh headcount comes over still touching I wonder if by touching is right.

03:38:44
<transcript>: Echo X. One equals X two an absolute value of Y one minus y. Two.

03:38:48
<transcript>: Wait how X one and X two can't be equal.

03:38:54
<transcript>: Oh, I'm doing this dumb? I'm everywhere I'm calling? Touching is wrong.

03:38:54
<transcript>: this needs

03:38:56
<transcript>: This needs to be.

03:38:56
<transcript>: h

03:39:00
<transcript>: Hx. And this needs to be.

03:39:02
<transcript>: T.

03:39:02
<transcript>: y

03:39:04
<transcript>: Y right.

03:39:06
<transcript>: Yeah.

03:39:11
<transcript>: Okay. Here we go. This Yank inside that.

03:39:11
<transcript>: and then we'll

03:39:15
<transcript>: And then we'll do visual inside.

03:39:15
<transcript>: and paste

03:39:16
<transcript>: And paste.

03:39:22
<transcript>: Visual inside and paste.

03:39:25
<transcript>: Right. Yeah.

03:39:34
woofwoofdude: pretty sure your touching only check top bottom left right

03:39:42
woofwoofdude: so no diagonals xD

03:39:42
<transcript>: I have no like.

03:39:42
<transcript>: i don't

03:39:47
<transcript>: I don't expect to actually do well right now. I don't know why I'm like trying to raise against the clock.

03:39:47
<transcript>: i also don't know

03:39:49
<transcript>: I also don't know why I'm still awake.

03:39:57
<transcript>: So no diagonals. Pretty sure you're touching only checks top, bottom. Oh, it's not doing diagonals. Unbelievable.

03:40:05
<transcript>: If X equals one. Okay. If they have the same X and.

03:40:05
<transcript>: a y

03:40:09
<transcript>: A y distance of one. Yeah. If they have the same y.

03:40:09
<transcript>: and

03:40:13
<transcript>: And an X distance of one.

03:40:17
<transcript>: No.

03:40:22
<transcript>: Yeah, that should be. That should be the diagonal.

03:40:24
<transcript>: I should have the diagonals.

03:40:29
<transcript>: Right. I think so.

03:40:32
<transcript>: So what else am I missing? Here.

03:40:37
<transcript>: Oh.

03:40:42
<transcript>: Ty.

03:40:46
<transcript>: X and HX, Ty, and Hy.

03:40:57
<transcript>: It's not touching. Then we also subtract the X.

03:41:04
<transcript>: Could that be that could be plus. I don't know that that should be minus. That's the problem.

03:41:04
<transcript>: that's one of the problems

03:41:05
<transcript>: That's one of the problems.

03:41:07
<transcript>: I would depend on.

03:41:11
<transcript>: I just need to make them touch it. That point. I need to get it.

03:41:15
<transcript>: Okay. So it's gonna be.

03:41:15
woofwoofdude: touching -> abs(x1-x2) <= 1 and abs(y1-y2) <= 1

03:41:16
<transcript>: If.

03:41:24
<transcript>: Hx.

03:41:27
<transcript>: Greater than TX.

03:41:34
<transcript>: Right.

03:41:43
<transcript>: Else.

03:41:48
<transcript>: Cx plus is it.

03:41:58
<transcript>: Is that. Am I thinking right here. So if the head X is greater than the tail X.

03:41:58
<transcript>: and

03:42:00
<transcript>: And they're not touching.

03:42:03
tardidriss: def not_touching(tx,ty, hx,hy): max( abs(tx-hx), abs(ty-hy)) > 1

03:42:05
<transcript>: That means it needs to go, needs to be plus that.

03:42:11
<transcript>: 's.

03:42:12
<transcript>: Oh, Geez.

03:42:15
<transcript>: Type okay.

03:42:15
<transcript>: so

03:42:20
<transcript>: So that is more like what we're doing. I'm gonna mess this up on one of these for sure.

03:42:20
<transcript>: but this

03:42:22
<transcript>: But this is the idea.

03:42:22
<transcript>: so

03:42:31
<transcript>: So instead of just doing Ty plus one, we're saying if the H y is greater than the Ty.

03:42:32
<transcript>: Then.

03:42:34
<transcript>: T.

03:42:34
<transcript>: y

03:42:37
<transcript>: Y otherwise.

03:42:37
<transcript>: yeah

03:42:38
<transcript>: Yeah.

03:42:41
<transcript>: Oh.

03:42:46
<transcript>: This is the last problem.

03:42:46
<transcript>: that i have

03:42:47
<transcript>: That I have.

03:42:47
<transcript>: but

03:42:50
<transcript>: But if HX is greater than.

03:42:52
<transcript>: T X.

03:42:56
<transcript>: Right.

03:43:00
<transcript>: Following you following me people I don't know.

03:43:12
<transcript>: Still off.

03:43:12
<transcript>: not

03:43:13
<transcript>: Not touching.

03:43:13
<transcript>: max

03:43:15
<transcript>: Max.

03:43:15
<transcript>: interesting

03:43:16
<transcript>: Interesting.

03:43:23
<transcript>: Hey, Nates. Here. Nate. Thanks. Just thank you so much for the three months. I'm like.

03:43:23
<transcript>: drunk

03:43:24
<transcript>: Drunk with sleep.

03:43:24
<transcript>: or sleepiness

03:43:27
<transcript>: Or sleepiness. I'm so sleepy. I'm dry.

03:43:29
<transcript>: Is that a thing.

03:43:29
<transcript>: so

03:43:31
nate_codes: ditto

03:43:32
<transcript>: So touching. Absolute, excellent.

03:43:41
<transcript>: Definitely def. I just read death is definitely not touching. Definitely not touching. Txt YHx Hy.

03:43:42
<transcript>: hyso

03:43:45
<transcript>: Hyson TX minus HX actually.

03:43:46
nate_codes: I got a good screenshot, check your twitter..

03:43:51
<transcript>: Oh, man, got a good screenshot. Check your Twitter.

03:43:55
<transcript>: You got a good screenshot of my like half closed eyes right now.

03:43:59
<transcript>: Well, checking Twitter sounds more fun than what I'm doing right now.

03:44:02
<transcript>: That's a great one.

03:44:02
<transcript>: it's a good one

03:44:04
<transcript>: It's a good one. Okay.

03:44:04
<transcript>: let's think about this

03:44:06
<transcript>: Let's think about this.

03:44:06
<transcript>: what am i doing wrong

03:44:10
<transcript>: What am I doing wrong? I've got too many. The correct answer should be.

03:44:10
<transcript>: thirteen

03:44:12
<transcript>: 13.

03:44:12
<transcript>: and

03:44:17
<transcript>: And with the sample data, I'm getting 19.

03:44:17
<transcript>: i'm calculating

03:44:19
<transcript>: I'm calculating too many movements.

03:44:26
<transcript>: So too many movements if touching.

03:44:28
tardidriss: you can take your time the hundreds of buckets are already taken

03:44:30
<transcript>: After we move our headquarters.

03:44:32
<transcript>: If it's touching.

03:44:33
woofwoofdude: you probably count the same one multiple times ?

03:44:34
<transcript>: Menu.

03:44:40
<transcript>: So we moved our headquarters.

03:44:40
<transcript>: down one

03:44:41
<transcript>: Down, one.

03:44:46
<transcript>: Oh, is this wrong? For I and range one.

03:44:46
<transcript>: one

03:44:56
<transcript>: One to C Int plus one. Is that wrong? So if it's R, let's just go up here and do this. So if it's R four, we're going right forward.

03:45:00
<transcript>: We're trying to do range from one to five.

03:45:00
<transcript>: would be

03:45:02
<transcript>: Would be 1234.

03:45:07
<transcript>: I'm not even using eye. So does that matter.

03:45:07
<transcript>: i

03:45:09
<transcript>: I should just unrange CNN.

03:45:12
<transcript>: Right.

03:45:14
<transcript>: I've been using.

03:45:14
<transcript>: the index

03:45:15
<transcript>: The index.

03:45:18
<transcript>: Should I beat that.

03:45:20
<transcript>: No, it doesn't matter.

03:45:24
<transcript>: We're just trying to do it that many times, right.

03:45:24
<transcript>: so

03:45:26
<transcript>: So 0123.

03:45:31
<transcript>: Of the movements.

03:45:31
<transcript>: we're moving

03:45:32
nate_codes: !discord

03:45:33
fossabot: Adam has a Discord server and he'd love to see you there: https://discord.gg/E92M2chd3e

03:45:33
<transcript>: We're moving the head first.

03:45:39
<transcript>: Right? Is HX plus one? Yeah.

03:45:43
<transcript>: Down is H, Y plus one.

03:45:43
<transcript>: wait a minute

03:45:44
<transcript>: Wait a minute.

03:45:46
<transcript>: Yeah, that's right.

03:45:53
<transcript>: It could just be touching statuting. Could be wrong. Is touching wrong.

03:45:59
<transcript>: Probably count the same one multiple times. Well, I did a set.

03:46:02
<transcript>: I did a set.

03:46:05
<transcript>: Yeah, I.

03:46:05
<transcript>: can

03:46:06
woofwoofdude: touching is also wrong

03:46:11
woofwoofdude: like i said :)

03:46:15
<transcript>: Can see party I see you I can't take my time because I gotta go to sleep and I don't want to just leave it but I might just have to leave it I don't see how I'm possibly solving this before I just collapse.

03:46:15
<transcript>: testing

03:46:19
<transcript>: Testing is also wrong. Like you said sorry.

03:46:22
<transcript>: Let's just copy what Wolf said. Touching should be.

03:46:24
<transcript>: Absolute.

03:46:32
<transcript>: So this should be touching.

03:46:37
<transcript>: But just like retract that.

03:46:41
<transcript>: All right.

03:46:53
<transcript>: Bring X one, X two, Y, one Y two. So that got us nine. Touching is probably more right now, but we're still not 13.

03:46:55
<transcript>: Oh, man.

03:46:59
<transcript>: Oh, my brain? I.

03:46:59
<transcript>: didn't add

03:47:08
<transcript>: Didn't add the first coordinates. I guess. Like they start out on a coordinate, right? Does that one count? I don't know. Maybe that doesn't count. I don't know.

03:47:14
<transcript>: Did they cast a starting point? Let's see down here.

03:47:17
<transcript>: Now they don't count the starting point.

03:47:23
<transcript>: All the positions the Tails visited at Lee at least once.

03:47:29
<transcript>: I feel like we're kind of on the right track, believe it or not.

03:47:31
<transcript>: But.

03:47:39
<transcript>: I don't know my brain. I don't know if I can do it. I should have been asleep now about 4 hours ago. This was a terrible idea.

03:47:39
<transcript>: just

03:47:41
<transcript>: Just because my wife.

03:47:41
<transcript>: is in here

03:47:42
<transcript>: Is in here.

03:47:45
woofwoofdude: yes they count the start

03:47:46
<transcript>: Doesn't mean I should stay up late.

03:47:46
<transcript>: i just thought like

03:47:47
<transcript>: I just thought, like.

03:47:51
<transcript>: Evan of code starts at eleven my time I will never see 11:00.

03:47:52
woofwoofdude: count the # you have 12

03:47:57
<transcript>: I'll stay up. I'll do it. It's terrible idea. It's terrible.

03:48:02
<transcript>: What do we think? Should I.

03:48:05
mattt156: you go to bed at 7 usually?

03:48:06
<transcript>: Just go to bed.

03:48:11
<transcript>: So just go to bed. We're doing.

03:48:11
<transcript>: length

03:48:15
<transcript>: Length of the set of T.

03:48:19
<transcript>: But I'm gonna have any of these we have pinned to T.

03:48:24
<transcript>: Should just get the unique ones, right.

03:48:27
<transcript>: Tx Ty.

03:48:30
<transcript>: Now we're am I going around now.

03:48:32
<transcript>: Both.

03:48:41
<transcript>: We always do. We always do a Verte. We may not always do a mirroring movement that may be part of the problem.

03:48:43
nexxeln: choked today

03:48:46
nexxeln: so bad

03:48:46
<transcript>: Thank you for the follow. Matt. One, five, six.

03:48:54
<transcript>: Let's see. Touching is also wrong. Yes, they count the start. Count the number you have twelve. You got to bet seven. Usually.

03:48:58
<transcript>: Yeah. No, I go to bed. Eight my time. Sorry.

03:48:58
<transcript>: eight o'clock

03:49:00
<transcript>: 08:00 my time normally.

03:49:06
<transcript>: I mean basically however long the session is I started my stream.

03:49:06
<transcript>: when i

03:49:12
mattt156: are you one of those jocko 4:30 wake up people?

03:49:12
<transcript>: When I when I should have gone to bed so we're at 3 hours and 50 minutes past when I should be asleep.

03:49:14
<transcript>: Those bad.

03:49:19
mattt156: cause if so that's awesome

03:49:26
<transcript>: Now I gotta I gotta get up in 7 hours cuz my kids will wake up.

03:49:29
<transcript>: This is why I go to bed early and wake up early.

03:49:31
<transcript>: What was I thinking.

03:49:38
<transcript>: So I'm four, I'm four off.

03:49:38
<transcript>: now

03:49:43
<transcript>: Now. Print. Let's print. Let's print.

03:49:45
<transcript>: Print.

03:49:47
woofwoofdude: i mean it's 4h30 some where on earth when i wake up :)

03:49:48
<transcript>: T.

03:49:55
<transcript>: See what this looks like? 102-0303 minus one, three, minus two.

03:50:04
<transcript>: Three, minus three, two, minus three, three, minus three, four, minus three. I'm sure some of these are wrong, and we're also missing some.

03:50:08
<transcript>: Oh.

03:50:08
<transcript>: when h

03:50:13
<transcript>: When H covers T. I always forget this. Oh, oh, it can move over it.

03:50:18
<transcript>: So are we sure? Are we sure that touching was wrong.

03:50:23
<transcript>: This touching had me over counting. And that would make sense if there were cases where.

03:50:23
<transcript>: h

03:50:27
<transcript>: H landed on top of me of the tail and I.

03:50:29
<transcript>: Yeah. Okay.

03:50:30
woofwoofdude: touching also include overlapping

03:50:36
<transcript>: So it's not that I don't believe you. It said I want to. I want to like.

03:50:36
<transcript>: eliminate one thing

03:50:41
<transcript>: Eliminate one thing at a time here and right now, my thought is, I'm not handling a case where.

03:50:44
<transcript>: It's on top of it.

03:50:44
<transcript>: no tell

03:50:48
<transcript>: No telling would do that, wouldn't it? Touching would do that.

03:50:48
<transcript>: i don't know

03:50:50
<transcript>: I don't know.

03:50:57
<transcript>: Touching also include overlapping it, Yeah.

03:50:57
<transcript>: four hours and

03:51:00
<transcript>: 4 hours and 30 minutes somewhere on Earth when I wake up.

03:51:01
woofwoofdude: how about you test touching first independently

03:51:12
<transcript>: Well, what do we think? Do I just go to sleep? I'm so tired.

03:51:20
woofwoofdude: bedge time

03:51:20
<transcript>: Do I just go to sleep.

03:51:29
<transcript>: If it's up for I should do it four times. Right.

03:51:30
<transcript>: Yeah.

03:51:33
<transcript>: Vegetime.

03:51:33
<transcript>: how about

03:51:34
raestrict: How’s it goin adam

03:51:38
<transcript>: How about you test touching first independently? That's a good idea. Actually, I want to do that. I want to just, like, have.

03:51:46
mattt156: just go to bed, it's never worth it in the morning

03:51:47
<transcript>: Cert, touching.

03:51:49
<transcript>: Touching.

03:51:54
<transcript>: Zero, zero.

03:51:57
<transcript>: Equals.

03:51:57
<transcript>: true

03:51:59
<transcript>: True.

03:52:05
woofwoofdude: gotta go too.. but now I thought about code so my dreams ar enot gonna be nice

03:52:07
<transcript>: That should be touching right.

03:52:12
<transcript>: If X one equals X two.

03:52:14
<transcript>: And absolute.

03:52:14
<transcript>: y one

03:52:17
<transcript>: Y one. Okay, let's go back to your.

03:52:17
<transcript>: version

03:52:19
<transcript>: Version of it.

03:52:23
<transcript>: Okay, so your version correct.

03:52:25
<transcript>: Let's say touching.

03:52:30
<transcript>: Zero.

03:52:31
woofwoofdude: gonna code in my sleep.. not fun xD

03:52:35
<transcript>: Let's say.

03:52:35
<transcript>: one

03:52:36
<transcript>: One.

03:52:36
<transcript>: one

03:52:37
<transcript>: One.

03:52:37
<transcript>: and

03:52:40
<transcript>: And it's a zero zero. That should also be true, right.

03:52:43
<transcript>: And then let's say.

03:52:47
<transcript>: This one's gonna be false. Let's say.

03:52:50
<transcript>: One, two.

03:52:53
<transcript>: Default.

03:52:53
<transcript>: oh

03:53:00
<transcript>: Oh, that's not false. That should be false, right. If it's at zero. Zero. The head is zero on the tail. Is it.

03:53:00
<transcript>: one

03:53:02
<transcript>: One.

03:53:02
<transcript>: two

03:53:04
<transcript>: Two, they're not touching.

03:53:06
<transcript>: Right.

03:53:12
<transcript>: Yeah? My dreams are gonna be terrible.

03:53:12
<transcript>: hey race

03:53:18
<transcript>: Hey, Racetrict, it's going well, I should be asleep. That's the problem right now is that I should be asleep.

03:53:22
<transcript>: Never worth it in the morning. Yeah, you're right, Matt. Alright.

03:53:31
<transcript>: Screenshot. This. Nate.

03:53:33
<transcript>: I'm so sleepy.

03:53:33
<transcript>: it's amazing

03:53:35
<transcript>: It's amazing how sleepy.

03:53:35
<transcript>: just thing

03:53:39
<transcript>: Just thing up 3 hours and 53 minutes will make you.

03:53:43
nexxeln: you should sleep

03:53:45
woofwoofdude: alright, good night

03:53:46
<transcript>: I don't know when I become a competitive programmer and I tried to do adventive code.

03:53:46
<transcript>: i don't

03:53:50
<transcript>: I don't know how I'm gonna reorient my entire life.

03:53:50
<transcript>: in december

03:53:51
<transcript>: In December.

03:53:54
<transcript>: To be mentally.

03:53:54
<transcript>: present

03:53:57
<transcript>: Present at this time of night.

03:53:57
<transcript>: i'm going

03:54:00
<transcript>: I'm going to have to move my family to the West Coast.

03:54:00
<transcript>: where

03:54:04
<transcript>: Where it starts at 09:00 p.m.

03:54:14
<transcript>: And that'll fix it. We're gonna move to West Coast for a couple months. Every year. It'll be nice. It's the cold months here. We'll be in Southern California or something.

03:54:14
nexxeln: are you gonna do aoc streams everyday

03:54:19
<transcript>: That's the plan. Are you gonna do AOC streams every day.

03:54:28
<transcript>: Well, next I started on day six, and I did the first six on that day. And then now whatever I did today, part of eight and part of nine.

03:54:33
<transcript>: I mean I'm gonna do AOC whenever I'm streaming probably this month.

03:54:43
<transcript>: But now I'm just gonna sleep until I wake up. Well, wake up to my kids being awake. And then.

03:54:43
<transcript>: i'm

03:54:45
<transcript>: I'm not gonna stream tomorrow.

03:54:45
<transcript>: because my wife out of town

03:54:46
<transcript>: Because my wife out of town.

03:54:51
<transcript>: Why am I still here? Thank you so much. Dev, Dev.

03:54:52
<transcript>: devold me

03:54:52
<transcript>: devold me so

03:54:56
devagrawal09: sup

03:55:01
nexxeln: yo dev

03:55:06
<transcript>: Devold me so I have to stream 4 hours into my sleep to get a Dev appearance. Dev, thank you so much for showing up. That just made my night. You missed the part where I was half asleep trying to do AOC for the last 4 hours.

03:55:06
<transcript>: and

03:55:11
<transcript>: And I should have gotten a bed when I normally go to bed.

03:55:11
<transcript>: but i'm glad

03:55:13
devagrawal09: oh no

03:55:17
devagrawal09: i'll watch the vod lol

03:55:18
<transcript>: But I'm glad that you showed up. That makes me feel a lot better about this stream. I just hung on long enough for Dev to show up.

03:55:18
<transcript>: dev

03:55:20
<transcript>: Dev, shoutout, Dev.

03:55:20
<transcript>: don't

03:55:24
<transcript>: Don't watch. Savod. It's not worth watching. Okay? Dev.

03:55:25
adamdotdev: !so devagrawal09

03:55:26
fossabot: Shout out to devagrawal09! Go follow them at twitch.tv/devagrawal09 - they were last seen playing <no game>!

03:55:30
<transcript>: Okay. I gotta go to sleep.

03:55:31
devagrawal09: i dont stream lol

03:55:34
nexxeln: LUL

03:55:36
<transcript>: Last scene playing no game. Oh, you don't stream. You just do YouTube. Okay, Sir.

03:55:42
fleekflock: 👋

03:55:44
devagrawal09: appreciate it anyways

03:55:44
adamdotdev: !so nate_codes

03:55:44
fossabot: Shout out to nate_codes! Go follow them at twitch.tv/nate_codes - they were last seen playing Software and Game Development!

03:55:48
<transcript>: Well, you know, shout out anyway, shout out to all the streamers. Nate, you stream. I should have shout it out. Let's do it. Cut out an eight codes. Okay, now I'm just. I'm really I should be asleep.

03:55:52
<transcript>: Fleek flock Hi, there, welcome to my chat.

03:55:52
<transcript>: welcome welcome

03:56:03
<transcript>: Welcome, welcome. I'm gonna go to sleep now. We're not gonna read anybody. Oh, we are gonna rate somebody. Somebody I know is actually streaming. So, yeah, have fun with that. You're gonna watch some else to advocate. Maybe they'll actually be good at it.

03:56:03
<transcript>: and be awake

03:56:05
<transcript>: And be awake.

03:56:05
<transcript>: all right

03:56:09
<transcript>: All right. Thank you, everyone. It's been great. Maybe we could do it again sometime.

03:56:10
devagrawal09: good night!

03:56:15
nexxeln: goodnight