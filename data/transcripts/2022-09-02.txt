

01:48:38
<transcript>: You.

09:53:38
<transcript>: You.

09:54:14
<transcript>: Okay.

10:00:00
<transcript>: You.

10:00:15
<transcript>: Check TickTick.

10:00:17
<transcript>: Check.

10:01:24
<transcript>: Okay, we're testing out captions we're trying to see if they show up.

10:01:28
<transcript>: I don't see anything.

10:01:43
<transcript>: Alright check. Check. Check. Cc off.

10:02:33
<transcript>: You.

10:02:41
<transcript>: Alright.

10:02:50
<transcript>: Camera.

10:06:50
<transcript>: Alright.

10:06:57
<transcript>: You.

10:16:17
niftynate80: Public.dev

10:19:04
cedpoilly: First?

10:19:42
cedpoilly: ah I just ended my live. I should have raided your channel. I didn't get the notification

10:22:04
jaystation3x: adamel4Adambar

10:23:42
<transcript>: good morning good morning good morning good afternoon good evening good day whatever

10:23:44
<transcript>: Jay's here.

10:23:44
<transcript>: my

10:23:46
<transcript>: My eyes are so asleep.

10:23:47
cedpoilly: Good day

10:23:49
backkflipp: Good morning

10:23:56
<transcript>: And said, Polly and Nifty Nate, welcome to Chat. Nifty Nate, your first time chatter.

10:23:56
<transcript>: public update

10:23:59
<transcript>: Public updatev that is a project that I'm working on.

10:23:59
<transcript>: actually

10:24:02
<transcript>: Actually. Did you have a question about it.

10:24:07
<transcript>: I just ended yours. You were you were streaming, said Poili.

10:24:07
<transcript>: poiling

10:24:12
<transcript>: Poiling. Uhoh, I didn't even know you streamed. I'm not follow you now.

10:24:12
<transcript>: i don't know

10:24:20
0j3s: good morning

10:24:20
<transcript>: I don't know anything about Twitch. Like every time I click on somebody's profile and I try and figure out what I can do with it. I end up just following.

10:24:20
<transcript>: and then

10:24:23
<transcript>: And then I don't know where to go from there.

10:24:37
<transcript>: Jay, I'm not having any Lara bars yet, but yes, the Atom Bar email is here. Good morning backflip and welcome to Chat OJ, three s and good morning to you as well.

10:24:41
jaystation3x: Larabars are b-roll famous

10:24:43
<transcript>: It's Friday.

10:24:45
<transcript>: And.

10:24:45
<transcript>: our broll

10:24:48
<transcript>: Our Broll? Famous? Yeah? They're all over the Broll.

10:24:55
backkflipp: Just woke up... Im still sleeping trying to work

10:24:55
<transcript>: I actually I don't I don't have like a set and film plan today.

10:24:55
<transcript>: i don't

10:24:58
laytanl_: Hey all

10:24:59
cedpoilly: I just stared, few days ago. I should send them to your channel for neovim content

10:25:00
niftynate80: Adam you seem like a grownup who actually gets up at 6am every day is this true

10:25:00
<transcript>: I don't know if I have rabbitsetton stone plan but I don't have like.

10:25:00
<transcript>: i definitely

10:25:11
<transcript>: I definitely want to work on this thing. And there's, like, three things I kind of want to work on. So we might just like, I might do a poll, might just see where things head when I start typing.

10:25:14
<transcript>: You just woke up backflip trying to sleep.

10:25:14
<transcript>: you're still sleeping

10:25:17
jaystation3x: 6am lol

10:25:18
<transcript>: You're still sleeping? Trying to work? Yeah. Feel that way.

10:25:18
<transcript>: late and hay

10:25:19
<transcript>: Late and hay, late.

10:25:34
<transcript>: I just started a few days ago. I should send them to your channel for new of them content. You bet we will mess with our new of him. That's probably the first thing we'll do today is just look at some of the plugins I've installed, make sure I'm using everything. Added another one.

10:25:35
<transcript>: Offstream.

10:25:35
<transcript>: that i like

10:25:37
<transcript>: That I like.

10:25:44
<transcript>: And yeah, might take some recommendations on enough cafe shows up. I might ask him what's the next place in I should use.

10:25:47
aarrjaay: Greetings Program

10:25:58
nullchefo: primeagenHeyy

10:25:59
<transcript>: It seemed like a grownup who actually gets up at 06:00 a.m. Every day. Is this true? It's true. Except I get up at 430. So kind of true. But yeah, I do get up really early RJ.

10:25:59
<transcript>: greetings

10:26:01
<transcript>: Greetings.

10:26:01
<transcript>: greetings program

10:26:02
<transcript>: Greetings program.

10:26:02
<transcript>: nilshefe

10:26:03
<transcript>: Nilshefell is here.

10:26:08
<transcript>: So.

10:26:08
<transcript>: yeah

10:26:12
<transcript>: Yeah, we're gonna start with Neovem config.

10:26:12
<transcript>: i thought

10:26:14
<transcript>: I thought about so I've got.

10:26:14
<transcript>: feelings

10:26:18
<transcript>: Feelings I've got mixed feelings about working on public Dev today.

10:26:18
<transcript>: on friday

10:26:29
<transcript>: On Friday. The mixed feelings are it's Friday. So how far can I get into it? It's been a while. I've got to kind of, like, shake off the.

10:26:42
<transcript>: Crusties. I don't know. Like, I've got some rust built up, not the language. Like, I haven't worked on public that Dev in a while. I've got to kind of get into it again. And on Friday, it's like, I'm gonna get into it, and then it's gonna be the weekend.

10:26:42
<transcript>: but on

10:26:47
<transcript>: But on the other hand, that kind of works in my favor because I can maybe get through all that nonsense.

10:26:47
<transcript>: the getting

10:26:54
<transcript>: The getting ramped back up on a Friday and then I'm ready to go on Monday. You know, those are kind of my mixed feeling.

10:26:58
<transcript>: I was gonna be out why my eyes.

10:26:58
<transcript>: are so

10:26:59
aarrjaay: You talking about how you have made your office and inviting place to work and somewhere you want to be has inspired me to change-up my office whilst I'm off.  Thank you !

10:27:06
<transcript>: Are so watery. Today. I have days like that where they're just so, like, watery. You talking about how you have made your office.

10:27:06
<transcript>: an inviting

10:27:14
<transcript>: An inviting place to work and somewhere you want to be has inspired me to change up my office while some off nice. I'm glad to hear that RJ.

10:27:16
cedpoilly: @adamelmore I'll send some feedback on Public.dev in a few days. Promised

10:27:18
<transcript>: Bend.

10:27:21
<transcript>: A good chunk of my life in a.

10:27:21
<transcript>: less

10:27:26
<transcript>: Less than I used to, but hey, said, play. I appreciate that a lot.

10:27:26
<transcript>: there's

10:27:31
<transcript>: There's a lot of things we're getting ready to ship into public Dev if I can just wrap it up.

10:27:37
<transcript>: But I would love your feedback on the current version that you're seeing there in beta. That'd be great.

10:27:42
<transcript>: Oh, yeah? I turned on captions.

10:27:42
<transcript>: do you

10:27:46
<transcript>: Do you all see captions? If you want them. I guess they're there now.

10:27:46
<transcript>: let's

10:27:51
<transcript>: Let's see if they're gonna test them. Captures. Yeah, there they are.

10:27:56
<transcript>: There are the captions. I wonder how well they work. Oh, do they get oop.

10:27:57
<transcript>: oops

10:27:59
<transcript>: Oops.

10:28:04
<transcript>: I'm waiting to see.

10:28:04
<transcript>: on the

10:28:05
jaystation3x: "Captains"

10:28:05
<transcript>: On the feed.

10:28:05
<transcript>: they don't

10:28:10
<transcript>: They don't know what to do with the word Oak. So Google is very perplexed.

10:28:18
<transcript>: Yeah. No, they just ignore the word altogether. Okay, good to know captains. Yeah.

10:28:24
<transcript>: This is the part where I have to start enunciating. If I want anyone to be able to read anything I say.

10:28:32
<transcript>: Same with the transcription we're doing locally. And just there's a lot of things transcribing this very audio feed.

10:28:43
<transcript>: We're transcribing it locally so I can do my whole, like, search. I want to build a live grip over everything that happens on this stream. We got that working. It was painful, but we did it.

10:28:46
<transcript>: Oh, so some things I did offstream.

10:28:54
<transcript>: I moved over to a lackardy from my term. It's official.

10:28:54
<transcript>: i

10:29:00
<transcript>: I finished up my config off stream. Feeling pretty good about it. Looks a lot like it did.

10:29:08
<transcript>: Added. I mentioned I added another new oven plugin. Thank you so much for the following Stinkle Winks. I appreciate that. Follow.

10:29:08
<transcript>: welcome

10:29:10
<transcript>: Welcome to our little.

10:29:12
<transcript>: Switch channel. Here.

10:29:15
<transcript>: So I added.

10:29:15
<transcript>: the trees

10:29:17
<transcript>: The treesitter.

10:29:17
<transcript>: context

10:29:17
stinklewinks: o/ mornin'

10:29:20
niftynate80: The Solution Architect Pro is the hardest cert in IT

10:29:20
<transcript>: Context. Plugin it like keeps.

10:29:20
<transcript>: your

10:29:29
<transcript>: Your like, if you're in a function like in a big function and you're halfway down, it like keeps the top line pin like a sticky header. It's awesome.

10:29:29
<transcript>: saw it on prime

10:29:32
<transcript>: Saw it on Primes. Youtube video with.

10:29:32
<transcript>: kin

10:29:38
<transcript>: Kin Wheeler The solution Arctic Pro is the hardest Cert in it is it.

10:29:41
<transcript>: I don't know. I've heard of some pretty hard ones where like.

10:29:41
<transcript>: you're like

10:29:50
<transcript>: You're like grilled for a whole day with real world situations. There's some Cisco on our networking. One that I've heard is really hard.

10:29:50
<transcript>: good morning

10:29:54
<transcript>: Good morning. Sink of Wings. Welcome to Chad, as well.

10:29:54
<transcript>: i

10:29:56
<transcript>: I love when people show up in chat.

10:29:59
<transcript>: It makes my day.

10:29:59
<transcript>: alright

10:30:01
<transcript>: Alright so we're gonna.

10:30:01
<transcript>: we're gonna look

10:30:06
<transcript>: We're gonna look at oh, I moved over to OBS 28, so that's the big thing I did offstream. So.

10:30:06
<transcript>: you will notice

10:30:10
<transcript>: You will notice that I don't think it should matter to you.

10:30:10
<transcript>: you will not

10:30:11
<transcript>: You will notice.

10:30:11
<transcript>: i changed

10:30:14
<transcript>: I changed my screen resolution.

10:30:22
<transcript>: So I've been just like, I used a Pro display. Xdr. It's an Apple display. It's like a five K display.

10:30:25
<transcript>: Six K. I don't know. It's a lot of pixels.

10:30:25
<transcript>: and

10:30:29
<transcript>: And for the first two months now, I've been streaming.

10:30:29
<transcript>: i just said whatever

10:30:30
<transcript>: I just said whatever.

10:30:35
niftynate80: i took a 3-day practical cert that only me and 1 other person in the group of 30 passed. That’s a hard one too

10:30:35
<transcript>: I left my screen. Like, was I zoomed in to some stuff, but like.

10:30:35
<transcript>: most

10:30:51
<transcript>: Most, I realized going back and looking at Vibe most of the stuff on my screen if I don't intentionally Zoom in, it was just completely illegible because I'm down sampling from six gay to 1080p, so I changed my screen resolution. I'm now working on a 1080p display.

10:31:07
<transcript>: Everything is giant. It feels weird, but I think it'll be better on stream when I share my screen, which I'm gonna do very shortly. I took a three day practical Cert that only me and one other person in the group of 30 pass. Now that's a hard one. What was that? 159.

10:31:10
<transcript>: That sounds very hard.

10:31:17
lukeyfam15: Hey

10:31:18
<transcript>: So we're on OBS 28. I hope it doesn't crash.

10:31:18
<transcript>: or otherwise

10:31:21
<transcript>: Or otherwise ruin the stream. Hey, Luki.

10:31:27
<transcript>: I changed like some minor things in the OBS settings. Like.

10:31:41
niftynate80: MicroStrategy Certified Engineer

10:31:42
<transcript>: I like I made it in code with a more high quality encoding because I figured I had the CPU overhead now to deal with it. With OBS supporting native M one.

10:31:42
<transcript>: stuff

10:31:55
<transcript>: Stuff. So I didn't really net any like gains on the CPU usage because I just used up whatever I got back and I like change the code profiles and stuff like that anyway.

10:31:59
<transcript>: Micro Strategy certified engineer. Interesting.

10:32:03
<transcript>: Micro strategy. That sounds like a thing I've heard of.

10:32:03
<transcript>: have i heard of

10:32:05
<transcript>: Have I heard of MicroStrategy.

10:32:08
<transcript>: that sounds familiar

10:32:13
<transcript>: Okay. We're gonna come over here and we're gonna figure out what we're doing today.

10:32:15
jaystation3x: Michael Saylor BTC co

10:32:21
<transcript>: So this is.

10:32:21
<transcript>: alac

10:32:24
jaystation3x: OBS 29 crashes preemptively before dot files are revealed.

10:32:25
<transcript>: Alacrity, alecry, we.

10:32:25
<transcript>: out with

10:32:30
<transcript>: Out with the old and with anew no more no more eye term around here.

10:32:30
<transcript>: out

10:32:31
<transcript>: Out.

10:32:31
<transcript>: and here's

10:32:33
backkflipp: That font... looks good.

10:32:33
<transcript>: And Here's.

10:32:34
niftynate80: It’s old school business intelligence stuff

10:32:38
<transcript>: I think this is actually the overlays, but let's see, let's make this bigger.

10:32:38
<transcript>: how do i make this big

10:32:44
<transcript>: How do I make this bigger like that? So this is the overlay project, but I'm just showing you can see the context.

10:32:44
<transcript>: see how that function

10:32:49
<transcript>: See how that function shared is pinned at the top, that's the context plugin feels good.

10:32:52
<transcript>: I got some comments.

10:32:52
<transcript>: in

10:32:56
<transcript>: In italics. Now that's how I used to have it.

10:32:56
<transcript>: and

10:33:01
<transcript>: And I didn't realize I hadn't got that set up in me of him. So like vs. Code. I used to have it that way.

10:33:03
<transcript>: That feels good.

10:33:03
<transcript>: i added some other range

10:33:08
<transcript>: I added some other range things as italics like keywords are now italics.

10:33:15
<transcript>: Just still playing with it? Oh, oh, yeah? Leighton made a change that's supposed to make the.

10:33:22
<transcript>: Text object delete work on arrow functions. Let's test that because I have the latest now. So Here's.

10:33:22
<transcript>: narrow function right here

10:33:26
<transcript>: Narrow function right here so I should be able to do DAFF.

10:33:26
<transcript>: gas

10:33:29
lukeyfam15: Wow

10:33:30
<transcript>: Gas. Oh, look at that. Feels good. See, that.

10:33:30
<transcript>: delet

10:33:37
<transcript>: Deleted that function and it's an arrow function. Thank you latent. I don't know if you're here late in, but thank you so much for making fixes.

10:33:37
<transcript>: to open

10:33:40
<transcript>: To open source Neo Bin plugins.

10:33:40
<transcript>: while watching

10:33:43
<transcript>: While watching my stream and watching me struggle.

10:33:48
<transcript>: So how do I delete like this? I wonder.

10:33:48
<transcript>: how

10:33:52
<transcript>: How I delete this. This is an interface.

10:33:55
<transcript>: I could try.

10:34:02
<transcript>: We had function and did I ever do one for block? So this is a good place to start today. Let's.

10:34:07
<transcript>: Go up here. I'm gonna close this one.

10:34:07
<transcript>: and i'm going

10:34:14
<transcript>: And I'm going to go over here, and I'm gonna quit that. I'm gonna go.

10:34:17
<transcript>: Config Inv.

10:34:28
<transcript>: Tree sitter. This is where I want to be.

10:34:36
<transcript>: Where I want to be text objects. Okay, so we have function outer AF function inner. If.

10:34:36
<transcript>: conditional

10:34:38
<transcript>: Conditional. Outer.

10:34:38
<transcript>: cited conditional

10:34:43
<transcript>: Cited conditional and I did loops which are kind of dumb. I don't really need those.

10:34:46
<transcript>: Let's go over here.

10:34:49
<transcript>: Let's find.

10:34:49
<transcript>: so

10:34:51
<transcript>: So tree sitter.

10:34:51
<transcript>: text object

10:34:52
<transcript>: Text Objects. Here we go.

10:35:03
<transcript>: Sign the list of things we can target. Here we go. Built in text, objects, attributes, blocks, calls, classes, comments, conditional.

10:35:11
<transcript>: Frame function, loop parameters, scope name and statement. How do a statement is.

10:35:16
<transcript>: Let's try. Block. Block is kind of generic, I think.

10:35:18
<transcript>: So Let's.

10:35:18
<transcript>: do

10:35:20
<transcript>: Do.

10:35:23
<transcript>: That'll be B. So do AB.

10:35:26
<transcript>: For block.

10:35:29
<transcript>: Dot, outer.

10:35:31
<transcript>: Then we'll do.

10:35:34
<transcript>: Iv.

10:35:36
<transcript>: Or block.

10:35:36
<transcript>: in a

10:35:37
<transcript>: In a.

10:35:37
<transcript>: okay

10:35:39
<transcript>: Okay.

10:35:41
<transcript>: Following me.

10:35:41
<transcript>: everybody

10:35:43
<transcript>: Everybody following me.

10:35:43
<transcript>: so

10:35:45
<transcript>: So I'm gonna have to quit this.

10:35:48
<transcript>: And let's see.

10:35:48
<transcript>: open that

10:35:50
<transcript>: Open that back up.

10:35:50
<transcript>: really

10:35:53
<transcript>: Really negative where it's starts out with.

10:35:59
<transcript>: Explorer or whatever this call inventory open on the right instead.

10:36:01
<transcript>: I always like toggle it over there.

10:36:10
<transcript>: So I want to see can I delete this interface with the delete boxing so I should be able to do dab.

10:36:14
<transcript>: So what is? Dab delete.

10:36:19
<transcript>: I don't know what that was. What did it delete. There.

10:36:19
jaystation3x: In that instance, you might be able to do use default vim paragraph deletion (dap).

10:36:23
<transcript>: But if I'm on this return statement.

10:36:26
<transcript>: Okay block is scary.

10:36:30
<transcript>: I don't know what block? Deletes.

10:36:30
<transcript>: let

10:36:31
<transcript>: Let's try.

10:36:34
<transcript>: I might want to go to the line.

10:36:37
<transcript>: Cursor being a block if I like it or not.

10:36:40
<transcript>: Like the line better.

10:36:47
<transcript>: Let's try. I'm curious what function inner looks like again. So diff.

10:36:49
<transcript>: Oh, nice. Yeah. That's great.

10:36:49
<transcript>: that's

10:36:51
<transcript>: That's.

10:36:52
jaystation3x: For the interface

10:36:54
<transcript>: Just like times where I copy a whole function.

10:36:57
<transcript>: Then I want to just delete the insides of it.

10:37:02
<transcript>: Back flip that font looks good thing.

10:37:02
<transcript>: oh

10:37:11
<transcript>: Oh, Microstrate is Micro Michael Sailor Bitcoin Company I knew I had heard that OBS 29 crashes preemptively before Dot files are revealed.

10:37:11
<transcript>: what

10:37:13
niftynate80: I watched Prime code and thought to myself this is too much cognitive load to remember all the shortcuts

10:37:14
<transcript>: What you mean? 28.

10:37:21
<transcript>: Oh, you're saying if I eventually.

10:37:21
<transcript>: obs

10:37:24
<transcript>: Obs 29 won't let you leak your secrets it will just crash.

10:37:27
niftynate80: I’ll just look up how to copy a line in vim

10:37:29
<transcript>: Old school business intelligence stuff. Okay.

10:37:29
<transcript>: and that

10:37:40
<transcript>: And that instance you might be able to do might be able to use default VM paragraph deletion DAP ow. Okay. So that's built in. Yeah. Okay.

10:37:43
<transcript>: It sure does work.

10:37:43
<transcript>: well

10:37:51
<transcript>: Well, so DAP, this is built into them that deletes a paragraph. And this is considered paragraph because there's lines on either side, I guess.

10:38:03
<transcript>: I'll like how I can delete inside so I could do like delete inside the things like that or see inside things up. I'm sorry. I'm not really keeping.

10:38:05
<transcript>: The dark.

10:38:09
<transcript>: Oh, why are those over there.

10:38:12
<transcript>: Fixed.

10:38:14
<transcript>: Keycaster.

10:38:14
<transcript>: i guess

10:38:19
<transcript>: I guess we'll put it right here. There's nowhere I can put it. It's not kind of like in my face and bothering me.

10:38:23
<transcript>: But so life.

10:38:26
<transcript>: And.

10:38:28
windward_hive: hi

10:38:32
<transcript>: So thank you so much for the follows. Tree Top towers.

10:38:32
<transcript>: and

10:38:33
<transcript>: And.

10:38:36
<transcript>: Lemon, the lemon.

10:38:36
<transcript>: thank you

10:38:37
windward_hive: anyone ever tell you that you look like mr beast?

10:38:38
<transcript>: Thank you for following along.

10:38:46
<transcript>: For the interface. Yeah, I watched prime code and thought to myself, this is too much cognitive load to remember all the shorts.

10:38:46
<transcript>: i'll just

10:38:49
<transcript>: I'll just look up how to copy a line in vim.

10:38:52
<transcript>: Yeah. No. A lot of cognitive load up front.

10:38:52
<transcript>: and then

10:39:00
<transcript>: And then, like, I'm already starting to pick up. It's been a couple weeks. I'm already starting to pick up some of them where I don't think about it anymore. Like, I just do it.

10:39:00
<transcript>: so

10:39:04
niftynate80: Adam your data in AWS specialty is more valuable than what I have. But for some big companies still using it it is invaluable

10:39:20
<transcript>: So I think it's worth it. I don't know. I think it's if you want a new hobby, if you've been like, I don't know, stagnating in your career. I keep using that word like I've been snack stagnating a bit. Twitch has brought new life to my career, and so has neovan. Honestly, it's just kind of like a fun new hobby that I have.

10:39:31
<transcript>: Anyone never told me that I look like Mr. Beast. I think you're the fourth person I've been told a few times that I that I look like Mr. Beast's brother or something. Yeah, I've been told that.

10:39:42
<transcript>: I'll just look up how to caveula. Okay. I saw that. Adam, your data in AWS specialty is more valuable than what I have. But for some big companies still using it is.

10:39:42
<transcript>: invaluable

10:39:44
<transcript>: Invaluable.

10:39:49
<transcript>: Your data in AWS specialty.

10:39:52
<transcript>: What is that? What do you mean.

10:39:52
<transcript>: how do you

10:39:53
<transcript>: How do you mean.

10:39:53
<transcript>: more valuable

10:40:01
<transcript>: More valuable than what I have. But for some big companies still using it isn't valuable. Are you saying I don't use my aid of Snobs? Because it's kind of true.

10:40:14
<transcript>: If you watch the stream for the last two months, we've mostly not been building stuff on AWS. I'm going to I'm gonna in fact, today we might there's something I really want to play with. Planet Scale has a new http API.

10:40:16
<transcript>: In JavaScript.

10:40:16
<transcript>: thing

10:40:22
niftynate80: MicroStrategy is valuable for some old big companies

10:40:29
<transcript>: Thing binding some kind of runtime like a thing. Just a helper for like connecting in serverless environments. I want to play with it, but not in JavaScript. I want to play with it in VTL.

10:40:29
<transcript>: and app

10:40:37
niftynate80: AWS data is universal and more valuable

10:40:39
<transcript>: And app sync so appsink resolvers that connect directly to plant scale because I've just never had a good offering for SQL Server. Sorry for sequelbased database.

10:40:42
<transcript>: Going back to My Windows Days, Microsoft days.

10:40:42
<transcript>: i've never had

10:40:51
<transcript>: I've never had a good way to offer a SQL based database that's serverless and uses all the stuff I use like AppSync and VTL resolvers and stuff.

10:40:56
jaystation3x: He really said "I want to play with it in VTL."

10:40:56
<transcript>: Microstrategy is valuable for some old big companies.

10:40:56
<transcript>: aws

10:41:00
<transcript>: Aws data is universal and more valuable.

10:41:04
<transcript>: I really want to play with it in VTL. That's right.

10:41:04
<transcript>: i said that

10:41:06
<transcript>: I said that that's a sentence. I said.

10:41:14
<transcript>: So DAP, that's how you delete a paragraph, which means I could also replace a paragraph.

10:41:17
<transcript>: Cool. Okay.

10:41:17
<transcript>: feel good

10:41:19
<transcript>: Feel good. I like it.

10:41:29
<transcript>: So let's see. I've got block outer and block inner. I don't understand them. I don't know what a block is. Is this a block? So if I'm here and I'm like.

10:41:31
jaystation3x: Woke up this morning and chose violence.

10:41:32
<transcript>: Dab no? Yeah? Dab.

10:41:34
<transcript>: Oh.

10:41:34
<transcript>: no

10:41:35
<transcript>: No.

10:41:35
<transcript>: i deleted

10:41:37
<transcript>: I deleted a lot of things.

10:41:37
<transcript>: what does that

10:41:39
<transcript>: What does that delete.

10:41:39
<transcript>: i don't i

10:41:41
<transcript>: I don't I don't think I like it.

10:41:51
<transcript>: Dab, why would I do that? Why would I delete everything, literally everything. Oh, it's everything. Yeah, it's this whole function. But I could have just done DAP.

10:41:55
<transcript>: Out of as well. So what's just in block and function.

10:41:57
<transcript>: Okay. So this.

10:42:04
<transcript>: A block.

10:42:04
<transcript>: it's too

10:42:07
<transcript>: It's too generic for me to understand.

10:42:07
lukeyfam15: Did you get a new keyboard?

10:42:11
<transcript>: It's like the arrow function. Okay, so deleted the arrow function.

10:42:11
<transcript>: okay

10:42:11
kreleos: Adam,  do you have the nvim-treesitter/playground plugin installed?

10:42:12
<transcript>: Okay.

10:42:12
<transcript>: i guess

10:42:17
<transcript>: I guess that could be useful, but what's the difference in that and function? Let's try DAFF.

10:42:20
<transcript>: Yeah. Definitely. The whole thing.

10:42:23
<transcript>: Inner function would be.

10:42:29
<transcript>: That's not what I expected. So this does not work inside of that function. Wait. What.

10:42:31
<transcript>: If.

10:42:31
<transcript>: i

10:42:35
<transcript>: I got a I gotta understand these before I can start using them, you know.

10:42:35
<transcript>: i'm inside

10:42:37
<transcript>: I'm inside this function.

10:42:37
<transcript>: right

10:42:46
<transcript>: Right? I'm inside this arrow function? If I do diff as what I expected? Yeah, but you DAFF? Yeah, that's what I expected? If I do dab.

10:42:50
<transcript>: Or block, what did it delete.

10:42:55
<transcript>: Kind of delete it. I guess I deleted that conditional block so that's useful.

10:43:01
<transcript>: Okay. That's useful if it's predictable. Thank you so much for the follow. Claudia. Claudio.

10:43:01
<transcript>: adam do you have

10:43:07
<transcript>: Adam, do you have the Indian tree setter? Playground plugin installed? I do not carelios, but I'm looking for a new.

10:43:10
<transcript>: Plugin we'll have this morning in Chosen violence.

10:43:14
<transcript>: Louki note a new keyboard Oh.

10:43:14
<transcript>: no i

10:43:18
<transcript>: No. I'm using my mode 80 this morning, but I did order.

10:43:18
<transcript>: caric order

10:43:20
<transcript>: Caric order. I have a problem.

10:43:39
<transcript>: I looked at it again, like 10 seconds. And it was like, that's actually kind of interesting. I'd like to see if my brain can do it. So the care Corder thing, somebody had me look at it yesterday. Don't even move your fingers. You just kind of like, will you do move them? But you don't lift them. It's like your fingers are just on these little. It's like a ball. And you're like, moving these little things.

10:43:39
<transcript>: like

10:43:41
<transcript>: Like that.

10:43:45
<transcript>: We'll see we might play with it on stream.

10:43:49
<transcript>: What's the playground plugin dokerelios.

10:43:53
jaystation3x: That will make for an interesting month of streaming.

10:43:56
<transcript>: I'm curious.

10:44:04
<transcript>: Obs doing okay 11%. Cool. We got captions going.

10:44:04
<transcript>: that feels good

10:44:05
<transcript>: That feels good.

10:44:08
<transcript>: Okay.

10:44:18
<transcript>: So blah block seems to be kind of useful. We also already have conditional, though, so if I want to delete this conditional, I could do.

10:44:18
<transcript>: the ic

10:44:18
cedpoilly: Did you order the special brain chip that goes along that "keyboard". Very important IMH

10:44:23
<transcript>: The IC for conditional inner. So, oh, no, that's X.

10:44:28
<transcript>: I wish it's didn't delete the bracket.

10:44:33
<transcript>: But the leading the brackets is less useful for me.

10:44:38
<transcript>: Yes, it makes sense. I don't know. And then if I do outer so DAC.

10:44:43
<transcript>: I believe the whole conditional statement. Yeah. Cool. Okay.

10:44:46
kreleos: it shows you the AST for your file in a side buffer

10:44:47
<transcript>: I have loops in here as well. I don't know if there's any loops.

10:44:50
<transcript>: And loops.

10:44:53
<transcript>: For for loop.

10:44:53
<transcript>: for

10:44:54
<transcript>: For.

10:44:56
<transcript>: Now let's look at these.

10:44:59
<transcript>: So if I want to delete.

10:45:01
<transcript>: This.

10:45:01
<transcript>: for loop

10:45:04
<transcript>: For loop. I could do delete inner.

10:45:04
<transcript>: delet

10:45:07
<transcript>: Delete inner Dil.

10:45:09
kreleos: I thought maybe it could help in this case but maybe not

10:45:11
<transcript>: That was unexpected.

10:45:11
<transcript>: oh cuz the lo

10:45:15
<transcript>: Oh, cuz. The loop is the whole body of this function. Yeah, yeah. Okay.

10:45:20
<transcript>: That makes sense. Then if I delete the outer so now.

10:45:20
<transcript>: cool

10:45:22
<transcript>: Cool. Okay.

10:45:22
<transcript>: what happens if i

10:45:24
<transcript>: What happens if I do the block in here.

10:45:24
<transcript>: find

10:45:28
<transcript>: Find this conditional. Okay. I want to delete this whole conditional, right.

10:45:28
<transcript>: so i'm gonna do

10:45:30
<transcript>: So I'm gonna do.

10:45:30
<transcript>: deck

10:45:36
<transcript>: Deck. Then I'm like, oh, what is this nonsense? Let's delete this whole block, dab.

10:45:38
stroopwafel26: ohai adamel4DealWithIt

10:45:38
<transcript>: Yeah. Okay. That takes off.

10:45:41
<transcript>: It's good. Okay.

10:45:41
<transcript>: we're learning

10:45:44
<transcript>: We're learning some stuff so tree sitter, text, objects.

10:45:44
<transcript>: feels

10:45:47
<transcript>: Feels pretty good. Selection mode Oh.

10:45:47
<transcript>: this might be

10:45:48
<transcript>: This might be.

10:45:48
<transcript>: like

10:45:52
vinitkme: Isn't this the paid Operator Mono font?

10:45:52
<transcript>: Like is there an option here to.

10:45:53
stroopwafel26: aw yeah alacritty

10:45:56
<transcript>: Certain option.

10:45:56
<transcript>: let's see

10:45:59
<transcript>: Let's see. Includes surrounding white space.

10:46:03
<transcript>: Is an option to what I'm looking for is like when it deletes.

10:46:09
<transcript>: The the bracket. And I don't expect that. Is there an actual like an option for that? Maybe.

10:46:15
<transcript>: Swap. Oh, yeah, we haven't played the swap. Much parameters can be swapped.

10:46:17
<transcript>: Move.

10:46:17
<transcript>: go to

10:46:22
<transcript>: Go to these are important. I think I need to pay attention to these. I think moving.

10:46:27
<transcript>: Text objects is cool. I could move to functions.

10:46:30
<transcript>: Right.

10:46:30
<transcript>: go to

10:46:33
<transcript>: Go to next start. Go to next end.

10:46:33
<transcript>: and also

10:46:41
<transcript>: And also like, percent that's that right. So if I'm on here and I do or that's like go to the end. So what does percent do.

10:46:48
<transcript>: If I'm on this one, it takes you to the last one. Yeah. So in closing things, that's what Percent does. Okay.

10:46:52
<transcript>: Go to previous start.

10:46:59
<transcript>: The leader DS is supposed to do it was a peak the definition code so if I'm on.

10:47:03
<transcript>: Time calling a definite definition. So here.

10:47:03
<transcript>: let's

10:47:06
<transcript>: Let's do this. There we go.

10:47:11
<transcript>: If I want to peak the definition code, I should be able to leader DF.

10:47:15
<transcript>: Leader.

10:47:17
laytanl_: are you automatically adjusting your white balance? It seems like it changes periodically

10:47:22
<transcript>: I don't know what that's supposed to do, leader. Ds. Nothing. Okay.

10:47:28
laytanl_: or is it me?

10:47:30
<transcript>: Vinnet it is the paid operator mono font paid for many years ago. I love it.

10:47:38
<transcript>: This will make for an interesting month of streaming. Yeah. You talk about the car, according Jay.

10:47:40
kreleos: % is for delimeters, while these are context-aware I think. they know what a function or a class is, etc.

10:47:41
<transcript>: And we'll see.

10:47:41
<transcript>: if you order

10:47:45
<transcript>: If you order the special brain shift that goes along with that keyboard. Very important.

10:47:50
<transcript>: No, I didn't. There's not really one right here's. A joke.

10:48:02
<transcript>: It shows you the AST for your file and a side buffer. Oh, I thought maybe it could help in this case, but maybe not. Oh, so the playground one, it shows you the AST for your file. Oh, I've seen people pull that up. I think.

10:48:02
<transcript>: yeah

10:48:10
<transcript>: Yeah, that might be useful. That would help me see, like what blocks are and stuff. Yeah. I love that we're gonna download that now.

10:48:10
<transcript>: oh

10:48:12
<transcript>: Oh, Hi Stroop. Waffle.

10:48:12
<transcript>: this is

10:48:13
<transcript>: This is.

10:48:25
<transcript>: Alacrity. We're on it Stroop. We're on alacrity. We're staying here. We're at home. We found our emulator. Are you automatically adjusting your white balance? It seems like it changes periodically. Uhoh.

10:48:25
<transcript>: really

10:48:40
caldotjs: hello adam

10:48:41
<transcript>: Really? I'll know, Leighton. It shouldn't be. It should be manually set. I have a little Gray card and everything, but I did have to adjust my light because I accidentally turned it down the other day. Does it feel like it's doing a Midstream? My white balance is changing Midstream.

10:48:41
<transcript>: that feels bad

10:48:42
<transcript>: That feels bad.

10:48:53
<transcript>: Hello, Caldap. Okay, so Crellios percent is for delimiters. While these are context aware, I think they know what a function or classes gotcha.

10:48:53
<transcript>: so

10:49:00
<transcript>: So it's not just a built in percent isn't just a built in vim thing then, because them isn't like contextaware. Right.

10:49:03
caldotjs: just got a nice domain for myself & it was cheap as hell. caldot.dev

10:49:06
<transcript>: Okay, we're gonna install this playground function.

10:49:06
<transcript>: just got a nice

10:49:09
<transcript>: Just got a nice domain for myself.

10:49:09
<transcript>: nice

10:49:16
laytanl_: yeah for like a second it gets a little darker, and then goes back to normal

10:49:22
<transcript>: Nice Calbot Dev. That's a good one I love I love a Dev domain if you follow this stream for very long, you'll see that I love, I love a good death. Thanks so much for follow Silver design.

10:49:22
<transcript>: i appreciate

10:49:24
<transcript>: I appreciate it.

10:49:24
<transcript>: for like

10:49:28
laytanl_: the whole stream

10:49:28
<transcript>: For like a second. It gets a little darker and then goes back to normal.

10:49:28
<transcript>: is that just my

10:49:29
silverdezign: hello hello

10:49:31
<transcript>: Is that just my camera or the whole screen.

10:49:31
<transcript>: the whole

10:49:32
<transcript>: The whole stream.

10:49:36
rickrickyy: Did you have any problems with your fonts using alacritty ? Idk why but mine look bold in my mac

10:49:36
<transcript>: Welcome to Chat, as well. Silver.

10:49:46
<transcript>: No, Ricky, Rick, Rick, Ricky.

10:49:50
silverdezign: !project

10:49:50
fossabot: Building a Twitch overlay in Next.JS

10:49:52
<transcript>: I had issues with Bold, but I'm only using a normal a book font face. I'm not using.

10:49:52
<transcript>: bold

10:49:53
caldotjs: cal.dev was taken NotLikeThis

10:49:54
<transcript>: Bold for anything.

10:49:54
<transcript>: so

10:49:55
<transcript>: So.

10:49:55
<transcript>: in fact

10:49:57
<transcript>: In fact, I set my bold.

10:49:57
<transcript>: i

10:50:02
stroopwafel26: @rickrickyy I had that, but I just do the regular font variant for bold

10:50:05
<transcript>: I set bold to a book So they're all it's all book There is no bold in my.

10:50:05
<transcript>: font

10:50:09
<transcript>: Font choices. So that might be why I'm not having that issue.

10:50:16
<transcript>: Silver. I don't know if that's our project or not. Sorry, we don't. I don't keep these up to date. All that. Well, in fact, today.

10:50:19
silverdezign: lol oki :D

10:50:19
stroopwafel26: bold text should never happen in any terminal change my mind

10:50:23
<transcript>: J. Are you the only moderator here? This first day we've not had Frag or Mark here. Feels weird.

10:50:26
<transcript>: To not have either of those folks here.

10:50:26
<transcript>: feel

10:50:28
<transcript>: Feels weird.

10:50:33
<transcript>: I had that, but I just do the regular font variant for Bold. Yeah, same.

10:50:41
<transcript>: Yeah, I agree. Well, I don't know why I would want bold, actually, in my terminal.

10:50:41
<transcript>: okay let's

10:50:44
<transcript>: Okay, let's install this playground thing over here.

10:50:44
<transcript>: so

10:50:44
purrplish: @stroopwafel26 agree

10:50:58
<transcript>: So Lighton I'm not sure on the stream going dark but I would love if someone else could tell me if they run into that if you see my stream get darker and then lighter, please let me know sounds bad. Tree sitter playground.

10:51:02
<transcript>: Here we go.

10:51:11
<transcript>: Ts Playground. Yeah, I've seen this. I've seen Ted's do this. I think maybe even I might have seen it on prime stream.

10:51:11
<transcript>: this will be

10:51:13
rickrickyy: Yeah, but even the regular one in mine look bold hahahhaa I have to use thinner variations

10:51:14
<transcript>: This will be helpful. We'll be able to understand.

10:51:14
<transcript>: what it is

10:51:17
<transcript>: What it is like, what is a block, for instance.

10:51:23
<transcript>: Copy that. And then we're gonna have to do.

10:51:23
<transcript>: install the query

10:51:29
<transcript>: Install the query parser for Query Editor highlighting. Run this after installing the above plugins. Okay.

10:51:33
<transcript>: So let's go to plugins.

10:51:36
<transcript>: What was that.

10:51:42
<transcript>: Tree sitter. We're gonna paste it right here. Why does my paste.

10:51:42
<transcript>: i'm convince

10:51:44
stroopwafel26: @rickrickyy maybe it's the spacing

10:51:51
<transcript>: I'm convinced. Now I've broken something because paste like P should just add to the line below. Right? It should not do what it's doing, which is.

10:51:56
<transcript>: Dropping it right in with wherever I'm at. I feel like I've configured something.

10:51:56
<transcript>: badly

10:51:57
<transcript>: Badly.

10:51:59
<transcript>: If anyone has any clues.

10:51:59
<transcript>: ideas about

10:52:00
cowfacedude99: how did surround treat you?

10:52:10
<transcript>: Ideas about where I might have broken my peak demand. Like, P should just paste on the line below, right? Or Capital P should be. Yeah, no, that's broken. I don't like it.

10:52:10
<transcript>: i want

10:52:15
<transcript>: I want pee to do what I expect. Maybe we'll look at my key maps.

10:52:15
<transcript>: override

10:52:16
<transcript>: Override.

10:52:16
<transcript>: what

10:52:22
kreleos: maybe you didn't copy the newline?

10:52:22
<transcript>: What? Existing file? Yeah. No, I. What do I have this? Open. Another.

10:52:25
backkflipp: How have you copied the text you re pasting?

10:52:26
cowfacedude99: paste pastes on the current char.

10:52:27
<transcript>: Hey.

10:52:27
<transcript>: do i have it open

10:52:29
<transcript>: Do I have it open somewhere else.

10:52:31
cowfacedude99: that's default

10:52:33
<transcript>: So installed playground we got the latest.

10:52:36
<transcript>: The latest tree sitter.

10:52:40
cowfacedude99: it's something you need to get used to

10:52:41
<transcript>: So here's our config. I've got a look up now.

10:52:41
<transcript>: well

10:52:44
<transcript>: Well do I have I do have.

10:52:49
<transcript>: It open anywhere else. I don't think.

10:52:52
<transcript>: Feels bad.

10:52:55
<transcript>: Two issues that are Those are gonna bother me.

10:52:57
claudiofreitas3: I guess p/P only do that if there is a \n in the end of the copied buffer

10:53:05
<transcript>: So we just installed playground. We should go into our tree sitters config.

10:53:05
<transcript>: we'll add it to

10:53:07
<transcript>: We'll add it to the bottom. Here.

10:53:13
<transcript>: There's just contacts. Let's just copy all this.

10:53:17
<transcript>: Right. Yeah.

10:53:22
<transcript>: And then I would love to just say.

10:53:22
<transcript>: key

10:53:25
<transcript>: Key that I can't because we broke it.

10:53:30
<transcript>: This is gonna be playground.

10:53:35
backkflipp: If you use visual mode to copy, it will paste in the current char but if you copy in normal mode, it will copy the line, so when you paste it will paste as a line.

10:53:38
<transcript>: And then this. I don't know. I think it's. No, I was just in our config. We just enable it here.

10:53:38
<transcript>: playground

10:53:39
<transcript>: Playground enable.

10:53:42
<transcript>: Persist queries.

10:53:45
<transcript>: Let's keep all this stuff.

10:53:51
<transcript>: So undo all that. Oh, Redo, that though. I don't know what that was.

10:53:51
<transcript>: play

10:53:54
<transcript>: Playground, playground, playground.

10:53:54
<transcript>: we'll just add it right

10:53:56
<transcript>: We'll just add it right here.

10:54:00
<transcript>: Okay.

10:54:02
<transcript>: Looks good.

10:54:06
<transcript>: Line number.

10:54:06
<transcript>: i've broken

10:54:08
<transcript>: I've broken something clearly.

10:54:12
<transcript>: Okay.

10:54:14
<transcript>: Then Let's.

10:54:16
<transcript>: First.

10:54:18
<transcript>: Okay, let's see.

10:54:18
<transcript>: let's

10:54:19
<transcript>: Let's.

10:54:19
<transcript>: close this

10:54:22
<transcript>: Close this and reopen it.

10:54:24
<transcript>: And.

10:54:31
<transcript>: Did I just add the playground? Oh, I'm supposed to install something. Ts. Install, query.

10:54:35
<transcript>: Run this afternoon song. Okay.

10:54:42
<transcript>: Nope.

10:54:53
fragaverage: wait is this...

10:54:54
<transcript>: Okay. Query price are already available. Would you like to reinstall share.

10:55:00
<transcript>: Wait. Frag is here.

10:55:00
<transcript>: just when i

10:55:02
<transcript>: Just when I thought Frag wasn't here.

10:55:02
<transcript>: oh

10:55:04
<transcript>: Oh, there's so much to read.

10:55:06
<transcript>: Yeah.

10:55:08
fragaverage: Yeah had a hectic week with work LUL

10:55:14
<transcript>: Cafes how to surround treat you loving it cafes. Thank you so much. I said earlier on the stream. If Casai shows up, I'm gonna ask him.

10:55:14
<transcript>: what is

10:55:27
<transcript>: What is the next plugin you would recommend? Because I'm kind of like I'm Jonesin for another plugin. We just added Plague so we can look at like the AST and kind of figure out how to better use text objects.

10:55:37
<transcript>: Maybe you didn't copy the new line. Curlyos isn't. P you can answer this. Oh, it pays on the current character. It does.

10:55:44
<transcript>: Wait. You're saying the P. The P key map by default. Pace where you're at.

10:55:51
cowfacedude99: Yes

10:55:52
<transcript>: That's what you're saying, Cafes? I thought P pasted on the line below and capital P pasted on the line above. Why did I think that.

10:55:59
<transcript>: Only do that if there is a new line in the end of the copy buffer. Okay.

10:56:02
<transcript>: Welcome to Chat. Claudio.

10:56:02
<transcript>: welcome

10:56:08
laytanl_: Only when you yank the whole line it will do that

10:56:13
<transcript>: Welcome, welcome, welcome, welcome, welcome, welcome, welcome if you use Visual mode to copy it will paste in the current care, but if you copy a normal mode, it will copy the line, so when you paste it, we'll paste as a line.

10:56:15
<transcript>: Wait. Is this.

10:56:15
<transcript>: yeah i had a

10:56:15
claudiofreitas3: Thank you :)

10:56:17
<transcript>: Yeah. I had a hectic week of work here. Good. Frag.

10:56:17
<transcript>: only

10:56:19
laytanl_: like 'yy' or 'dd'

10:56:24
<transcript>: Only when you yanked the whole line. It will do that. Okay. Now that's good to know. Yeah. So if I do a Yank. Cool. Okay.

10:56:24
<transcript>: that's so

10:56:25
laytanl_: will go on new lines

10:56:28
<transcript>: That's. So I thought something was broken. It's good to know it's not.

10:56:41
<transcript>: So we added playground. So I'm over here now, and I'm gonna do TS playground. I believe there it is. There's our playground. We're gonna make this bigger.

10:56:41
<transcript>: and let's play with

10:56:46
<transcript>: And let's play with this. So let's play with the playground. So do we see blocks.

10:56:48
<transcript>: Body.

10:56:48
<transcript>: very

10:56:50
<transcript>: Very variable declarator.

10:56:55
<transcript>: So these are import statements.

10:57:03
laytanl_: When you do 'o' in the playground it will open the query buffer

10:57:06
<transcript>: Import statements. There's constant. So it's lexical declaration. How do these map to.

10:57:09
<transcript>: These maps.

10:57:09
<transcript>: to

10:57:11
<transcript>: To.

10:57:13
aarrjaay: is there a way to paste a whole line except the \n?

10:57:14
<transcript>: X objects. Or maybe they don't.

10:57:16
<transcript>: They don't.

10:57:25
<transcript>: When you do oh in the playground, it will open the query buffer.

10:57:25
<transcript>: oh

10:57:26
aarrjaay: ...so you can paste in the middle of a line?

10:57:29
<transcript>: Oh, write your query here. Oh.

10:57:31
<transcript>: Okay.

10:57:34
laytanl_: Then you can copy https://github.com/nvim-treesitter/nvim-treesitter-textobjects/tree/master/queries/ecma into there and you see the things contexts use

10:57:37
<transcript>: Down here. How do I get to it.

10:57:40
<transcript>: Now I get to.

10:57:44
<transcript>: Normally I do that. Oh, that'd be the window.

10:57:47
<transcript>: Yeah? Control? W.

10:57:47
<transcript>: there we go

10:57:49
<transcript>: There we go.

10:57:54
<transcript>: Right here. Query here. Like node capture. Okay, like node.

10:57:58
<transcript>: Capture? Is that not what they meant.

10:58:03
<transcript>: With the curser under the capture to how I the matches.

10:58:07
<transcript>: What under the capture to highlight the matches.

10:58:12
<transcript>: Put the cursor under the capture.

10:58:18
<transcript>: I'm too dumb for ne of them.

10:58:27
<transcript>: Is there a way to paste the whole line except the new line so you can paste in the middle of the line.

10:58:32
<transcript>: Oh late and you can copy.

10:58:35
<transcript>: Something into.

10:58:35
<transcript>: there and you see

10:58:40
aarrjaay: (sorry, asking chat as we were talking about pasting)

10:58:41
<transcript>: There and you see the thing the things context use. Okay. Let's copy. Let's see what this is.

10:58:41
<transcript>: what did

10:58:43
<transcript>: What did Latent send us.

10:58:46
<transcript>: Text, objects.

10:58:46
<transcript>: sem

10:58:47
<transcript>: Sem.

10:58:49
<transcript>: Oh.

10:58:49
<transcript>: wait

10:58:51
<transcript>: Wait.

10:58:51
<transcript>: do

10:58:59
<transcript>: Do I understand this? Not sure. So this is shown. Okay. So that's parameter outer. So if I want to know what parameter outer is.

10:58:59
<transcript>: i can look

10:59:01
<transcript>: I can look at this.

10:59:01
<transcript>: form

10:59:05
<transcript>: Formal parameter like I can paste this whole query or something.

10:59:13
<transcript>: Copy. Oh, you're good. Rj.

10:59:13
<transcript>: i'm follow

10:59:16
<transcript>: I'm following a different conversations going on here.

10:59:16
<transcript>: you can see

10:59:24
<transcript>: You can see things context use. So like if I want to understand what is a block, for instance.

10:59:29
<transcript>: What is a block.

10:59:32
laytanl_: I just copy all of that into that buffer, then you can put your cursor on an '@xyz' and it will highlight that in your actual code

10:59:39
<transcript>: Statement. Block, block blocks, block inner black. Adder. So if I paste in this query, you're saying.

10:59:48
<transcript>: That's a query I could paste in. Just. I just copy all of that into the buffer. Then you can put your cursor on an XYZ and it'll highlight your actual code. Okay.

10:59:48
<transcript>: i can put my

10:59:50
caldotjs: wouldnt y$ do that

10:59:51
<transcript>: I can put my cursor on it. That's what it said in the same.

10:59:55
<transcript>: So let's delete all this.

11:00:02
<transcript>: Think I'm following, I think.

11:00:08
<transcript>: I copied other things.

11:00:12
backkflipp: @aarRJaay I usually go into visual mode, press shift+4 to select all line and yank it

11:00:12
<transcript>: I copied some things I shouldn't have copied.

11:00:20
<transcript>: Here we go. Okay. So now you're saying I can just put my cursor wherever I want.

11:00:22
<transcript>: Allegedly.

11:00:26
<transcript>: Oh, it's doing things, yeah, yeah, it's doing things.

11:00:30
<transcript>: Let's go to the top.

11:00:33
<transcript>: So function declaration.

11:00:36
<transcript>: Let's make.

11:00:42
<transcript>: Let's make this window pane. How do I do that with window panes.

11:00:52
<transcript>: It, remember? So I've got a V split going on here. Anyone know how do I change the size of my Bee split? Oh, somebody said they just use their mouth and that's fair.

11:00:52
<transcript>: that's

11:01:00
<transcript>: That's totally fair. That's a case where maybe I just use my mouse. I know there's a key map for this. Don't remember the function declaration.

11:01:08
<transcript>: View.

11:01:10
<transcript>: Now I'm gonna go back over here.

11:01:17
<transcript>: So I can put my cursor.

11:01:19
cowfacedude99: If you need another plugin to move around https://github.com/ggandor/leap.nvim I have used it's predecessor lightspeed and it's pretty nice.

11:01:20
<transcript>: There on these things.

11:01:20
<transcript>: so function

11:01:20
backkflipp: Mouse?!?!?!?!!? Reported!

11:01:20
laytanl_: You need to put your cursor on something that starts with \@

11:01:25
<transcript>: So function outer. That's showing me functions. I think I'm getting it.

11:01:25
<transcript>: mouse

11:01:26
<transcript>: Mouse reported.

11:01:30
<transcript>: Backflip.

11:01:31
laytanl_: Yeah you got it

11:01:34
<transcript>: Wouldn't why.

11:01:34
<transcript>: why

11:01:37
<transcript>: Why dollar sign, do that? Do what.

11:01:43
<transcript>: Are you talking about? You have another conversation? Maybe usually go into visual mode. Press shift.

11:01:43
<transcript>: for

11:01:47
<transcript>: For to select all line and yank it.

11:01:47
<transcript>: shift

11:01:50
<transcript>: Shift so dollar sign? Yeah.

11:01:53
<transcript>: Invisible. Yeah. That's what I would do.

11:01:57
<transcript>: Oh, you guys are having a separate conversation.

11:02:02
<transcript>: Like, yeah, I would do that in some cases when I want to copy a whole buffer.

11:02:02
<transcript>: if you need another

11:02:05
<transcript>: If you need another plugin to move around, leave.

11:02:05
<transcript>: i've used

11:02:11
<transcript>: I've used its predecessor Light Speed and it's pretty nice. I'm very curious what Cafes has to recommend here.

11:02:14
<transcript>: Leap. I did consider.

11:02:14
<transcript>: harp

11:02:16
caldotjs: y$ would only select to the last character then pasting should not paste the newline like yy would?

11:02:16
<transcript>: Harpoon Although I.

11:02:23
<transcript>: Like it looks awesome. I watched I saw in one of my.

11:02:23
<transcript>: primes

11:02:26
<transcript>: Primes YouTube videos. Him kind of like using it.

11:02:26
<transcript>: it looked like

11:02:29
<transcript>: It looked like well made serves. A very.

11:02:33
cowfacedude99: harpoon is something you need to get used to.

11:02:47
<transcript>: Clear need. I just don't know if it's a need I have. I don't know how often I have, like, a handful of buffers open. I want to go back and forth between it. Maybe it happens in certain projects and I just don't remember. But it feels like I'm just all over the place, like I don't ever really have any rhyme reason. Doesn't feel like I'm like.

11:02:47
<transcript>: back and forth

11:03:02
<transcript>: Back and forth between a couple buffers and it makes sense to pin them in that way, but definitely cloud by adding Harpoon Leap is a general purpose motion plugin for new of them with the ultimate goal of snapching a new standard interface from moving around into the Blue and Vimlike Editors.

11:03:02
<transcript>: interesting

11:03:07
<transcript>: Interesting be a common denominator and unite the strengths of various similar plugins like sneak.

11:03:07
<transcript>: easy mot

11:03:10
<transcript>: Easy motion, pounce.

11:03:14
cowfacedude99: I wouldn't recommend you to start with it right now. Telescope buffers would work nicely for you right now IMO

11:03:18
<transcript>: To reach a level assessive sophistication where one does not have to think much about the motion commands anymore.

11:03:18
<transcript>: just be able to

11:03:21
<transcript>: Just be able to reach any target and a blink.

11:03:21
<transcript>: while keeping

11:03:25
<transcript>: While keeping the requiremental effort close to zero. That sounds nice.

11:03:29
<transcript>: How much is that? Just like Vim, though? Is it.

11:03:31
cowfacedude99: sneak is pretty well known

11:03:34
<transcript>: Rewiring my brain if I'm already starting to get used to some vim stuff.

11:03:38
<transcript>: How to use it TLDR initiate the search.

11:03:38
<transcript>: in the

11:03:44
<transcript>: In the forward s or backward direction, or in the other window.

11:03:49
<transcript>: Start typing a two character pattern.

11:03:58
caldotjs: I think extending motions isn't the best if you don't know the standard motions yet

11:04:01
<transcript>: After timing the first character, you see labels appearing next to some of the C one pairs cannot use the label jet. Is it convenience? At this point you can just start walking through the matches using Inter tab.

11:04:01
<transcript>: else

11:04:03
<transcript>: Else.

11:04:03
<transcript>: interest c two

11:04:04
laytanl_: I don't like these kinds of plugins

11:04:05
<transcript>: Interest C. Two if the pair was not late.

11:04:10
backkflipp: @caldotjs But that doesnt select all line, as the characters that are before the cursor arent selected...

11:04:11
laytanl_: but its personal preference

11:04:18
<transcript>: We're gonna keep looking at this. You need to put your cursor on something that starts with App, okay. Yeah, we got it.

11:04:22
<transcript>: Why dollar sign would only look okay.

11:04:22
<transcript>: harp

11:04:31
kreleos: Is leap like avy  on Emacs?

11:04:35
<transcript>: Harpoon is something you need to get used to. I wouldn't recommend you to start with it right now. Yeah, I agree. Telescope buffers would work nicely for you right now. Agreed. I just never remember my command to bring up Buffers. We'll check here in a second. Sneak is pretty well known. Okay.

11:04:40
caldotjs: @caldotjs 0y$

11:04:40
<transcript>: Yeah, we're still learning the standard motions? It's true.

11:04:40
<transcript>: we're still

11:04:48
<transcript>: We're still getting used to the standard of emotions. The Hunk thank you so much for the follow. Welcome.

11:04:52
<transcript>: I don't like these kinds of plugins, says latent.

11:04:52
<transcript>: but

11:04:59
<transcript>: But it's personal preference is leap, like Abby on Emacs. Now we're getting this up. I really don't know.

11:04:59
<transcript>: the

11:05:01
<transcript>: The Zero Y dollar sign.

11:05:01
<transcript>: what would that do

11:05:07
<transcript>: What would that do? Zero y dollar sign. Oh, you guys are still having another conversation, okay.

11:05:07
<transcript>: any other

11:05:10
<transcript>: Any other like Cafe surgery if you're still here any other.

11:05:12
<transcript>: Like less.

11:05:12
<transcript>: opinionated

11:05:17
<transcript>: Opinionated. Like just like more like you should definitely have this plugin. You're missing it.

11:05:17
<transcript>: you're dumb

11:05:21
<transcript>: You're dumb? Why don't you have it anything like that.

11:05:28
<transcript>: Down here. Okay, so function outer. So we're seeing all the functions.

11:05:28
<transcript>: that's

11:05:30
<transcript>: That's cool.

11:05:33
cowfacedude99: let me dig into my rc......

11:05:34
<transcript>: What is different in between these two.

11:05:34
<transcript>: function

11:05:40
<transcript>: Function body statements. These are the same line of function declaration versus function.

11:05:40
<transcript>: okay

11:05:41
<transcript>: Okay.

11:05:44
<transcript>: Let's just do this. Let's say.

11:05:44
<transcript>: app

11:05:45
<transcript>: App.

11:05:49
<transcript>: And then let's bounce around so function.

11:05:52
<transcript>: Where am I.

11:05:56
caldotjs: I think before adding more plugins you could utilize telescope more. I have a picker for open buffers, files tracked by git, live grep and diagnostics

11:05:57
backkflipp: @caldotjs Nice!

11:06:04
<transcript>: The cursor I've got right now in alacrity.

11:06:11
<transcript>: This is confusing. I can't tell which ones actually selected it's the one that doesn't have the box on it actually.

11:06:11
<transcript>: because highlights

11:06:11
caldotjs: @cowfacedude99 can you link me your dots rq? would be interesting

11:06:14
<transcript>: Because highlights are, yeah, it's kind of interfering.

11:06:15
backkflipp: I didnt know about the 0

11:06:18
<transcript>: Okay. So that's function here is something.

11:06:18
<transcript>: block

11:06:19
<transcript>: Block start.

11:06:19
<transcript>: block

11:06:21
<transcript>: Block, end.

11:06:23
<transcript>: No.

11:06:29
<transcript>: Is this function inner. This is function inner. Right here.

11:06:29
<transcript>: now

11:06:32
caldotjs: @backkflipp happy we found something that works for you :)

11:06:32
<transcript>: Now, that's not what is that.

11:06:35
<transcript>: Whole thing bigger.

11:06:40
<transcript>: Key, more.

11:06:45
<transcript>: Function.

11:06:48
<transcript>: So now I got to figure out I'm gonna go over here.

11:06:51
<transcript>: That's.

11:06:51
<transcript>: a fill on function

11:06:55
<transcript>: A fill on function declaration statement block.

11:07:02
<transcript>: I don't know what that is. Is that the return statement function in there.

11:07:12
<transcript>: Maybe. I don't need to worry about some of these starting ends. I should look at these bigger ones. So there's more. That's an export statement.

11:07:12
<transcript>: okay

11:07:13
<transcript>: Okay.

11:07:13
<transcript>: function

11:07:15
<transcript>: Function Adder.

11:07:19
backkflipp: I wasnt the one asking but that is definitely a better way... it has been memorized as I will use it for sure.

11:07:23
<transcript>: Function.

11:07:23
<transcript>: hello

11:07:24
<transcript>: Hello.

11:07:24
<transcript>: cursor

11:07:27
<transcript>: Cursor moved auto commands for buffer 13.

11:07:31
<transcript>: Since comments ID is null value. Interesting.

11:07:35
<transcript>: What are these arrow folks.

11:07:35
<transcript>: so

11:07:38
<transcript>: So, arrow functions.

11:07:41
<transcript>: This is really interesting.

11:07:41
<transcript>: this playground

11:07:43
<transcript>: This playground is.

11:07:46
<transcript>: Using it right.

11:07:51
<transcript>: So arrow function. Here we go. Function, Adder so.

11:08:06
<transcript>: Function. Adder. This should only highlight arrow functions. So if I Scroll here looking for a function that's not an Aero function, there are none. Let's go to the buffer that has one. I think server TS. That's something.

11:08:06
<transcript>: broken

11:08:10
<transcript>: Broken. So these are not Aero functions. So if I come back over here.

11:08:17
<transcript>: That function Adder, and that function inner.

11:08:24
<transcript>: Yeah, that function Adder does not highlight these because they're not Aero functions. But if I go up here that function.

11:08:24
<transcript>: should

11:08:25
<transcript>: Should.

11:08:25
<transcript>: oh

11:08:27
<transcript>: Oh no.

11:08:31
<transcript>: Why.

11:08:32
<transcript>: Function.

11:08:35
<transcript>: Outer.

11:08:40
<transcript>: Stand.

11:08:44
<transcript>: Work statements.

11:08:45
cowfacedude99: Do you have www.github.com/folke/which-key.nvim

11:08:47
laytanl_: No I think it shows every single match for function.outer not only the one you are on

11:08:51
<transcript>: Is there just a bug? Because I keep running into that thing. Whatever that is.

11:08:55
kreleos: since we are on treesitter, nvim-treesitter-refactor is also cool

11:08:57
<transcript>: A method definition class declaration.

11:08:58
laytanl_: You are now in a playground for another buffer

11:09:04
<transcript>: Let's go back to shared.

11:09:08
laytanl_: Thats why nothing is higlighting here

11:09:09
<transcript>: Do you have.

11:09:09
<transcript>: oh

11:09:16
<transcript>: Oh, it's it's for the. It's not for the current buffer. Yeah, it doesn't know. It's just the buffer I'd pulled up earlier.

11:09:19
<transcript>: That makes sense.

11:09:28
<transcript>: Thing before adding more plugins, you could utilize Telescope more definitely.

11:09:28
<transcript>: i have a picture

11:09:35
<transcript>: I have a picture for open buffers files tracked by Git, Live, Grep, and Diagnoses. Yeah. What's going to our key maps? We'll look in that.

11:09:39
<transcript>: And we'll see how we're not taking advantage of telescope maybe.

11:09:43
<transcript>: I.

11:09:52
<transcript>: Wasn't the one asking, but that is definitely a better way. It's been memorized as I'll use it for sure. Oh, you guys are still talking with them.

11:09:57
<transcript>: Which key cafes? I don't believe that I do.

11:09:59
<transcript>: Copying.

11:10:03
<transcript>: You know what I've thought about doing today on stream.

11:10:03
<transcript>: i don't know how

11:10:14
<transcript>: I don't know how big a project this would be, but I thought about I used to use Rectangle on a Mac for window management. I moved over to you by, but honestly, I don't know that I'm sold.

11:10:14
<transcript>: if i

11:10:25
stroopwafel26: Rectangle is life

11:10:25
<transcript>: If I counterpres me crazy, I think I'm so used to having more control over how I want to lay things out. And that's what I had with rectangle. The only reason I'm not still using rectangle is.

11:10:25
<transcript>: you can't

11:10:44
oleksii_lisovyi: Heyo Adam!

11:10:45
<transcript>: You can't set just like a bottom padding. If you set a padding on your windows, it's all the way around. So it's open source. I think I might try and submit a PR Direct angle on Stream today. We'll see. I think it's open source if it is, I'd love to have an option to just build a set padding independently because if I could set bottom padding on rectangle, it's my perfect window manager and I'd be happy.

11:10:52
<transcript>: I can just add some key commands for moving stuff around, and it's not so hard to take over when I want to take over.

11:10:54
caldotjs: now I am confused :O switching desktops w/o animations is a dealbreaker for yabai

11:10:56
<transcript>: So which key? What does this do.

11:10:58
stroopwafel26: it's open source https://github.com/rxhanson/Rectangle

11:10:59
<transcript>: Create key bindings that stick which key is a little plugin for new.

11:10:59
<transcript>: five

11:11:03
<transcript>: Five that this was a popup with possible key bindings of the command you started typing.

11:11:06
<transcript>: That sounds helpful.

11:11:08
nutlesssquirrel: I use Amethyst as my tile manager on mac

11:11:10
oleksii_lisovyi: Rectangle – love it, not that we do (c) LUL

11:11:12
<transcript>: Opens a popup with.

11:11:14
<transcript>: Oh, that's cool.

11:11:16
<transcript>: Wait there already have it.

11:11:16
<transcript>: i don't

11:11:18
<transcript>: I don't think I do.

11:11:22
<transcript>: Go over.

11:11:22
<transcript>: here

11:11:24
<transcript>: Here.

11:11:26
<transcript>: Like this.

11:11:26
<transcript>: much bigger

11:11:28
<transcript>: Much bigger.

11:11:33
<transcript>: A lot of keys I just type. Let's go to plugins.

11:11:35
<transcript>: Which.

11:11:35
<transcript>: oh not

11:11:40
<transcript>: Oh, not in here. So let's add which key that sounds like a good one.

11:11:45
<transcript>: Packer.

11:11:50
kreleos: legendary.nvim is kinda similar and can be intergrated with which-key as well

11:11:52
<transcript>: Just use the default.

11:11:57
<transcript>: Let's just add it to the bottom. Here.

11:12:00
<transcript>: Use.

11:12:02
<transcript>: That.

11:12:05
cowfacedude99: @cowfacedude99 https://github.com/adgai19/nvim-config/ I haven't updated them in a while, so they might not be so current (with my move with nix I kind of left it there)

11:12:13
<transcript>: Key.

11:12:21
<transcript>: Updating, Alpha.

11:12:23
<transcript>: Why is it red like that.

11:12:28
<transcript>: Hey.

11:12:38
<transcript>: That doesn't look great. What's going on? Let's get some music going. We're gonna listen to something different today. I don't know what it is, but something different.

11:12:38
<transcript>: thanks so much

11:12:40
<transcript>: Thanks so much for the Follow Andre.

11:12:40
<transcript>: i appreciate

11:12:43
<transcript>: I appreciate that follow.

11:12:54
<transcript>: Rectangle is life. Hey, Lexi.

11:13:00
<transcript>: Now I'm confused switching desktops without animations at Deal breaker for you by.

11:13:06
<transcript>: There's no animation. I think I get animations when I switch. Like that's. Animations.

11:13:15
<transcript>: Use Amethyst as my tile manager on Mac. Does it allow you to set up a bottom padding only if I just want to set a bottom padding and nothing else.

11:13:21
cowfacedude99: and I haven't had a chance to setup on nix.

11:13:22
<transcript>: Then I would consider, Amethyst I love it not that we do.

11:13:25
<transcript>: Not see.

11:13:33
<transcript>: What'd you mean Alexi legendary Inv is kind of similar and can be integrated with which key as well.

11:13:35
<transcript>: Legendary.

11:13:38
<transcript>: I haven't updated them in a while so they might not.

11:13:48
caldotjs: you can disable that. so you instantly switch to the desktop bound to the key. its as close as you can get to i3 on mac

11:13:48
<transcript>: Be so current. Oh, you're looking at your dot files. Have I had a chance to set up on NYX? Okay, let's listen to something. I don't know what I want to listen to, but I don't think I want to listen to.

11:13:51
andreull: do you know Marty?

11:13:53
<transcript>: We could try some Discover Weekly. Let's see what it's like this week.

11:13:55
<transcript>: Okay.

11:13:59
andreull: have you met him?

11:13:59
<transcript>: This feels bad. This feels broken.

11:13:59
<transcript>: it

11:14:03
<transcript>: It does say it installed it. Let's just save the file again.

11:14:10
<transcript>: Okay, everything's up to date.

11:14:10
nutlesssquirrel: I think it can. I have a larger bottom padding than anything else. Give me a second. I'll double check

11:14:13
<transcript>: Let's go into Nope.

11:14:13
<transcript>: let's

11:14:16
<transcript>: Let's go, let's make a new file here.

11:14:16
<transcript>: we'll call it

11:14:18
<transcript>: We'll call it.

11:14:20
<transcript>: Which e.

11:14:20
<transcript>: will

11:14:22
<transcript>: Will.

11:14:27
<transcript>: And will require and do all that stuff.

11:14:29
<transcript>: Our which key.

11:14:29
<transcript>: it's just the default

11:14:33
<transcript>: It's just the default setup, right. Okay. We'll see if I do this from memory.

11:14:38
<transcript>: Let's say local.

11:14:42
<transcript>: And.

11:14:42
<transcript>: which

11:14:43
<transcript>: Which.

11:14:45
<transcript>: Key.

11:14:48
<transcript>: Equals PCAL.

11:14:51
<transcript>: Require.

11:14:53
<transcript>: Which.

11:14:56
<transcript>: I do it.

11:14:59
<transcript>: Did I do it.

11:14:59
<transcript>: if

11:15:00
<transcript>: If.

11:15:01
<transcript>: Status.

11:15:05
<transcript>: I don't know I'm lost now.

11:15:09
<transcript>: Javascript that's when I should mail.

11:15:11
<transcript>: This is looking. Another buffer.

11:15:14
oleksii_lisovyi: That's a reference to the well know Senior JS Dev YT video, where he says "JavaScipt – love it" and later on "I recommend TypeScript, not that we do". https://youtu.be/Uo3cL4nrGOk

11:15:22
<transcript>: If not status, then return. Did I get everything else? Right? Pecall require. Yeah, yeah. If not status.

11:15:22
<transcript>: then return

11:15:23
<transcript>: Then return.

11:15:23
<transcript>: oh that was not

11:15:25
<transcript>: Oh, that was not what I meant to do.

11:15:28
<transcript>: Okay.

11:15:33
<transcript>: And then we're going to say.

11:15:36
kreleos: nailed it!

11:15:36
<transcript>: Which key? Oh.

11:15:40
<transcript>: Which key dot setup.

11:15:43
<transcript>: Okay, cool.

11:15:47
<transcript>: Ins. I don't think I did.

11:15:51
<transcript>: It doesn't really matter, I guess.

11:15:55
<transcript>: I'm not using an over here.

11:16:00
<transcript>: Let's do this now. We'll go back over here.

11:16:03
<transcript>: Thanks to the follow.

11:16:06
<transcript>: Esoft, and also RJ.

11:16:06
<transcript>: i appreciate

11:16:10
<transcript>: I appreciate it. Nailed. It. Almost curly. US. Almost.

11:16:12
<transcript>: Do I Know Marty.

11:16:15
<transcript>: Andre Marty is my father.

11:16:24
<transcript>: That's true. My dad is name is Marty. But I don't know if I know the Marty you're referring to. Have you met him? I don't know. Have I have I met Marty.

11:16:33
nutlesssquirrel: ok back. Yes you can set bottom padding only if you want

11:16:35
<transcript>: You can disable that. So you instantly switch to the desktop, bound to the key. It's as close as you can get to Ice. Run a Mac. Yeah, actually, I do that. Yeah. So like if I'm gonna go up here.

11:16:43
<transcript>: And do that. I just kind of like the swipe motion. I don't know. It's like the only reason I use my mouse anymore. My trackpad how I get.

11:16:43
fullstacklive: Good morning, Adam!

11:16:47
<transcript>: What is this? Alpha has an issue that's okay.

11:16:49
<transcript>: In them.

11:16:49
<transcript>: oh i gotta

11:16:50
andreull: the guy moved to the Ozarks, cool guy, works in finance for dubious companies though

11:16:51
<transcript>: Oh, I gotta close all these buffers.

11:17:00
<transcript>: Okay. So we were in shared. Yeah. Right there.

11:17:00
<transcript>: okay

11:17:01
<transcript>: Okay.

11:17:08
<transcript>: What am I looking for now? Which key? So when I start typing something I should get some which key stuff going on. So if I'm like.

11:17:10
<transcript>: Leader.

11:17:12
<transcript>: Leader. There we go.

11:17:12
<transcript>: max

11:17:16
<transcript>: Max face to go up one level. Escape the close.

11:17:22
<transcript>: So we're the suggestion.

11:17:22
<transcript>: mac safe to go

11:17:24
<transcript>: Mac safe to go up a level.

11:17:24
<transcript>: whoa

11:17:25
<transcript>: Whoa.

11:17:25
<transcript>: there's just so many

11:17:30
oleksii_lisovyi: You also can use Ctrl + Left / Right to move through the workplaces on MacOS.

11:17:30
<transcript>: There's just so many with the leader key that it can't just show, like a little preview, right? That's what saying.

11:17:37
<transcript>: Does that work only with leader key stuff Oops or is it work like if I start doing.

11:17:37
<transcript>: a delete

11:17:39
<transcript>: A delete? In.

11:17:39
<transcript>: oh

11:17:40
<transcript>: Oh.

11:17:40
<transcript>: lead

11:17:42
<transcript>: Lead inside. Whoa.

11:17:46
<transcript>: That's pretty cool, I guess.

11:17:46
<transcript>: it's just

11:17:48
<transcript>: It's just jarring a little bit.

11:17:51
<transcript>: Escaped to close.

11:17:56
<transcript>: So I'm like, I want to delete this thing that I don't know what to do. So I'm gonna delete.

11:17:56
<transcript>: a and it's

11:17:59
<transcript>: A and it's gonna tell me stuff, right? Delete around.

11:17:59
<transcript>: yeah

11:18:05
<transcript>: Yeah. This is helpful. This is great. Actually, for someone still learning all these.

11:18:08
<transcript>: It'll help me not have to go back and forth between Docs and stuff.

11:18:09
rj11235: if you dont want it popping too fast increase the timeoutlen

11:18:14
cedpoilly: That's cool. I'd definitely use it to learn!

11:18:14
<transcript>: Cool. Thank you so much for that suggestion. Which key? I like it. Thank you. Cafe.

11:18:17
<transcript>: Good morning.

11:18:22
aivars_meijers: 👋 whatsup

11:18:26
<transcript>: Okay. Back. Yes, you can set bottom padding only not list. Oh, well, there we go. We don't need to make a PR for rectangle, if that's okay.

11:18:30
<transcript>: Let's check out amethyst.

11:18:30
<transcript>: let's see

11:18:31
<transcript>: Let's see.

11:18:31
<transcript>: to reference the well known

11:18:39
<transcript>: To reference the well known senior JS. Dev YouTube video where he says, JavaScript love it, and later on I recommend TypeScript, not that we do.

11:18:47
<transcript>: Not that we use sidescript, but like I like it now. I use only TypeScript. There's a video. Alexia sent me the video. Here.

11:18:50
<transcript>: I'm gonna copy that one for later.

11:18:54
<transcript>: I.

11:18:59
<transcript>: Can set bottom panning only we're gonna check out anethyst good morning, full SEC live.

11:18:59
<transcript>: it's

11:19:03
<transcript>: It's playing, it's playing. Let's just play it.

11:19:06
<transcript>: Who's this guy.

11:19:11
<transcript>: Programmers are all so human.

11:19:15
<transcript>: I like the video.

11:19:18
<transcript>: All right? Must stay focused.

11:19:29
<transcript>: Good morning, full stack. Good morning. Good morning. The Guy moved to the Ozark. Tomat, Marty, now Andre move to the RZX Ozark's. Cool Guy works in finance for dubious companies, though.

11:19:33
fullstacklive: o/ @aivars_meijers

11:19:39
<transcript>: Okay. I gotta go back here and make sure. Yeah. So your first time chatter. Welcome to Chat, Andre. You hop in chat and you say, do you know Marty.

11:19:39
<transcript>: have you met him

11:19:40
<transcript>: Have you met him.

11:19:45
<transcript>: The Ozarks. I mean while rural.

11:19:45
<transcript>: and relatively

11:19:45
oleksii_lisovyi: BTW @adamelmore we don't hear anything from YT

11:19:46
laytanl_: If you use a lot of markdown, iamcco/markdown-preview.nvim is pretty cool

11:19:48
<transcript>: And relatively small. It is a big place. So.

11:19:48
<transcript>: i probably

11:19:55
<transcript>: I probably know a handful of Marty's, my English teacher, my software high school, is named Marty. Marty spent.

11:19:55
<transcript>: my father

11:19:58
<transcript>: My father, Martie Elmore, is my father.

11:19:58
<transcript>: i probably think

11:20:06
<transcript>: I probably think some other Marty's I know, but I love that you jumped in chat and you just you start with. Do you know Marty? Have you met him.

11:20:06
<transcript>: he's a guy that

11:20:08
<transcript>: He's a guy that moved the Ozarks.

11:20:15
backkflipp: "Programmers are also humans" LUL What a lie....

11:20:19
<transcript>: It's just funny to me. I don't know. I feel like I'm trolling. I'm not like messing with you. I just think that's really funny. Genuinely. I think it's funny. I do appreciate you joining chat. Thank you so much. Petter.

11:20:19
<transcript>: thank you so much

11:20:21
<transcript>: Thank you so much for the followup.

11:20:36
<transcript>: You can also control plus left, right to move through the workspace on Mac OS. Oh, I didn't know that you're saying any by I can do that. Or that's just a Mac thing. Control left, right.

11:20:38
charliec97: @backkflipp So true

11:20:39
<transcript>: I may have a different control.

11:20:43
<transcript>: That's not it that was back on the browser.

11:20:43
<transcript>: that may not

11:20:56
<transcript>: That may not be something I have bound, Alexi. All right, welcome to Chat. If you don't want it popping too fast, increase the timeout length. Okay, so on which key? We can increase the timeout length. That sounds good. That sounds good.

11:20:59
nutlesssquirrel: I think that mapping is command left right

11:21:00
<transcript>: Definitely use it to learn.

11:21:00
<transcript>: yeah it's

11:21:04
<transcript>: Yeah, it's seems good. Averse? What's going on? Avers.

11:21:06
<transcript>: Welcome.

11:21:09
<transcript>: You in full stack lives seem to know each other. He's waving at you.

11:21:23
<transcript>: I gotta spend less time on stream so I could follow some of these people like Avers and Full Stack Live. I need to watch other people's streams. I just don't have a lot of time for that when I'm always on stream. Like, the only times I met my computer, I'm streaming.

11:21:27
<transcript>: You don't hear anything from YouTube.

11:21:27
<transcript>: i'm sorry

11:21:29
<transcript>: I'm sorry? What? Alexey.

11:21:29
<transcript>: you don't hear

11:21:33
nutlesssquirrel: you can setup in system prefrences cntrl + 1, 2, 3 for workspaces.

11:21:40
<transcript>: You don't hear anything from YouTube? Oh, yeah, yeah. Oh, I thought you meant I was streaming to YouTube, and I didn't mean to be, so I was hoping that wasn't the case. Yeah. No, I didn't. I'm not playing System audio anymore.

11:21:40
<transcript>: i have to intention

11:21:43
<transcript>: I have to intentionally do it and.

11:21:43
<transcript>: yeah

11:21:52
sondreal: adamel4DealWithIt yo

11:21:53
<transcript>: Yeah, that's why if you use a lot of markdown markdown preview is pretty cool. Oh yeah, I do need a markdown preview for sure. That's something I got used to having in vs. Code.

11:21:56
<transcript>: Well. Oh, that's not it.

11:21:56
<transcript>: that's not it

11:21:57
<transcript>: That's not it.

11:21:57
<transcript>: it's not

11:21:59
oleksii_lisovyi: Looks like you should enable that hotkey – that's key binding is a default one for MacOS.  Unless that strange named app rewrite something on that level.

11:21:59
<transcript>: It's not that.

11:22:02
<transcript>: Apparently I did not copy all of it.

11:22:07
<transcript>: That's not a file. I want to open it's just a thing. I want to search.

11:22:11
<transcript>: We'll pull that up in a minute.

11:22:13
<transcript>: Programs are also human.

11:22:13
<transcript>: humans

11:22:15
<transcript>: Humans, what a lie.

11:22:18
<transcript>: Oh, that's in that video, I guess.

11:22:25
<transcript>: I think that mapping is command, left, right, command, left, right. You can set up in system preferences.

11:22:25
<transcript>: control

11:22:29
<transcript>: Control. One, two, three, for Workspaces. Yeah, I've got it. I think with.

11:22:29
<transcript>: sk

11:22:32
<transcript>: Skd. I think I've got that set up.

11:22:32
<transcript>: or maybe

11:22:37
<transcript>: Or maybe to buy. I don't know. Sandrails. Here. Deal with it.

11:22:37
<transcript>: deal

11:22:44
<transcript>: Deal with it. Emote love it looks like you should enable that hockey that's key binding as a default one for Mac OS.

11:22:51
<transcript>: I think I remember explicitly unmapping those because I use something.

11:22:51
<transcript>: i think

11:22:53
<transcript>: I think it was so that I could use.

11:22:53
<transcript>: you buy

11:22:55
<transcript>: You buy.

11:22:55
<transcript>: or something

11:22:57
laytanl_: Just got a full page of requirements for a ticket in the most broken English ever, I love my job WutFace

11:23:03
<transcript>: Or something, but I've got this working where I can just like toggle workspaces with command and then a number. I don't know. Maybe that is just built in the Mac. Maybe that's not you buy.

11:23:03
<transcript>: okay we've got

11:23:06
<transcript>: Okay. We've got a small list of things here we're gonna do now. We're going.

11:23:06
<transcript>: to check out

11:23:13
<transcript>: To check out amethyst. You don't have a link for amethyst. Amethyst. Oh, that's that's bad.

11:23:15
<transcript>: Amy assist.

11:23:15
<transcript>: and with this

11:23:18
<transcript>: And with this Crystal. But how about Window manager.

11:23:21
<transcript>: There it is.

11:23:21
<transcript>: from macos

11:23:23
<transcript>: From macOS.

11:23:40
<transcript>: Just got a full page of requirements for a ticket in the most broken English ever. I love your job I love my job I also love your job latent I love your job because in my mind latent's job is watch my stream and write cool neovem stuff to make everyone's life better. That's latent's job in my mind.

11:23:40
<transcript>: i

11:23:43
<transcript>: I wish that were your job late.

11:23:43
<transcript>: how much

11:23:47
<transcript>: How much would I how much would I to pay you for that to be your actual job.

11:23:52
laytanl_: I wish lol

11:23:53
<transcript>: Okay. Amnesys. I tried cooking on it. What happened? There we go.

11:23:53
<transcript>: this

11:23:54
nutlesssquirrel: If you have homebrew you can grab it via that.

11:24:01
<transcript>: This feels good. Quick. Screen cast. Wait. It's not doing things automatically. It's not binary sorting stuff, is it.

11:24:06
<transcript>: 's not doing that, is it? It's lets me set keyboard. Yes.

11:24:06
<transcript>: wait maybe

11:24:07
<transcript>: Wait. Maybe.

11:24:11
<transcript>: Does it. Let me move them where I want them.

11:24:12
<transcript>: Like.

11:24:24
<transcript>: Available layouts tall. Okay, we're gonna Dino the universe might implode when I install this, and we have like, I probably still have rectangle installed if I'm being honest.

11:24:24
<transcript>: sure do

11:24:25
<transcript>: Sure do.

11:24:33
<transcript>: Everything's gonna explode because I have rectangles you buy and amethyst but we're gonna try? We're gonna see.

11:24:33
<transcript>: i'm just kind

11:24:37
oleksii_lisovyi: LUL install them all!

11:24:37
<transcript>: I'm just kind of tired of you by taking over, you know.

11:24:42
<transcript>: Install them all.

11:24:44
<transcript>: Okay.

11:24:44
<transcript>: we might

11:24:50
<transcript>: We might. What's the other thing I was gonna do? There's another plugin. Markdown. Preview. Oh, I need the markdown. Lsp.

11:24:54
<transcript>: Neo vent.

11:24:57
<transcript>: Lsp markdown.

11:25:03
<transcript>: And I might need. I'm using Mason, right? I can probably just do that with Mason.

11:25:07
<transcript>: Mason.

11:25:14
<transcript>: Isn't that the point of Mason is just like install stuff when I want it.

11:25:19
<transcript>: I don't remember.

11:25:22
<transcript>: Mason Install, and then package.

11:25:25
<transcript>: So summer, right.

11:25:30
<transcript>: We need to get to know telescope better.

11:25:35
<transcript>: Let's see. Let's go over here.

11:25:41
<transcript>: I have gotten used to some of my SKD stuff that will be a bummer if I use something else.

11:25:45
<transcript>: I guess I could still use ESCD even if I don't use you to buy.

11:25:52
<transcript>: What am I doing over here? I'm going to Mason is.

11:25:52
<transcript>: just

11:25:54
<transcript>: Just do Mason.

11:25:57
<transcript>: Available. Here we go. Markdown.

11:26:01
<transcript>: I'm going to install markdown.

11:26:01
<transcript>: and json

11:26:03
<transcript>: And JSON probably.

11:26:09
<transcript>: There's. Markdown. Mark. Down. Lint.

11:26:09
<transcript>: oh

11:26:10
<transcript>: Oh.

11:26:10
<transcript>: why do i

11:26:12
<transcript>: Why do I want that.

11:26:13
oleksii_lisovyi: OK, Mason! Install shit Kappa

11:26:15
<transcript>: As I open markdown file so is that a good reason.

11:26:19
<transcript>: Maybe that's not a good reason.

11:26:21
hemanth_43: you can search

11:26:22
<transcript>: I need a markdown. Linter.

11:26:22
<transcript>: probably

11:26:23
hemanth_43: in that buffer

11:26:24
<transcript>: Probably not.

11:26:25
hemanth_43: with '/'

11:26:32
<transcript>: I was thinking more like highlighting and stuff, but do I already have that? Like if I just open a markdown file, let's go over here.

11:26:32
<transcript>: if

11:26:34
<transcript>: If I open to do.

11:26:40
<transcript>: That's not really great. I don't know what's going on here. Why is it highlighting some of these.

11:26:43
hemanth_43: I mean, in the mason buffer.

11:26:44
<transcript>: No information available. Why is it red, then.

11:26:48
<transcript>: You know what I'm saying? Uhoh, what was the.

11:26:53
<transcript>: Lsp? Saga? Okay, it's not happy.

11:26:58
<transcript>: So this is just a little ugly if I'm riding some Mark down, let's check out the README.

11:27:10
<transcript>: I don't know. I guess it has syntax filing. I don't know what I'm complaining about. It's just the the red, random stuff. I don't know what that's about.

11:27:14
<transcript>: Like.

11:27:14
<transcript>: planned

11:27:16
<transcript>: Planned versus.

11:27:16
<transcript>: in red

11:27:18
<transcript>: In Red. Angry text.

11:27:21
<transcript>: If anyone has the idea why that's the case.

11:27:37
<transcript>: You can see that buffer with splash in the Mason buffer. Oh, you're saying I could have searched in Mason? Yeah. Let's get call. I could have done, like, a markdown. Yeah, cool. Okay.

11:27:37
rj11235: i just use glow.nvim to preview mardown

11:27:40
<transcript>: I don't know. Maybe I don't need any LSPs.

11:27:40
<transcript>: that i'm

11:27:41
<transcript>: That I'm.

11:27:48
<transcript>: Any of these that I'm missing? Oh, we're gonna start playing with Astro. I will need that when we start playing with Astro.

11:27:48
laytanl_: I don't have any syntax/lsp in markdown

11:27:51
<transcript>: That's not right now.

11:27:51
<transcript>: you

11:27:52
laytanl_: just the preview

11:27:54
<transcript>: You know you know.

11:28:00
<transcript>: Css. Lsp. I don't write a lot of CSS these days. Mostly tailwind.

11:28:06
<transcript>: Why am I distracted with this right now? Also, why would my voice crack.

11:28:14
<transcript>: Json. I maybe I want that if it would format my files, why does it prettier format my JSON files and yield them anymore.

11:28:14
<transcript>: i mean

11:28:17
<transcript>: I mean it did in vs. Code. Why doesn't it in.

11:28:20
<transcript>: Terraform.

11:28:20
<transcript>: spelt

11:28:21
<transcript>: Spelt.

11:28:22
oleksii_lisovyi: jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj

11:28:25
<transcript>: Camel I read a lot of YAML.

11:28:32
<transcript>: Okay, this is a distraction.

11:28:34
<transcript>: I don't remember why I even came over there.

11:28:37
oleksii_lisovyi: Heartbreaking 💔

11:28:41
<transcript>: So amethyst I'm a little nervous. We're gonna do it. I'm just a little nervous to start that process.

11:28:41
<transcript>: marked on preview

11:28:43
<transcript>: Marked on Preview. We'll add this real quick.

11:28:47
<transcript>: Seems like a good idea.

11:28:49
<transcript>: Only works with Oh.

11:28:51
<transcript>: No, it's them.

11:28:51
<transcript>: so it's zero eight

11:28:55
<transcript>: So it's Zero 81, Neo VM. I. Was a little nervous.

11:28:58
<transcript>: So we want to Mark down preview vimpling.

11:29:06
<transcript>: Where's the Packer? There it is.

11:29:10
<transcript>: Do I have to do that.

11:29:12
rj11235: you can use null-ls.nvim to format files

11:29:14
<transcript>: And this in your Knit Lua or Plugins Lua.

11:29:14
<transcript>: without

11:29:17
<transcript>: Without yarn or NPM. Okay.

11:29:24
<transcript>: That sounds good to do it without yarn or NPM. Although I do have both of those things.

11:29:33
<transcript>: This is do it this way. That seems cool.

11:29:33
<transcript>: do not

11:29:35
<transcript>: Do not need those things.

11:29:38
<transcript>: Let's go down to the bottom.

11:29:44
<transcript>: Let's call it Markdown. Preview.

11:29:47
<transcript>: Yeah.

11:29:53
<transcript>: Feels good.

11:29:53
<transcript>: see

11:29:54
<transcript>: See.

11:29:54
<transcript>: install

11:29:56
<transcript>: Installed Marked on preview.

11:29:56
<transcript>: source

11:30:00
<transcript>: Source it. Do I need to configure it.

11:30:04
<transcript>: I probably need to configure it right.

11:30:16
<transcript>: Do I need to maybe I don't.

11:30:20
<transcript>: Here's some preview. Config.

11:30:27
<transcript>: Maybe the Sardy did the thing.

11:30:36
rj11235: with prettier or stylua or any other formatting app on your system

11:30:38
<transcript>: I don't know. Let's just try and use it. I guess.

11:30:38
<transcript>: mappings

11:30:41
<transcript>: Mappings. Normally. Insert.

11:30:48
fullstacklive: You need some Node setup. Bit of a hassle but well worth it.

11:30:50
<transcript>: So I could make a short one for it. But let's just try it with the long form.

11:30:53
<transcript>: Markdown Preview toggle.

11:30:53
<transcript>: so i'm in

11:30:56
<transcript>: So I'm in here. I say, Mark down.

11:30:59
<transcript>: I need to reopen this.

11:31:05
<transcript>: Okay, read me.

11:31:08
<transcript>: I say, markdown.

11:31:11
<transcript>: Preview.

11:31:12
jenswoeste: ohoy adam, ohoy chat. Its friday so next launch attempt of artemis approaching (NASA will target Saturday, Sept. 3 at 2:17 p.m. EDT)

11:31:15
<transcript>: Work done? Preview.

11:31:15
<transcript>: work

11:31:16
<transcript>: Work.

11:31:18
<transcript>: No.

11:31:18
<transcript>: oh it's opening

11:31:21
<transcript>: Oh, it's opening in the browser. Is that what it does.

11:31:23
<transcript>: That's that's what it does. Okay.

11:31:23
<transcript>: so it opens up

11:31:24
fullstacklive: Guess the Node setup is necessary for the live refresh.

11:31:27
<transcript>: So it opens up your browser. Interesting. Okay.

11:31:29
<transcript>: Hoyens.

11:31:29
<transcript>: it's friday

11:31:35
<transcript>: It's Friday. So next launch attempt of Artemis approaching NASA will target Saturday, September 3 So tomorrow.

11:31:35
<transcript>: tomorrow

11:31:38
<transcript>: Tomorrow. Nasa's gonna try again. Feels good.

11:31:44
<transcript>: I just use Gloat in Vim to preview markdown. Interesting.

11:31:44
<transcript>: let's see

11:31:46
<transcript>: Let's see what that is.

11:31:49
sondreal: just launch the rocket already

11:31:54
<transcript>: Copy link. I don't have any syntax. Lsp markdown just the preview. Is that what you prefer? Latent? Is that what you're saying.

11:31:54
<transcript>: thanks for the

11:31:57
<transcript>: Thanks for the follow Dumb Chicken, Briani.

11:31:59
fullstacklive: o/ @JensWoeste How's life?

11:32:02
<transcript>: Some of the names that you all have they're funny to me.

11:32:02
<transcript>: j har

11:32:05
<transcript>: J. Hartbreaking, So many days.

11:32:05
<transcript>: no

11:32:16
<transcript>: No LS to format files. Yeah. I think I'm doing that with Prettier. Yep. Kobeo. Thanks you so much for the following. Thank you. Thank you so much. Kod Leo. I meant thank you.

11:32:19
laytanl_: Not really prefer, just never looked into it or needed it much

11:32:22
<transcript>: You need some nodes set up bit of a hassle but well worth it.

11:32:30
<transcript>: You're saying full SEC? You're saying node setup is necessary for live refresh.

11:32:33
<transcript>: Your time at the Markdown preview.

11:32:36
laytanl_: Might be good if you write a lot of markdown

11:32:36
<transcript>: Is that what you're talking about.

11:32:36
<transcript>: just lots

11:32:38
<transcript>: Just lots of rocket articles already. I agree.

11:32:52
<transcript>: Not really prefer. Just never looked into it or needed it much. Yeah, it's a good call. I don't write a lot of Mark down. I always tell myself I'm going to start writing a lot of Mark down because I'm like blog and stuff, but I never do.

11:32:52
<transcript>: okay

11:32:56
<transcript>: Okay, so Markdown, preview. I don't know if it opens in the browser. I'm less enchanted.

11:32:56
jenswoeste: @FullStackLive just did half year reporting of the company. I hate accounting with a passion. Let me know if you know a CFO for hire LUL

11:32:59
<transcript>: Less excited about it.

11:33:02
<transcript>: What was the other one marked on toggle.

11:33:02
<transcript>: preview target

11:33:03
<transcript>: Preview target toggle.

11:33:06
fullstacklive: Yup, I was referring to the Live Preview. It'll refresh and scroll live in the browser, really neat.

11:33:06
<transcript>: There it is.

11:33:11
<transcript>: So if I make a change so you're saying live reload won't work unless I.

11:33:20
<transcript>: Enter another one of the two of those.

11:33:23
<transcript>: Overriding this is why am I getting that lately.

11:33:27
<transcript>: That. Do it. Learn more. Yeah. Got smaller.

11:33:27
<transcript>: right

11:33:29
<transcript>: Right. It worked.

11:33:33
<transcript>: So think it did the node thing for me I guess.

11:33:44
<transcript>: Yeah. That's big. Okay. Cool. So it's live. It's just I'd have to have a browser up on this window, which is probably a good idea anyway.

11:33:49
<transcript>: Because I'm not using this full screen, right? Yeah. No, I'm not. But I'm using it. By which means.

11:33:49
<transcript>: everything gets

11:33:55
<transcript>: Everything gets laid out automatically. Let's stop using you by what do you say? Let's try it, let's try amethyst.

11:33:58
<transcript>: Just did half of your reporting of the company.

11:34:04
<transcript>: Just did half your reporting of the company. I hate accounting with a passion. Let me know if you know a CFO.

11:34:04
<transcript>: for higher

11:34:06
<transcript>: For higher.

11:34:13
<transcript>: I was referring to live preview little refresh and scroll live in the browser. Really neat.

11:34:13
<transcript>: now

11:34:15
<transcript>: Now, let's open. Let's move this over.

11:34:18
<transcript>: Let's do this.

11:34:23
<transcript>: Let's bring it over here so we can watch it.

11:34:27
<transcript>: Now if I Scroll nice, that is pretty cool. Okay.

11:34:29
<transcript>: That's pretty cool.

11:34:29
<transcript>: i will keep it

11:34:30
<transcript>: I will keep it.

11:34:36
<transcript>: We'll keep you around Markdown Preview The question is, what is glow.

11:34:39
<transcript>: Was glow.

11:34:39
<transcript>: because now i'm

11:34:41
<transcript>: Because now I'm curious about what that is.

11:34:45
<transcript>: New van.

11:34:47
<transcript>: Glow.

11:34:50
<transcript>: Markdown Preview directly.

11:34:55
<transcript>: In your Neil and Terminal. Now that's that's what I'm talking about, actually.

11:34:55
<transcript>: let's

11:34:57
<transcript>: Let's see what it looks like.

11:34:57
<transcript>: i would rather it not

11:35:00
<transcript>: I would rather it not be in a browser window personally.

11:35:04
<transcript>: Okay.

11:35:06
laytanl_: Ooh that sounds good

11:35:09
<transcript>: Well, is it really? Is that really a preview, though.

11:35:12
<transcript>: Still showed like all the markdown characters and stuff.

11:35:18
<transcript>: Like, I don't know. Is that a preview.

11:35:18
<transcript>: kind of

11:35:25
<transcript>: Kind of less previewy. This one looks like an actual preview of it, right? It's like rendered, like markdownwood.

11:35:27
laytanl_: oh thats less good

11:35:32
<transcript>: I will stick with this for now, but that's interesting. I would like it to be directly in the oven.

11:35:35
<transcript>: All right, all right, all right.

11:35:39
<transcript>: Let's take a look at amesyst.

11:35:42
buffetcodes: How's it going :D

11:35:43
fullstacklive: @FullStackLive Can relate. Years of dealing with German Revenue has traumatized me for life. It's so much more laid back in Ireland, and now I have people that take care of it.

11:35:54
<transcript>: That's less like programming, though. I feel like I should do some, like programming and not just configuring my Mac. I feel like that's kind of boring. I don't know. Are you all here just to chat? Is that you don't care what I do? Is that the what I'm gathering here.

11:35:59
buffetcodes: Oh no, please work!

11:36:08
<transcript>: That's less good. Yeah, I agree. Latent. You had the same journey I did. Oh, that sounds good. It's built engineer. Oh, that's less good. Yeah, it doesn't look like marked down preview.

11:36:08
<transcript>: hey

11:36:12
buffetcodes: Less configuration, more work <3

11:36:14
<transcript>: Hey, Buffett, How's it going? It's going well here can relate yours of dealing with German revenue as Traumatize Me for life.

11:36:21
<transcript>: Please work. Less configuration. More work. I agree. Buffer Buffett. We've just been messing with my environment. Way too much.

11:36:21
<transcript>: let's actually

11:36:25
<transcript>: Let's actually like, do something. Let's actually build something.

11:36:30
<transcript>: So here's the things I want to build today. I'll look at Anthis over the weekend. By the way.

11:36:40
<transcript>: Here's things I want to build I want to build I want to do a test with an App Sync API VTL Resolvers hitting.

11:36:40
<transcript>: planet sc

11:36:45
buffetcodes: Streaming sometimes might get diverting, let's build - people will love it more. :)

11:36:53
<transcript>: Planet scales new http API. I really want to do that. I also want to play with TRPC, but I'm gonna see if I can get Alex to come on and actually like be on that stream when I play with TRPC.

11:36:58
<transcript>: So I have to plan that a bit. I just reached out to them last night. We'll see if he wants to come on.

11:37:03
<transcript>: So that's TrpC that's planet scale. What else I want to play with.

11:37:03
<transcript>: we

11:37:07
<transcript>: We played with Remix on Stream a week ago or so.

11:37:07
<transcript>: i want to give

11:37:15
<transcript>: I want to give a lot of other things to try. I want to play with that Astro. They really want streamers. They've made like a call for Streamers to play with Astro on stream.

11:37:19
<transcript>: I want to play with solid and solid start.

11:37:19
<transcript>: this

11:37:22
<transcript>: This is a lot of things I want to play with.

11:37:26
<transcript>: I guess this is the point where I could do a poll.

11:37:33
<transcript>: We could work on public. Obviously. Public Dev. That'd be good. Probably good to work on that.

11:37:37
<transcript>: Let's.

11:37:37
<transcript>: let's see

11:37:38
<transcript>: Let's see.

11:37:46
<transcript>: Streaming sometimes might get diverting. Let's build people will love it more. I agree. I want to build things.

11:37:46
<transcript>: polyc

11:37:54
<transcript>: Polycraft Dev is my my default right now, so it's a Friday. I think I want to do something other than my default I want to work on.

11:37:54
<transcript>: something different

11:37:59
<transcript>: Something different. I'm gonna do an experiment. I think I just want to do the plan scale thing. So planet scale.

11:38:01
jenswoeste: @FullStackLive the thing is Im now running a one man startup. Have scaled down completely due to current "climate". Only VC funding available are for ridiculous valuations and Im still in launch mode. Going for bootstrapping now while doing consulting to get some cashflow in.

11:38:03
<transcript>: Let me pull this up planet scale.

11:38:03
<transcript>: plan

11:38:04
<transcript>: Planet.

11:38:04
<transcript>: scale

11:38:06
<transcript>: Scale.

11:38:16
<transcript>: Planet Scale http API. I don't know if there's anything in the Docs, even about this. It was just on Twitter that I saw it. Yeah. Serverless driver's, JavaScript.

11:38:20
<transcript>: So this thing.

11:38:22
<transcript>: Githubber.

11:38:22
<transcript>: this is

11:38:26
<transcript>: This is their serverless driver. This is an example.

11:38:31
<transcript>: I want the actual repo for the thing.

11:38:40
<transcript>: Play field database driverscode and documentation here, here we go. So there's an Http API behind this, which is what I'm more interested in.

11:38:47
<transcript>: I want to hit it from VTL, and I'll explain why I want to do that briefly.

11:38:47
<transcript>: thank

11:38:49
<transcript>: Thank you so much for the follow.

11:38:49
<transcript>: gi

11:38:51
<transcript>: Gigi.

11:39:00
<transcript>: Index. So here is.

11:39:00
<transcript>: can you all read that

11:39:02
<transcript>: Can you all read that.

11:39:02
<transcript>: thanks

11:39:03
<transcript>: Thanks for.

11:39:10
<transcript>: Blurring my words I really do appreciate every single follow Bubak.

11:39:10
<transcript>: a

11:39:18
<transcript>: A Gigi thank you from the bottom of my streamer heart? Thank you for following I hope you keep showing up.

11:39:18
<transcript>: i love that

11:39:23
<transcript>: I love that I have friends here while I work to talk with.

11:39:23
<transcript>: it's no

11:39:28
<transcript>: It's no pressure. You don't have to join in chat. I don't look at who's here. I'm not gonna like.

11:39:28
<transcript>: shame you

11:39:31
<transcript>: Shame you for lurking.

11:39:39
<transcript>: What else? What are the great rules around here? There really aren't many. It's a great coworking stream. I hear you can just listen in work, do whatever you want.

11:39:41
fullstacklive: @FullStackLive Sounds like a plan, can recommend going that route.

11:39:51
<transcript>: Okay. That's all I have to say. Just want to make sure after that. Like, I kind of got rushed when I thanked you. I want to make sure I took the time. So really, thank you for following. And that goes to all of you.

11:39:51
<transcript>: all fourteen

11:39:55
<transcript>: All 1439 of you. I appreciate everyone of you.

11:39:57
<transcript>: You're not all here right now.

11:39:57
<transcript>: but

11:40:00
<transcript>: But I appreciate all of those follows.

11:40:05
<transcript>: I might need to fill up my water soon because my toe's really dry today.

11:40:13
dyalicode: good morning

11:40:15
<transcript>: What was it looking at? Oh, yes, this is the Http. Well, this is where I'm gonna reverse engineer the http. Api.

11:40:15
<transcript>: how to

11:40:19
<transcript>: How to chat with the person app playing a skill that did this work.

11:40:24
<transcript>: He just kind of reached out on Twitter when I tweeted some things.

11:40:30
<transcript>: And he said, yeah, it's a real thing. I can play with the http API. No problem.

11:40:30
<transcript>: this is not

11:40:33
<transcript>: This is not what I'm looking for, though, is it.

11:40:33
<transcript>: dav

11:40:35
<transcript>: Davis, JS.

11:40:38
<transcript>: Is this what I'm looking for? Yeah, Yeah.

11:40:40
<transcript>: So.

11:40:46
<transcript>: Now that is definitely not it config host.

11:40:46
<transcript>: i know

11:40:53
<transcript>: I know. I kind of, like had a good idea of how I would do this just by glancing. It this file. I think I'm just not seeing.

11:40:53
<transcript>: okay

11:40:55
<transcript>: Okay. So here we go.

11:40:58
<transcript>: Sanitation Text version.

11:41:04
<transcript>: Config. Host? Configure.

11:41:09
<transcript>: So I need to look up where I get that host from.

11:41:09
<transcript>: but this is

11:41:12
<transcript>: But this is how I'll basically craft.

11:41:20
<transcript>: Some messages in VTL to send and let me explain why.

11:41:25
<transcript>: Y VTL. Why do I care about doing this directly with http.

11:41:25
<transcript>: first

11:41:28
<transcript>: First, I'm gonna see if I can find the config.

11:41:35
<transcript>: Oh, so you can say you do your host user and password here.

11:41:44
<transcript>: So the I guess I guess if I sign up for planet scale I'll get a host URL that I can work with right.

11:41:47
<transcript>: Planet Scale database.

11:41:54
<transcript>: So the let's do a little I'm gonna come over here and talk about it actually. Good morning, Jolly.

11:41:59
<transcript>: Let's talk about this for a second. Why do I want to do this.

11:42:01
<transcript>: So.

11:42:01
<transcript>: what i

11:42:04
<transcript>: What I generally do when I build an API.

11:42:04
<transcript>: is

11:42:06
<transcript>: Is.

11:42:06
<transcript>: i'm not gonna turn

11:42:09
<transcript>: I'm not gonna turn this music down it's just too much in my ear.

11:42:12
<transcript>: How do I want to do that? Maybe like this.

11:42:12
<transcript>: yeah

11:42:14
<transcript>: Yeah. Just like that.

11:42:16
<transcript>: So when I.

11:42:26
<transcript>: Build API's Typically the way I build an API is I use App Sync, which is an AWS product. It's service.

11:42:26
<transcript>: it's

11:42:28
<transcript>: It's like serverless.

11:42:28
<transcript>: managed

11:42:46
<transcript>: Managed GraphQL. So it's like I want to have GraphQL server, but I don't want to think about servers. I don't want to have to, like, deploy and like, run and install Apollo or whatever I use for GraphQL servers. I just want to define a Schema and then define resolvers.

11:42:46
<transcript>: resolvers

11:42:50
<transcript>: Resolvers being that's a graphical term like if you're not familiar.

11:42:50
<transcript>: how do i

11:42:54
<transcript>: How do I get data? How do I fetch the data that I need.

11:42:54
<transcript>: to

11:42:57
<transcript>: To fulfill this graph deal. Query right.

11:43:02
<transcript>: So AppSync is a pretty great managed service. I love it. Thank you for the Follow Freddie.

11:43:02
<transcript>: also

11:43:08
<transcript>: Also go, Rick is not dead. And thank you for the follow. Oh, thank you for the prime sub. Freddie, I really appreciate that.

11:43:14
<transcript>: Yeah. So AppSync is a great service. I love it.

11:43:14
<transcript>: it's got

11:43:15
<transcript>: It's got.

11:43:15
<transcript>: this concept

11:43:16
<transcript>: This concept.

11:43:16
<transcript>: so

11:43:21
<transcript>: So your resolvers can sort of like directly integrate with either other AWS services.

11:43:24
<transcript>: Through VTL, which is vlog.

11:43:24
<transcript>: language

11:43:28
<transcript>: Language. It's a patchy technology. It actually.

11:43:28
<transcript>: has a long

11:43:34
<transcript>: Has a long history, sort of competed with JavaScript in the early days of the web for this like Templating language.

11:43:34
<transcript>: i don't know

11:43:41
<transcript>: I don't know. I don't know how it competed with JavaScript and what I know about VTL today, but that's what I hear from the historians on Twitter.

11:43:46
<transcript>: So VTL is like a templating language that allows you to.

11:43:46
<transcript>: define these

11:43:52
<transcript>: Define these templates that basically take requests. So GraphQL requests and then translate them into.

11:44:02
<transcript>: Calls to other services, or I use DynamoDB a lot, so it's translating it into DynamoDB API calls. So DynamoDB API calls.

11:44:02
<transcript>: to fetch data

11:44:06
<transcript>: To fetch data. So if I have like a graphdale schema.

11:44:06
<transcript>: and it has

11:44:11
<transcript>: And it has like a user type. And then I have a query that's like, get users.

11:44:19
<transcript>: I might in that query Resolver the Get users query. I would define a VTL template, and that VTL template would translate.

11:44:21
charliec97: @FullStackLive My god german bureaucracy combined with revenue services, cannot belive you didn't get insane

11:44:21
<transcript>: To.

11:44:24
<transcript>: A query on my DynamoDB table.

11:44:24
<transcript>: it would probably be a query

11:44:29
<transcript>: It would probably be a query. I guess it could be a set. It could be a scan, which would be less than ideal anyway.

11:44:44
<transcript>: We do that in VTL for a few reasons. We can just hook up every Resolver in AppSync to a Lambda function. So if you just want to run a Lambda function on every Resolver and then fetch your data however you want. You can do that and that's fine.

11:44:44
<transcript>: but then

11:44:59
<transcript>: But then you have Lambda functions to deal with, and they have their own kind of maintenance burden. You've got overhead, right. You've got to deploy the thing. So packaging and deploying Lambda functions is kind of a whole thing. And there's lots of ways that make that easier these days. Lots of tools.

11:44:59
<transcript>: but

11:45:07
<transcript>: But you have to think about maintenance of it. You have to think about getting the logs for that Lambda function and cloud watch or wherever versus.

11:45:07
<transcript>: having

11:45:17
<transcript>: Having them in one place. If you do it all in detail, resolvers you have no cold starts. You have no Lambda function as you're deploying it's faster. It's cheaper, it's free.

11:45:30
<transcript>: It's just it's kind of better from a runtime perspective in every way. The problem is writing VTL templates is kind of the absolute worst. So it's like a terrible developer experience. I'm guessing there is no.

11:45:34
<transcript>: Neovem VTL LSP.

11:45:40
<transcript>: That's funny. I didn't even look. I'm guessing there's not. Thanks so much for the follow. Deeprog.

11:45:42
<transcript>: So VTL template I'll.

11:45:44
<transcript>: Kind of awful.

11:45:44
<transcript>: but

11:45:59
<transcript>: But I've invested a lot of time and sort of gotten to where I can get around with it. And you can do some really cool things. We're never have to write a Lambda function, but you're still chaining together operations so I can, like, make http http calls and then.

11:45:59
<transcript>: set secret

11:46:10
<transcript>: Set secrets from Secrets manager and do all these things and in what's called Pipeline resolvers. So you don't have to just write a single template. You can actually change together templates and do these really cool things.

11:46:18
<transcript>: With no runpat like no compute. I don't have to provision Lambda functions. I don't have to.

11:46:26
<transcript>: I don't have to deal with all of that from a maintenance standpoint. I just have this runtime thing that's super fast.

11:46:26
<transcript>: so

11:46:26
jenswoeste: @FullStackLive I lived in germany for a while. Tax returns were done by an accountant - couldnt figure it out on my own. Here in Denmark (where I live now) the reporting requirements, rules and regulations are off the charts! Such a waste of time reporting on metrics that noone never looks at (besides the public servant whos sole purpose in life is to look at it and then do nothing)

11:46:30
<transcript>: So the super low latency. All that right. Okay.

11:46:30
<transcript>: that's

11:46:32
<transcript>: That's the case for VTL template.

11:46:40
<transcript>: The reason I'm really excited lately and also thank you for the follows made for you and Kane the game.

11:46:40
<transcript>: appreciate

11:46:42
<transcript>: Appreciate those follows. So much.

11:46:42
<transcript>: the reason

11:46:46
<transcript>: The reason I'm really excited lately about this is.

11:46:46
<transcript>: there's

11:46:51
<transcript>: There's some work being done, so the apps.

11:46:58
<transcript>: Recently updated an RFC for TypeScript or JavaScript VTL template.

11:46:58
<transcript>: so

11:47:02
<transcript>: So like a JavaScript Resolver.

11:47:02
<transcript>: that

11:47:14
<transcript>: That it's trans filing JavaScript to VTL, but it has the same characteristics of a VTL template. You're not having to deploy a Lambda function, but you're writing it instead of writing in VTL, you can write it in TypeScript or JavaScript.

11:47:14
<transcript>: if that

11:47:17
aivars_meijers: @FullStackLive An accountant, for sure, is the first person to hire whatever business you are building. Also, those are business expenses before taxes

11:47:18
<transcript>: If that lands in the fall, like I think it will.

11:47:32
<transcript>: Then that's a huge deal, because now you get all the runtime benefits with an authoring experience. It's familiar you're writing time, script and you have all the benefits of TypeScript. There is your disposal. So.

11:47:53
<transcript>: That's super exciting to me. I think it's way more approachable for webdeds if I started trying to explain to a web Dev who's not building stuff on AWS how to write a VTL template like I've lost them like eyes gloss over. We're done. But if I say you can just write a little TypeScript, you don't even have to deploy Lambda function. You just write TypeScript and that is how you fetch your data.

11:48:02
<transcript>: To resolve your graph go queries that's compelling. And again the latency like it's just super fast. And it's serverless. You have no maintenance.

11:48:02
<transcript>: like you can watch

11:48:09
<transcript>: Like you can watch the logs and see Queries come in and how they're transformed and how they're, you know, returned.

11:48:23
<transcript>: But like you don't have any runtime compute to think about, there's no Lambda functions out there floating around or worse, containers or something awful like that. Okay. So that's exciting. But then the big downside to building APIs like that.

11:48:30
<transcript>: And the reason I've not really pushed on Twitter, trying to, like, convince people this is the way.

11:48:34
<transcript>: There's no good sequelbased database.

11:48:34
<transcript>: that

11:48:37
<transcript>: That's really serverless friendly.

11:48:37
<transcript>: so

11:48:45
<transcript>: So even Aurora. So AWS has some services. Aurora server lists version one and version two. They kind of both miss the Mark in different ways.

11:49:04
<transcript>: So now Planet Scale has this serverless driver. And I'm very excited because now we have this possibility of defining a GraphQL API with AppSync. It's serverless. You don't have to think about deployment or management of underlying OSS or whatever container images. Nothing. You just like define a schema.

11:49:04
<transcript>: define some bit

11:49:06
<transcript>: Define some bits of type script.

11:49:06
<transcript>: to

11:49:06
jenswoeste: @FullStackLive example: I need to do a workplace safety assessment. Risk: "ergonomics" - action: "raise ergonomics awareness" (im the only employee of my company)

11:49:08
<transcript>: To resolve data.

11:49:08
<transcript>: and we can

11:49:17
<transcript>: And we can target PlanetScale which has this great scaling horizontally characteristic. And now this great serverless picture.

11:49:25
<transcript>: With the serverless driver. So. Okay, that's a big, long explanation of a bunch of weird stuff you've probably never heard of or don't care about.

11:49:26
<transcript>: But.

11:49:26
<transcript>: that's why

11:49:30
<transcript>: That's why I'm interested in building this little bit of glue.

11:49:30
<transcript>: that hit

11:49:42
<transcript>: That hits that http API that planet scale and fetches data from a sequel based database. So I'm not trying to force DynamoDB on people that really could just have no interest. Does that make sense.

11:49:42
<transcript>: anybody

11:49:49
aivars_meijers: @FullStackLive BibleThump

11:49:49
<transcript>: Anybody following along. My talking to myself. I might be talking to myself. I see their people here, but you're also talking to each other. So.

11:49:49
<transcript>: does anyone care

11:49:54
<transcript>: Does anyone care about any of this, or would you rather me just work on public so I could also do that.

11:49:54
<transcript>: it's awesome

11:49:55
<transcript>: It's awesome option.

11:50:00
<transcript>: It's gonna wait until somebody responds, actually.

11:50:03
charliec97: I got 70 percent of that

11:50:03
aivars_meijers: What, did you talk? We wre busy chatting :D

11:50:08
laytanl_: This is interesting

11:50:10
<transcript>: I got 70% of that. Wait. Did you talk.

11:50:17
sondreal: aivars_meijers 👋👋

11:50:19
<transcript>: This is interesting so late and thinks it's interesting. That's a kind word for.

11:50:20
nullchefo: It is interesting

11:50:20
andom: Hello HeyGuys

11:50:22
shindigz11: I am interested

11:50:22
<transcript>: Like this is interesting.

11:50:27
<transcript>: It's interesting, but it's maybe oh, Shin Dig is interested.

11:50:27
<transcript>: hello

11:50:28
<transcript>: Hello and.

11:50:33
<transcript>: It is interesting. Those FIFA. So the way I read those.

11:50:33
<transcript>: this

11:50:34
niftynate80: Planet scale REST calls for resolving App Sync

11:50:35
<transcript>: This is interesting.

11:50:35
<transcript>: and it

11:50:37
<transcript>: And it is interesting.

11:50:37
<transcript>: you can admit

11:50:42
jenswoeste: TL;DR?

11:50:42
<transcript>: You can admit that maybe not in a good way, but it's interesting. I'll take it.

11:50:48
aivars_meijers: @sondreal 👋

11:50:48
<transcript>: Planets go rest calls for resolving apps sync. That's exactly what it is that's the TLDR.

11:50:48
<transcript>: so

11:50:50
andreull: it may be interesting

11:50:56
<transcript>: So using AppSync we're going to write VTL resolvers to target planet scale.

11:50:56
<transcript>: and

11:50:56
treetoptowerz: I’m currently installing a V8 engine just listening

11:51:00
<transcript>: And the end result. It may be interesting. Thank you, Andrel.

11:51:02
<transcript>: The end result.

11:51:02
<transcript>: is

11:51:08
<transcript>: Is this serverless graphical API where we can deploy.

11:51:09
<transcript>: deploying

11:51:09
<transcript>: deploying the thing

11:51:09
andom: what is interesting?

11:51:11
jenswoeste: why didnt you just say that to begin with? LUL

11:51:12
charliec97: look up VTL and saw it was maintained by apache and that gave me an estimate of how complex it is

11:51:13
stroopwafel26: @treetoptowerz in your computer?

11:51:28
<transcript>: Deploying the thing. So that's my problem. I think with most everything these days is like we just all kind of gloss over, like the deploying and managing an application. It's like, how easy is it to author that's the only thing we optimize for. And then, oh, yeah. You have to figure out how to deploy it and maintain it over the long haul. That's a whole thing. But we just kind of gloss over it.

11:51:33
<transcript>: And the beauty of serverless and when I get so excited about.

11:51:40
<transcript>: You Charlie Retail, just ignore VTL for a minute because that's that part's going away. Hopefully.

11:51:40
<transcript>: the

11:51:42
laytanl_: I don't know what a VTL is and I am to afraid to ask

11:51:45
<transcript>: The VTL part is being abstracted away in the coming months.

11:51:50
<transcript>: I don't know what VTL is. I'm afraid to ask you're gonna see some on stream if we do this today.

11:51:57
<transcript>: Yeah. The reason I get so excited about serverless is the deployment is baked in so.

11:51:57
<transcript>: you're not thinking

11:51:59
stroopwafel26: @CharlieC97 see also: apache web server and its config, ugh

11:52:05
<transcript>: You're not thinking about how to deploy it. It's inherently deployed. It's a managed service. You're offloading all of the responsibility of.

11:52:17
<transcript>: Underlying infrastructure. So if you use Versaille, if you're somebody who's a web developer and you deploy stuff to Versaille, then you understand serverless that is like a serverless offering and not even in the compute sense. Not like.

11:52:17
<transcript>: they use

11:52:22
<transcript>: They use Lambda functions at the edge or whatever the Cloudflow workers.

11:52:22
<transcript>: i'm not saying serve

11:52:37
<transcript>: I'm not saying serve serverless in that sense. Like, yes, they probably use functions as a service. That's not the important part. The important part to me when I use Word service, I'm talking about like serviceful, managed services, giving other people, other companies and huge teams.

11:52:37
<transcript>: responsibilities

11:52:45
jenswoeste: the AltF4 stream did an excellent stream the other day on how to deploy automatically on azure (any cloud provider could be the target).

11:52:57
<transcript>: Responsibilities and taking them off your plate. So when we manage, when we use Versaille, we're saying, I don't want to think about web deploys anymore. I don't want to have to manage a web server or NGINX proxies or whatever. I just want to, like, write my code, push my thing and know that it's deployed and the best possible way, that's.

11:52:57
<transcript>: serverless

11:53:03
<transcript>: Serverless that's what really like lowercase s serverless is.

11:53:08
<transcript>: And that's what I get really excited about these days. I think it's the future. I think there's some really smart people.

11:53:08
<transcript>: that

11:53:13
<transcript>: That have laid out that path to mainstream adoption that I believe.

11:53:13
<transcript>: and that's

11:53:15
<transcript>: And that's why.

11:53:15
<transcript>: i mostly

11:53:20
stroopwafel26: serverless involves servers under the hood fyi MaxLOL

11:53:23
<transcript>: I mostly invest all my time in building serverless things, except when I build Twitch overlays for like, a month, which I just did. Okay, so we're gonna work on this.

11:53:32
<transcript>: Oh, hey, Yin's, the Altaff Four streamed in excellent stream the other day on how to deploy automatically on Azure in a cloud rider could be the target. Yeah.

11:53:32
<transcript>: so

11:53:36
<transcript>: So I do a lot of that stuff. I do a lot of, like.

11:53:39
<transcript>: Software development lifecycle.

11:53:39
<transcript>: like deploy

11:53:51
<transcript>: Like deployments, CI, CD and all that. Mostly AWS, though. I don't really mess with the other cloud providers, but that's sort of my thing. I just don't do it on stream for some reason. So we're gonna start doing some of that on stream.

11:53:57
<transcript>: Why didn't you just say that to begin with.

11:54:07
<transcript>: Treetop Towers. Welcome to Chap. Currently installing a V eight engine. Just listening. That's cool. That's most people here just listening. That's totally fair.

11:54:12
<transcript>: See also Apache Web Server and its config.

11:54:12
<transcript>: yeah

11:54:20
jenswoeste: Yeah but this was including creating the actual environment including virtual networks, vpn access points, kubernetes etc etc. All from a Terraforming script

11:54:21
<transcript>: Yeah, I never want to do that stuff again. Serverless involves servers under the hood. Fy. It's true. It's just someone else's servers. So I don't have to think about them.

11:54:23
<transcript>: Okay.

11:54:32
<transcript>: This was including creating the actual environment, including virtual networks, VPN access points, Kubernetes, etc. Etc. All from a terraforming shift. Yeah. So.

11:54:38
<transcript>: Same spirit on this stream. Moving forward, I'm going to be doing a lot of cloud development.

11:54:38
<transcript>: different

11:54:43
<transcript>: Different implementation. So I'm not a TerraForm guy. I just.

11:54:43
<transcript>: don't i

11:55:01
<transcript>: Don't. I don't TerraForm. I use a lot of different infrastructure as code frameworks, but in TerraForm is not one of them. And that's not a knock on TerraForm. It's just a whole kind of thing you have to buy into. And I've been more like fast and loose with playing with different ones. And I'm not ready to commit to, like, learning the whole TerraForm DSL. It's just not a thing.

11:55:01
<transcript>: i really ever

11:55:14
<transcript>: I really ever cared to do. I've had to work on TerraForm for some clients but also not Azure, not Kubernetes. I'm gonna be doing mostly like I said serverless stuff on AWS. So manage services.

11:55:14
<transcript>: i

11:55:17
stroopwafel26: k8s is the worst

11:55:22
stroopwafel26: stop using it

11:55:25
stroopwafel26: plz

11:55:34
<transcript>: I try to avoid virtual networks if at all possible. So VPCs and AWS parliaments. I try to avoid them. I just try to build stuff that doesn't need to mess with VPCs. I've definitely done a lot of exotic networking work in the cloud in my career as a consultant, but I prefer not to especially.

11:55:34
<transcript>: if it's the thing

11:55:40
<transcript>: If it's the thing I have to own and maintain over time stuff just gets really hard.

11:55:44
<transcript>: Kubernetes is the worst. Stop using it please.

11:55:44
<transcript>: i have a lot

11:55:46
niftynate80: I need more Adam cloud dev in my life

11:55:48
jenswoeste: my key takeaway was that not only can I version my development (and do CI/CD) but I can actually include the environment underneath (and version it as well)

11:55:49
<transcript>: I have a lot of opinions about Kubernetes. We're gonna end this rant. What is this music? What are we listening to.

11:55:49
<transcript>: what is this

11:55:52
<transcript>: What is this? Do you want.

11:55:58
<transcript>: It Madame Grotesque. No, please, don't. Just stop. I don't like that one.

11:56:00
<transcript>: Okay.

11:56:20
<transcript>: Yeah. So we're gonna be doing more cloud development because that's actually my thing. My thing is not frontend development. I just have to do it because I will work alone and I have to build a front end. My key takeaway was that not only can I version my deployment and do CI CD, but I can actually include the environment underneath inversion as well. Exactly.

11:56:20
<transcript>: infrastructure

11:56:25
<transcript>: Infrastructure is code. So we'll just do a little quick Infrastructure's code thing.

11:56:25
<transcript>: a lot of people

11:56:25
andom: why is k8s the worst @stroopwafel26

11:56:28
stroopwafel26: Would love a rant on k8s

11:56:28
<transcript>: A lot of people I hear get bogged down.

11:56:28
<transcript>: on aws

11:56:30
<transcript>: On AWS.

11:56:30
<transcript>: i'm gonna

11:56:36
<transcript>: I'm gonna speak specifically to ABS. I'm an A to be a hero like that's where I live. I'm mostly embedded in the aid of this community.

11:56:38
<transcript>: So a lot of people.

11:56:38
<transcript>: like

11:56:42
<transcript>: Like rant. I saw rocks the other day. So streamer rocks.

11:56:42
<transcript>: talking about

11:56:42
stroopwafel26: @Andom I could write a book on that topic

11:56:47
<transcript>: Talking about how he wished AWS would just go away. You can't stand it too over and spared all these things.

11:56:47
<transcript>: aw

11:56:49
<transcript>: Aws is.

11:56:49
<transcript>: a lot

11:56:51
andom: LUL

11:56:54
<transcript>: A lot. There are 250 plus services, probably over 300 now.

11:56:54
<transcript>: and

11:57:00
<transcript>: And it's intense to, like, jump into AWS and expect to figure anything out.

11:57:00
<transcript>: i think

11:57:03
<transcript>: I think the problem with AWS is.

11:57:08
<transcript>: They sort of are this huge layer of primitives.

11:57:08
<transcript>: that they don't do

11:57:11
nullchefo: Could you share some of your opinions about Kubernetes?

11:57:13
charliec97: VPCs took many hours of my time debbuging my code just to realize it couldn't communicate because the code and the server were running on two different VPCs

11:57:15
jenswoeste: I think BG from AltF4 coined it "AWS is like a huge warehouse"

11:57:24
<transcript>: That they don't do vertical, like they don't really do vertical. Well, so like, they don't wrap up a nice developer experience. They provide it's like they're the utilities provider. They give us our electricity and our plumbing, and we need to build things with that. That's a terrible analogy. But.

11:57:24
<transcript>: they're really

11:57:44
<transcript>: They're really good at building these very stable, primitives. They don't break things, so everything is always backward compatible forever. They will not make breaking changes, database services to a fault. But that's great when you're building a startup. I think if you're building a startup, my rule is like if you have funding, you should probably be building on AWS in some cap.

11:57:44
<transcript>: capacity

11:57:46
<transcript>: Capacity.

11:57:46
<transcript>: if

11:57:49
<transcript>: If you don't if you're building stuff for yourself.

11:57:49
<transcript>: solo

11:57:57
<transcript>: Solo indie hacker kind of thing. You probably don't need to do this in a lot of cases, you can use some combination of managed services and be fine.

11:58:04
<transcript>: Adams is like a huge warehouse. Yeah, that's a good analogy. It's like everything you could possibly need. Is there.

11:58:04
<transcript>: but

11:58:10
cedpoilly: AWS feels like you need to complete a certification before you can understand what you are doing. Is it just me?

11:58:24
<transcript>: But that's also the problem. Everything you could possibly need for any application is there. You want to talk to satellites, ground station. They've got a service for that, like, literally anything you can dream up. You could probably build it on AWS, but it is these lowlevel prints, primitives that you have to kind of piece together. So when you're coming at it from, like an indie standpoint or you're just new.

11:58:32
jenswoeste: I use storeage and EC2 on AWS - everything else is on azure (because its nicely integrated with my development tool chain)

11:58:33
<transcript>: And you're a web developer and you want to get in AWS, it's intense. It's a lot. The problem is people think you go in the database console and you start building stuff.

11:58:33
<transcript>: and that's

11:58:47
<transcript>: And that's where people always start. It's where the docs always start. It's just it's annoying to me that we funnel people into this overwhelming console that shows you all the services, and it's like, pick the ones you want to use. That's a terrible way to build stuff. A much better way is with infrastructure as code.

11:58:47
<transcript>: so check

11:58:52
<transcript>: So check out serverless framework, check out the CDK or CloudFormation.

11:58:57
<transcript>: Start with something. Probably not CloudFormation. That's a little too low level, I think.

11:58:57
<transcript>: start with

11:59:00
<transcript>: Start with Sam, or start with.

11:59:00
<transcript>: any one of

11:59:07
<transcript>: Any one of a number TerraForm. Any one of infrastructure is Code Frameworks. If you're a developer, that's where you're comfortable.

11:59:07
<transcript>: you're open

11:59:10
<transcript>: You're opening up your IDE and you're building things.

11:59:14
<transcript>: You're declaring infrastructure. What is this? Music? What am I listening to.

11:59:16
<transcript>: Okay.

11:59:16
<transcript>: now

11:59:18
<transcript>: Now.

11:59:18
<transcript>: not

11:59:20
<transcript>: Not that one.

11:59:20
<transcript>: not that

11:59:21
liak0z: Hello Adam hello chat!

11:59:21
<transcript>: Not that one.

11:59:30
<transcript>: Yeah, it's just it's a lot easier to get into the AWS headspace by using something like Serverless framework.

11:59:30
<transcript>: and seeing a solution

11:59:34
shindigz11: cdktf

11:59:35
liak0z: how's everyone doing :)

11:59:43
<transcript>: And seeing a solution someone built for, I don't know. Like the thing Rocks was running into that. You're struggling with it's. Like he needs a cue. He just needs to put things in it and then get it back at some interval or on some time frame.

11:59:43
<transcript>: and that

12:00:03
<transcript>: And that's the kind of thing that, like, bracel. They just kind of gloss over it's like, oh, yeah. There's ways to do Cron jobs if you use these other services. Aws has all those things. So if you want to build something with all the lowlevel primitives, a division is great. Just don't start in the console. Start with something else. Infrastructure is code something where you can write declarative.

12:00:03
<transcript>: infrastructure

12:00:08
<transcript>: Infrastructure or imperative if you want to write CDK TypeScript or something.

12:00:08
<transcript>: but

12:00:27
<transcript>: But go there, go where you can piece together an application the way you're used to doing it in code. And then as a side benefit, you have all these other advantages operationally. Now you have versioned infrastructure. All of your, you know, declared infrastructure is in your GitHub repo, and it's versioned just like your code. Is there's a lot of benefits.

12:00:27
<transcript>: it's the best

12:00:30
<transcript>: It's the best way to do it it's the easiest way to learn how to.

12:00:30
<transcript>: default

12:00:39
<transcript>: Default. Why everything kind of like shoves you into the console. And like here's an example of how to declare an s three bucket. Like, that's not useful.

12:00:39
<transcript>: on its own

12:00:46
<transcript>: On its own. You know, S. Three buckets are great, amazing service. I could go on about S. Three for an hour.

12:00:50
<transcript>: It's just incredible, the scale that they operate at and to have this infinitely.

12:00:50
<transcript>: huge

12:01:10
<transcript>: Huge bucket where we can shove data. That's amazing, amazing service, but in isolation, I don't know. What am I gonna do with a bucket? Like, I need an application that needs to upload files. I need, like, I'm gonna upload avatars and I'm gonna use an s three bucket to store photos of users. That's where Adobus gets really powerful when you start thinking of it as this orchestration.

12:01:13
<transcript>: Of a bunch of services.

12:01:13
<transcript>: and building

12:01:17
<transcript>: And building these cool applications with building bars. Okay, I'm done. Ranting.

12:01:21
<transcript>: Let's read some chat.

12:01:23
<transcript>: Vpcs.

12:01:27
<transcript>: Oh, could I share some of my opinions about Kubernetes? So, Kubernetes.

12:01:32
<transcript>: I think my it's gonna be hard for me to accept Kubernetes.

12:01:32
<transcript>: as a thing

12:01:44
<transcript>: As a thing people should learn because I view it in the context of as a distraction from where things are really headed, which is serverless. You have to understand everything anyone says on the internet.

12:01:44
<transcript>: if you don't

12:01:50
<transcript>: If you don't have the context of what they're like living and breathing, it's very hard to take that.

12:01:50
<transcript>: like

12:01:53
<transcript>: Like advice or statement.

12:01:53
<transcript>: and understand it

12:02:04
<transcript>: And understand it. So I should say I mostly work with startups. I mostly work with small teams. And I don't think any startups should be using Kubernetes. I'll just say that flat. Like.

12:02:04
<transcript>: one hundred

12:02:12
<transcript>: 100% don't think there's startups they should be using Kubernetes unless you're a startup and you know you should be using Kubernetes because you're building like a cloud platform.

12:02:14
<transcript>: So Kubernetes.

12:02:19
<transcript>: It's like they tried to build the cloud.

12:02:19
<transcript>: in a framework

12:02:21
<transcript>: In a framework.

12:02:21
<transcript>: they didn't

12:02:29
<transcript>: They didn't try the Google had reasons for building Kubernetes. Your startup probably doesn't have those same reasons to use Kubernetes. So if you're building.

12:02:29
<transcript>: a normal

12:02:33
<transcript>: A normal web application and maybe a mobile application.

12:02:33
<transcript>: there's just not a lot

12:02:36
<transcript>: There's just not a lot of reasons to use Kubernetes.

12:02:36
<transcript>: and to invest

12:02:42
<transcript>: And to invest in that learning curve. In my opinion. Now there are companies and startups and.

12:02:42
<transcript>: there are

12:02:46
sparringwithbear: kubernetes is a cursed word at where i work

12:02:54
<transcript>: There are people out there that know they need to use Kubernetes for their workloads, or they've invested really heavily, and it makes sense for them. That's great. They can ignore me. But for most of you, if you're questioning, should I use Kubernetes, the answer is no. You shouldn't.

12:02:54
<transcript>: you would

12:02:57
<transcript>: You would know if you needed to use it.

12:02:57
<transcript>: you probably don't

12:03:00
mjewl: Just deploy an erlang monolith in your basement Kappa

12:03:08
<transcript>: You probably don't. It's just a lot to learn, and I just don't. I don't recommend it. Charlie, thanks so much for the gift. I appreciate that also made for you. Did I say thank you for that follow? I really appreciate that. Follow.

12:03:15
<transcript>: Just deploy an Erling Monolith in your basement. There you go.

12:03:20
<transcript>: There you go. Thanks so much for the follow Fit. Simmons.

12:03:22
stroopwafel26: Kubernetes causes more issues and headaches and doesn't solve any problem we had before. There, I said it

12:03:26
<transcript>: It's a cursed word. Yeah, I get that. Hello, leak, Hello, Hello.

12:03:26
<transcript>: again i

12:03:32
thechosenone1080: D:

12:03:33
<transcript>: Again, I use Storage and EC Two on AWS. Everything else is on Azure because it's nicely integrated with my development tool chain. That makes sense.

12:03:33
<transcript>: i mean if you're

12:03:46
niftynate80: K8s is a great platform for IDP (internal developer platform)

12:03:48
<transcript>: I mean, if you're building stuff with Net, I don't know why you wouldn't use that at this point. Like if you're building Microsoft stuff, SQL Server and all that like I would probably recommend Azure because I feel like that's just a better path. I know it'd be a support slot stuff, but.

12:03:48
<transcript>: just seems

12:03:50
<transcript>: Just seems to make sense.

12:03:58
niftynate80: Like remote dev environment

12:04:06
<transcript>: Charlie VPC took many hours of my time debugging my code just to realize it couldn't communicate because the code and server wrap running on two different VPCs so you can peer VPCs and you can do some exotic things with networking in AWS V PCs are a whole thing that I can talk about.

12:04:15
<transcript>: Virtual networks in the cloud are kind of like a technological Marvel. So if you if you go back like 30 years.

12:04:15
<transcript>: net

12:04:18
<transcript>: Networking hardware has always been owned by like.

12:04:18
<transcript>: a few companies

12:04:25
<transcript>: A few companies so Cisco and all these major companies that made all the networking hardware right.

12:04:25
<transcript>: when amazon

12:04:36
<transcript>: When Amazon came around 15 years ago, what it was and built AWS, VPCs were kind of the thing that, like revolutionized. It's sort of like started the cloud revolution, right? They created.

12:04:36
<transcript>: a whole new network

12:04:45
<transcript>: A whole new networking stacks. From the ground up. They make their own chips. They make their own hardware. But then they have these virtualized networks that are like virtual.

12:05:04
<transcript>: Networking equipment that you used to be hardware. Now it all can be done through software. It's really amazing stuff. If you dive into VPCs and kind of what is going on there, what AWS is doing to facilitate all of these amazing things, virtually like we can spin up a private.

12:05:04
<transcript>: virtual

12:05:14
<transcript>: Virtual private cloud and you can add all these subnets, and you can add routing tables, all of that being done virtually.

12:05:14
<transcript>: is kind of

12:05:17
<transcript>: Is kind of amazing if you dig into it a little bit.

12:05:18
stroopwafel26: software defined networking is not new, but AWS did a stellar job with VPC

12:05:30
<transcript>: Feels like you need to complete a certification for you can understand what you're doing. Is it just me, I think said quality. The problem is you kind of have to start with like, I want to build this application and I have a need for cloud services.

12:05:30
<transcript>: and

12:05:41
jenswoeste: I use C# (and some C++). Frontend is a xamarin app for android and ios (written in C#) - backend is a REST api in front of a MySQL db. Nightly batches/computations run on seperate VMs.

12:05:49
<transcript>: And you could just say any web application I'm gonna host on AWS instead of using Verselle or something more managed. I'm gonna decide to build this and host it on AWS. That's a good learning path. You can learn about S Three and Cloud Front, which is a CDN. You could learn about Lambda functions if you want to do some basic API routes and that kind of thing.

12:05:49
<transcript>: there

12:05:57
<transcript>: There's like you have to have a use case. Don't just like approach the AWS console and say, what can I build today? Because you'll get overwhelmed really quickly.

12:06:01
<transcript>: Okay, try to catch up here.

12:06:11
<transcript>: Kubernetes causes more issues and headaches and doesn't solve any problems we had before there I said it.

12:06:17
<transcript>: For internal development platform yeah, there are uses for something like Kubernetes.

12:06:24
<transcript>: I just think as very few people, very people's, very few companies or organizations where individuals.

12:06:24
<transcript>: actual use case

12:06:25
<transcript>: Actual use case.

12:06:25
<transcript>: is

12:06:28
<transcript>: Is aligned with something like Kubernetes.

12:06:33
<transcript>: Like remote Dev environment. Yeah. So there are use cases if you're building.

12:06:33
<transcript>: like

12:06:35
<transcript>: Like your own kind of cloud provider.

12:06:35
<transcript>: then like the

12:06:39
jenswoeste: Ive tried to keep everything in .NET - just to keep a clean technology stack (to work at my company you only need to know .NET/C# - same on frontend and backend)

12:06:40
<transcript>: Then like the orchestration that Kubernetes provides. And sort of like.

12:06:40
<transcript>: building out

12:06:42
<transcript>: Building out the very low level.

12:06:42
<transcript>: all the

12:06:48
<transcript>: All the primitives you need. I think it makes sense. I just. I think a lot of people use it for, like.

12:06:48
<transcript>: their crm for

12:06:49
cedpoilly: moving my free tier heroku app to AWS as heroku is ending their free tier, end of next month

12:06:52
<transcript>: Their CRM for plumbers. And I just think that's a bad idea. I don't.

12:06:58
<transcript>: Software defined. Networking is not new, but a Tobis is so you've seen? Yeah, street providing more context. There.

12:06:58
<transcript>: you

12:06:59
charliec97: @JensWoeste Always wanted to learn Xamarin to see how it compares to react native and Flutter

12:07:02
<transcript>: You see sharp and some C plus last frontend is a Zamarin app.

12:07:16
<transcript>: For Android and iOS written C sharp back in as a rest API in front of a MySQL DB nightly batches computation rounds of VMs yeah, I've tried to keep everything in net just to keep a clean technology stack to work at. My company only need to know Dynamo.

12:07:16
<transcript>: back in yeah

12:07:24
<transcript>: Back in. Yeah. I think like, 80% developers are writing C sharp. Right. I like no one on Twitter talks about it, but most people.

12:07:26
jenswoeste: I used to work at a SF based company where everything was JAVA. Same thinking - if you know java you can work on any part of the app

12:07:41
<transcript>: And then like, if you're if you've been a developer for like, ten years, you probably started with C sharp. So I think like, it's this thing that we all have in common and that tons of people are riding every day. And for some reason all Twitter wants to talk about is like TypeScript. And I don't understand it's even written by the same guy. Like.

12:07:41
<transcript>: anders

12:07:44
<transcript>: Anders. Made both of them right.

12:07:44
<transcript>: bawi thanks

12:07:49
<transcript>: Bawi thanks for the follow. I appreciate that follow also fits him in Dev. I don't know if I saw that earlier.

12:07:56
<transcript>: Moving my free tier Heroku app to AWS is Heroku's ending of free tier? Yeah, I heard that.

12:08:07
<transcript>: I always wanted to learn Xamarin. See how compares. Okay. Used to work at San Francisco Bay Company, where everything was Java. Same thinking. If you know Java, you can work at any part of the app. Yeah. No, I think those technologies are.

12:08:07
<transcript>: there's a reason

12:08:09
<transcript>: There's a reason.

12:08:09
<transcript>: everyone's writing

12:08:10
<transcript>: Everyone's writing.

12:08:10
<transcript>: java and c

12:08:13
<transcript>: Java and C sharp and no one talks about it.

12:08:33
<transcript>: They're great technologies. They've stood the test of time. All right, I've got to take a quick break. I'm gonna get my coffee, my fake coffee. I'm gonna get a lower bar, and then we're gonna build something. We're gonna hit planet scale. We're gonna we're gonna hit plants, go with an app, sync, VTL Resolver. If that all sounds like gibberish, then you should stick around. Give me a good time.

12:08:35
stroopwafel26: I wish I could buy larabars in NL

12:08:36
thechosenone1080: i still have a left over 25$ extra charge on awe free tier

12:08:44
thechosenone1080: dont even know what they charged me for

12:12:04
jenswoeste: @JensWoeste I think its almost the same. For me the benefit of xamarin is that its all .net/C#. Flutter uses Dart and react native is well...

12:14:41
nullchefo: @stroopwafel26 I don't know I really like kubernetes because I use Java for microservices. It is scalable. I don't think I don't have any modern options for scalability. I really like the Google Cloud  kubernetes autopilot: Google manages your cluster: you pay per pod not per node. Why you think it it the worst? Could you share why you think so?

12:16:28
stroopwafel26: @stroopwafel26 I could write a book on this topic, but the gist of it is: I think k8s is wayyyyy over engineered and only introduces unneeded complexity. Anyway, end rant :)

12:16:42
schrew: Gm adam! Going to be working on updating an ECS cluster to read static files from S3 today :)

12:18:17
<transcript>: All right.

12:18:21
<transcript>: Just looking.

12:18:23
<transcript>: What I missed.

12:18:26
<transcript>: So.

12:18:31
<transcript>: I realized I said some things. I don't mean to be inflammatory.

12:18:36
<transcript>: If you're using Kubernetes, you've spent the time to learn Kubernetes and you like it.

12:18:36
<transcript>: keep using

12:18:38
<transcript>: Keep using it.

12:18:38
<transcript>: like

12:18:44
<transcript>: Like use what you like.

12:18:44
<transcript>: ultimately

12:18:47
<transcript>: Ultimately, I think I get upset when I feel like we direct new people towards technologies that don't make sense for them.

12:18:50
<transcript>: And I think there's just there's too much of that going on.

12:18:50
<transcript>: it's too confusing

12:18:54
<transcript>: It's too confusing to be a new entrance into this field.

12:18:54
<transcript>: there shouldn't be

12:18:59
<transcript>: There shouldn't be so many options, and Kubernetes is one that I would definitely not recommend.

12:19:07
<transcript>: To somebody that's new to technology. I wouldn't recommend to anybody honestly, but if you like it and you use it more power.

12:19:07
<transcript>: enjoy that

12:19:12
<transcript>: Enjoy that. Thanks so much for the follows. Poco and Bobby. Maybe I already saw that.

12:19:12
<transcript>: i think

12:19:17
<transcript>: I think for the follow pokey or Poco me Pokemon parties.

12:19:17
<transcript>: i appreciate that

12:19:18
<transcript>: I appreciate that.

12:19:26
<transcript>: You still work at SFX Company? We're having good job. Oh, yeah, yeah? Wish you goodbye hard Bars and Netherlands. You can't.

12:19:26
<transcript>: you still have

12:19:32
<transcript>: You still have leftover $25 extra charge on a tox free tier. Don't even know what they charge me for. Oh.

12:19:32
<transcript>: i

12:19:43
<transcript>: I hear a lot of building nightmares on AWS front. I've never had a bad experience. I also have like thousands of dollars in credits for various reasons. So I guess I don't pay for AWS very often.

12:19:43
<transcript>: it's almost

12:19:46
<transcript>: It's almost the same for me. The benefit of Xamarin. Okay.

12:19:46
<transcript>: really like

12:19:47
stroopwafel26: I tried searching larabars on amazon, shipping fee is HUGE

12:19:51
<transcript>: Really like your rays because I use Java for microservices is scalable. I don't think I.

12:19:51
<transcript>: don't have

12:19:53
niftynate80: K8s is for people who want to write their own cloud environment and deploy it anywhere

12:19:55
<transcript>: Don't have any modern options for scalability. I really like.

12:19:55
<transcript>: google high

12:19:58
<transcript>: Google High Kubernetes Autopilot Google Manager Cluster You pay.

12:19:58
<transcript>: per pod

12:20:00
<transcript>: Per pod, not per node.

12:20:00
<transcript>: why do you think

12:20:02
<transcript>: Why do you think it is the worst.

12:20:02
<transcript>: could you share why

12:20:04
<transcript>: Could you share why you think so.

12:20:24
<transcript>: You're talking to Stroop? I tried a book on this topic with just as it is. I think Kubernetes is way over engineers and only introduces unnamed complexity in Red. Good morning. Shrew going to be working on updating an ECS cluster to read stack files from S streets today. Those are all things that I like to do. I mean, I like to build on the AWS. I don't use ECS too much.

12:20:24
<transcript>: because i'm just

12:20:25
<transcript>: Because I'm just not a container guy.

12:20:34
<transcript>: But I do like reading static files from S Three. I like doing that. Try searching Larva's on Amazon. Shipping fee is huge.

12:20:39
<transcript>: Yeah, Nifty, Nifty. Nate had a great little summary there.

12:20:39
<transcript>: kubernetes

12:20:42
<transcript>: Kubernetes is for people who want to write their own cloud environment.

12:20:42
<transcript>: employ it

12:20:44
<transcript>: Employ it anywhere.

12:20:49
<transcript>: Personally, I like to have less to manage. And that's why I like manage services.

12:20:49
<transcript>: like

12:21:06
<transcript>: Like if I need a queue, I like to use a managed queue, and I don't think about much. I just think about putting things in it and reading things off of it. So that's why I like SQS or take some startup that's built a queue managed service. Like, I prefer having options.

12:21:06
<transcript>: and being able

12:21:14
<transcript>: And being able to just piece together an application using a bunch of manage stuff, having very little operational burden, things that I have to maintain.

12:21:21
<transcript>: In Kubernetes doesn't check that box for me. It's a lot I have to have in my head and I have to know and learn and then maintain.

12:21:23
<transcript>: Okay.

12:21:23
<transcript>: so

12:21:27
<transcript>: So we're going to we're going to build we're gonna build something.

12:21:30
<transcript>: We're just doing a test, okay.

12:21:33
<transcript>: So.

12:21:35
stroopwafel26: Building time!

12:21:37
<transcript>: We're going to.

12:21:43
<transcript>: We're gonna see if we can write and read some entries from Planet scale.

12:21:43
<transcript>: using

12:21:45
centos1236: mewtruPotatru Hello

12:21:48
<transcript>: Using their new http API. And we're going to do that.

12:21:48
<transcript>: in an

12:21:49
<transcript>: In an App sync.

12:21:49
<transcript>: serverless

12:21:54
<transcript>: Serverless GraphQL service. So we're going to write some VTL templates for doing.

12:21:54
<transcript>: resolution

12:21:56
<transcript>: Resolution.

12:21:56
<transcript>: so

12:22:16
<transcript>: So our resolvers will be VTL templates, which means we'll have this serverless offering where we have no runtime compute. We have no we're not writing any like code that runs for our graph fuel service. We don't have any dependencies or code rot things that may be.

12:22:16
<transcript>: updated over

12:22:32
<transcript>: Updated over time. We don't have any cold starts. We just write VTL templates to interact with our SQL database to resolve queries in our graphical schema. So maybe we could find an example graphical schema. That'd be cool if we could just find like an app. Somebody's already written a schema for just like.

12:22:32
<transcript>: as an example

12:22:38
<transcript>: As an example for just this purpose, because I don't I'm not interested in making something up. We could.

12:22:38
<transcript>: if we

12:22:43
<transcript>: If we need to, but we're gonna start by creating a new plan, skill account.

12:22:47
<transcript>: It's Building time.

12:22:51
<transcript>: Do I want to go fuzzy for this? Let's go, fuzzy.

12:22:58
<transcript>: Might not even be fatty I'm OBS 28 minus broken all my fuzzy we'll see.

12:23:01
<transcript>: Oh, do I want to give you my phone number? It's Sunday. Okay, we're good.

12:23:01
<transcript>: oh but

12:23:04
<transcript>: Oh, but Keek keycaster.

12:23:04
<transcript>: this keycast

12:23:06
<transcript>: This keycaster showing you keys.

12:23:07
schrew: oh its fuzzier than my socks rn

12:23:09
<transcript>: Whatever.

12:23:11
<transcript>: Yes, those should be fuzzy too.

12:23:11
<transcript>: okay

12:23:12
<transcript>: Okay.

12:23:14
<transcript>: Mitt.

12:23:16
schrew: fuzzy keys

12:23:18
<transcript>: Thank you. We will be in touch shortly. I'm sorry. What.

12:23:23
<transcript>: Wait. What? Enterprise? Contact Oops.

12:23:24
andom: adamel4Fuzzy adamel4Fuzzy

12:23:27
stroopwafel26: Oh yeah, Astro update: I'm convinced and dropping my old Jekyll setup. I'm having a lot of fun rewriting my website in Astro, it's great

12:23:27
<transcript>: I didn't mean to do that. I just need to sign up for playing skill. That was a mistake.

12:23:30
centos1236: That white box needs some margin on the top :D far too close

12:23:30
<transcript>: Planet skill calm.

12:23:30
<transcript>: that's not what

12:23:31
<transcript>: That's not what I wanted to do.

12:23:32
log1400: how do you setuo fuzzy screen with obs? may be an obs plugin?

12:23:35
<transcript>: Yes. This is what I wanted to do. Well.

12:23:35
<transcript>: enterprise

12:23:41
<transcript>: Enterprise The Enterprise Team the sales team at Fansco will be getting in touch shortly. Cool.

12:23:48
<transcript>: The database for optimists. I'm an optimist. Let's do it.

12:23:50
<transcript>: All right, here we go again.

12:23:52
<transcript>: Somewhere. Not Dev.

12:23:56
<transcript>: Oh, don't want to show you my password? Definitely don't want to do that.

12:23:56
<transcript>: let's fuzzy

12:24:00
<transcript>: Let's fuzzy and let's say different one. Yeah, that's a good one.

12:24:05
<transcript>: I've read and agree. Oh, or I could have signed up with GitHub.

12:24:05
fitzsimons_dev: welcome new sponsor... PlanetScale

12:24:11
<transcript>: I like doing that. I like signing up with GitHub. Could have avoided doing Fuzzy altogether.

12:24:18
<transcript>: Okay. Unfuzzy.

12:24:18
<transcript>: except turn

12:24:19
<transcript>: Except turn.

12:24:22
<transcript>: New Sponsor Plant scale.

12:24:22
<transcript>: yeah no

12:24:26
<transcript>: Yeah, no, this is not a sponsored. This is not a sponsor.

12:24:26
<transcript>: stream

12:24:34
<transcript>: Stream. I haven't done any sponsored streams don't really have any plans to actually, someone reached out about doing a sponsored stream. I had not heard of their tech.

12:24:36
fitzsimons_dev: jkjk

12:24:37
<transcript>: I don't know if I should say that.

12:24:37
<transcript>: i hadn't heard

12:24:52
<transcript>: I hadn't heard of it. I don't feel really great about doing a sponsor stream when I don't know anything about the tech, if it's something I'm really into, like, if if Lar Bar wants to sponsor a stream, you got it. Larabar, if you're watching Lara.

12:24:52
<transcript>: i'll do it

12:24:54
<transcript>: I'll do it.

12:24:54
<transcript>: i'm already been

12:25:00
andreull: have you heard about tRPC, Adam?

12:25:04
stroopwafel26: Lara's Bar

12:25:09
<transcript>: I'm already been giving you all the benefits of the sponsor stream. Every single stream. When I eat a Larabara on stream, and I do like the ASMR sounds. I open the wrapper. I'm basically already doing it. You might as well pay me for it. I guess in your view, probably shouldn't, because you don't need to. So I'm gonna keep eating them Lara's bar.

12:25:12
<transcript>: Yeah. Andre, I have heard about TrpC.

12:25:12
<transcript>: i mentioned

12:25:19
<transcript>: I mentioned earlier in the stream. I do want to play with TRPC on screen. I just reached out to Alex yesterday to see if he wants to come on the stream.

12:25:19
<transcript>: and maybe

12:25:20
<transcript>: And maybe.

12:25:24
<transcript>: Watch somebody have their first exposure to CrPC.

12:25:26
<transcript>: I.

12:25:26
<transcript>: interact with

12:25:29
<transcript>: Interact with Alex on Twitter. We actually had a phone call.

12:25:36
<transcript>: A long time ago, maybe a year and a half ago, before TRPC was really what it is today for hitting kind of blown up.

12:25:41
centos1236: tRPC v10 is great - loving the alpha preview

12:25:44
<transcript>: So I kind of became friendly with him a while back, and I thought, I'd see if he wants to come on stream. That'd be fun.

12:25:44
<transcript>: tierpc

12:25:44
afsardo: what about rspc?

12:25:49
<transcript>: Tierpc's like a thing. It's very much a thing on the Internet right now, at least on Twitter.

12:25:53
<transcript>: F sorry.

12:25:53
<transcript>: welcome

12:25:55
<transcript>: Welcome to chat.

12:25:55
<transcript>: i appreciate

12:25:57
<transcript>: I appreciate you joining.

12:26:03
<transcript>: Loving the Alpha preview of TRPC version ten good here. Good to hear? I would love to play with it.

12:26:07
<transcript>: What about RSPC? I don't know what that is.

12:26:07
<transcript>: as far do

12:26:11
<transcript>: As far? Doh what is that? What is? Arris.

12:26:13
<transcript>: What is it? Rspc.

12:26:16
<transcript>: Rumi will fuzzy so I can check my email here.

12:26:17
afsardo: That's the tRPC but in Rust

12:26:19
<transcript>: I already have it up over here somewhere.

12:26:19
<transcript>: no

12:26:21
<transcript>: No, no.

12:26:21
<transcript>: i've

12:26:27
<transcript>: I've got like 15 workspaces open, but I don't have my email so.

12:26:27
<transcript>: that

12:26:28
<transcript>: That.

12:26:30
<transcript>: And it's.

12:26:30
<transcript>: scale confirmation

12:26:32
<transcript>: Scale confirmation instruction.

12:26:32
<transcript>: confirm

12:26:34
<transcript>: Confirm email.

12:26:36
<transcript>: Cool welcome to Planet scale.

12:26:36
<transcript>: okay

12:26:38
centos1236: Build by one of spacedrive.app's devs - looks pretty solid

12:26:38
<transcript>: Okay.

12:26:40
<transcript>: Unfuzzy. It is.

12:26:40
<transcript>: that's

12:26:40
afsardo: will generate typescript types similar to trpc (exactly like)

12:26:47
<transcript>: That's the TRPC. But in Rust. Oh, that's cool. Ooh, that sounds really cool. Built by one of space drives des.

12:26:50
andreull: so I don't use graphQL in my app if I have tRPC right? I'm new to dev and the amount of tech is killing me

12:26:51
<transcript>: Yeah. I've watched some of.

12:26:51
<transcript>: his name

12:26:53
<transcript>: His name? What's his name? What's his name.

12:26:53
<transcript>: j

12:26:56
<transcript>: Jamie. I watched some of his stuff.

12:26:59
skylercodes: long time Twitter video watcher, first time Twitch watcher

12:27:07
<transcript>: I don't use graphical in my app if I have TrpC, right? Yeah. Yeah. So TRP is kind of an alternative to writing your GraphQL API.

12:27:07
<transcript>: it just

12:27:11
<transcript>: It just like it's like APIs on Easy mode.

12:27:16
<transcript>: Some of my questions for Alex. If we get them on stream are like, what are the traders.

12:27:16
<transcript>: maybe

12:27:23
<transcript>: Maybe someone's documented this. I'd like to do a video about it. Actually, everyone talks about how great it is to just offer.

12:27:31
centos1236: We use TRPC @ cal.com and I really can't find a fault

12:27:36
<transcript>: You know, have your Prisma schema and you don't need an API. It's just TrpC it's high script, front, back. And that sounds great. But what are the tradeoffs like? What is what am I losing? Because Tech is all about tradeoffs. And if you're new, you should understand that.

12:27:36
<transcript>: there are no

12:27:42
<transcript>: There are no panesy. Is there are no like one thing to rule them all.

12:27:48
<transcript>: It's really like, what is your user? What are the various factors? What is your context.

12:27:48
<transcript>: and then

12:27:55
afsardo: Tbh I've been trying the t3 stack but coming from Laravel, it's weird, there are a lot of things "missing", like queues, scheduler (which are fundamental building blocks for any server endpoint/function).

12:27:57
<transcript>: And then choosing tech that fits that context. But there's so many different options. And there's no inherently bad choices.

12:27:57
<transcript>: it's

12:27:59
<transcript>: It's like.

12:27:59
<transcript>: fitting a puzzle

12:28:10
<transcript>: Fitting a puzzle together, and the more senior you get, the longer you've been doing it, the more experience you get, the better you get at understanding the trade offs and choosing the right thing for your problem. Like the right tool for the job, if you will.

12:28:27
<transcript>: Synth those you use trpc@cal.com and I can't really find a fault. So that's a great, great question. Great person to ask this question. Syntos. Are there any runtime downside? So it's a great author time experience. Usually if you have a really great officer time experience like that, you're giving up something. Is there like a.

12:28:27
<transcript>: performance

12:28:33
<transcript>: Performance hit what is like what are the latency characteristics of if you're building.

12:28:37
<transcript>: Your startup, you don't really care and you shouldn't.

12:28:52
<transcript>: But there's a lot of tech that's over optimized for, like, the first experience of standing something up and not optimized for maintaining this thing in year two, in year three, I wonder how TrpC holds up. In that case, I don't know how many people have had something.

12:28:52
<transcript>: in production with

12:29:05
afsardo: @andreull to me I feel like graphql creates an interface/barrier between your clients and your server/db, as in trpc everything is one place the barrier disapears and the client/server distinction fades away, you can have both really depends on your context

12:29:06
<transcript>: In production with the RPC for over a year. And I guess my question would be, how does the holdout? What is it like to maintain over time? But also, what are the runtime characteristics? Like, what do you lose? If anything, maybe nothing.

12:29:06
<transcript>: in terms of

12:29:10
centos1236: It just creates a nextjs api endpoint...I  personally haven't noticed anything different

12:29:11
<transcript>: In terms of probably not. I guess like your database is going to be your bottleneck.

12:29:11
<transcript>: and that's

12:29:16
dyalicode: i already create this example using planetscale https://sveltekit-prisma-planetscale-trpc.netlify.app/

12:29:24
<transcript>: And that's outside of the TRPC conversation. So I guess TRPC wouldn't be any slower than building a graphical API. And in that case it is just better in both cases. That'd be cool if it's better off for time and run time.

12:29:37
<transcript>: Skylar, welcome to Chat. Longtime Twitch Twitter Video Watch our first time Twitch Watcher. That's funny. I do little Twitter previews. I post little videos on Twitter every day when I go live. If you haven't seen those.

12:29:51
<transcript>: I don't use graphic on that. Yeah. Okay. The amount of text is killing me. I hate to hear that, Andre, because I think that is the case. I think people are overwhelmed by options, and ultimately, there's just so many.

12:29:51
<transcript>: good pieces

12:30:01
<transcript>: Good pieces of technology out there. You're probably gonna land on something that's just fine. And it's more important that you get into it. You start building something and you learn kind of your preferences.

12:30:01
<transcript>: and

12:30:03
dyalicode: but in my example i use sveltekit instead of nextjs

12:30:06
<transcript>: And there's a lot of tech out there just I wish people would.

12:30:06
<transcript>: avoid the

12:30:14
<transcript>: Avoid the really complex things. Like we talked about Kubernetes earlier. You should be starting there. You should start by building a simple web app.

12:30:14
<transcript>: or mobile app

12:30:22
<transcript>: Or mobile app except that's what you prefer and just try to solve some problem and find answers to get there on the internet.

12:30:22
<transcript>: thanks for

12:30:28
<transcript>: Thanks for the follow is the answer codes. I don't know if I welcome you to chat. I don't know if I said thanks for the follow.

12:30:32
niftynate80: adamel4Adambar

12:30:39
<transcript>: To be honest, I've been trying the T Three stack, but coming from Laravel, it's weird. There are a lot of things missing, like Q scheduler. Yeah. So that's not T Three's fault. That is.

12:30:39
<transcript>: the fault

12:30:48
<transcript>: The fault of the JavaScript ecosystem. There isn't really like a Laravel or Rayles type framework in JavaScript Len this is there are some I guess.

12:30:48
<transcript>: red

12:30:56
centos1236: Blitzjs

12:31:02
<transcript>: Redwoods trying to be that I think there's another one that everyone keeps talking about. That I see in my mentions all the time and I froze blanking. There are a couple of jobs frameworks that are trying to be that holistic like opinionated batteries included, thing.

12:31:08
<transcript>: They just not a lot of use. I don't think there is popular as the like.

12:31:08
<transcript>: other things

12:31:11
<transcript>: Other things out there so I.

12:31:11
<transcript>: constantly

12:31:31
<transcript>: Constantly say this. I feel like the team reverse L will get there, but I feel like they also sometimes their DA is kind of gloss over the fact that there are other things Besides just hitting an API route and like hitting a database. There are other needs when you're building out an application in 2022 like Q's and Cron jobs. And these are all real things. They acknowledge them in their docs. But.

12:31:31
<transcript>: it's like pointing

12:31:46
<transcript>: It's like pointing to third party services. They should just build all that. They're good at building good developer experiences. Come on, Versailles, build it, please. If you build it, we will come. I mean everyone's already using bracel, but I think it's oversimplified. It shouldn't all just be API route.

12:31:46
<transcript>: in

12:31:48
<transcript>: In grant.

12:31:49
afsardo: I agree!!

12:31:49
andreull: Theoretically: so I have tRPC that does the fetching. I have Next JS and Tailwind for frontend. I choose AWS or Firebase? for user database, their favs, comments, etc. , right?

12:31:58
<transcript>: To man, I feel like Grab Kill creates an interface barrier between your clients and your server database. As in tier.

12:31:58
<transcript>: pc everything

12:32:07
<transcript>: Pc everything in one place. The barrier disappears and the client server distinction phase away. You can have both. Really depends on your context. Yeah. No, I think that's spoton. I think.

12:32:11
andreull: @afsardo thanks

12:32:15
<transcript>: The client, the server do disappear when you use something like Laravel, don't they? Maybe JavaScript just catching up. We're just learning.

12:32:24
<transcript>: Fewer. I mean, there still is a client experience in Lareville. Like, that's one question I have for Larry Hill. Dads is like, what do you use for the front end.

12:32:24
<transcript>: to

12:32:29
afsardo: Vue/React

12:32:41
<transcript>: To use like View or something. It seems like I see that a lot with laribells like View. I don't know. Do you build React apps? But then your backend is layer of all. I don't know. These are questions I have and all these feels weird to me to like server render a template that has JavaScript weird stuff in it. Like some React framework in the front that feels weird.

12:32:41
<transcript>: just create

12:32:45
<transcript>: Just creates a next JS API endpoint. I personally haven't touched anything different.

12:32:48
<transcript>: You're seeing TRPC does okay.

12:32:48
<transcript>: so just

12:32:51
<transcript>: So just uses an API route.

12:32:51
<transcript>: to

12:33:00
afsardo: Yeah thats why Laravel, there is still a distinction and why I'm moving away to Typescript.

12:33:09
<transcript>: To do your whole API. I already create this example using Planet Scale. Okay, so that's a salt kit. Prisma, Plant Scale TRPC example. That's cool. We're gonna do something a little different dialy. We're gonna be we're gonna be targeting plant scale from AppSync.

12:33:09
<transcript>: and from

12:33:26
<transcript>: And from a VTL Resolver, and I've kind of already gone through it. I'll explain why I care to do that, so we won't hit on it too much more. But Blitz, yeah, scientists. Blitz is another option, and I know they do some RPC things and they kind of get rid of your API as well.

12:33:37
<transcript>: Theoretically. So I have TRPC that does the fetching I have next JS and tail in for front end. I choose a to bits for Firebase for user database, surface comments, etc. Right. Yeah. Andre.

12:33:37
<transcript>: okay

12:33:38
<transcript>: Okay. So.

12:33:42
<transcript>: No excuse me.

12:33:42
<transcript>: i think

12:33:46
<transcript>: I think if you wanted to start simpler, Andre, you probably don't need.

12:33:46
<transcript>: those

12:33:51
<transcript>: Those like either a Tobis or Firebase. I think T three stack is probably where you should start.

12:33:55
<transcript>: Because you're gonna have TRPC. Next JS, and tailwind.

12:33:55
<transcript>: and

12:34:03
andreull: I need smth to store users when they login?

12:34:06
afsardo: The gains from the autocompletes you get with trpc for example I think it's insane, specially for junior devs, helps them so much (avoiding mistakes).

12:34:10
<transcript>: And then just use like Prisma and Planet Scale. There's your database use next off for off that'll get you going. And I think that's all in probably the T three CLI like the README and stuff. So if you go to the T three sex stuff, I think that's gonna get you.

12:34:10
<transcript>: probably

12:34:12
<transcript>: Probably further starting out.

12:34:17
centos1236: @andreull init.tips

12:34:18
andreull: signup*

12:34:19
<transcript>: And then I wouldn't try to dip into AWS until you've kind of got a handle on all of that stuff working together.

12:34:21
<transcript>: If that makes sense.

12:34:21
<transcript>: view react

12:34:24
caldotjs: playing around with T3 currently and it makes it really easy to setup! can recommend

12:34:26
<transcript>: View react. That's why Larryl, there's still distinction and why I'm moving away to TypeScript gotcha.

12:34:43
<transcript>: Need some of the store users really login. Yeah, I think Next off you can connect it to your plan scale database. I'm sure I've never done that because I'm not used plan scale, but Next Sauce has adapters for different databases so you can store your users that way or just use jot tokens and you don't store anything. That's another option.

12:34:51
<transcript>: Okay, I got I just got move forward here playing around T three currently it makes it really easy setup can recommend yeah, deals, good people.

12:34:51
<transcript>: they're they're doing

12:34:55
<transcript>: They're they're doing cool stuff over there. His community's insane.

12:34:59
<transcript>: Alright.

12:34:59
<transcript>: planets

12:35:03
<transcript>: Planetscale. Here we are. We create an organization for you called Elmore. Adam.

12:35:03
<transcript>: i do want

12:35:06
<transcript>: I do want to use a different name because that's that's not cool.

12:35:06
<transcript>: adam

12:35:09
<transcript>: Adam Dev. Maybe.

12:35:09
<transcript>: yeah sure

12:35:10
<transcript>: Yeah, sure.

12:35:14
<transcript>: Okay.

12:35:14
<transcript>: see how

12:35:16
andreull: chat, Adam, thank you for your help

12:35:19
<transcript>: See how plans go works or ready to create or import a database instead. Yes. Let's create one.

12:35:19
<transcript>: oh i

12:35:20
caldotjs: when do we get our own stack adam?

12:35:23
<transcript>: Oh, I get to choose an AWS region, so there's so many of these.

12:35:23
<transcript>: startup

12:35:39
<transcript>: Startups now that are just like building the vertical DX on top of AWS that AWS doesn't really specialize in. So AWS does try sometimes amplifies an example where they're trying to build a vertical Dev experience. And amplify is not bad. I think people should try it.

12:35:39
<transcript>: and see

12:35:50
<transcript>: And see what you think. It has a lot of the use cases for like advanced stuff like if you want to do photo uploads and all that like they've got solutions for lots of problems, common app problems.

12:35:50
<transcript>: but i

12:35:58
<transcript>: But I just generally think AWS is better at doing the primitives, going wide and building all the lowlevel stuff. They're really stable. They never break them.

12:36:18
<transcript>: Yeah, that's my opinion. And I think startups like Versaille, like Planet Scale or poised to create all these next layers of abstraction on top of AWS. But then sometimes they let it leak out. Like what? I'm choosing my AWS region. That's cool, because they know a lot of their customers probably have AWS stuff deployed in a region, and they want to keep their database close to it. That's why they do that.

12:36:20
<transcript>: It's my guess.

12:36:26
<transcript>: You can also use Plan field CLI to create databases. Okay, we're gonna create one.

12:36:26
<transcript>: app sync

12:36:27
<transcript>: App sync.

12:36:27
<transcript>: ht

12:36:29
<transcript>: Http.

12:36:31
<transcript>: Via VTL.

12:36:31
<transcript>: that's a terrible

12:36:34
<transcript>: That's a terrible name. Appsync.

12:36:36
<transcript>: Desk.

12:36:36
<transcript>: cool

12:36:38
wijiler: Hello

12:36:39
<transcript>: Cool. We're gonna put it in.

12:36:44
<transcript>: East one just hope things have catch on fire today.

12:36:55
<transcript>: Thank you for your help. You're welcome, Andre. I hope that was helpful and you can always come back and ask more questions. As you get further along, you're going to have more questions.

12:37:01
<transcript>: When do we get our own stack? Adam? Oh, I'm not there. I'm not there yet. I don't. I'm not a thought leader.

12:37:01
<transcript>: i'm not

12:37:11
<transcript>: I'm not a content creator if you will and see, I'm not saying Theo is Theo's doing stuff like he's making he's making stuff. Ping is awesome. I use it.

12:37:17
<transcript>: Some people are like content creators and community leaders and thought leaders and they don't really build stuff.

12:37:18
afsardo: @andreull if you need a bit help with nextAuth Credentials driver let me know

12:37:22
cowfacedude99: The nice thing about the startups is that these abstraction make it very easy to make modules without knowing the whole aws stuff.

12:37:23
<transcript>: Theo's not that I'm also not that. And I'm not somebody who is like.

12:37:23
<transcript>: probably going

12:37:26
<transcript>: Probably going to create that kind of a thing.

12:37:30
schrew: oh but you be creating content

12:37:37
<transcript>: Steel's very good at doing both. Actually, he's very good at, like building a company and a startup in the form of Ping and building this giant, awesome community that's doing amazing things.

12:37:44
<transcript>: I guess I'm creating content through you. Yeah. Feels weird. I don't feel like a content person.

12:37:44
<transcript>: nice thing

12:37:46
<transcript>: Nice thing about the startup.

12:37:46
<transcript>: is that

12:37:58
caldotjs: I generally think it's cool to have some community project. Some sort of teambuilding for the community :)

12:38:03
<transcript>: Is that these abstraction make it very easy to make modules without knowing the whole aid of yeah, exactly like Planet Skill is like you want my sequel, you want it to be fast and you don't want to think about it anymore. Use our service and it plays nicely with the rest of your database stuff. I think there are there's room for like another.

12:38:03
<transcript>: twenty five

12:38:13
<transcript>: 25 startups like Versail, like Planet Scale, just building like packaging up a few AWS primitives that are common use cases making a really nice developer experience.

12:38:13
<transcript>: and then

12:38:25
<transcript>: And then selling it to people. That is that's like 25 more startups that haven't been created yet. So if it's you go create it, let me know how it goes. I'll be your technical advisor if you want. I advise some startups.

12:38:25
<transcript>: generally

12:38:27
stroopwafel26: I need to read up on Planetscale to understand the difference between that and Aurora Serverless, sounds similar

12:38:35
<transcript>: Generally think it's cool to have some community projects, some sort of team building for the community. Oh, I totally agree, calbotte, if you think we're there, let's do it. I don't know how big a community you have to have.

12:38:41
<transcript>: Everyone should join the discord. Join the discord so we can start building something together. I'd love to.

12:38:41
<transcript>: this

12:38:41
adamelmore: !discord

12:38:41
fossabot: Adam has a Discord server and he'd love to see you there: https://discord.gg/E92M2chd3e

12:38:43
<transcript>: This toured.

12:38:43
<transcript>: you read up

12:38:58
<transcript>: You read up on plan scale to understand that in Aurora service sound similar. Yeah, it's better. I think it's better. Honestly, I think Aurora service misses the Mark in a couple ways. Version one and version two. We're not gonna keep I'm gonna move forward here because I'm realizing I've been talking a lot.

12:39:03
<transcript>: I've not been doing a lot. I've been talking a lot. I need to do more.

12:39:03
<transcript>: so let's do

12:39:04
<transcript>: So let's do.

12:39:09
afsardo: A big planetscale feature is branching

12:39:09
caldotjs: I think @stroopwafel26 @laytanl_ and a few more would be down :>

12:39:10
<transcript>: But before I do thanks for the follow Allegra.

12:39:19
<transcript>: Okay. We've got a new database. I guess I want to connect to it. I don't know. I've never used plants. Go. This is my first exposure. Oh, Geez.

12:39:25
<transcript>: Do you see that? See how I leaked that.

12:39:28
stroopwafel26: I would totally be down

12:39:31
<transcript>: I just leaked it so bad. Leighton? Leighton? How'd you let me leak that.

12:39:31
<transcript>: can you make

12:39:35
<transcript>: Can you make Chromium cloak.

12:39:35
<transcript>: cloak

12:39:35
cowfacedude99: EXPOSURE!!!

12:39:37
<transcript>: Cloak, Chrome.

12:39:37
<transcript>: so i can

12:39:38
<transcript>: So I can never leak.

12:39:38
<transcript>: exposure

12:39:40
<transcript>: Exposure.

12:39:44
<transcript>: I don't know what I just leak. I just know I leaked sensitive things.

12:39:48
<transcript>: Okay. So what do we need to do? We need to.

12:39:48
<transcript>: go fuzzy

12:39:51
<transcript>: Go fuzzy and figure out what I just leaked.

12:39:51
<transcript>: how exposed

12:39:52
<transcript>: How exposed Am I.

12:39:58
purrplish: doxxed, now you are just like prime LUL

12:39:59
<transcript>: Below the details connect to this database. Oh, Geez, so everyone's connecting to this database.

12:40:03
<transcript>: Oh, well, now they can't be displayed.

12:40:09
<transcript>: Oh, man. There should be, like, a big warning. Like if you're a streamer.

12:40:09
stroopwafel26: Recreate the DB :P

12:40:13
<transcript>: Heads up. Okay, I'm gonna delete that password.

12:40:13
<transcript>: deleted

12:40:14
<transcript>: Deleted.

12:40:18
<transcript>: Docs. I'm just like, bryme.

12:40:27
<transcript>: I would love to be just like prime. Actually, if I'm just like prime, then I'll take it I'll docks myself all day long.

12:40:28
laytanl_: That's a little bit more complicated, I guess LUL

12:40:30
<transcript>: Is that PrimeGen.

12:40:35
<transcript>: A little bit more complicated, I guess. Yeah. Late. And that'd be a tough one.

12:40:37
laytanl_: cloak.chrome

12:40:39
andreull: @afsardo sure, thank you

12:40:41
<transcript>: That'd be a tough one to recognize secrets. So you do some like INL computer.

12:40:41
<transcript>: vis

12:40:53
<transcript>: Vision stuff. And you determine like that looks like a secret. Like that looks like it is probably a secret. And you just blur it. That'd be super cool. Actually, I would pay money for that Chrome extension.

12:40:53
<transcript>: i'm creating a new

12:40:58
<transcript>: I'm creating a new password. That's why I'm still fuzzy. Just give me a SEC. Calm down, calm down.

12:40:58
<transcript>: i'm just getting

12:41:09
<transcript>: I'm just getting nobody was freshering me. I just made that up roll admin. Sure. I deleted that last one, so don't even try to go back on the VOD and find it. You're wasting your time? You're wasting your time.

12:41:09
<transcript>: bro

12:41:25
<transcript>: Brom. Thank you for the follow. Okay, we're gonna move. We're sorry. Moving fast. We're gonna start right in some NVM. I mean writing text with ne of them. Passwords is generated. Password name, default, branch, main connection string. Okay, I gotta copy this.

12:41:29
<transcript>: I got paste it somewhere. See.

12:41:34
<transcript>: Somewhere super secret and safe. Where can I do that.

12:41:42
<transcript>: Right now, I'm gonna paste it into slack. That's not secret or safe, but I don't know where else to put it right now.

12:41:42
<transcript>: i'm gonna do a

12:41:45
<transcript>: I'm gonna do a do it there and tell I can decide.

12:41:45
<transcript>: where i want

12:41:49
<transcript>: Where I want it. Let me copy a random word.

12:41:49
<transcript>: into my

12:41:51
<transcript>: Into my clipboard.

12:41:51
<transcript>: and let me close

12:41:53
<transcript>: And let me close this. Okay.

12:41:55
<transcript>: I'm fuzzy.

12:41:55
<transcript>: we're back

12:41:57
<transcript>: We're back.

12:41:57
<transcript>: we're back

12:41:58
<transcript>: We're back.

12:41:58
<transcript>: so we have

12:42:05
<transcript>: So we have a password. I have a connection string or like a host that I can target with this thing.

12:42:05
<transcript>: so

12:42:08
<transcript>: So now we have this database. I need to put stuff in it.

12:42:08
<transcript>: anyone know

12:42:11
<transcript>: Anyone know? Okay, I'm gonna solicit some help here.

12:42:11
<transcript>: from

12:42:14
<transcript>: From Twitch Chat. Does anyone know of like a good.

12:42:14
<transcript>: example

12:42:18
<transcript>: Example app. I don't even know what I'm looking for. I'm looking for like.

12:42:18
<transcript>: i guess like

12:42:20
<transcript>: I guess like a model.

12:42:20
<transcript>: like

12:42:26
<transcript>: Like a schema. It'd be cool if somebody had written like here's an example schema and some SQL tables.

12:42:26
<transcript>: and i

12:42:32
<transcript>: And I could fill in the gap. So like basically a GraphQL with a SQL database behind it.

12:42:32
<transcript>: graph

12:42:43
<transcript>: Graphfield, Schema, SQL database and all the like table definitions. I just love to not make up something. I'd love to just start with like a real app. And then we build the resolvers like we build the functionality.

12:42:43
<transcript>: but

12:42:49
<transcript>: But like to have the whole UML diagram for the app already made even though.

12:42:49
<transcript>: that'd be cool

12:42:51
<transcript>: That'd be cool if you did.

12:42:55
<transcript>: Dave's been confused. Be a lot cooler if you did.

12:43:00
<transcript>: I'll just. I'll just kind of keep my eyes.

12:43:07
centos1236: Make a lovely chat app :D

12:43:07
<transcript>: Half on chat here and see if anybody knows something like example apps feel like that's got to be a thing.

12:43:09
<transcript>: I guess for now we could just actually.

12:43:13
<transcript>: Write something. Something. Fake.

12:43:13
<transcript>: so we have one

12:43:15
<transcript>: So we have one branch.

12:43:17
<transcript>: With zero tables.

12:43:18
cowfacedude99: I think that clocking is all these startups should work on. As many of these startups are used by streamers.

12:43:19
<transcript>: Let's.

12:43:22
<transcript>: No schema.

12:43:22
<transcript>: once schema

12:43:27
<transcript>: Once schema changes are made on this branch, refresh your schema. So how do I how do I make a schema.

12:43:29
afsardo: There is a microsoft db they use to use all the time as an example.

12:43:29
<transcript>: There's no production brand.

12:43:29
<transcript>: probably

12:43:30
<transcript>: Probably.

12:43:34
<transcript>: Console.

12:43:42
<transcript>: Make a lovely chat app. That sounds fine. Sent us. Then you have an example of like a schema for a chat app.

12:43:48
caldotjs: @cowfacedude99 i.g. there is no need to show the thing.. you can just cloak it and add a copy button... :(

12:43:49
<transcript>: I think that clocking is all these startups should work on, as many of these sites are used by Streamers. Oh, cloaking. Yeah, seriously.

12:44:09
<transcript>: I'll help them in their early days of getting their reach out there, because if there was an offering, like if there's two database services, databases of service out there, planet scale and something else and one of them, well, there is like cockroach or something there's like plants going cockroach. And one of them is super straight, streamer friendly. You know, you're gonna have the streamers using your thing.

12:44:09
<transcript>: just saying

12:44:11
<transcript>: Just saying.

12:44:11
<transcript>: you're welcome

12:44:15
<transcript>: You're welcome for that marketing idea. Actually, that was Cow face.

12:44:15
<transcript>: you're welcome

12:44:20
<transcript>: You're welcome that I voiced it with my words on stream.

12:44:23
<transcript>: There's a Microsoft DB they use.

12:44:23
<transcript>: they

12:44:35
<transcript>: They used to use all the time as an example. If you can point me to something at Sparto, I would love to use something. There is no need to show the thing. You can just cloak it and add a copy button. Yeah. I don't know why they showed it to me. I was a little.

12:44:35
<transcript>: surprised

12:44:40
<transcript>: Surprised if I'm being honest. So this console I can just like type SQL commands in here.

12:44:43
<transcript>: Like, what.

12:44:43
<transcript>: help

12:44:48
<transcript>: Help. Let's see. Let's see what's in. Let's see what's in the console. It's kind of fun learning something new, you know.

12:44:54
<transcript>: In the command to the server. Can you all see this? Then you make a bigger make it a little bit bigger.

12:44:56
<transcript>: So you're saying I can say.

12:45:02
<transcript>: Go and then I can send a command to the server. Like a sequel. Command Select.

12:45:02
<transcript>: all from

12:45:05
<transcript>: All from tables or something.

12:45:08
<transcript>: And so long since I've written sequel.

12:45:08
<transcript>: what

12:45:10
<transcript>: What do I have to do here.

12:45:10
<transcript>: g

12:45:11
<transcript>: G.

12:45:13
<transcript>: Select.

12:45:13
<transcript>: all from

12:45:15
<transcript>: All from tables.

12:45:21
<transcript>: What happens.

12:45:25
<transcript>: Go go gadget.

12:45:25
<transcript>: command

12:45:26
<transcript>: Command.

12:45:26
<transcript>: okay

12:45:28
<transcript>: Okay. Whatever.

12:45:28
<transcript>: i guess

12:45:32
<transcript>: I guess this is probably not the place to start schema. If I want to create a schema.

12:45:38
<transcript>: Let's see.

12:45:38
<transcript>: appsync

12:45:38
afsardo: https://en.wikiversity.org/wiki/Database_Examples/Northwind

12:45:40
<transcript>: Appsync, Tests Maybe we should go back here.

12:45:40
<transcript>: yeah yeah

12:45:45
<transcript>: Yeah, yeah, I got a little head of my self, so deploy, request, branches, Insights, Backup settings.

12:45:45
<transcript>: new

12:45:50
<transcript>: New branch. I don't need a new branch. We can work on one branch.

12:45:50
<transcript>: but we do

12:45:52
<transcript>: But we do need to create some tables.

12:45:58
<transcript>: North Wind. I've heard of that. The North Wind database. Okay.

12:46:06
stroopwafel26: Northwind brings back memories

12:46:09
<transcript>: So how do I okay, well, now I'm getting a little nervous that I just am too dumb for this. How do I create a table.

12:46:09
<transcript>: i do know

12:46:13
<transcript>: I do know some sequel. I still do some on occasion.

12:46:17
<transcript>: Insights schema.

12:46:17
<transcript>: console

12:46:18
<transcript>: Console.

12:46:23
<transcript>: So let's just do like planet scale.

12:46:25
<transcript>: Getting started.

12:46:26
afsardo: I think they have their cli

12:46:27
cowfacedude99: @stroopwafel26 me too.

12:46:30
<transcript>: Quick Start Guide, cool.

12:46:34
<transcript>: Create a database plan scale. Make a schema change. Insert data. Okay.

12:46:34
<transcript>: connect

12:46:37
<transcript>: Connecting your application or branching Guides more helpful.

12:46:42
<transcript>: So you can either follow it in the Planescale dashboard or using the Plan Scale CLI.

12:46:42
<transcript>: please

12:46:54
<transcript>: Please go dashboard you'll need a plan scale count got it created a database check database created with initial development range main which we'll use to apply for giveaway changes and insert data. Cool add a schema to your database.

12:46:54
<transcript>: okay

12:46:54
stroopwafel26: Back when I had to connect a SQL Server DB to and MS Access one

12:47:00
stroopwafel26: in school

12:47:00
<transcript>: Okay, quick start, Jim. Shows how to create and use two relational tables. Cool. This will be all we need. Categories and products. That's great.

12:47:00
<transcript>: from your database

12:47:06
<transcript>: From your database over if you click on Branches tab and Main Branch Console tab. So open up a Web content.

12:47:12
<transcript>: Create. Okay. So you're saying I can just type this into the command thing, and that'll just work.

12:47:18
<transcript>: Oh wow, Plan Skill does not support foreign key constraints that we do support the use of relationships with foreign keys.

12:47:18
<transcript>: okay

12:47:19
<transcript>: Okay.

12:47:22
<transcript>: So I.

12:47:32
<transcript>: Zerotables Cool. Let's create a table called categories.

12:47:32
<transcript>: and

12:47:35
<transcript>: And now let's do show tables.

12:47:35
<transcript>: cool

12:47:36
<transcript>: Cool.

12:47:36
<transcript>: tables

12:47:45
<transcript>: Tables in App Sync tests. One row. Okay, categories. That is our table. We did it. Let's create a products table.

12:47:45
<transcript>: like this

12:47:46
<transcript>: Like this.

12:47:58
<transcript>: And let's just show tables, categories and products. Cool. So we got a we've got some to work with here. This is all I need in terms of a fake thing.

12:48:04
<transcript>: Back when I had to connect a SQL Server DB to.

12:48:04
<transcript>: an

12:48:07
<transcript>: An Ms Access one in school.

12:48:10
<transcript>: Microsoft Access, that was sometimes.

12:48:15
<transcript>: Okay. We're going to insert some categories.

12:48:23
<transcript>: In some there's a copy button, categories and products. So there's a category.

12:48:23
<transcript>: here

12:48:25
<transcript>: Here is.

12:48:25
<transcript>: a product

12:48:26
<transcript>: A product.

12:48:29
<transcript>: Cool.

12:48:31
<transcript>: Did it.

12:48:31
<transcript>: now we can

12:48:34
<transcript>: Now we can select all from products.

12:48:34
stroopwafel26: Mail merge from Access through Word?! geez I'm old

12:48:38
<transcript>: Let's see if I remember any sequel. What do you say.

12:48:38
<transcript>: so it has

12:48:41
<transcript>: So it has a category ID. Let's do select all.

12:48:43
<transcript>: From.

12:48:43
<transcript>: keycast

12:48:45
<transcript>: Keycasters in My way.

12:48:45
<transcript>: from

12:48:48
<transcript>: From Product P.

12:48:49
<transcript>: pig it out

12:48:49
<transcript>: Pig it out.

12:48:52
<transcript>: Interdoing.

12:48:52
<transcript>: i know some things

12:48:53
<transcript>: I know some things.

12:48:53
<transcript>: i know some things

12:48:55
<transcript>: I know some things about SQL.

12:48:55
<transcript>: i may never

12:49:00
<transcript>: I may never write sequel but I do know some things inner join.

12:49:02
<transcript>: It's like.

12:49:05
<transcript>: See on.

12:49:05
<transcript>: integer

12:49:07
<transcript>: Integer in categories.

12:49:11
<transcript>: C on C.

12:49:11
<transcript>: id

12:49:13
<transcript>: Id. I'm guessing.

12:49:13
<transcript>: equals

12:49:17
<transcript>: Equals P category ID.

12:49:20
<transcript>: And we want to.

12:49:24
centos1236: "I know some things" ... 10 seconds later questions existence

12:49:24
<transcript>: Know no.

12:49:29
<transcript>: I'd written all that Cool sequel select all from.

12:49:29
<transcript>: products

12:49:30
<transcript>: Products.

12:49:39
laytanl_: I like this more than frontend tbh

12:49:43
<transcript>: Yes, it took like 10 seconds. So inter join categories. Come on, I can't see when keycaster gets in my face inter join categories.

12:49:47
<transcript>: C on C ID equals.

12:49:47
<transcript>: products

12:49:48
<transcript>: Products.

12:49:50
<transcript>: Op.

12:49:53
<transcript>: Category ID.

12:49:53
<transcript>: and you'd come

12:49:54
laytanl_: You should update your title too

12:49:56
<transcript>: And you'd come up here very carefully do that.

12:49:59
<transcript>: Do that and then run it.

12:50:04
<transcript>: Look at that. We got a category. Two categories. Office supply.

12:50:04
<transcript>: okay

12:50:09
<transcript>: Okay, just make sure I still new sequel. Had to kind of like dust off the old cobwebs, you know.

12:50:11
<transcript>: Oh, I haven't eaten my Lar bar.

12:50:11
<transcript>: you

12:50:16
<transcript>: You like this more than front end. I should update my oh, my title. Oh, good call.

12:50:18
<transcript>: I know some things.

12:50:18
<transcript>: questions exist

12:50:22
<transcript>: Questions. Existence. That's exactly my stream.

12:50:22
<transcript>: let's go back

12:50:24
<transcript>: Let's go back here and change the title.

12:50:24
<transcript>: neove

12:50:27
<transcript>: Neovem. We will be doing some Neom.

12:50:27
<transcript>: neil

12:50:29
<transcript>: Neil them and.

12:50:31
<transcript>: Plan it scale.

12:50:34
<transcript>: Http.

12:50:35
stroopwafel26: 10k channel points who dis

12:50:36
<transcript>: Request.

12:50:41
stroopwafel26: I'm being frugal

12:50:46
<transcript>: Sync. I don't know. It's kind of a weird thing we're doing, but that'll work. And then our let's see right here.

12:50:51
<transcript>: We're not configuring alacrity for not doing that for sure.

12:50:51
<transcript>: we are top

12:50:54
<transcript>: We are topic.

12:50:57
<transcript>: Setting up.

12:50:58
caldotjs: @stroopwafel26 spend some.. so I can catch up :>

12:51:01
<transcript>: Playing with.

12:51:04
<transcript>: Playing with Planet scale.

12:51:05
adamelmore: !topic playing with planetscale and appsync

12:51:11
<transcript>: And AppSync so Kal that I just saw your name and it reminded me what you just said earlier.

12:51:21
<transcript>: 10,000 channels. Wow. Stroop. Wow. I got it. I gotta do the one where you can do a call with me because I want to do that. I want to have called with all you that here all the time.

12:51:32
<transcript>: So, Calvot, you mentioned, like, us making a sack. If we do make a sack as a community, it's gonna be awesome. It's gonna be centered around serverless.

12:51:32
<transcript>: and it's

12:51:34
<transcript>: And it's going to be.

12:51:37
<transcript>: Less polished and less easy.

12:51:37
<transcript>: than

12:51:52
<transcript>: Than T three. It won't be that easy, but it will be like, runtime perfect if you will. So, like, when I build APIs, I build them globally distributed, and I build them perfect. You know, I'm saying, like.

12:51:57
stroopwafel26: @stroopwafel26 it's a marathon, not a race

12:52:00
<transcript>: Within 200 milliseconds responds all over the globe. I like to do that because it's just fun. So I like to build APIs that.

12:52:00
<transcript>: are highly distrib

12:52:12
<transcript>: Are highly distributed and super duper fast. And I guess I used some JavaScript occasionally, so maybe they're not super duper fast. Maybe if I did it in Rust at the edge, it'd be faster. I don't know. We'll see. Maybe we'll get there.

12:52:15
<transcript>: It's a marathon, not a race.

12:52:15
<transcript>: okay

12:52:16
<transcript>: Okay.

12:52:16
<transcript>: so

12:52:20
<transcript>: So we we wrote some sequel. We still remember how to do that. Cool.

12:52:20
<transcript>: now we're

12:52:22
caldotjs: that sounds like my perfectionism would love that :)

12:52:23
laytanl_: "When I built API's they are perfect" LUL

12:52:25
<transcript>: Now we're on our development branch. Do we want to promote it to production? I guess we could.

12:52:33
<transcript>: Now you've created a database applied scheme, changes added data, and promoted your range of production. It's time to connect to your application.

12:52:39
<transcript>: Okay, let's do it. Let's promote this thing.

12:52:42
<transcript>: Let's promote it to production. Why not.

12:52:44
<transcript>: A one app.

12:52:44
<transcript>: overview

12:52:45
<transcript>: Overview.

12:52:48
<transcript>: Promote.

12:52:50
<transcript>: Yes.

12:52:54
<transcript>: Excuse me.

12:52:56
<transcript>: Okay.

12:53:00
<transcript>: We have a production database in US East one.

12:53:00
<transcript>: planet

12:53:02
<transcript>: Planet scale.

12:53:02
<transcript>: this feels pretty

12:53:04
<transcript>: This feels pretty good.

12:53:09
<transcript>: I will say now, if I click connect is it gonna show me the password again? Let's just fuzzy. Just in case.

12:53:15
<transcript>: It does not show the password. It only shows it the first time. So we good. Right.

12:53:17
stroopwafel26: wait you can branch out schema updates? that's really nice

12:53:20
<transcript>: Does it show that I was hoping it would show the.

12:53:20
<transcript>: u

12:53:23
<transcript>: Url. The host.

12:53:23
<transcript>: it does not

12:53:24
afsardo: Yeah

12:53:25
<transcript>: It does not. And that's okay.

12:53:28
<transcript>: That's just fine.

12:53:32
afsardo: That's the biggest feature in planetscale

12:53:38
<transcript>: And I want to do that right now. I don't I don't need the CLI right now because we're kind of done doing things with Plant Scale. We're about to start hitting it from an app Sync API. Now.

12:53:38
<transcript>: when i build

12:53:44
<transcript>: When I build App sync APIs, I generally do it with Infrastructure's code, something like the CDK.

12:53:46
stroopwafel26: Love it

12:53:53
<transcript>: I would love to use like architect for defining my apps and KPIs. I just don't know. I don't know if they support like authoring VTL.

12:53:53
<transcript>: architect

12:53:54
<transcript>: Architect.

12:53:58
<transcript>: App sync VTL Resolver let's just see.

12:54:01
afsardo: no more "staging envs"

12:54:06
<transcript>: Architect, Architect, Architect, architect.

12:54:11
<transcript>: Art.

12:54:11
<transcript>: code

12:54:12
stroopwafel26: One True Database

12:54:13
<transcript>: Codes.

12:54:13
afsardo: You can just match vercel urls to planetscale branches

12:54:18
<transcript>: Let's just go to art codes.

12:54:18
<transcript>: let's just search

12:54:18
caldotjs: never heard about appsync. did you already provide a tldr while I was away eating>

12:54:19
<transcript>: Let's just search.

12:54:25
<transcript>: Love it biggest feature in Planet Scale. Yeah, that makes sense.

12:54:30
afsardo: And imagine testing individual features each in a different "production env branched out"

12:54:32
<transcript>: When I build API is they are perfect. That's right. Laden.

12:54:41
<transcript>: Yeah. We're gonna build a framework around that. Eventually, we'll build something, some kind of stack around that actually, for a long time, I've wanted to build.

12:54:44
<transcript>: A like a SAS starter.

12:54:44
<transcript>: that's

12:54:46
<transcript>: That's open source.

12:54:46
<transcript>: and

12:54:47
<transcript>: And.

12:54:47
<transcript>: serverless

12:55:06
<transcript>: Serverless so many of the starters, like, Bedrock from Max doyber it's like deployment is like, yeah, you'll figure it out, figure out how to deploy it and maintain it and run it. It's a company for years. Like, if you're building a SAS, you want it to be the thing that you maintain over years. Right. So shouldn't deployment be a first class thing inside of your.

12:55:06
<transcript>: sas starter

12:55:12
<transcript>: Sas starter. So I've wanted it for a long time. Sassy Dev. That I call it sassy.

12:55:12
<transcript>: i want to build

12:55:18
<transcript>: I want to build like a starter for building a SAS application with all the builtins stuff that you need. User author.

12:55:18
<transcript>: billing

12:55:33
stroopwafel26: I wonder how one can use these planetscale branches from, for example, an app running on fargate

12:55:37
<transcript>: Billing, subscriptions, all of that stuff built in all the basics, stuff that every SAS has. But do it with like a serverless first mindset. So it's got serverless deployment baked in you're building it with Infrastructure's code, like you can clone the repo and just like, push it into your cloud account or whatever. That's what I want to do someday.

12:55:44
<transcript>: One true database.

12:55:44
<transcript>: never heard

12:55:52
<transcript>: Never heard about appsink. Did you already provide a Clr while I was eating? No, we're going to right now. We're getting ready to.

12:55:55
<transcript>: We're gonna work on.

12:56:00
<transcript>: Appsync as we speak, I don't think I don't think.

12:56:06
<transcript>: Don't think architect support that sync. I'm going to actually we'll do that on string stream eventually.

12:56:13
<transcript>: We are going to contribute some stuff to our Detect it's all open source.

12:56:13
<transcript>: to

12:56:18
<transcript>: To make app sync VTL and eventually TypeScript resolvers easy.

12:56:18
<transcript>: that's what we're

12:56:20
<transcript>: That's what we're gonna do eventually.

12:56:20
<transcript>: but

12:56:22
<transcript>: But that's not today.

12:56:22
<transcript>: custom

12:56:29
<transcript>: Custom CloudFormation so I could write custom CloudFormation or we could do it all in the CDK, where I already know how to do everything.

12:56:29
<transcript>: i think that's what

12:56:31
<transcript>: I think that's what I'm gonna do.

12:56:34
<transcript>: All we really want is a.

12:56:41
<transcript>: Sync API where we can author some VTL.

12:56:43
<transcript>: And then wire it up.

12:56:55
<transcript>: The CDK is great because it's got CDK Watts so we can hotswapetail template when I make changes or immediately deployed actually built that feature in the CDK.

12:57:00
<transcript>: So let's do that. Let's just do a CDK app. So we're gonna do.

12:57:04
<transcript>: Okay. Over here. We're gonna close this thing. Get out of there. Overlays.

12:57:13
<transcript>: We're in our code directory. Let's make a new directory. Actually, let's go into our sandbox. I think. No. What is it called.

12:57:13
<transcript>: playground

12:57:15
<transcript>: Playground? Yeah.

12:57:15
<transcript>: play

12:57:19
<transcript>: Playground? We're gonna make a dirt, we're gonna call it.

12:57:22
<transcript>: The Planet scale.

12:57:24
<transcript>: App sync.

12:57:30
<transcript>: And we're going to.

12:57:36
<transcript>: Mpx.

12:57:36
<transcript>: cdk

12:57:39
<transcript>: Cdk, and it adds language TypeScript. Yeah, just like that.

12:57:43
<transcript>: Yes.

12:57:48
<transcript>: I'm just going to create a new CDK project, and I'm gonna talk with AppSync as we go, here.

12:57:56
<transcript>: Oh, yeah. Sorry to open this.

12:58:13
<transcript>: I feel like Larabar is probably based on where in Europe, right.

12:58:13
<transcript>: can someone

12:58:15
<transcript>: Can someone reach out.

12:58:15
<transcript>: could someone

12:58:19
<transcript>: Could someone connect to Larbar for me? I'd like to just sponsor it. Stream.

12:58:19
<transcript>: or just for

12:58:23
<transcript>: Or just for them to sponsor me all the time I'll wear like a Lar of our Tshirt or something.

12:58:27
<transcript>: Okay.

12:58:31
<transcript>: Cool.

12:58:31
<transcript>: here it is

12:58:32
<transcript>: Here it is.

12:58:36
<transcript>: Your CDK project so CDK.

12:58:38
<transcript>: Sorry.

12:58:42
<transcript>: Pdk Is Infrastructure Code framework.

12:58:44
caldotjs: is it LÄRABAR?

12:58:46
stroopwafel26: Larabar is from General Mills, an American company

12:58:47
<transcript>: It's sort of like a layer on top of CloudFormation. If you're familiar with CloudFormation.

12:58:50
purrplish: adamel4Adambar

12:58:51
<transcript>: If you're not familiar with click formation.

12:58:53
<transcript>: Basically.

12:58:57
<transcript>: Cloudformation is write YAML file.

12:58:57
<transcript>: to deploy

12:58:59
<transcript>: To deploy a Database infrastructure.

12:59:02
<transcript>: Cdk is right TypeScript.

12:59:02
<transcript>: to

12:59:06
<transcript>: To create YAML files to deploy infrastructure.

12:59:09
<transcript>: So it's like a transpiler.

12:59:14
<transcript>: So you get to write some nice TypeScript stuff and deploy.

12:59:17
<transcript>: Infrastructure that way.

12:59:17
<transcript>: so

12:59:20
<transcript>: So why is it not I.

12:59:24
<transcript>: Didn't know show that thanks for the follow.

12:59:24
<transcript>: filipo

12:59:25
<transcript>: Filipo.

12:59:30
caldotjs: @stroopwafel26 yeah I couldn't find a place to order them in Europe

12:59:36
<transcript>: Lar Bar is from General Mills in American Company. Well, that's dumb. Why did they put the like little dots of it over the A? You know, I'm saying it's like that's for a reason.

12:59:41
<transcript>: Couldn't find a place to order them in Europe. Okay, I'll have to reach out to my American contacts.

12:59:41
<transcript>: just

12:59:44
<transcript>: Just like Everyone I know. Everyone I know is American.

12:59:44
<transcript>: well that's not true

12:59:47
stroopwafel26: same, too bad, I need them in my life

12:59:48
<transcript>: Well, that's not true. I know a lot of you if you're not American.

12:59:51
<transcript>: Okay, so we're gonna delete package lock.

12:59:51
<transcript>: patty here

12:59:55
<transcript>: Patty, here with your package lock. Nonsense.

12:59:59
<transcript>: And your MPM ignore I don't need you.

13:00:06
<transcript>: The reason I don't like package lock is I don't like using NPM as a packet manager. I like doing.

13:00:08
<transcript>: Yarn.

13:00:19
<transcript>: Well, I really like PMPM, but I can't use it in CDK projects. That's why I generally don't choose PMPM. I should have done it from overlays because I'm not using the CDK.

13:00:23
<transcript>: But it doesn't work. Bundling up Lambda functions with Es. Build.

13:00:23
<transcript>: it's a long story

13:00:25
<transcript>: It's a long story.

13:00:28
caldotjs: @stroopwafel26 have a look at the KoRo protein bars. they are delicious and if you don't mind about eating soy the are a great option

13:00:35
<transcript>: Yeah, I feel like I need to send you all. Maybe we'll have a channel point. Redemption for, like, I send you a box of Lara bars. Because you live somewhere in Europe, where it's expensive.

13:00:43
<transcript>: Maybe if I get a sponsorship with Larabar.

13:00:47
<transcript>: I'm gonna work with me on some European distribution.

13:00:47
<transcript>: you know what i'm saying

13:00:50
<transcript>: You know what I'm saying? Seems like good idea.

13:00:50
<transcript>: unt

13:00:52
<transcript>: Untapped market for them.

13:00:53
andreull: I just bookmarked larabars, will order later

13:00:57
<transcript>: Okay.

13:01:00
<transcript>: So CDK.

13:01:06
<transcript>: App. This. Is this. What's wrong here? No ESL and configuration found.

13:01:16
<transcript>: Right. Oh, no, it's not there.

13:01:18
<transcript>: Okay.

13:01:21
<transcript>: I just want basically a slight config.

13:01:30
<transcript>: I just want a basic is link if they for CDK TypeScript. Is that so hard.

13:01:31
oleksii_lisovyi: Bon appetite Adam 😋

13:01:36
<transcript>: Yes, Mac? Anybody.

13:01:40
stroopwafel26: @stroopwafel26 soy is great, I'll buy a few to try them out, thanks :)

13:01:42
<transcript>: Here we go.

13:01:46
<transcript>: Zero stars, but I'm not going to judge.

13:01:46
<transcript>: so

13:01:49
<transcript>: So this is a.

13:01:53
<transcript>: Esl figured files away.

13:01:58
<transcript>: How do I use it.

13:02:04
that_bertrand_guy: You could use the eslint config CLI generation.

13:02:07
<transcript>: Hello use this core JS to JS file.

13:02:09
<transcript>: Oh, I guess so.

13:02:09
<transcript>: it's like

13:02:11
<transcript>: It's like esplant.

13:02:13
that_bertrand_guy: For something generic and typescript.

13:02:15
<transcript>: What I do. It's like ESL. I can't believe this doesn't come with an ESLint.

13:02:15
<transcript>: file

13:02:19
<transcript>: File. I thought CDK did by default.

13:02:23
<transcript>: Okay. Well, that's a lot.

13:02:26
<transcript>: What's the most minimal es? Lincoln fig.

13:02:28
<transcript>: Yes. Slant TypeScript.

13:02:32
<transcript>: Here we go.

13:02:37
<transcript>: Mono repo for all the tooling I just want to be.

13:02:44
<transcript>: Config. You know what I gotta do? Node and TypeScript? Yes, lent. Node, TypeScript.

13:02:46
<transcript>: Basic.

13:02:48
<transcript>: Plastic.

13:02:50
<transcript>: Impersonation.

13:02:57
<transcript>: This sounds good.

13:03:00
<transcript>: Typescript.

13:03:04
<transcript>: Kiss the fig. I don't need the I need yes, let here, go.

13:03:10
<transcript>: Try to actually add touchgripp eslant parser.

13:03:15
<transcript>: Just all stuff I have to do here's our yes lent YAML.

13:03:15
<transcript>: okay

13:03:16
<transcript>: Okay.

13:03:18
<transcript>: Works for me.

13:03:24
<transcript>: Plants Collapsing E. S. Lint RC YAML.

13:03:30
<transcript>: Paste it in there. And then we need to install some stuff.

13:03:32
<transcript>: Yarn. Add.

13:03:34
<transcript>: Pipe script.

13:03:36
<transcript>: Yes. Lent.

13:03:36
<transcript>: parser

13:03:37
<transcript>: Parser.

13:03:41
<transcript>: And also.

13:03:44
<transcript>: That's a Dev thing.

13:03:47
<transcript>: Dev.

13:03:51
<transcript>: And also yes. Let plugin type script.

13:03:54
<transcript>: Es blant.

13:03:58
<transcript>: Pslant plug it.

13:04:03
<transcript>: Thanks for the boat, Thomas.

13:04:07
<transcript>: Bon appetite.

13:04:12
<transcript>: Andre is gonna order some Lar bars. You hear that, Larabar? You hear that? Laura.

13:04:12
<transcript>: we're selling

13:04:14
<transcript>: We're selling Larabards here on stream.

13:04:14
<transcript>: telling you

13:04:17
<transcript>: Telling you We're a math made in heaven.

13:04:19
andreull: it works dude

13:04:21
andreull: you got me

13:04:29
<transcript>: Soy is great. I'll buy a few of them and try them out. Okay. You could use the ESL config CLI generation. Oh.

13:04:29
<transcript>: something

13:04:31
<transcript>: Something generic and tiscript, oh, really.

13:04:31
<transcript>: what is that

13:04:33
<transcript>: What is that.

13:04:37
<transcript>: What is that? That bird trend guy. Also welcome to Chat. I appreciate you.

13:04:43
<transcript>: Yes link config CLI generation can I just do like ESLint and it or something.

13:04:50
<transcript>: There we go.

13:04:51
<transcript>: Yes.

13:04:59
<transcript>: I'm using Islam, D.

13:05:03
laytanl_: npx eslint init

13:05:04
<transcript>: dslan

13:05:05
<transcript>: Dslan.

13:05:05
<transcript>: it

13:05:06
<transcript>: It.

13:05:06
<transcript>: 's

13:05:08
<transcript>: 's.

13:05:10
<transcript>: Lit in it. Okay.

13:05:15
<transcript>: Npx.

13:05:15
<transcript>: guess what

13:05:17
<transcript>: Guess what in it.

13:05:20
<transcript>: I need to follow.

13:05:24
<transcript>: Weird heaviest letting D.

13:05:32
<transcript>: We already have ESLint D? So.

13:05:32
<transcript>: what should

13:05:36
laytanl_: but this is just for config

13:05:37
<transcript>: What should I just use this one. It TypeScript is a parser plugins typetrip.

13:05:37
<transcript>: i use my t

13:05:39
<transcript>: I use my TS? Config. This seems fine.

13:05:43
<transcript>: I think this is fine.

13:05:46
<transcript>: I see what you're saying. I should have probably done that.

13:05:50
laytanl_: npx installs outside of your project

13:05:52
<transcript>: Let's see. Save Dev already did that. I should have a slut now.

13:05:52
<transcript>: right

13:05:53
that_bertrand_guy: This is fine.

13:05:53
<transcript>: Right.

13:05:56
<transcript>: Lsp restart.

13:06:02
<transcript>: Oh, yeah? Slink config, but it's there, it's right there.

13:06:08
<transcript>: My kids run around upstairs.

13:06:08
<transcript>: found

13:06:11
<transcript>: Found in users. Sorry. What.

13:06:18
<transcript>: Looks restart.

13:06:28
<transcript>: Let's see if we can open it now. What's going on? So did I save this buffer.

13:06:30
<transcript>: Yeah.

13:06:35
<transcript>: No use one configuration.

13:06:39
<transcript>: Found in users. It's like it's got the wrong current working directory or something.

13:06:44
<transcript>: User been in node.

13:06:51
<transcript>: So like.

13:06:53
caldotjs: eslint_d is just the daemon running for the LSP. also I think npx doesn't add it to node_modules, just executes it

13:06:54
<transcript>: Yes config.

13:06:57
<transcript>: This is fine.

13:07:11
<transcript>: If I do just the Damon running for the LSP. Also, I think MPX doesn't add it to no modules. Just executes it. Oh yeah. So I should actually install. Okay, well, actually installed yarn. Add.

13:07:11
<transcript>: your slip

13:07:12
<transcript>: Your slip.

13:07:20
<transcript>: Man, they're loud. I might have to pull out my other mic. It's that bad. Right above me.

13:07:25
<transcript>: We lost our music.

13:07:28
<transcript>: I guess it played through it all.

13:07:40
<transcript>: Okay.

13:07:40
<transcript>: so

13:07:43
<transcript>: So we're gonna connect a planet scale.

13:07:48
<transcript>: We added a slant. Let's also.

13:07:48
<transcript>: let's go

13:07:52
<transcript>: Let's go into package JSON, and let's do.

13:07:56
<transcript>: This. Well, let's do this.

13:07:58
<transcript>: Pretty.

13:08:02
<transcript>: Semi.

13:08:09
<transcript>: Let's open planet scale.

13:08:18
<transcript>: Okay. Well, doesn't like it.

13:08:23
<transcript>: I just remove.

13:08:23
<transcript>: the

13:08:25
<transcript>: The shebang.

13:08:25
<transcript>: to do

13:08:27
<transcript>: To do still.

13:08:29
<transcript>: Yeah, Yeah.

13:08:37
<transcript>: Bummer, bummer. We don't have the slant working. Why is this hard? Why is this hard.

13:08:49
laytanl_: Does eslint_d support yml config?

13:08:50
<transcript>: We are in Planet Skill AppSync. We're Doing NVM like that.

13:08:54
laytanl_: Just guessing here

13:08:55
<transcript>: We'll config. Oh, maybe not.

13:08:55
<transcript>: now

13:09:03
<transcript>: Now what? I was a little thrown off by the YAML config. What is the standard? Let's just delete this. Let's just start over. Let's just delete.

13:09:03
<transcript>: yes

13:09:06
<transcript>: Yes. Let's do the thing you guys said, which is.

13:09:08
<transcript>: Mpx.

13:09:10
<transcript>: Lint.

13:09:10
<transcript>: in it

13:09:12
nuttyshrimp1: Isn't it .eslintrc.yml?

13:09:12
<transcript>: In it. I think you said.

13:09:17
<transcript>: Oh, no. File matching the pattern in it were found. What did you say? You said.

13:09:22
<transcript>: Oh, did I not put a dot on it? You know, Slant. Annette.

13:09:25
<transcript>: That's what I did.

13:09:29
laytanl_: It is --init

13:09:32
<transcript>: Did I just mess up? Did I just not do.

13:09:32
laytanl_: my bad

13:09:36
<transcript>: Just not do a dot in front of it. Is that all the problem.

13:09:36
<transcript>: with

13:09:37
<transcript>: With.

13:09:37
<transcript>: okay

13:09:38
<transcript>: Okay.

13:09:38
<transcript>: nutty shrimp

13:09:41
<transcript>: Nutty shrimp? Welcome to Chat. Welcome.

13:09:41
<transcript>: let's try

13:09:49
<transcript>: Let's try putting that file back and just see if it was a problem with not putting a dot in front of it. I don't remember if I did or not. Rc YAML.

13:09:51
crohm: Hi! Maybe remove the packages you have added

13:09:53
<transcript>: And then let's paste in this.

13:09:57
<transcript>: And save it.

13:10:01
<transcript>: Do you think this looks pretty simple? If I could just keep this one feels good.

13:10:07
<transcript>: Oh fail to load the load plugin typetrip.

13:10:13
<transcript>: How do I tab into that thing.

13:10:22
<transcript>: I just. I need more room. You know, I need to see the full error.

13:10:24
<transcript>: Scroll.

13:10:29
<transcript>: I can arrow key.

13:10:35
<transcript>: Type script is slightly declared in can I find module ESLint.

13:10:35
<transcript>: what

13:10:37
<transcript>: What.

13:10:43
<transcript>: Or no fail to load plugin TypeScript esplant. Okay.

13:10:46
<transcript>: Get out of here.

13:10:49
<transcript>: Troll C. How do I get out.

13:10:52
<transcript>: They're.

13:10:57
<transcript>: Throwing strong here.

13:11:00
<transcript>: That's cryptius, lent.

13:11:00
<transcript>: we just

13:11:03
<transcript>: We just added it to our.

13:11:03
<transcript>: package

13:11:04
<transcript>: Package JSON right.

13:11:09
<transcript>: That's cryptiuslint. Parser. We added, yes, lent.

13:11:15
<transcript>: Why is this hard CDK ESLint? Why is this hard.

13:11:20
<transcript>: But this is built in to the CDK in it.

13:11:30
<transcript>: Maybe they took it out. They feel like it was two opinionators or something.

13:11:38
<transcript>: I really just need basic TypeScript. Yes line. I don't even need that. I'm just doing a dumb throwaway thing. Why do I even care.

13:11:41
<transcript>: I guess just gonna yell at it full time. That feels bad.

13:11:41
<transcript>: just

13:11:47
<transcript>: Just lint. Eight. Not two, three types go to parser.

13:11:56
<transcript>: Did I try? Lsp restart only like five times.

13:12:01
<transcript>: Thanks for the follow. Amara. Lacae.

13:12:01
<transcript>: chrome

13:12:09
<transcript>: Chrome. Welcome to Chat. Hi. Maybe remove the packages you've added. Yeah. You mean like Clear, no modules or something.

13:12:18
<transcript>: Do reinstall.

13:12:42
<transcript>: They're not even using a Slant in the CDK repo. I didn't remember that.

13:12:45
<transcript>: What is this? Eslint Plugin CDK.

13:12:58
<transcript>: Okay.

13:13:01
<transcript>: So where are we at.

13:13:08
<transcript>: Trying to get eslike to load feels bad have a thing I want to do stuck on ESLint.

13:13:13
<transcript>: Yes TypeScript Island Salesforce plugin declared an esplant aren't okay.

13:13:20
<transcript>: Typescript. Is link. Is that the name of the plugin.

13:13:34
<transcript>: Is it an eight? I need to be on like ESLint seven or something.

13:13:34
<transcript>: typescript esc

13:13:38
<transcript>: Typescript Esclant plugin TypeScript DSL parser.

13:13:43
<transcript>: And it will work. Fine. I don't know.

13:13:48
<transcript>: Saw this air trying to use version four the types of GSM packages.

13:13:51
<transcript>: Fix this updates into Five, Three, one.

13:13:55
<transcript>: Let me get past this dumb stuff real soon.

13:13:56
<transcript>: Real soon.

13:13:56
<transcript>: eight

13:13:58
<transcript>: 823.

13:14:07
<transcript>: Lock you slip to Seven. Up. 32.

13:14:10
laytanl_: I suggest removing everything you have with eslint in the project and use the --init, it will add the config and the packages you need I believe

13:14:13
<transcript>: Oh, five, six. Why are we using these old, invested ones.

13:14:26
<transcript>: Restart Es Lent server. I guess I could do that.

13:14:31
<transcript>: Lsp. Is there a way to restart? Just.

13:14:36
<transcript>: Let's server there's that amazing thing.

13:14:44
<transcript>: Isn't that a before Linter.

13:14:44
<transcript>: yes slant

13:14:46
<transcript>: Yes. Slant B.

13:14:46
<transcript>: oh it's

13:14:49
<transcript>: Oh, it's not added to this file.

13:14:49
<transcript>: list of this

13:14:51
<transcript>: List of this one.

13:14:56
<transcript>: Installed available.

13:14:58
<transcript>: Why is it not.

13:14:58
<transcript>: using

13:15:01
<transcript>: Using Esplant D.

13:15:04
<transcript>: One now.

13:15:11
<transcript>: Fill the load. Plugin typescriptious. Lant.

13:15:20
<transcript>: Put a nightmare rearring everything you have in the slant in the project and use the initial add the config in the packages you need. Okay, that sounds good late. And let's just do it.

13:15:22
<transcript>: Let's just do it.

13:15:25
<transcript>: So imagine.

13:15:37
<transcript>: This command directly using NPM in it gets like config need to install the following create config Yes.

13:15:41
caldotjs: :!eslint_d restart

13:15:48
<transcript>: Javascript common JS.

13:15:52
<transcript>: Yeah.

13:15:55
<transcript>: None of these.

13:16:00
<transcript>: Yes.

13:16:00
<transcript>: where

13:16:03
<transcript>: Where does your code run? Node.

13:16:08
<transcript>: Format oh, that's a browser Oops.

13:16:08
<transcript>: did i not choose

13:16:10
<transcript>: Did I not choose node.

13:16:10
<transcript>: undo

13:16:11
<transcript>: Undo.

13:16:11
<transcript>: go back

13:16:13
<transcript>: Go back.

13:16:17
<transcript>: Over here we go.

13:16:22
<transcript>: Syntax I'm. Problems JavaScript Modules None of these.

13:16:23
laytanl_: LUL

13:16:26
<transcript>: You probably type it. Yes.

13:16:32
<transcript>: Oh, I have to invert them with okay, so node not the browser.

13:16:40
<transcript>: What's format do you want your convict file to be in? You don't have a preference. Json Neaml, JavaScript, anybody? Anybody.

13:16:44
<transcript>: Thank you, Caldot. That's how I'll restart. Yes. Lant. Feels good.

13:16:44
<transcript>: anybody

13:16:48
laytanl_: Question: what are you using for the terminal window?

13:16:50
<transcript>: Anybody have a preference? I don't know. What do you guys usually do? I don't. I just don't care about the second big at all.

13:16:52
<transcript>: We'll do yellow, sure.

13:16:52
<transcript>: if you like to install

13:16:55
<transcript>: If you like to install them now, yes, I would.

13:16:55
<transcript>: i would

13:16:56
laytanl_: look snice

13:16:57
<transcript>: I would like to use yarn.

13:17:00
<transcript>: Thank you and goodbye.

13:17:03
<transcript>: Okay. So now I can just do.

13:17:07
<transcript>: Bslint D restart.

13:17:15
<transcript>: Cool, cool. So do we have any assign config? I'm not see one.

13:17:18
<transcript>: In them tree.

13:17:18
<transcript>: refresh

13:17:20
<transcript>: Refresh.

13:17:26
<transcript>: Keycaster really gets on my face.

13:17:29
<transcript>: Here we go, there's our config.

13:17:29
<transcript>: and

13:17:31
<transcript>: And.

13:17:32
<transcript>: What's the problem.

13:17:32
<transcript>: build

13:17:36
caldotjs: @laytanl_ I think its this one with the float option https://github.com/akinsho/toggleterm.nvim

13:17:37
<transcript>: Build a load plugin? Did you, though? Lsp restart.

13:17:41
<transcript>: Did you find did you fail to find it.

13:17:44
<transcript>: So the load plugin type script vs. Lent.

13:17:44
<transcript>: why do you hate me

13:17:47
<transcript>: Why do you hate me? Why.

13:17:49
<transcript>: Why.

13:17:53
caldotjs: try to restart eslint_d

13:18:01
<transcript>: Slint is running.

13:18:01
<transcript>: not

13:18:07
<transcript>: Not in my project. It's not. It's not. Yeah. I just did restart it, didn't I.

13:18:08
caldotjs: not an LSP issue

13:18:14
<transcript>: Oh yeah. Late and sorry. It's a toggle term. I haven't even really messed with it yet. I need to make it look nice.

13:18:14
<transcript>: not an

13:18:19
<transcript>: Not an LSP issue. Yeah, I think I did try Calvin. I think I did that.

13:18:21
<transcript>: I said.

13:18:25
<transcript>: Yes, Lant? D.

13:18:25
<transcript>: resart

13:18:27
<transcript>: Resart. I think the problem is.

13:18:32
<transcript>: Press enter type command. Continue. I think the problem is.

13:18:44
<transcript>: I can't get out of that. Okay. The problem is I think it's like a past thing. I think it's.

13:18:49
<transcript>: S and D is like in my node version 16.

13:18:59
<transcript>: I use it in VM. I install node through NVM, and I feel like it's looking in that known modules for that thing, and it's not there. I could just add it. I mean, this feels bad, but I'm not.

13:19:02
<transcript>: Nvm list.

13:19:02
<transcript>: oh

13:19:04
<transcript>: Oh.

13:19:04
<transcript>: no

13:19:08
<transcript>: No, it's in fish. Let's just do this.

13:19:15
<transcript>: Vm list so I'm using version 16 five I could do NPM install.

13:19:15
<transcript>: global

13:19:16
<transcript>: Global.

13:19:16
<transcript>: esl

13:19:22
<transcript>: Eslan like this thing, right? What is it? Missing? Typescript? Is link plugin.

13:19:33
<transcript>: Feels bad. What I just did. I just. I just Typed that with my fingers.

13:19:33
<transcript>: i mean with my

13:19:35
<transcript>: I mean with my mouse.

13:19:37
<transcript>: Key caster getting out of control.

13:19:40
<transcript>: Oh my.

13:19:40
<transcript>: okay

13:19:41
<transcript>: Okay.

13:19:43
laytanl_: It is still talking about your yml config though

13:19:48
laytanl_: not the one you generated

13:19:52
<transcript>: Typescript I guess that's just cuz I'm bad if I was better at everything keycaster wouldn't bother me so much type script is left. Let's just install it there. What.

13:19:58
<transcript>: Was that the problem? Are we trying to load a package? It doesn't exist. What's the problem here.

13:19:59
nullchefo: try to remove eslint_d from your global packages

13:19:59
laytanl_: declared in '.eslintrc.yml'

13:20:05
<transcript>: What is the problem here.

13:20:09
<transcript>: My script is lint parser.

13:20:16
<transcript>: Plugins TypeScript. Eslint. Is that actually a plugin? This is the second person who suggested we used this plugin.

13:20:20
<transcript>: Try to remove ESLint.

13:20:23
<transcript>: D from your Global packages.

13:20:31
<transcript>: Are you sure? I think this is the one in general.

13:20:31
<transcript>: it also uses

13:20:35
<transcript>: It also uses that plugin typescripty as slant. I'm gonna close some things here.

13:20:42
<transcript>: Come on, you bye.

13:20:44
<transcript>: Do this for me.

13:20:44
<transcript>: i guess

13:20:46
<transcript>: I guess I could do it.

13:20:47
laytanl_: Read the error, it says 'declared in .eslintrc.yml'

13:20:50
<transcript>: Typescriptia Slint like that looks a lot like.

13:20:51
laytanl_: might be an old error

13:20:55
<transcript>: I guess do I just need to install that.

13:21:00
<transcript>: Ig type. I can't see anything.

13:21:01
<transcript>: Type script.

13:21:03
<transcript>: Yes. Lent.

13:21:06
<transcript>: Parser.

13:21:13
<transcript>: How about that.

13:21:29
<transcript>: This is so dumb. We're building cloud stuff here. I don't care about you slant. I just don't care at all.

13:21:36
<transcript>: Declared in esplantrc Yamla. Yeah, that's what, but that's what we defined. It.

13:21:38
<transcript>: Leighton. We defined.

13:21:38
<transcript>: we defined it

13:21:42
<transcript>: We defined it in an ESLint RC. Yaml see.

13:21:42
<transcript>: that's

13:21:47
<transcript>: That's what I did with MPX in it. I chose YAML. Maybe I shouldn't have maybe I should have chosen JS.

13:21:47
<transcript>: let's try

13:21:51
<transcript>: Let's try JS, and then I'm about to start.

13:21:51
<transcript>: throwing stuff

13:21:53
<transcript>: Throwing stuff.

13:21:54
nuttyshrimp1: what about just reopening nvim?

13:21:58
<transcript>: Mpx eslant. And it.

13:22:01
<transcript>: Eslap config.

13:22:04
laytanl_: Oh thought that was the old one

13:22:04
<transcript>: Javascript.

13:22:06
<transcript>: None of these.

13:22:08
<transcript>: Yes.

13:22:10
<transcript>: Browser.

13:22:10
<transcript>: just node

13:22:13
<transcript>: Just node we're gonna do JavaScript.

13:22:14
laytanl_: I hate javascript tooling man

13:22:15
<transcript>: How would you like to install them out? Yes, I would.

13:22:19
<transcript>: Using yarn. Okay.

13:22:22
<transcript>: Once the how this goes.

13:22:27
<transcript>: So now we have an esplant JS file.

13:22:30
<transcript>: Then tree, refresh.

13:22:36
<transcript>: And there it is. Where is it? You may see it.

13:22:39
<transcript>: In them tree.

13:22:42
<transcript>: Refresh, right.

13:22:46
<transcript>: I looking right past it.

13:22:50
<transcript>: Yes, slant. If I see it, I don't see it.

13:22:54
<transcript>: What.

13:22:54
<transcript>: where

13:22:56
<transcript>: Where are we.

13:22:56
<transcript>: laughing

13:22:59
<transcript>: Laughing yeah actually created.

13:23:04
<transcript>: Eslint RC JS file did it though.

13:23:06
<transcript>: Okay.

13:23:10
<transcript>: Did it though.

13:23:10
<transcript>: it did not

13:23:11
that_bertrand_guy: I'm glad this doesn't just happen to me haha.

13:23:14
<transcript>: It did not though. Oh, unless it's is it get ignored.

13:23:20
<transcript>: You're glad it doesn't just happen to you? I wish it would not happen to me. That'd be great. Is it? Get ignored.

13:23:23
<transcript>: Js is ignored. Yeah. Okay.

13:23:28
<transcript>: Well, let's not do that. How about that.

13:23:28
<transcript>: there

13:23:30
<transcript>: There it is.

13:23:33
<transcript>: All right.

13:23:42
<transcript>: To escape it.

13:23:47
<transcript>: Okay. Tree sitter highlighter. Oh, Jeez, what is going on.

13:23:50
<transcript>: What is going on.

13:23:55
<transcript>: The job is your file. Can we not break highlighter.

13:24:00
<transcript>: Well.

13:24:08
<transcript>: Does that look fine? Looks fine to me. It doesn't look like. Yeah, it looks like JavaScript. Okay. Recommend TypeScript. Gslant. Okay. Cool.

13:24:13
laytanl_: Well this is going great!

13:24:14
<transcript>: Let's look at and see if it fixed, if they start issue. We did it. We did it.

13:24:14
<transcript>: oh man

13:24:16
<transcript>: Oh, man, that was painful.

13:24:24
<transcript>: Okay, well, we're here. We made it. We have a blank CDK app and only took us an hour.

13:24:26
<transcript>: This is going great.

13:24:31
<transcript>: We're good now we're good. We got insulin. We've got prettier.

13:24:31
<transcript>: i can actually

13:24:35
<transcript>: I can actually write some code. Now we're gonna build lapsing API.

13:24:41
<transcript>: And we're gonna recover from this mess.

13:24:44
<transcript>: We're gonna recover quickly.

13:24:49
<transcript>: I don't know why your buy is not doing the annoying thing that it does where it normally lays out on my windows for me.

13:24:49
<transcript>: we're

13:24:51
<transcript>: We're gonna do CDK.

13:24:53
<transcript>: Cdk.

13:25:02
<transcript>: This is the one, but version two, please.

13:25:10
<transcript>: Okay. We got install this thing. So it's an Alpha.

13:25:10
<transcript>: so td

13:25:19
<transcript>: So TDK is mostly all one big package, but they have Alpha ones that aren't stable yet. Like the App Sync One, you have to install this separately.

13:25:19
<transcript>: so

13:25:23
<transcript>: So we're gonna do that yarn, add that thing.

13:25:28
<transcript>: So this is our stack.

13:25:31
<transcript>: So in CDK you have.

13:25:31
<transcript>: your app

13:25:40
<transcript>: Your app and you have your stack. Here's our stack definition. This is where we declare resources. They've got some common ideas out here, like an SQS queue.

13:25:53
<transcript>: So this where we define all of our resources for application, and then the app. This is where we declare any stacks. And this is the thing that gets deployed. So if I do like.

13:26:02
<transcript>: See what they have in package on so I've build watch test and CDK so I can do yarn CDK.

13:26:05
<transcript>: Like.

13:26:05
<transcript>: scent

13:26:09
<transcript>: Scent. Let's just do that. Well, let's declare something first.

13:26:13
<transcript>: So back here in our stack, we're going to import.

13:26:17
<transcript>: Like this import.

13:26:22
<transcript>: All as App Sync from AppSync thing.

13:26:22
<transcript>: how does it have

13:26:23
<transcript>: How does it have that.

13:26:27
<transcript>: There we go.

13:26:27
<transcript>: so like that

13:26:28
<transcript>: So like that.

13:26:31
<transcript>: Then we're gonna say.

13:26:31
<transcript>: let's just delete

13:26:33
<transcript>: Let's just delete all this.

13:26:45
<transcript>: We're gonna say Comps API equals New App Sync API GraphQL API just like that, we're gonna say.

13:26:49
<transcript>: Graph QL API I don't know.

13:26:49
<transcript>: and then

13:26:50
<transcript>: And then.

13:26:52
<transcript>: This build.

13:26:59
<transcript>: If you guys sign a value, we've never used. Cool. Are you gonna type? Okay, so we'd have to specify some things.

13:27:02
<transcript>: Let's see. They probably create one right here.

13:27:02
<transcript>: what's the minimum

13:27:04
<transcript>: What's the minimum we got to create.

13:27:04
<transcript>: api

13:27:08
<transcript>: Api name. We don't have to put a name, but we do have to do a schema.

13:27:08
<transcript>: schema

13:27:09
<transcript>: Schema.

13:27:09
<transcript>: and

13:27:12
<transcript>: And this is just going to load from.

13:27:18
<transcript>: A file on our system from asset. So we're gonna create one.

13:27:18
<transcript>: they're doing

13:27:25
<transcript>: They're doing it like that path to join their name. Why do they do that? I can just do it. Relative path from the root.

13:27:25
<transcript>: so

13:27:29
<transcript>: So Stima GraphQL. Okay.

13:27:33
<transcript>: Authorization. Config. I don't think we need that.

13:27:33
<transcript>: i think

13:27:36
<transcript>: I think, I think.

13:27:39
<transcript>: This should be good. What do we have.

13:27:43
<transcript>: No property name. I do have to name it.

13:27:43
<transcript>: i think

13:27:45
<transcript>: I think I had to name it.

13:27:49
<transcript>: Planet Skill test.

13:27:55
<transcript>: I don't know. It's got an awful name. I don't know. Is that Pasco case? Why did I do that.

13:27:58
<transcript>: We have an API now.

13:28:00
<transcript>: Why did this get big.

13:28:03
<transcript>: Why is it so big now? What did I just do.

13:28:10
<transcript>: No, I don't want you to take over. Why you.

13:28:10
<transcript>: this is where

13:28:13
<transcript>: This is where Amethys would be nice, I guess.

13:28:17
<transcript>: I just want that browser to be over there where it was.

13:28:17
<transcript>: please

13:28:18
<transcript>: Please.

13:28:21
<transcript>: Let's see if I do.

13:28:31
<transcript>: I don't know I don't know why I can't make it small again.

13:28:36
<transcript>: What did I just do.

13:28:36
<transcript>: did i just do something

13:28:38
<transcript>: Did I just do something.

13:28:38
<transcript>: no i'm

13:28:40
raphaelesalvatore: why not just something like rectangle ?

13:28:48
<transcript>: No, I'm trying to move all of these. This is so frustrating. Your bid drives me nuts. I'm not a you buy person. I tried to be a UBI person. I'm not.

13:28:48
<transcript>: it's

13:28:51
<transcript>: It's official. I'm not a by person.

13:28:51
<transcript>: do i just

13:28:53
<transcript>: Do I just kill you by.

13:28:56
<transcript>: Just.

13:28:59
<transcript>: How do I have I stop you by.

13:28:59
<transcript>: stop

13:29:01
<transcript>: Stop you buy service.

13:29:03
<transcript>: Doing it. We're stopping it.

13:29:06
<transcript>: Bruce services.

13:29:06
<transcript>: start

13:29:08
<transcript>: Start okay.

13:29:14
<transcript>: Brew.

13:29:17
<transcript>: Services stop you by.

13:29:17
caldotjs: brew services stop yabai

13:29:19
<transcript>: That.

13:29:22
<transcript>: Yes.

13:29:29
<transcript>: Okay. Now I should be able to actually do things. Yes, I can. It's already laid out correctly. Once I got rid of you by cool.

13:29:35
<transcript>: So here we have an API. It's got a name.

13:29:40
<transcript>: I don't like the name planet scale test. We're gonna do snake case.

13:29:43
<transcript>: Or Kabob case, I guess.

13:29:50
<transcript>: Why not just something like rectangle? Yeah, the only problem with wrecking will Raphael and I talked about this early industry, and I might submit a PR.

13:29:50
<transcript>: rec

13:30:06
raphaelesalvatore: ahh okay. understand.

13:30:10
<transcript>: Rectangle doesn't allow you to do a padding just on one side. I just want a bottom padding. That's why the only reason I was using you buy is to get this bottom padding of 80 pixels so that my overlay on my stream doesn't cover it up. That's the only reason, literally the only reason I'm not using rectangle. I love rectangle. I used it for, like two years. I love just being able to say I'm on this over there. I want this over there. That.

13:30:10
<transcript>: 's great

13:30:19
<transcript>: 's Great, but if I set a padding, it does it all around the window, and then I have all this gap between all of them, and it just feels bad so that's if you want to submit a PR.

13:30:21
<transcript>: I wouldn't complain.

13:30:21
<transcript>: but eventually

13:30:23
<transcript>: But eventually I think I will.

13:30:29
<transcript>: All right. We're going to.

13:30:29
<transcript>: let's see

13:30:30
<transcript>: Let's see.

13:30:34
cowfacedude99: This is why I am one thing per window guy LUL

13:30:36
<transcript>: We're going to create a new file called Schema GraphQL.

13:30:40
<transcript>: Let's get something up there ASAP.

13:30:40
<transcript>: we've

13:30:42
<transcript>: We've spent a lot of time here.

13:30:42
<transcript>: we're gonna

13:30:44
<transcript>: We're gonna have a tight.

13:30:47
<transcript>: What was it? What was our schema.

13:30:49
laytanl_: Would be a cool stream, figuring that PR out

13:30:50
<transcript>: Where's our plant skill stuff. Let's bring it over here.

13:30:53
<transcript>: This one.

13:30:57
<transcript>: Over here.

13:30:58
laytanl_: and everything that comes with contributing

13:31:05
<transcript>: So we have our plan scale schema here. We're going to expose this thing. So we're gonna have type category.

13:31:10
<transcript>: And then we're gonna let's see what's have a name on it.

13:31:15
<transcript>: Says the ID through the thing. I guess I could type product.

13:31:23
<transcript>: Has a name. Oh, I have to actually like, give these types, don't I? It's been a while since I've actually written a graphical schema.

13:31:23
<transcript>: name

13:31:25
<transcript>: Name.

13:31:25
<transcript>: is

13:31:27
<transcript>: Is a.

13:31:29
<transcript>: String I don't remember.

13:31:33
<transcript>: Grabql.

13:31:33
<transcript>: basic type

13:31:34
<transcript>: Basic types.

13:31:45
<transcript>: Here we go. Type query. Yeah. String.

13:31:45
<transcript>: and there's like

13:31:48
<transcript>: And there's like an ID type if it's required.

13:31:48
<transcript>: i'll put bang

13:31:50
<transcript>: I'll put bang on it.

13:31:50
<transcript>: let's look at their

13:31:54
<transcript>: Let's look at their scheme again. Here. So ID not null.

13:31:54
<transcript>: let's i guess we'll go

13:31:58
<transcript>: Let's I guess we'll go ahead and add our ID as well. Id is an ID.

13:32:00
<transcript>: Product.

13:32:00
<transcript>: also

13:32:02
<transcript>: Also has an ID.

13:32:06
<transcript>: It has a name.

13:32:08
<transcript>: Which is a string.

13:32:13
<transcript>: Guessing it has a image URL.

13:32:13
<transcript>: in case

13:32:15
<transcript>: In case image URL.

13:32:17
<transcript>: Which is a.

13:32:17
<transcript>: string as

13:32:19
<transcript>: String as well.

13:32:19
<transcript>: optional

13:32:22
<transcript>: Optional optional string.

13:32:22
<transcript>: and then

13:32:28
<transcript>: And then it has a category ID. We're not going to expose the category ID. We're going to expose a category.

13:32:31
<transcript>: Had a category, which is a category.

13:32:36
cowfacedude99: maybe setup graphql lsp now? @adamelmore

13:32:43
<transcript>: And that's it. Right. Okay. So this is how you would define like a graphical schema. Well, it's not. It got to define like a type query. We'll do mutations later.

13:32:43
<transcript>: if we have

13:32:50
<transcript>: If we have time today. So this is a query and we're gonna just say it's gonna be products.

13:32:53
<transcript>: Which is a.

13:32:53
<transcript>: product

13:32:56
<transcript>: Product Ray like that right.

13:33:00
<transcript>: Think like.

13:33:00
<transcript>: that

13:33:02
<transcript>: That. Well, no.

13:33:08
<transcript>: Each product has to be a real product. We'll say that.

13:33:08
<transcript>: has to be

13:33:11
<transcript>: Has to be has exist. Okay so products is our query.

13:33:20
<transcript>: Cool, right? Cool. Anything wrong with this? And you GraphQL folks on the stream want to correct me where I broke everything.

13:33:38
<transcript>: One thing per window guy. Yeah, that's a good call, cafe. And then just switch between workspaces. That makes sense. Sometimes I feel like I want two things in front of me, though, you know, like I want to reference something and write something. Do you feel like that Cafe ever.

13:33:48
joshfinnie: did this not work for you? https://github.com/rxhanson/Rectangle/blob/master/TerminalCommands.md#setting-gaps-at-the-screen-edges

13:33:57
cowfacedude99: that's why I need a two monitors

13:33:59
<transcript>: That would be a cool stream. We're gonna do a rectangle PR some time on stream. Maybe Monday. I don't know. I feel like doing random, kind of oddball stuff for a while until I get back into the swing of public, and then we start rolling. Once I start working on public again, I'll work on it for, like, three months. I'll get super into it. And that's all I'll do. And that's all you'll you'll get tired of it. You'll be glad we spent this little bit of time.

13:34:06
<transcript>: Messing around with esplant config you won't be glad we did that, but you'll be glad we messed with some app sync, and whatever we do.

13:34:11
<transcript>: Sitting gaps at the screen edges.

13:34:14
<transcript>: Oh, Josh, Finney, Oh.

13:34:14
<transcript>: yeah we need

13:34:28
<transcript>: Yeah, we need the graphical LSP. Good call. Let's do that. But first, somebody has potentially a lifechanging. What is this? Sitting gaps and screen edges you can set. I guess that the edges of your screen that we left uncovered by window. We sign our versions. Yes.

13:34:28
<transcript>: yes

13:34:29
<transcript>: Yes.

13:34:29
<transcript>: this

13:34:33
<transcript>: This is exactly what I want. I didn't know this was a thing.

13:34:47
<transcript>: Thank you so much, Josh Finney, we don't have to submit a PR, and we'll find something else done to do this. This is what I needed. So we're gonna use rectangle again. I'm not gonna do it right now because we've done enough configuring my Mac on this here. Very stream.

13:34:47
<transcript>: but let's add

13:34:48
joshfinnie: oh hey :-D

13:34:50
<transcript>: But let's add the GraphQL LSP and my number. You.

13:34:50
<transcript>: looks like

13:34:52
<transcript>: Looks like it already has graph and I guess not.

13:34:57
<transcript>: Let's do it. Mason. Install. Can I just do it like this.

13:34:59
<transcript>: Fql.

13:35:04
<transcript>: Not about a packet. Okay, well, let's go back to Mason.

13:35:04
<transcript>: available

13:35:09
<transcript>: Available. Graph. Ql Language Server CLI is that it.

13:35:09
<transcript>: graph

13:35:12
<transcript>: Graphical Language Service CLI.

13:35:12
<transcript>: it's a mouthful

13:35:14
<transcript>: It's a mouthful.

13:35:18
<transcript>: Graph.

13:35:18
<transcript>: so if

13:35:20
<transcript>: So if I want to do like.

13:35:24
<transcript>: Yanket. And then I want to do Mason.

13:35:24
<transcript>: install

13:35:25
<transcript>: Install.

13:35:25
<transcript>: paste it

13:35:27
<transcript>: Paste it.

13:35:27
<transcript>: pasted something

13:35:28
<transcript>: Pasted something else.

13:35:28
<transcript>: is that little

13:35:30
<transcript>: Is that little dot.

13:35:36
<transcript>: Installing.

13:35:39
<transcript>: You do, Mason? I guess.

13:35:57
<transcript>: That's why you need to monitor cafes. Yeah, I use a second monitor. It's just for Twitch chat, just so I can look at Ufine folks on Twitch talking with me. Okay, we installed it. We did it. So now what do we get? What do we get? If I say.

13:35:57
<transcript>: that

13:36:01
<transcript>: That. No, it's just kidding. Now, can I go to definition.

13:36:04
matzehs: bro have u tried neovide

13:36:09
<transcript>: Must be Saga. Loading. Loading. No. What do I get with? Find out, I guess.

13:36:09
<transcript>: not

13:36:10
caldotjs: wait what happened to the teleprompter

13:36:13
<transcript>: Not what I get. I don't know. Macro. There.

13:36:23
<transcript>: But what happened to the teleprompter? Yeah, that's what I mean. It is a teleprompter, but it is a second monitor to my Mac. It just gets flipped.

13:36:23
<transcript>: have you

13:36:25
cowfacedude99: And add graphql lsp

13:36:28
daneoshiga: I use Raycast Window Management, it's useful when you just want to move then around time to time..

13:36:28
<transcript>: Have you tried Neo Vibe? I haven't. Welcome to my chat, though.

13:36:30
<transcript>: Welcome.

13:36:33
<transcript>: Matzes. What is that thing? Next year.

13:36:33
<transcript>: subscribe

13:36:38
<transcript>: Subscriber Founder Seven. Tv. What is that.

13:36:38
<transcript>: seven tv

13:36:41
<transcript>: Seven TVs to the Lake Emote Thing. You're the founder of Seven TV.

13:36:43
<transcript>: Is that what this is saying.

13:36:45
<transcript>: Or something else.

13:36:49
<transcript>: Does that mean something else.

13:36:52
<transcript>: I'm just not seeing that little.

13:36:57
<transcript>: Bit thing next to someone's name a thing that you have.

13:36:59
<transcript>: What is it.

13:37:03
cowfacedude99: inside your lspconfig

13:37:07
<transcript>: What is new vibe and.

13:37:07
<transcript>: an ad

13:37:09
<transcript>: An ad GraphQL. Lsp is not what that was.

13:37:15
<transcript>: Inside my LSP? Config. Oh.

13:37:15
<transcript>: yeah yeah

13:37:16
<transcript>: Yeah, Yeah.

13:37:19
<transcript>: Do we still have it up over here somewhere.

13:37:22
<transcript>: Okay, let's just do it.

13:37:31
<transcript>: Oh, yeah, we don't have a window manager. Excuse me? We have a window manager anymore. So this just kind of like laying in the middle of our screen in vim.

13:37:31
caldotjs: neovide is a rust GUI that adds fancy cursor transitions

13:37:32
matzehs: early subscriber to 7tv

13:37:37
<transcript>: Don't remember any of my rectangles stuff. Oh, I kind of do.

13:37:37
<transcript>: rectangle

13:37:39
<transcript>: Rectangle. Still configured.

13:37:39
<transcript>: it's just

13:37:41
<transcript>: It's just. I don't use it.

13:37:41
<transcript>: but

13:37:42
<transcript>: But I can.

13:37:46
<transcript>: So let's see.

13:37:46
<transcript>: we want to go into

13:37:47
<transcript>: We want to go into.

13:37:47
<transcript>: plug

13:37:52
<transcript>: Plugin LSP config and I've got a I've got to do something here.

13:37:55
<transcript>: Got to do something.

13:38:01
<transcript>: Typescript TS server setup so I need to do.

13:38:01
<transcript>: flow

13:38:07
<transcript>: Flow setup. Source kit, sir. Okay, tailwind CS setup. It's probably gonna look like this right Inv.

13:38:13
<transcript>: inventory

13:38:14
<transcript>: Inventory.

13:38:17
<transcript>: Let's see.

13:38:17
<transcript>: in this

13:38:18
<transcript>: In this.

13:38:18
<transcript>: graph

13:38:20
<transcript>: Graphql.

13:38:23
<transcript>: Lsp? Dire Sales P.

13:38:23
<transcript>: i did

13:38:25
<transcript>: I did. I already said that.

13:38:30
<transcript>: 's Got a Language server.

13:38:36
<transcript>: So.

13:38:40
<transcript>: Lsp config GraphQL setup.

13:38:43
<transcript>: So that is I had it right.

13:38:46
<transcript>: Graphgill setup.

13:38:51
<transcript>: First, it.

13:38:51
<transcript>: and

13:38:53
<transcript>: And then.

13:38:53
<transcript>: let's

13:38:56
<transcript>: Let's go back over here.

13:38:59
<transcript>: Is it? Let's quit.

13:38:59
<transcript>: oh yes

13:39:01
<transcript>: Oh, yes? Safe, please.

13:39:03
<transcript>: What.

13:39:06
<transcript>: Yes, safe. Please invite.

13:39:11
<transcript>: Let's open up our steama. Thanks for the following.

13:39:11
<transcript>: vandere

13:39:12
<transcript>: Vanderer.

13:39:12
<transcript>: really

13:39:13
cowfacedude99: And pass your handler I think

13:39:21
<transcript>: Really subscriber to Seven TV. Okay, cool masses. Welcome to my chat. Muvide is a rust gooey that adds fancy cursor transitions. Ooh.

13:39:23
<transcript>: Interesting.

13:39:28
<transcript>: Ray cast? Hey, I use Ray cast. You know what? I use Ray CAS. Four. This.

13:39:28
<transcript>: is what i use

13:39:30
<transcript>: Is what I use Drake asked for.

13:39:30
<transcript>: confetti

13:39:34
<transcript>: Confetti that's it. But I guess I didn't know I had window management stuff.

13:39:34
<transcript>: pass your hand

13:39:37
<transcript>: Pass your handler. Oh, what's my handler? Cafe.

13:39:37
<transcript>: i have

13:39:39
<transcript>: I have to pass a handler to GraphQL setup.

13:39:45
<transcript>: Default values? Graphical LLC server.

13:39:51
<transcript>: Muscle must also have the graphical package installed.

13:39:51
<transcript>: and create

13:39:54
<transcript>: And create a graph field config file.

13:39:57
<transcript>: What is this.

13:40:01
<transcript>: Graph kill config.

13:40:07
<transcript>: Never created a graph kill config file that I recall.

13:40:14
<transcript>: Okay. But we need to do that in order for this to work, I guess.

13:40:22
<transcript>: Yeah. Okay. Well, we need to install the graphic package first. Package.

13:40:30
<transcript>: Not not installed yet. No. Okay. Yeah. I need that anyway. For some things we'll do.

13:40:33
<transcript>: Out of here. Get out here.

13:40:33
<transcript>: recording that

13:40:36
<transcript>: Recording that growth. I'm always doing weird things whenever I panic.

13:40:39
<transcript>: Just did it again.

13:40:39
<transcript>: get up

13:40:43
<transcript>: Get up. I want this. I want to do yarn.

13:40:43
<transcript>: and graphic

13:40:45
<transcript>: And graphic? Well.

13:40:50
<transcript>: Then we're gonna I guess we're gonna create a graph to all thing.

13:40:50
<transcript>: the schema

13:40:53
<transcript>: The schema will just be a file.

13:41:07
<transcript>: I'm guessing I can put a relative path in there.

13:41:07
<transcript>: i'm guessing

13:41:08
<transcript>: I'm guessing.

13:41:12
<transcript>: Over here and create a new file. What do we want to do.

13:41:14
<transcript>: Yes. Maybe.

13:41:19
<transcript>: Graphql config TS. You can do TypeScript.

13:41:19
<transcript>: that's cool

13:41:20
<transcript>: That's cool.

13:41:20
<transcript>: i guess

13:41:25
<transcript>: I guess I need to add graphical config. Let's do it though. Graphql.

13:41:27
<transcript>: Config.

13:41:27
<transcript>: ts

13:41:33
<transcript>: Ts this is new to me. I've never created a graphkill config file before.

13:41:43
<transcript>: I'm going to need to install graph kill config yarn add.

13:41:43
<transcript>: grass dwelling

13:41:52
<transcript>: Grass dwelling config. It's probably a Dev dependent, but I don't care again. This project I'm literally gonna throw it away. I guess I can push it to GitHub if you guys want to see it. When we're done, we'll see.

13:41:55
<transcript>: See if anyone cares.

13:41:55
<transcript>: so that's

13:41:57
<transcript>: So that's.

13:42:00
<transcript>: Still complaining type of yeah. Okay.

13:42:00
<transcript>: yarn

13:42:01
<transcript>: Yarn.

13:42:01
<transcript>: add dev

13:42:03
<transcript>: Add Dev, pipes.

13:42:03
<transcript>: graphql

13:42:04
<transcript>: Graphql.

13:42:06
<transcript>: Take.

13:42:11
<transcript>: No not found no types.

13:42:11
<transcript>: that's weird because

13:42:16
<transcript>: That's weird. Because this is it literally is a type thing. Right.

13:42:16
<transcript>: lsp

13:42:20
<transcript>: Lsp restart. Like. Oh, there it is. It's working. Okay.

13:42:20
<transcript>: thanks for

13:42:23
<transcript>: Thanks for the follow Darth.

13:42:26
<transcript>: Schema is going to be.

13:42:32
<transcript>: Graphql. Just like that.

13:42:35
<transcript>: Okay. We did it, we did it.

13:42:35
<transcript>: now if i open

13:42:40
<transcript>: Now if I open up my FEMA, how we looking? We have an LSP. Now.

13:42:45
<transcript>: See Saga's gonna say Hello.

13:42:45
<transcript>: freak

13:42:46
<transcript>: Freaking out.

13:42:46
<transcript>: so

13:42:49
<transcript>: So I don't know what I have yet.

13:42:56
<transcript>: So I don't know what I have in the form of an LSP. Let's see. We did this. We installed.

13:42:56
<transcript>: we install

13:42:57
<transcript>: We installed that thing.

13:42:57
jeeza1: Is there a way to get your neovim config? :D

13:43:06
<transcript>: I must also have the graphical package installed and create a GraphQL config file. We did that snippet to enable the language server GraphQL setup did that too.

13:43:06
<transcript>: server

13:43:07
<transcript>: Server.

13:43:12
<transcript>: File types. So default values for the config command.

13:43:22
<transcript>: Hey, thanks for the subscription. Jesus, I really appreciate your subscription. That's awesome. Thank you so much.

13:43:24
<transcript>: Root der.

13:43:32
<transcript>: Okay if you're just joining us.

13:43:32
<transcript>: we're

13:43:34
<transcript>: We're just gonna build a simple.

13:43:34
<transcript>: we're trying to play

13:43:42
<transcript>: We're trying to play with Planet Scales new http API. So they have an http API and they release like a JavaScript.

13:43:42
<transcript>: run

13:43:46
<transcript>: Runtime it's like a JavaScript binding for serverless environments.

13:43:46
<transcript>: but

13:44:02
<transcript>: But more importantly to me, there's an http API. It's like a load balance. I think geographically I want to say maybe not. Maybe this is a multiregion, but it's just an http API that I can hit from anything. And what I'm going to hit is I'm going to hit it from an app sync, VTL Resolver.

13:44:02
<transcript>: if all of

13:44:10
caldotjs: :LspInfo an :NullLsInfo to check whats running

13:44:11
<transcript>: If all of that is just gibberish, just hang tight. It's a GraphQL managed service called AppSync, and basically it's a way for us to write, like.

13:44:11
<transcript>: connections

13:44:31
<transcript>: Connections to other services without any runtime code. So there's no cold starts so we don't even have Lambda function spinning up to do our graphical resolutions, which means it's super duper fast. More importantly, there's no maintenance overhead whatsoever. You write these little TypeScript files. Well right now that we VTL files and those will handle our.

13:44:31
<transcript>: http

13:44:36
<transcript>: Http calls to our Planet Scale database. So that's what we're just playing with right now.

13:44:36
<transcript>: but

13:44:40
<transcript>: But more importantly, the thing I'm working on right this second is.

13:44:40
<transcript>: this is my first time

13:44:46
<transcript>: This is my first time with neovem writing GraphQL stuff. So we're trying to get a graphical language server going.

13:44:51
<transcript>: And for some reason I don't maybe I don't know what I should expect.

13:44:55
<transcript>: Root, dirt.

13:44:59
<transcript>: I don't know what I should expect from the language server.

13:45:02
<transcript>: So maybe that's the problem.

13:45:02
<transcript>: lsp

13:45:04
<transcript>: Lsp info I'll get a good call.

13:45:09
adamelmore: !github

13:45:09
fossabot: Adam's neovim config lives here: https://github.com/adamelmore/nvim

13:45:10
<transcript>: My new event, config Jesa is, yeah, it's at is it.

13:45:10
<transcript>: this one

13:45:13
<transcript>: This one. Yeah. There it is. Right there.

13:45:16
<transcript>: So if I do LSP info.

13:45:17
<transcript>: Let's see.

13:45:18
jeeza1: Cheers

13:45:21
<transcript>: Gith server NOLs GraphQL. It's running.

13:45:21
<transcript>: cmt

13:45:23
<transcript>: Cmt.

13:45:26
<transcript>: Root directory. That's all right. Yeah.

13:45:26
<transcript>: okay so

13:45:28
<transcript>: Okay. So I don't know what it should be doing.

13:45:36
<transcript>: But it's enabled so we'll see if it helps me if we do any more authoring in this file whatsoever.

13:45:36
<transcript>: it's

13:45:39
<transcript>: It's very possible that we're done we have this guy.

13:45:39
<transcript>: we have

13:45:42
<transcript>: We have a single query for products.

13:45:42
<transcript>: so we could add another

13:45:46
<transcript>: So we could add another just to see if we get anything categories.

13:45:48
<transcript>: Category.

13:45:51
<transcript>: At a glory.

13:45:53
<transcript>: I.

13:45:58
<transcript>: Let's go back to our.

13:45:58
<transcript>: stack

13:45:59
<transcript>: Stack.

13:46:03
<transcript>: This is a CDK app for those that are new.

13:46:03
impostorengineer: dumb question. can you build a wordpress backend on planetscale?

13:46:15
<transcript>: Just haven't been here, though. The whole stream. We're writing it in the CDK. Dumb question. Can you build a WordPress backend on Planet Scale? I have no idea. Impostor. I don't know. It's a great question.

13:46:25
<transcript>: Okay. So we have our API, and we now are going to let's see.

13:46:29
<transcript>: We got past all the graphical language server stuff.

13:46:35
<transcript>: Let's see. We're gonna make a we don't need a table. We're hitting.

13:46:35
<transcript>: a plan

13:46:38
<transcript>: A planet scale table so we don't need to worry about that.

13:46:53
<transcript>: Demo data source. So we do need a data source and a data source is basically like your VDP resolvers are all tied to a data source. It could be another a Tobia service like DynamoDB or in our case it's going to be an http data source.

13:46:56
<transcript>: Let's see http. Endpoints.

13:47:03
<transcript>: Here. So just like making a post http request here, you can define some headers.

13:47:03
<transcript>: a body

13:47:06
<transcript>: A body, right.

13:47:13
<transcript>: So what we want is an Http data source. So we're gonna say if you.

13:47:13
<transcript>: and

13:47:16
<transcript>: And Http. Data source.

13:47:20
<transcript>: We can name it http data source.

13:47:23
<transcript>: And it's got.

13:47:23
<transcript>: an

13:47:27
<transcript>: An end point. So this is going to be our host. Okay.

13:47:37
<transcript>: Do that for now. It's going to be our our host. Then we need what is this name.

13:47:37
<transcript>: auth

13:47:39
<transcript>: Authorization. Config.

13:47:48
<transcript>: Why is I not familiar whatsoever.

13:47:58
caldotjs: @laytanl_ have you tried rome? just saw you also follow them

13:48:01
<transcript>: Name. Why would have to name it? I don't. That's optional description. Also optional authorization config is optional. What is it default to.

13:48:04
<transcript>: Oops.

13:48:07
<transcript>: oopsag

13:48:07
<transcript>: oopsaga is struggling

13:48:08
<transcript>: Oopsaga is struggling.

13:48:16
<transcript>: Http data source. Adobe's Im config.

13:48:18
<transcript>: Sign in region.

13:48:18
<transcript>: signing

13:48:22
<transcript>: Signing service. So if it's I am authorization. Okay.

13:48:26
<transcript>: This API let's see the data source.

13:48:31
<transcript>: It won't have.

13:48:31
<transcript>: any i

13:48:35
<transcript>: Any I am involved we're just calling Planet scale.

13:48:35
<transcript>: right

13:48:36
<transcript>: Right.

13:48:41
<transcript>: Yeah? So when I'm gonna have that.

13:48:41
<transcript>: so that's it

13:48:45
<transcript>: So that's it. And then we need to create a Resolver.

13:48:48
<transcript>: So I need to say.

13:48:48
<transcript>: const

13:48:49
<transcript>: Const.

13:48:52
<transcript>: Planet scale.

13:48:52
<transcript>: data

13:48:53
<transcript>: Data source.

13:48:59
<transcript>: Is that thing. And then we're going to say planet scale data source.

13:49:02
<transcript>: Add Resolver no. I'll create results.

13:49:04
<transcript>: Create, Resolver.

13:49:25
<transcript>: So functions. There's functions. So there's pipeline resolvers, and then there's regular resolvers resolvers like regular ones, or just a single thing you want to execute when the request comes in. Pipeline resolvers are a series of function calls. So you create functions and app sync parlance, and then you string them together in a pipeline resolve Resolver. We're just doing.

13:49:25
<transcript>: a simple res

13:49:27
<transcript>: A simple Resolver, I think.

13:49:37
<transcript>: I guess we will. When we make this real, we'll have to do a pipeline Resolver because we'll need to fetch the database, the sensitive database stuff from like Secrets manager.

13:49:37
<transcript>: but for now we're just gonna

13:49:45
<transcript>: But for now, we're just gonna hard code it in there, and then we'll get to the better. I just want to see if I can actually do this. Can I fetch data from my GraphQL API.

13:49:54
<transcript>: With a backing plan, score, database, plant scale, database, and no runtime compute. That's what we're trying to accomplish. I think we can.

13:49:58
<transcript>: So the type name is going to be.

13:49:58
<transcript>: query

13:49:59
<transcript>: Query.

13:50:03
<transcript>: And the field name is going to be.

13:50:11
<transcript>: It's going to be product. So we're gonna fetch our products.

13:50:13
<transcript>: And then we're gonna have a template.

13:50:18
<transcript>: In here. So our template.

13:50:18
<transcript>: is going

13:50:32
<transcript>: Is going to be our request mapping template we're going to do from file at sync Mac mapping template. Actually, we can do it from string. We just define it in line now. That's probably easier. We won't mess with files right now.

13:50:32
<transcript>: so we

13:50:34
<transcript>: So we want to define this thing.

13:50:34
<transcript>: in line

13:50:37
<transcript>: In line like so.

13:50:37
<transcript>: so

13:50:39
<transcript>: So we'll say.

13:50:41
<transcript>: Come on.

13:50:47
<transcript>: Vtl goes here. Okay.

13:50:56
<transcript>: And then same with the response mapping template, but I just have to pay so bad I'm dancing. Can you see me dancing? I'll be right back.

13:52:29
schrew: Update on my progress, got terraform (sorry, lol) configuration set up to create the bucket and grant access to ECS. Now wrestling gradle to get aws sdk working.

13:55:24
stiefbroerikzitvast: this nervous piano song, i feel like a killer is right behind me

13:56:48
raphaelesalvatore: @adamelmore why not always show the dock in that specific height. so rectangle always keep the windows from that gap away, if dock is shown. and in obs you are hidding the dock with your overlay. that should be an easier solution instead of changing the macos defaults or playing around with rectangle itself.

13:56:59
<transcript>: Let's see here.

13:57:03
<transcript>: Have you tried Rome. So you also follow him.

13:57:08
<transcript>: You're talking to somebody else update on my progress. Got TerraForm. Sorry.

13:57:08
<transcript>: configuration

13:57:14
<transcript>: Configuration setup, create the bucket and grant access to ECS. Now wrestling Gradle get AWS SDK working very cool.

13:57:14
<transcript>: other eight

13:57:18
<transcript>: Other eight of us people working on ABS things.

13:57:19
stiefbroerikzitvast: is that the most overengineered complex Twitch chat monitor?

13:57:23
<transcript>: Step, row, the nervous pianos on I feel like the killer's right behind me. That's awesome.

13:57:30
<transcript>: So, Rafael, why not always show the dock in that specific height.

13:57:30
<transcript>: select

13:57:33
<transcript>: Selecting will always keep the windows.

13:57:33
<transcript>: from that

13:57:40
<transcript>: From that gap away. If dock is shown in an OBS, you're hiding the dock with your overlay. Oh, that's an interesting idea.

13:57:40
<transcript>: should be these are sol

13:57:49
<transcript>: Should be. These are solutions that have changed. The Mac OS defaults are playing around with rectangular stuff. That's a good call if I could just have the visit. Does it work that way? Does rectangle avoid the Doc, I guess.

13:57:52
<transcript>: Thanks for the follow. Just say cool.

13:57:55
laytanl_: @caldotjs No not yet, I was excited because they promised to make JS tooling simpler and I hate the current state of it

13:57:56
<transcript>: In for CL three to.

13:57:59
<transcript>: Is that the most.

13:57:59
<transcript>: overen

13:58:02
<transcript>: Overengineered complex Twitch Chat monitor. Yes.

13:58:02
<transcript>: it's a teleprompter

13:58:03
raphaelesalvatore: yes rectangle keeps the apps away from the dock

13:58:05
<transcript>: It's a teleprompter so I can look at you in the eyes.

13:58:09
laytanl_: @caldotjs But that was long ago, they don't seem to be fast

13:58:13
<transcript>: Keeps away. Okay. Keeps the ass away from the dock. Very cool. No, that's a great idea.

13:58:22
<transcript>: Okay, so VTL goes here. That's where we left off, and then we're gonna have response mapping templates.

13:58:22
<transcript>: app sync

13:58:26
<transcript>: App sync and I will go into what this all means here shortly.

13:58:32
<transcript>: At.

13:58:40
<transcript>: More VTL here. Okay, so what is this nonsense? This nonsense.

13:58:42
<transcript>: Is.

13:58:53
<transcript>: We're basically saying we want to create a graphical API. That's what this thing is. So Phone is select all this I would do like Select P. No.

13:58:53
<transcript>: that idea

13:58:54
<transcript>: That idea.

13:58:54
<transcript>: vp doesn't

13:58:59
<transcript>: Vp doesn't do that. No, I'm gonna just, like, highlight all this, you know, like.

13:58:59
<transcript>: i wanted to do that

13:59:04
<transcript>: I wanted to do that. I could do a VI.

13:59:04
<transcript>: b

13:59:14
<transcript>: B. No. Terrible idea. Why is nothing working? Vip. There we go. So this right here. Okay. So if I get inside of a function, I can select it all.

13:59:14
<transcript>: inside

13:59:24
<transcript>: Inside of anything I can do VIP to get like a paragraph select. Okay, this is a graphical API defined with AppSync, a managed service on AWS, that's what this is.

13:59:28
<transcript>: And we're saying.

13:59:28
<transcript>: we're saying

13:59:30
<transcript>: We're saying that the schema.

13:59:30
<transcript>: lives

13:59:33
<transcript>: Lives in a file on our.

13:59:33
<transcript>: file system

13:59:37
<transcript>: File system called Schema GraphQL. Okay.

13:59:37
<transcript>: there it is right there

13:59:38
<transcript>: There it is, right there.

13:59:38
<transcript>: here

13:59:42
<transcript>: Here's our schema. Right. Okay, track them so far.

13:59:42
<transcript>: so

13:59:52
<transcript>: So create me an API graphical API with this schema. And then we're creating a data source, which is just anything.

13:59:52
<transcript>: anything

13:59:53
<transcript>: Anything you need to do.

13:59:53
<transcript>: so

14:00:13
<transcript>: So when someone makes a query or mutation or a subscription against your GraphQL service, your graphical API anytime you need to fetch data in any form, you have to do it through a data source. So you configure data sources. Think of it like you'd have one data source for every thing you go out and get data from. So if you go out and get data from an http API or from a database.

14:00:13
<transcript>: maybe

14:00:15
<transcript>: Maybe you get it from.

14:00:32
<transcript>: An sqsq. I don't know. That's the dumb example. If you get data from somewhere, you need a data source for everything you get data from. So in our case, we're going to have a planet scale data source. That is a onetoone mapping with our planetcale database. Okay, so all the tables within it one data source.

14:00:32
<transcript>: it's one

14:00:34
<transcript>: It's one thing we need to hit, and it's a type.

14:00:38
<transcript>: Add.

14:00:38
<transcript>: no

14:00:39
<transcript>: No.

14:00:41
<transcript>: It's this.

14:00:41
<transcript>: http

14:00:43
<transcript>: Http data source okay.

14:00:51
<transcript>: So an http data source in App sync allows us to hit any arbitrary http endpoint.

14:00:51
<transcript>: and we're

14:01:01
<transcript>: And we're going to define a VTL template that sort of describes how we want that http request to look. So we can literally, like, create the body for that request.

14:01:01
<transcript>: and

14:01:22
<transcript>: And any headers that we need in that request. We can do all that in VTL, so we don't have to have any kind of thing running out there in the cloud. We don't have like a Lambda function or a container or an instant nothing. We have to think about what's. Soever we just say here's the template that describes how I want to make that http request and it will make that request and return the data. And that's why we're doing.

14:01:22
<transcript>: this with plan

14:01:33
<transcript>: This with plant scale. They've released this new http API. So I've been recapping a lot, just kind of like trying to get everybody on the same page. I feel like we're doing some weird kind of exotic things that, like a handful of people in the world probably care about, like, what is VTL.

14:01:33
<transcript>: that's what

14:01:35
<transcript>: That's what we're doing.

14:01:43
<transcript>: Okay.

14:01:50
<transcript>: So we need to add our host here.

14:01:55
<transcript>: This is like the endpoint we need to hit.

14:01:55
<transcript>: there's never gonna be

14:01:56
<transcript>: There's never gonna be.

14:01:56
<transcript>: any

14:01:58
<transcript>: Any.

14:01:58
<transcript>: of

14:01:59
<transcript>: Of this.

14:02:09
<transcript>: So we don't need any options for it. It's just gonna be the endpoint. So an http data source, you have to define the endpoint. What is the thing we're hitting.

14:02:09
<transcript>: and then

14:02:13
<transcript>: and then the rest of it the headers the body all that stuff

14:02:16
<transcript>: We can define well. Let's see if there's an example in here.

14:02:21
<transcript>: Yeah. Http endpoints so here is a request VTL template.

14:02:23
<transcript>: For.

14:02:27
<transcript>: Here's, the body, here's, the headers.

14:02:27
<transcript>: the

14:02:39
<transcript>: The path. So we have an endpoint. We have a host that we're hitting. But what is the path to the resource that we want for this particular Resolver? So if you're not familiar with GraphQL, you have your schema looked at.

14:02:39
<transcript>: where is it

14:02:42
<transcript>: Where is it? There we go. Schema.

14:02:42
<transcript>: and you

14:02:45
<transcript>: And you make queries against.

14:02:45
<transcript>: so here we

14:02:47
<transcript>: So here we have this query type.

14:02:47
<transcript>: we

14:02:50
<transcript>: We've defined categories and products as queries.

14:02:55
<transcript>: We're gonna we're gonna have a Resolver for each field in this type.

14:02:55
<transcript>: so

14:03:13
<transcript>: So you can create a Resolver for query categories, for instance, and then we can also do it within other types. So we're gonna have to create a Resolver for this product category because the data in the table will just store the category ID. How do we fetch the actual category from the database as well.

14:03:13
<transcript>: i guess we could do that

14:03:16
<transcript>: I guess we could do that with a join. And that's what we'll probably do.

14:03:16
<transcript>: but if we

14:03:18
<transcript>: But if we want to get more.

14:03:18
<transcript>: el

14:03:31
<transcript>: Elaborate if we're going to do specific things like only fetch certain data from the category and not just do it in a big join and we could create a Resolver for product category and then that could be a separate http call or something else. Does that all make sense.

14:03:31
<transcript>: i don't know

14:03:38
<transcript>: I don't know. You guys tracking everybody on the same page. So let's get the host. I'm gonna go Fuzzy. I'm gonna grab the host.

14:03:38
<transcript>: i'm

14:03:42
<transcript>: I'm gonna put it in some thing environment variable. I don't know something.

14:03:49
<transcript>: Host is this. I don't feel like this is sensitive, actually. So I'm just gonna put it in there in the interest of time.

14:03:53
<transcript>: We're just gonna paste it in there, you know.

14:03:55
<transcript>: Oops.

14:03:55
<transcript>: no

14:03:57
<transcript>: Nope.

14:04:01
<transcript>: Ci quote, and we're gonna pass.

14:04:05
<transcript>: Okay.

14:04:11
<transcript>: Does it not work? Can I not paste in alacrity.

14:04:14
<transcript>: I could fuzzy.

14:04:17
<transcript>: Copy.

14:04:24
<transcript>: I don't want to leak this, so I'm just gonna paste it. There we go. Okay.

14:04:27
<transcript>: I'm fuzzy.

14:04:31
creativenull: in normal: di" then "+p

14:04:34
<transcript>: So is that actually the that's the domain. But it's not like trying to be Https. I guess.

14:04:35
<transcript>: Let's see.

14:04:35
<transcript>: let's go

14:04:38
<transcript>: Let's go to.

14:04:42
<transcript>: What is this.

14:04:43
<transcript>: Now.

14:04:43
<transcript>: i

14:04:45
<transcript>: I have it over here.

14:04:51
<transcript>: Where is it.

14:04:56
<transcript>: Oh, I need to save this somewhere else.

14:05:01
<transcript>: I don't lose it if I get Rick rolled.

14:05:08
<transcript>: Plus P creative null says in normal I can do Di quote.

14:05:08
<transcript>: then

14:05:11
<transcript>: Then plus then quote plus P.

14:05:11
<transcript>: and that

14:05:15
<transcript>: And that will paste. Okay, I'll try that in a minute.

14:05:16
creativenull: also hello

14:05:19
<transcript>: I want to find this plant field database. Here we go.

14:05:19
<transcript>: so we

14:05:21
<transcript>: So we have a host.

14:05:27
<transcript>: If we go in to the code, we're kind of reverse engineering this repo that they provided.

14:05:33
<transcript>: Because this is the JavaScript binding. We're just going to be writing it in VTL instead.

14:05:36
<transcript>: Let's find host.

14:05:40
<transcript>: Url equals new.

14:05:40
<transcript>: url

14:05:42
<transcript>: Url. Config. Url.

14:05:46
<transcript>: Yeah. Here we go. Https.

14:05:51
<transcript>: Okay.

14:05:56
<transcript>: Formatter queryard.

14:05:56
<transcript>: so we're gonna

14:06:00
<transcript>: So we're gonna have to reverse engineer all of this. Let's bring this file over here.

14:06:05
<transcript>: Feels good to not have you by running and kicking me in the teeth all the time.

14:06:11
<transcript>: Okay. So http.

14:06:12
<transcript>: Let's do this.

14:06:17
<transcript>: And then we've got our host.

14:06:21
<transcript>: Is that USC Connect PSDB cloud.

14:06:27
<transcript>: And then this is going to be the path.

14:06:27
<transcript>: ps

14:06:34
<transcript>: Psdb Version One Alpha One this is some early stuff. This is not like new this in production right now.

14:06:36
<transcript>: Thanks for the follow.

14:06:39
<transcript>: See Began skiz.

14:06:39
<transcript>: skiznzk

14:06:43
<transcript>: Skiznzkas. Also. Hello, creative null. Hello.

14:06:49
<transcript>: You're a you're a streamer, right.

14:06:49
<transcript>: i follow

14:06:51
<transcript>: I follow you.

14:06:55
<transcript>: Think you're a streamer. I know you're from Twitter. Maybe. I know you're from somewhere.

14:06:59
<transcript>: Thanks for the Follow Joel.

14:06:59
<transcript>: bud jose

14:07:00
<transcript>: Bud Jose.

14:07:01
<transcript>: joseph

14:07:02
<transcript>: Joseph.

14:07:05
<transcript>: Okay. So this is our host.

14:07:05
<transcript>: and now we need

14:07:08
<transcript>: And now we need to write some VTL.

14:07:16
creativenull: Im just a lurker 😅

14:07:19
<transcript>: The VTL is going to have some secrets in it well in the form of a like an environment variable or something.

14:07:19
<transcript>: just alert

14:07:22
<transcript>: Just alerter. No worries. Creative null. You can be a Lurker.

14:07:26
<transcript>: So VTL goes here.

14:07:31
<transcript>: Let's just paste.

14:07:31
<transcript>: some of this

14:07:34
<transcript>: Some of this basic retail. So here's a basic post request.

14:07:38
stiefbroerikzitvast: a real lurker wouldnt say that

14:07:40
<transcript>: Right here. Oh.

14:07:51
<transcript>: I just Rose, and I forgot how to write. I forgot to do them tirely. Okay.

14:07:55
<transcript>: So what do we have here? Unnecessary escape character.

14:07:59
<transcript>: It's actually not unnecessary. That is necessary.

14:07:59
<transcript>: i mentioned

14:08:02
<transcript>: I mentioned at the beginning of Stream if you missed it.

14:08:02
<transcript>: vtl is kind of

14:08:19
<transcript>: Vtl is kind of the worst writing detail, not a lot of fun. The only reason I'm optimistic and I've done a lot of this writing details stuff over the years. The reason I'm so excited about now for like broader web devs is there may be some work happening. They updated an RC for.

14:08:19
<transcript>: typescript

14:08:27
<transcript>: Typescript JavaScript support so you can write TypeScript and it'll generate the detail for you. You can do that with the library called function list.

14:08:27
<transcript>: same good

14:08:31
<transcript>: Same good one on Twitter. If you look him up, he's made something that does that.

14:08:31
<transcript>: i hadn't

14:08:33
<transcript>: I hadn't played with it yet.

14:08:33
<transcript>: and play with

14:08:36
creativenull: lol

14:08:42
<transcript>: And play with it yet. But it does basically this exact thing. You write TypeScript, you get VTL templates, so it'll be a lot better when that's the case.

14:08:47
<transcript>: Okay.

14:08:47
<transcript>: so

14:08:50
<transcript>: So headers content type.

14:08:56
<transcript>: So this is you can see this is like an example for executing an AWS step function.

14:08:56
<transcript>: from a

14:08:58
<transcript>: From a VTL template.

14:08:58
<transcript>: our path

14:09:00
<transcript>: Our path, our resource path. We know.

14:09:00
<transcript>: it's right here

14:09:03
<transcript>: It's right here, right.

14:09:03
<transcript>: so i can

14:09:06
<transcript>: So I can I can change the resource path.

14:09:06
<transcript>: going to look like

14:09:09
<transcript>: Going to look like that. Okay.

14:09:16
<transcript>: So PSDB V One Alpha One database execute if we nail this first try.

14:09:23
<transcript>: Want to have a celebration. It's gonna be so fun. I don't think we're going to that. So for what it's worth.

14:09:26
<transcript>: Start Time in time.

14:09:26
<transcript>: form

14:09:27
<transcript>: Formatter.

14:09:32
<transcript>: So we got to learn what it's doing here. It's hitting that host.

14:09:32
<transcript>: on this

14:09:34
<transcript>: On this path.

14:09:45
<transcript>: The formatter does something to create the sequel. And what does it do with the sequel? Query. Okay, so that's just a body. It's in the body. Right.

14:09:45
<transcript>: queries

14:09:54
<transcript>: Queries SQL session is this session. I've heard from someone on Twitter, the guy that made all this stuff said, I don't need to include the session.

14:09:54
<transcript>: i can just forget

14:09:56
<transcript>: I can just forget about the session.

14:10:03
<transcript>: So we're gonna forget about the session. We're gonna just not include it. So the body I'm gonna remove.

14:10:05
<transcript>: This.

14:10:13
<transcript>: And we're just going to have a body that is sequel, I think or query, what was it.

14:10:13
<transcript>: yeah query

14:10:14
<transcript>: Yeah, query.

14:10:22
<transcript>: Query and then it's going to be some arbitrary sequel in here.

14:10:22
<transcript>: we're gonna

14:10:25
<transcript>: We're gonna just do select all from.

14:10:25
<transcript>: products

14:10:29
<transcript>: Products. Okay, we're gonna just start out naive.

14:10:29
<transcript>: let's say

14:10:35
<transcript>: Let's say we just select all from products that's mostly correct. The category won't be resolved correctly.

14:10:35
<transcript>: we'll have to

14:10:39
<transcript>: We'll have to join and all that. But let's just do this. Let's see if we get this working.

14:10:39
<transcript>: select offer

14:10:41
<transcript>: Select Offer products.

14:10:41
<transcript>: the headers

14:10:44
<transcript>: The headers. We're gonna have to include some headers, right.

14:10:49
<transcript>: Where did so post? Json? Where is that thing.

14:10:53
<transcript>: How do I go to that thing.

14:10:53
<transcript>: here we go

14:10:55
<transcript>: Here we go. Post JSON.

14:10:55
<transcript>: so

14:11:00
<transcript>: So BTOA so we do config username and password.

14:11:04
<transcript>: What is? Btoa? What is that.

14:11:04
<transcript>: what may have to do

14:11:06
<transcript>: What may have to do this.

14:11:08
<transcript>: Like using some online tool.

14:11:14
<transcript>: I'm obviously would store all this in like Secrets Manager or somewhere else.

14:11:14
<transcript>: fet

14:11:20
<transcript>: Fetch URL to string method post body okay headers so content type is application.

14:11:24
<transcript>: Json so we're gonna go CT quote JSON.

14:11:24
<transcript>: and then

14:11:28
<transcript>: And then Amazon target none of this nonsense we're gonna do.

14:11:28
<transcript>: no user

14:11:31
<transcript>: No user agent. I don't think I need it.

14:11:36
<transcript>: Okay. Maybe we will we'll make something fun.

14:11:36
<transcript>: so

14:11:38
<transcript>: So content type.

14:11:43
<transcript>: I don't know how many people are using this API. It's very early.

14:11:46
<transcript>: But maybe they'll notice if we say something like.

14:11:46
<transcript>: use

14:11:48
<transcript>: User agent.

14:11:52
<transcript>: Let's say.

14:11:54
<transcript>: Adam.

14:11:54
<transcript>: was

14:11:56
<transcript>: Was here.

14:11:56
<transcript>: okay

14:11:57
<transcript>: Okay.

14:12:01
<transcript>: Content type and then we need.

14:12:04
<transcript>: Authorization.

14:12:07
<transcript>: Okay. And this is where we're gonna have.

14:12:13
<transcript>: Basic and then token let's go be our BTOA token thing.

14:12:19
<transcript>: This is basically a working request mapping template. Okay.

14:12:21
<transcript>: The response.

14:12:26
<transcript>: Need to parse so here's a graph field response Mac mapping template.

14:12:26
<transcript>: we're going to

14:12:28
<transcript>: We're going to do.

14:12:32
<transcript>: Just contact result I think.

14:12:35
<transcript>: Do we need to do, like two JSON or something.

14:12:38
<transcript>: Context result.

14:12:44
<transcript>: I think we just need to return the array of products.

14:12:53
<transcript>: He's just literally going to be context result. I don't think we need actually, we don't even need a template.

14:12:59
<transcript>: For response, because the default is to return whatever comes back from the API, and that's what we're going to do.

14:12:59
<transcript>: if we

14:13:11
<transcript>: If we needed to like loop through the objects and like transform them, we want to maybe reshape them for our API to kind of abstract away the shape on the other end. We can do that in response. Template. We're just not going to we don't need to.

14:13:17
<transcript>: Okay.

14:13:36
<transcript>: Up here. We did it. We just need to put in our actual token. So this is sensitive part. Like I said, normally, we'd store that in secrets. Manager. I think what we're gonna do right now is put it in an environment variable and call it good.

14:13:38
<transcript>: How you feel about that.

14:13:38
<transcript>: oh let's see

14:13:44
<transcript>: Oh, let's see what the results shape is. Actually, it may not just be as straightforward as I thought. So. Partial.

14:13:48
<transcript>: Let's see result session error.

14:13:48
<transcript>: so saved

14:13:50
<transcript>: So saved as the response.

14:14:04
<transcript>: So there's a result session in an error return. So we need to actually we do need it mapping template because we can't just return that that's not the shape that our graphical API is expecting an array of products. Right.

14:14:10
<transcript>: We have to actually return an array of products so our VTL will look like.

14:14:15
<transcript>: Let's see.

14:14:23
<transcript>: I like that. No, see, I.

14:14:26
<transcript>: Do that.

14:14:36
<transcript>: Okay. I'm just trying to do cool, dim things at this point. Sorry.

14:14:36
<transcript>: so

14:14:38
<transcript>: So context.

14:14:38
<transcript>: context

14:14:40
<transcript>: Context that result.

14:14:42
<transcript>: results

14:14:42
<transcript>: results that

14:14:43
<transcript>: Results that result.

14:14:43
<transcript>: is the name of

14:14:48
<transcript>: Is the name of it right? So result. What is result? Let's see result that Rose affected.

14:14:54
<transcript>: I want the actual.

14:14:54
<transcript>: data

14:14:55
<transcript>: Data.

14:14:55
<transcript>: in it

14:14:57
<transcript>: In it.

14:15:00
<transcript>: Fields? What is all this.

14:15:03
<transcript>: Rose. I want the rose. Where did Rose come from.

14:15:09
<transcript>: Rose equals result. Parse. Result. Let's go to parse.

14:15:18
<transcript>: Harsh harsh does result on fields. Result rows.

14:15:22
<transcript>: Rose map. Okay. So that's just trying to like.

14:15:27
<transcript>: Oh this parse row do fields reduce it's trying to create like a TypeScript thing or something.

14:15:27
<transcript>: we don't need to do

14:15:29
<transcript>: We don't need to do all that.

14:15:29
<transcript>: graph

14:15:34
<transcript>: Graphql will handle like it's gonna return the data that's all we need.

14:15:34
<transcript>: so

14:15:36
<transcript>: So parse.

14:15:39
<transcript>: We do need to look@result.com.

14:15:48
<transcript>: Just like that. I think that's it that's our result mapping template if you're following if anyone is following at this point, or anyone cares. But so what we're doing.

14:15:57
<transcript>: So we just need to put on our token, and I think we're good.

14:15:57
<transcript>: bt

14:16:01
<transcript>: Btoa. What is BTOA? Sim? For? Someone. Remind me.

14:16:05
<transcript>: Javascript.

14:16:08
<transcript>: Etla.

14:16:15
<transcript>: It's base 64 encoded.

14:16:24
<transcript>: Okay.

14:16:24
<transcript>: so

14:16:26
<transcript>: So I'm gonna have to do some stuff on fuzzy.

14:16:28
<transcript>: Let's.

14:16:31
<transcript>: Etla.

14:16:33
<transcript>: Online.

14:16:37
<transcript>: Utilities Online Basics for Encode. Here we go.

14:16:46
<transcript>: So I can type in my username colon password here and get out a B two a thing.

14:16:46
<transcript>: are they revers

14:16:48
<transcript>: Are they reversible.

14:16:50
<transcript>: They are right.

14:16:57
stiefbroerikzitvast: wow you just leaked your username and password

14:16:58
<transcript>: Yeah, because you can basically support D code, so I can't just share this thing, just trying to see how lazy I could be, you know.

14:17:01
<transcript>: Okay. I'm gonna go fuzzy.

14:17:01
<transcript>: i

14:17:05
<transcript>: I did not. Oh, Steprill, you're saying username and password is my username password.

14:17:05
<transcript>: here we go

14:17:12
<transcript>: Here we go. We're going Fuzzy. I'm gonna put the real thing in here in some Web products. I'm done.

14:17:12
<transcript>: use

14:17:16
<transcript>: Username. Oh, the database name owner, if that matters.

14:17:19
<transcript>: Wondering if that matters.

14:17:21
stiefbroerikzitvast: base64 is encoding, not encryption or hashing

14:17:23
<transcript>: Let's see.

14:17:27
stiefbroerikzitvast: its not secure in the slightest

14:17:29
<transcript>: So they just did username colon password, right? Yeah.

14:17:31
<transcript>: Okay.

14:17:31
<transcript>: and that's the user

14:17:33
<transcript>: And that's the username.

14:17:33
<transcript>: and

14:17:36
<transcript>: And then that is the password.

14:17:39
<transcript>: Okay.

14:17:45
<transcript>: So then I need to encode it. How do I encode it? So I hit enter.

14:17:48
<transcript>: What do I do.

14:17:48
<transcript>: come

14:17:50
<transcript>: Come on now.

14:17:51
<transcript>: Encode it, please.

14:17:56
<transcript>: Is this thing done? Did I pick a thing that's done.

14:17:58
<transcript>: Or am I just not seeing.

14:18:02
<transcript>: I guess I could just, like, do a code, sandbox.

14:18:08
<transcript>: Base 64 in Code Utilities Online. Let's try this one.

14:18:11
<transcript>: Encode? Please.

14:18:14
<transcript>: There it is.

14:18:14
<transcript>: okay so

14:18:16
<transcript>: Okay. So I have the real thing now.

14:18:23
krowzar: just open ctrl+shift+I console

14:18:24
<transcript>: I want to store this in an environment variable. I suppose.

14:18:25
krowzar: lol

14:18:28
<transcript>: I suppose.

14:18:35
<transcript>: Don't I open control. Shift icons.

14:18:39
<transcript>: Yeah, not encryption or hashing. Good call.

14:18:39
<transcript>: we will not

14:18:41
<transcript>: We will not be sharing it.

14:18:44
<transcript>: Control, shift, icons.

14:18:48
<transcript>: So if I want to put a sensitive value in here, I'm gonna have to do.

14:18:48
<transcript>: like

14:18:49
<transcript>: Like.

14:18:52
<transcript>: Remember CDK.

14:18:52
<transcript>: ck

14:18:53
arcticbluee: you can do it in notepad++ > plugins > MIME Tools too

14:18:54
<transcript>: Ck Environment variables.

14:18:58
<transcript>: You use like CDA, CDK, context.

14:19:02
<transcript>: Okay, you can use them since this time.

14:19:18
<transcript>: Cdk context. This is not the way to do it. By the way, you don't want to just put.

14:19:18
<transcript>: sensitive stuff

14:19:21
<transcript>: Sensitive stuff in your VTL templates because.

14:19:21
<transcript>: they're visible to

14:19:34
krowzar: you can use builtin javascript console and there do btoa()

14:19:41
<transcript>: They're visible to anyone who has access that VTL template like in the console. I think they probably get emitted in the cloud watch in like 15 places. You definitely don't want to put in your retail template. That said this one I'm gonna do right now because I just don't want to introduce a pipeline Resolver. If we want to do it in Secrets Manager, which will maybe go to it. We'll maybe get to that. But we have to actually do like a pipeline Resolver. First call.

14:19:41
<transcript>: secrets

14:19:45
<transcript>: Secrets Manager then call Planet scale.

14:19:50
<transcript>: Just a lot more complex. So we'll get there.

14:19:54
<transcript>: I just need to find.

14:19:54
<transcript>: so

14:19:57
<transcript>: So environment variable.

14:20:01
<transcript>: Product process of it. Yeah. Here we go.

14:20:01
<transcript>: so

14:20:04
<transcript>: So let's see. I'm gonna have this thing taken.

14:20:06
<transcript>: Prop.

14:20:19
<transcript>: Well, I don't need to do that, do I? Because it's just ultimately, this is all throwaway. We're gonna just take token, and it's gonna now be.

14:20:24
<transcript>: Like this.

14:20:24
<transcript>: process

14:20:26
<transcript>: Process M.

14:20:29
<transcript>: Planet scale.

14:20:34
<transcript>: Credentials.

14:20:37
<transcript>: Didn't make that easy on myself, did I.

14:20:40
<transcript>: Add a string. Okay.

14:20:44
<transcript>: Save that now. I just need to put that into my environment.

14:20:54
<transcript>: Okay. How do I want to do in my environment, I guess.

14:21:05
<transcript>: Cloak would work if I just create a dot Inv file.

14:21:19
<transcript>: Open that up.

14:21:19
<transcript>: we'll say plan

14:21:21
<transcript>: We'll say Planet Scale Oops.

14:21:30
<transcript>: Sorry I will unfuzzy here soon.

14:21:36
<transcript>: Name of it Planet Scale, Planet scale.

14:21:38
<transcript>: Credentials.

14:21:41
<transcript>: Equals.

14:21:44
<transcript>: Copy it again.

14:21:53
<transcript>: All right, look at cloak doing its thing.

14:21:54
oskrm: howdy

14:21:57
<transcript>: That's too long there's no way it's that long.

14:21:59
<transcript>: What.

14:22:03
<transcript>: I'm maybe. Yeah. Okay.

14:22:03
<transcript>: so

14:22:07
<transcript>: So let's save that. Thanks for follow fisc.

14:22:09
oskrm: thats what she said

14:22:12
<transcript>: And Kello hero. I don't know if I saw that in the Jose. Did I see these.

14:22:15
<transcript>: That's what she said.

14:22:22
<transcript>: You can use builtin JavaScript console and a new BTO Eight. Yeah, I could have done all of that, couldn't I.

14:22:25
<transcript>: Chose to use some online service that was really dumb.

14:22:38
<transcript>: Okay, so we've got now a dot in file. I just need to load that in file in Cdkland. I can go ahead and unfuzzy because of NVM cloak. Thank you so much. Leighton, I appreciate you.

14:22:40
<transcript>: Credentials.

14:22:40
<transcript>: so

14:22:43
cowfacedude99: Done with it?

14:22:43
<transcript>: So CDK load dot in file.

14:22:50
<transcript>: Format is to configure multi environments.

14:22:53
<transcript>: This thing. I don't know.

14:22:59
cowfacedude99: than I am sorry for this.

14:23:01
<transcript>: Just a node app, I guess just Loading.

14:23:01
<transcript>: node

14:23:02
<transcript>: Node.

14:23:06
<transcript>: Putting an in file for it's. Just dot in right.

14:23:08
<transcript>: Node.

14:23:08
<transcript>: m

14:23:09
<transcript>: M just a package.

14:23:09
<transcript>: just use it

14:23:11
<transcript>: Just use it.

14:23:18
oskrm: u tried deno?

14:23:21
<transcript>: Implements all that in save and then import and configure. Cool. Okay.

14:23:23
<transcript>: Let's do this.

14:23:23
<transcript>: yarn

14:23:24
<transcript>: Yarn. Add.

14:23:28
<transcript>: Should be Dev.

14:23:28
<transcript>: no y

14:23:30
<transcript>: No yarn add.

14:23:36
<transcript>: Yarn. Add.

14:23:39
<transcript>: Why.

14:23:46
<transcript>: Get stuck in.

14:23:46
<transcript>: toggle

14:23:51
<transcript>: Toggle term yarn. Yarn. Add dot, n.

14:23:56
<transcript>: Almost there. We're about to test this thing. We're gonna deploy it, and we're gonna test it.

14:23:56
<transcript>: yarn

14:24:00
<transcript>: Yarn add in and then we want to do.

14:24:04
<transcript>: Let's see in our.

14:24:08
<transcript>: Bin Planet Scale here. We're gonna load it.

14:24:10
<transcript>: Like this.

14:24:12
<transcript>: Import.

14:24:14
<transcript>: In from.

14:24:19
<transcript>: And we're gonna say.

14:24:19
<transcript>: in

14:24:20
<transcript>: In.

14:24:23
<transcript>: Dot.

14:24:25
<transcript>: Not in this mode.

14:24:28
<transcript>: M dot config.

14:24:33
<transcript>: Module.

14:24:33
<transcript>: what

14:24:34
<transcript>: What.

14:24:34
<transcript>: is it

14:24:39
<transcript>: Is it only require thing I can't import it on ESN thing.

14:24:42
<transcript>: What about this.

14:24:42
<transcript>: what about

14:24:44
<transcript>: What about this.

14:24:44
<transcript>: all

14:24:49
<transcript>: All as dot Ind. Cool works for me. It works for you.

14:24:51
<transcript>: Okay.

14:24:54
<transcript>: Don't specify in this tech. Okay? Yeah, I don't care.

14:24:59
<transcript>: Back to our staff.

14:25:03
<transcript>: Here. So we're Loading in plan scale.

14:25:03
<transcript>: credentials

14:25:04
<transcript>: Credentials.

14:25:07
<transcript>: Let's yank.

14:25:11
<transcript>: Yank inside that word.

14:25:13
<transcript>: Let's go back.

14:25:15
<transcript>: Here. No.

14:25:18
<transcript>: Here. And Let's.

14:25:22
<transcript>: Paste.

14:25:35
<transcript>: Just like that. I just want to make sure I named it right. That'd be dumb if I didn't. Okay. I think this should work. I mean, if we get a first try, this should work. So we created a Resolver. We created a data source.

14:25:40
<transcript>: Let's see. So we got templates for mapping both in and out.

14:25:42
<transcript>: I've not tried Dino. Yet.

14:25:46
<transcript>: Not tried it yet.

14:25:52
<transcript>: Okay, let's deploy it.

14:25:58
<transcript>: Let's deploy it.

14:26:02
<transcript>: To deploy it, we're gonna say.

14:26:02
<transcript>: yarn

14:26:03
<transcript>: Yarn.

14:26:06
<transcript>: Cdk let's do send first.

14:26:09
<transcript>: I know that's gonna output the.

14:26:09
<transcript>: let's just

14:26:11
<transcript>: Let's just do it. Ck. Deploy.

14:26:16
<transcript>: Just like a flag for.

14:26:19
<transcript>: Cdk deploy.

14:26:21
oskrm: add .env.example?

14:26:26
<transcript>: Flags. I don't want to just ask me all the things silently. Just deploy it.

14:26:32
<transcript>: Deploy.

14:26:39
<transcript>: But this is this is easier. Right.

14:26:41
<transcript>: It's not easier.

14:26:43
<transcript>: I.

14:26:43
<transcript>: sorry boots

14:26:45
<transcript>: Sorry, bootstrapped.

14:26:49
<transcript>: Here we go. Pulling stacks.

14:26:53
<transcript>: Just deploy.

14:26:53
<transcript>: help

14:26:55
<transcript>: Help, I guess.

14:27:02
<transcript>: Cd what not install? Okay.

14:27:02
<transcript>: yarn

14:27:05
<transcript>: Yarn CDK deploy.

14:27:08
<transcript>: We can do watch if we want to make changes.

14:27:11
<transcript>: But I was thinking more.

14:27:13
<transcript>: At the.

14:27:13
<transcript>: whatever

14:27:15
<transcript>: Whatever, just deploy.

14:27:18
<transcript>: I'm just going to confirm it or whatever.

14:27:24
<transcript>: Yes, I want to do those changes.

14:27:32
<transcript>: Okay publishing. So this is CDK app. It's really just doing like a CloudFormation deploy.

14:27:39
<transcript>: Create the change set, deploys a change set, and then we can go into my Dose account and see this thing and play with it.

14:27:46
<transcript>: We might be able to hit the Plankill database if all goes well.

14:27:50
<transcript>: Okay.

14:27:55
<transcript>: Let's go into app sync.

14:27:55
<transcript>: should be

14:27:58
<transcript>: Should be on my favorite services up here somewhere.

14:28:04
<transcript>: Apparently, I don't like Epsync. It's like my favorite service. Where is it.

14:28:10
<transcript>: I was a miss. That's a big miss. That's a favorite for sure.

14:28:18
<transcript>: Okay API's. Let's see it's still creating so probably. Oh Sorry, there planet skill test.

14:28:22
<transcript>: Plan scale test.

14:28:27
<transcript>: Here we go. We're going to run a query.

14:28:33
<transcript>: And obviously I would be doing this from like a don't have any API keys. We need to let's do that in CDK.

14:28:33
<transcript>: obviously

14:28:49
<transcript>: Obviously, I would not consume my API from the A to business console, but we don't care about building a front end right now. Normally I build a front end. I would generate TypeScript types from with like graph field code. Gin and I would interact with my app sync API that way through some front end right.

14:28:49
<transcript>: but for

14:29:01
<transcript>: But for our purposes, all I'm trying to test is Can I build the backend? Can I build a graph field API that hits Planet Scale with no Lambda function whatsoever. Just all through retail templates. Okay.

14:29:07
<transcript>: Miyagi thanks for the follow meagi.

14:29:07
<transcript>: okay

14:29:09
<transcript>: Okay, we deployed.

14:29:15
<transcript>: Let's just say we're gonna add an API key to this thing.

14:29:19
<transcript>: So API Dot API key.

14:29:23
<transcript>: Let's go to the dot. Here.

14:29:23
<transcript>: there's

14:29:26
<transcript>: There's like a thing for it. Authorization.

14:29:33
<transcript>: Api Key everything is so big. I can't see anything.

14:29:38
<transcript>: Handler that's if you want to do an all function.

14:29:41
<transcript>: Api Key Where are you.

14:29:43
laytanl_: Wow I'm gone for 30 minutes and we're deploying

14:29:54
<transcript>: Help me. Someone help me please.

14:29:58
<transcript>: App Sync CDK API key.

14:30:08
<transcript>: Here's. Somebody on Egg had told me how to do it.

14:30:10
<transcript>: Tamash.

14:30:17
<transcript>: There's paywall am I gonna do right now? But I love Tamash. And he explained how to do it right there.

14:30:17
<transcript>: it generate

14:30:21
<transcript>: It generate API key from API apps and KPI.

14:30:25
<transcript>: Key.

14:30:30
<transcript>: Are they gonna create an apex here? Yeah.

14:30:35
<transcript>: Api Key thank you everyone who blogs. I appreciate you.

14:30:35
<transcript>: bloggers

14:30:40
<transcript>: Bloggers, people sharing your knowledge. I really appreciate it. It's very helpful.

14:30:46
<transcript>: So new CFN API key. Oh, do we have to do it with a level one resource? Now.

14:30:46
<transcript>: surely not

14:30:48
<transcript>: Surely not what.

14:30:52
<transcript>: Our do we.

14:30:55
<transcript>: I guess we do.

14:30:58
<transcript>: Okay. Well.

14:31:02
<transcript>: Thank you for the follow. Evapor.

14:31:08
<transcript>: I was really hoping there was like API.

14:31:10
<transcript>: Create.

14:31:12
<transcript>: Hello? No.

14:31:12
<transcript>: just

14:31:15
<transcript>: Just got Rick rolled real hard.

14:31:15
<transcript>: there we

14:31:17
<transcript>: There we are.

14:31:21
<transcript>: We are getting Rick rolled.

14:31:21
stiefbroerikzitvast: ohno you dun goofed

14:31:27
schrew: OH YEAH

14:31:28
<transcript>: John, for 30 minutes. We're deploying this right latent. We move faster in here, don't we.

14:31:33
<transcript>: Cow Base with the Rick roll.

14:31:34
stiefbroerikzitvast: no sound?

14:31:38
<transcript>: Yeah? There's no sound.

14:31:47
cowfacedude99: I waited for about 10 min.

14:31:49
oskrm: never gonna deploy you

14:31:54
stiefbroerikzitvast: What is Animadam

14:31:56
<transcript>: I had it working for like 10 seconds, and then I switched my audio set up. I'm gonna over the weekend I'm gonna install the latest Mac OS, like the beta for version 13. And I think then with the new OBS, I have some audio routing options, but long story short, Chrome sucks, and it has a bug where you can't really control the routing of the audio.

14:31:56
<transcript>: like at all

14:32:02
<transcript>: Like at all. It just comes through a specific channel on my audio interface, and I cannot expose that channel.

14:32:04
<transcript>: To Twitch, so I'm sorry.

14:32:04
<transcript>: you guys don't get any

14:32:10
stiefbroerikzitvast: Can you just download the mp4 and play that in OBS

14:32:11
<transcript>: You guys don't get any Chrome video audio with the current setup. It's just a much better setup, though, so I'm gonna stick with it.

14:32:11
<transcript>: and we're gonna

14:32:13
stiefbroerikzitvast: cant*

14:32:14
<transcript>: And we're gonna see if we can work around it. I do hope to give you the audio someday.

14:32:18
<transcript>: Okay, let's open Chrome again.

14:32:24
<transcript>: Let's restore actually had some stuff there that I wanted to work with.

14:32:27
<transcript>: Cli, we're gonna move that one over here.

14:32:29
<transcript>: Okay.

14:32:37
<transcript>: So I just want an API key. How do I create a new API key? Do I literally have to do.

14:32:40
<transcript>: Like.

14:32:40
<transcript>: api

14:32:44
<transcript>: Api key equals New App Sync API key.

14:32:50
<transcript>: To get the CFN.

14:32:54
<transcript>: So it's not gonna be this. It's gonna.

14:32:54
<transcript>: okay you

14:32:57
<transcript>: Okay. You know what? Forget it. Forget about it.

14:32:57
<transcript>: we're going

14:33:02
<transcript>: We're going to do it in the console. I'm doing so many things I don't recommend.

14:33:02
<transcript>: really

14:33:14
<transcript>: Really? If I were using this API, I wouldn't be using API keys. I'd be using custom off of Land authorizer, and I would authorize using something like a next off token. But that is not the world we live in right now. We live in the world where.

14:33:18
<transcript>: Offload. Oh, there's an API key. Well, okay.

14:33:21
<transcript>: Everybody has it now just go easy.

14:33:24
oskrm: aws and their bad dx

14:33:27
<transcript>: Do you even know what this is or how to get there? So let's run a query.

14:33:27
<transcript>: api key

14:33:28
<transcript>: Api key.

14:33:30
cowfacedude99: exposed LUUL

14:33:32
<transcript>: And I gotta make this bigger. This is awful. So bad.

14:33:32
<transcript>: so we're gonna

14:33:34
oskrm: my apiKey now LUL

14:33:34
<transcript>: So we're gonna query.

14:33:34
<transcript>: all we did

14:33:39
<transcript>: All we did was wired up the products, if you recall. So we're gonna do.

14:33:39
<transcript>: query

14:33:40
<transcript>: Query.

14:33:42
<transcript>: Testing.

14:33:42
<transcript>: one two

14:33:44
<transcript>: One, two, three.

14:33:47
<transcript>: And we're gonna say.

14:33:55
<transcript>: Just click around here, I think. Yeah. Get me the image and the name and the yeah, just like that. Can we do it.

14:33:55
<transcript>: no

14:33:59
<transcript>: No. Unable to confirm context result.

14:33:59
<transcript>: rose

14:34:01
<transcript>: Rose to object. Okay.

14:34:01
<transcript>: so we

14:34:03
<transcript>: So we did get something though.

14:34:06
<transcript>: Let's see if I can.

14:34:09
<transcript>: We could turn on some logging here.

14:34:14
<transcript>: And we can see if we actually got data back from Planet Scale that'd be actually pretty cool.

14:34:18
<transcript>: Or it's possible we can't convert it because result doesn't exist. Because.

14:34:22
<transcript>: We got an error on our plant field query. It's very possible.

14:34:25
<transcript>: Let's turn on logging.

14:34:28
<transcript>: Include Verbose content.

14:34:28
<transcript>: and we're gonna do

14:34:29
<transcript>: And we're gonna do.

14:34:29
<transcript>: all

14:34:34
<transcript>: All never do this in production by the way, just never if it's a real app with real loads.

14:34:34
<transcript>: you will

14:34:38
<transcript>: You will rack up a cloud watch bill like you've never seen.

14:34:38
<transcript>: apps

14:34:41
<transcript>: Appsync is soberboast.

14:34:41
<transcript>: bad dx

14:34:43
<transcript>: Bad DX. It's not great.

14:34:43
<transcript>: what is

14:34:49
<transcript>: What is Anna? Madam, can you just download the MP4 and play that in OBS? Oh yeah, I guess I could.

14:34:51
<transcript>: Guess I could.

14:35:08
<transcript>: Anim is the stupid filter where my face looks like a cartoon. It just bothers me. I just don't like it. So I made it a million points. So if you can afford a million points, you know what? You earned it. Max out.

14:35:08
<transcript>: my api

14:35:12
andom: its this adamel4Animadam

14:35:14
<transcript>: My API K now. Yeah, that's fine. You guys actually have that. I'm not really worried about it.

14:35:23
<transcript>: Okay for seven days you can just go to town. So let's go to my monitoring and then let's try that query again and see.

14:35:23
<transcript>: what

14:35:24
<transcript>: What our.

14:35:26
<transcript>: What it looks like.

14:35:26
<transcript>: i'm gonna

14:35:28
<transcript>: I'm gonna try the game.

14:35:34
<transcript>: Okay. And it looks let's see what the this will show us now like.

14:35:39
<transcript>: What is this? This will show us the did we get data back from plan scale.

14:35:39
<transcript>: probably not

14:35:43
<transcript>: Probably not. I doubt we got that far, but let's see.

14:35:43
<transcript>: okay

14:35:47
<transcript>: Okay. Begin requests. So here's a query that came in. You can see.

14:35:47
<transcript>: that's my query

14:35:48
<transcript>: That's my query.

14:35:48
<transcript>: request

14:35:50
<transcript>: Request mapping.

14:35:50
<transcript>: oh

14:35:53
<transcript>: Oh, Geez, don't click it fuzzy.

14:35:57
<transcript>: I'm about to leak some secrets. Yeah.

14:35:57
<transcript>: i fuzzy

14:35:59
<transcript>: I fuzzyed right? Did I fuzzy.

14:36:02
<transcript>: Okay good.

14:36:05
<transcript>: I don't want to look.

14:36:05
<transcript>: my planet

14:36:11
<transcript>: My planet skill authorization stuff that would be bad response mapping. Let's see.

14:36:16
<transcript>: Request, Headers Response, headers.

14:36:18
<transcript>: Where do I see.

14:36:23
<transcript>: Here we go. Okay. So we got something back.

14:36:29
<transcript>: I'm gonna unfuzzy. This is what we got back. We got a 200. Oh, wow. We actually got data.

14:36:32
<transcript>: I am actually super surprised.

14:36:35
<transcript>: That that worked.

14:36:35
<transcript>: so

14:36:38
<transcript>: So we first tried the request template.

14:36:38
<transcript>: so we

14:36:42
<transcript>: So we got back from planet scale this stuff okay.

14:36:44
<transcript>: Signature. Not important.

14:36:44
<transcript>: row

14:36:51
<transcript>: Row count one no minus one sounds wrong sound rows one row count minus one.

14:36:55
<transcript>: Result. So this is the thing that came back, the body.

14:36:55
<transcript>: came back

14:36:59
<transcript>: Came back. Oh, I have to result that body because it's an HTML one.

14:36:59
<transcript>: or it's a htt

14:37:03
<transcript>: Or it's a http one. Okay. So that's the problem.

14:37:03
<transcript>: it's going to be

14:37:09
<transcript>: It's going to be context result body. We have to JSON parse it and then.

14:37:09
<transcript>: we're grab

14:37:11
<transcript>: We're grabbing the.

14:37:16
<transcript>: Body result. And then there we have fields.

14:37:16
<transcript>: we're looking for

14:37:18
<transcript>: We're looking for rows.

14:37:21
<transcript>: Rows.

14:37:26
<transcript>: You want to see rows.

14:37:29
<transcript>: There it is. Rose.

14:37:29
<transcript>: but

14:37:34
<transcript>: But rows is an array of objects that I do not recognize links and values.

14:37:34
<transcript>: what

14:37:35
<transcript>: What.

14:37:38
<transcript>: What is that? Nonsense.

14:37:43
<transcript>: Like that does not look like data.

14:37:43
<transcript>: that i would

14:37:45
<transcript>: That I would have in my database.

14:37:54
<transcript>: Anyone makes sense of that? Do I have to, like, parse it? Let's go back at our code. Here.

14:37:54
<transcript>: do it

14:37:59
<transcript>: Do it's like actually decoded or something. Is that what I just saw? The word decode.

14:38:01
<transcript>: Decode.

14:38:01
<transcript>: yes we do

14:38:06
<transcript>: Yes, we do. We have to decode the row. Okay, so the rows are raw.

14:38:11
<transcript>: This is gonna make it a little harder.

14:38:11
<transcript>: we're still

14:38:16
<transcript>: We're still determined to not use a Lambda function here. That's the whole point of this exercise. Okay.

14:38:20
<transcript>: We're gonna do all of this.

14:38:24
<transcript>: With no compute all just VTL templates.

14:38:28
<transcript>: Hopefully depending on what decode row does.

14:38:33
<transcript>: So then they go through all the fields and reduce.

14:38:33
<transcript>: field name

14:38:36
<transcript>: Field name equals cast field.

14:38:36
<transcript>: row

14:38:41
<transcript>: Row. So decode row is an atop. Oh, no.

14:38:41
<transcript>: it's b sixty

14:38:44
<transcript>: It's B 64 decoded. So.

14:38:48
<transcript>: I don't think we have an API.

14:38:48
<transcript>: or i don't think we

14:38:53
<transcript>: Or I don't think we have AppSync VTL utilities.

14:38:53
<transcript>: atop i don't

14:38:55
<transcript>: Atop. I don't think we do.

14:39:00
<transcript>: This is going to hurt.

14:39:03
<transcript>: We might.

14:39:12
<transcript>: 64.

14:39:12
<transcript>: no

14:39:13
<transcript>: No.

14:39:22
<transcript>: Transfer.

14:39:24
<transcript>: transfers in one place

14:39:26
<transcript>: Transfers in one place, please.

14:39:32
<transcript>: Url decode basic 40 code. We do we have it. We have a helper for it.

14:39:35
<transcript>: Sand, tastic.

14:39:35
<transcript>: so we can

14:39:39
<transcript>: So we can parse the JSON. Then we can base 64. Decode the row.

14:39:42
<transcript>: Let's see, this is gonna be Gnarly, but we're doing it.

14:39:51
<transcript>: Decode row. So it gets one of the rows from the array. It's just an array of strings. Is that what we saw here.

14:39:53
<transcript>: Array.

14:40:00
<transcript>: And now Rose is an array of objects that has links and values.

14:40:04
<transcript>: What a weird way to return the data. I wonder why they're doing that.

14:40:04
<transcript>: it's like they just

14:40:07
<transcript>: It's like they just wanted to make my job harder. You know, I'm saying.

14:40:07
<transcript>: like

14:40:16
<transcript>: Like they knew they could work through it and their little JavaScript thing, but they wanted to make it harder on people like me who want to do weird things like VTL.

14:40:18
<transcript>: So my gonna have to mirror all of this.

14:40:22
<transcript>: Offset. So it goes through links.

14:40:22
<transcript>: it maps

14:40:23
<transcript>: It maps.

14:40:25
<transcript>: Size.

14:40:28
<transcript>: The width is.

14:40:28
<transcript>: parse

14:40:31
<transcript>: Parsent size.

14:40:31
<transcript>: ten

14:40:32
<transcript>: Ten.

14:40:36
<transcript>: Negative length indicates a null value.

14:40:47
<transcript>: So it's a string.

14:40:54
<transcript>: So they first decode it. Base 64. Decode it right. The values.

14:40:57
<transcript>: Here.

14:40:57
<transcript>: so this

14:41:00
<transcript>: So this is your values. So the.

14:41:00
<transcript>: base sixty

14:41:02
<transcript>: Base 64. Decode. That.

14:41:02
<transcript>: and then

14:41:06
<transcript>: And then they go through the resulting string.

14:41:15
<transcript>: And those links are like the links of the string that make up the different columns. I guess that's a way to do it. I guess.

14:41:19
<transcript>: Feels bad.

14:41:28
<transcript>: Could we not have just returned like A. Json. Blob. That was like keys named.

14:41:28
<transcript>: after

14:41:30
<transcript>: After the columns.

14:41:33
nexxeln: howdy

14:41:34
<transcript>: Could we not have done that at the API level, that would have been great.

14:41:34
<transcript>: wonder why

14:41:38
<transcript>: Wonder why wonder why we didn't do that? Hey, next one.

14:41:38
<transcript>: and

14:41:39
<transcript>: And then.

14:41:44
<transcript>: Yeah, that's it. And it's the animatom that's him.

14:41:44
<transcript>: that's the

14:41:46
<transcript>: That's the one. Okay.

14:41:46
<transcript>: so

14:41:48
oskrm: but then it would be too easy

14:41:49
<transcript>: So we know we can do this part.

14:41:51
nexxeln: planetsclae coooool

14:41:58
<transcript>: And I guess in there's no reason I can't do all this in VTL. It's just gonna be a pain. A huge pain. We're gonna do it.

14:41:58
<transcript>: cast

14:41:59
<transcript>: Cast.

14:41:59
<transcript>: cast

14:42:03
<transcript>: Cast, cast. We're gonna have to mirror this functionality as well.

14:42:03
<transcript>: in vtl

14:42:05
nexxeln: did you get the free database hat?

14:42:09
<transcript>: In VTL. Oh, this is gonna be some gnarly VTL. But when at the end of this, I'm gonna feel pretty good because we're gonna have some stuff.

14:42:09
<transcript>: some stuff

14:42:11
<transcript>: Some stuff worked out, you know I'm saying.

14:42:13
<transcript>: Parse.

14:42:21
<transcript>: Creates rows. Okay, let's do it.

14:42:21
<transcript>: first

14:42:23
<transcript>: First step.

14:42:34
<transcript>: Is we got a base 64 decode it. So I guess our request template doesn't change. We still just get the data like this. That part's working. We've set to make our response template.

14:42:34
<transcript>: way more

14:42:42
<transcript>: Way more complicated. Okay, so instead of just returning this non existent thing, we're gonna have to create variables and stuff.

14:42:42
<transcript>: there's not a

14:42:46
<transcript>: There's not a VTL VTL language server, is there.

14:42:56
<transcript>: No, not v DHL. I meant VTL.

14:43:00
<transcript>: There's probably not right.

14:43:03
<transcript>: What.

14:43:04
<transcript>: Vtl.

14:43:14
<transcript>: Probably not.

14:43:17
<transcript>: That's fine.

14:43:20
<transcript>: Oh, what in the world.

14:43:23
<transcript>: There's one of my tweets.

14:43:25
<transcript>: That's weird.

14:43:25
<transcript>: apparently i'm the only

14:43:38
<transcript>: Apparently I'm the only person talks about VPL. Ok. Vtl language server neovan. No, we don't need that. We are gonna have to write some serious VTL though, so buckle up. It's gonna get worse before it gets better.

14:43:43
<transcript>: But this is fun. We're doing all this without a Lambda function that feels good.

14:43:51
<transcript>: Did I get the free database hat. I don't know. Did I? No. I saw that at the top earlier. Let's go. Let's see if I can get it. Plan it. Scale.

14:44:04
<transcript>: The little banner at the top. Get a free Plan Scale database at Get a Plan Seal Demo try playing field today. Connect with our sales team. Get your Plans Go demo scheduled and your new favorite hat ship to you.

14:44:10
<transcript>: No, Jess, how large is your database? Very small. It doesn't exist. Why are you interested in plant scale.

14:44:20
<transcript>: Unlimited connections. I mean, that's kind of why, like serverless. How did you hear about plant scale.

14:44:25
<transcript>: Just everywhere. I don't know. Footer. Probably. What is your current database host.

14:44:28
<transcript>: Other DynamoDB.

14:44:35
<transcript>: Okay. I already filled this out earlier, but I want my hat. You know, I'm saying.

14:44:42
<transcript>: Principle.

14:44:46
<transcript>: Yes, sign me up.

14:44:46
<transcript>: want my hat

14:44:49
<transcript>: Want my hat database. Hat? That sounds cool.

14:44:55
<transcript>: Okay, that was a little distraction because we're getting ready to write VTL, and I'm just not quite ready yet, you know.

14:44:57
<transcript>: Resolver, mapping.

14:44:57
<transcript>: template

14:44:58
laytanl_: Free hat?

14:45:00
<transcript>: Template Programming Guide. Here we go.

14:45:03
<transcript>: So we got to do some variables.

14:45:03
laytanl_: What did I miss

14:45:06
<transcript>: Variables set.

14:45:06
<transcript>: like this

14:45:07
<transcript>: Like this.

14:45:19
laytanl_: I like free things

14:45:25
nexxeln: what window manager do you use?

14:45:26
<transcript>: And I've written like a ton of detail templates. So when you watch me do this, you're watching someone with experience like a lot of it. And I still have to Google this. This is why VTL is bad and.

14:45:26
<transcript>: why aws

14:45:37
<transcript>: Why AWS is going to make a TypeScript transpiler for it next one. What window manager do I use? I use rectangle you buy and.

14:45:37
<transcript>: soon amazon

14:45:38
<transcript>: Soon, Amazon.

14:45:53
<transcript>: We've used them all. I think they're all in stall. They're not emphasis is installed yet. I've got a lot of things installed right now. We just turned off you buy because it was driving me nuts. So now I'm just dragging them around just for now, over the weekend, I'm gonna set up.

14:45:53
<transcript>: rectangle

14:45:55
<transcript>: Rectangle to do what I want it to do.

14:45:55
<transcript>: i used to use right

14:45:59
<transcript>: I used to use right tangle. Okay, set. Var. This is going to be.

14:46:01
<transcript>: Set.

14:46:03
<transcript>: Rows.

14:46:05
<transcript>: Equals.

14:46:08
nexxeln: i've heard yabai is cool

14:46:08
<transcript>: So delete to quote.

14:46:08
<transcript>: equ

14:46:11
<transcript>: Equals context.

14:46:11
<transcript>: that result

14:46:12
<transcript>: That result.

14:46:12
<transcript>: body

14:46:14
<transcript>: Body.

14:46:14
<transcript>: no actually

14:46:17
<transcript>: No. Actually. First we need to just get the JSON. So.

14:46:21
<transcript>: Json equals the body.

14:46:21
<transcript>: we

14:46:24
<transcript>: We have to parse it, though. So we're gonna do.

14:46:27
<transcript>: Utils.

14:46:31
<transcript>: Par. Json. I think we'll go back and make sure.

14:46:37
<transcript>: This is where I should have used invents around but I didn't.

14:46:40
<transcript>: Okay.

14:46:45
<transcript>: So we have our JSON. Let's make sure it's parsed JSON. I think that's right.

14:46:51
<transcript>: Partially sun. Yeah. Okay. So it takes in a string, because remember.

14:46:51
<transcript>: it's a string

14:46:52
<transcript>: It's a string.

14:46:52
<transcript>: this is just

14:46:58
<transcript>: This is just a big Blob of string. This body is we have to JSON parse it. Now we have a thing that we can get.

14:46:58
<transcript>: the

14:46:59
<transcript>: The.

14:47:01
<transcript>: So we've kinda result.

14:47:01
<transcript>: body

14:47:07
<transcript>: Body. We can get the rows off of it.

14:47:07
<transcript>: i

14:47:11
<transcript>: I guess I'm gonna need the columns to get the names too.

14:47:15
<transcript>: It's gonna be some gnarly gnarly VTL.

14:47:20
<transcript>: Just delete all this now. Okay, so we have our JSON.

14:47:20
<transcript>: now we

14:47:22
<transcript>: Now we need to.

14:47:25
<transcript>: Let's set.

14:47:30
<transcript>: Rows equals JSON. Rows.

14:47:33
<transcript>: Set, columns.

14:47:35
schrew: somebody come get this dj, they been remixing the same song 5 times in a row LUL

14:47:37
<transcript>: Equals JSON columns.

14:47:42
<transcript>: Let's see.

14:47:47
<transcript>: Oh, sorry. True. Yeah, we'll change the music. It's.

14:47:49
<transcript>: A lot of heat waves here.

14:47:57
<transcript>: I've done a lot of remixes of hewas.

14:48:01
<transcript>: That's the same album.

14:48:06
<transcript>: So many heat waves, it's a cool song, but like that's a lot of heat waves.

14:48:11
<transcript>: Let's let's not do this.

14:48:14
<transcript>: Let's do this.

14:48:18
<transcript>: One the home stretch. It's time for.

14:48:18
<transcript>: the great

14:48:21
<transcript>: The greatest band ever to exist.

14:48:26
<transcript>: So columns and then.

14:48:26
<transcript>: we're gonna

14:48:28
<transcript>: We're gonna go through.

14:48:32
<transcript>: So Ro.

14:48:32
<transcript>: row

14:48:35
<transcript>: Row. We have to do this for every row.

14:48:41
<transcript>: So we're gonna loop through rows. Let's look at how we do loops again.

14:48:45
<transcript>: Yeah, for each in range.

14:48:52
<transcript>: Or I can do for each item an array.

14:48:57
<transcript>: Let's do that.

14:49:02
<transcript>: So for each.

14:49:02
<transcript>: we'll call it

14:49:04
<transcript>: We'll call it row.

14:49:05
<transcript>: Row.

14:49:05
<transcript>: in

14:49:07
<transcript>: In.

14:49:10
<transcript>: Leak.

14:49:14
<transcript>: Two brackets. That's not what I want. I want delete.

14:49:24
<transcript>: Including the bracket. I could have done C to replace right. So for each row in rows.

14:49:29
<transcript>: We're going to do something, we're going to parse.

14:49:29
<transcript>: first

14:49:32
<transcript>: First we'll just do set.

14:49:36
<transcript>: Parsed equals utiliz.

14:49:37
<transcript>: utilizode

14:49:38
<transcript>: Utilizode.

14:49:38
<transcript>: sixty

14:49:40
<transcript>: 64 something like that.

14:49:42
<transcript>: Row.

14:49:42
<transcript>: see if that's

14:49:44
<transcript>: See if that's right.

14:49:44
<transcript>: util

14:49:48
<transcript>: Util's Base 60 40 code that's close.

14:49:54
<transcript>: Nope. That's still not pasting.

14:49:57
<transcript>: Base 64.

14:49:59
<transcript>: Decode.

14:50:02
<transcript>: And we're decoding the row.

14:50:06
<transcript>: No, not the row. We're decoding. The row. Dot. Something.

14:50:11
<transcript>: Row, dot, values.

14:50:18
<transcript>: Okay. So now we have our parsed thing.

14:50:22
<transcript>: I guess I kind of want to call that values now.

14:50:25
<transcript>: Okay.

14:50:25
<transcript>: this we can

14:50:27
<transcript>: This we can kind of be on the same page.

14:50:30
<transcript>: When we're referencing it over here.

14:50:39
<transcript>: I've heard you buy as cool. Yeah, it is cool. It's cool. I just got tired of it taking over, and I want more control in my life. So.

14:50:42
<transcript>: That's that's where we're at.

14:50:42
<transcript>: for

14:50:52
<transcript>: For those who've joined maybe don't have any idea what's going on. We are interacting with plant scales http API. We're kind of reverse engineering their new JavaScript bindings.

14:51:02
<transcript>: And a serverless context. We've got an App Sync API, which is a GraphQL managed service. It's a serverless GraphQL. And we're trying to query data.

14:51:02
<transcript>: in

14:51:07
<transcript>: In our planning field database. We have some sample data in there. We're trying to query it.

14:51:07
<transcript>: without

14:51:22
<transcript>: Without invoking any kind of runtime compute, no Lambda functions, no containers or instances. We're just using VTAL templates, so there's no dependencies. We're just writing these very gnarly detail templates to interact with their.

14:51:24
<transcript>: Http. Api.

14:51:24
<transcript>: so the end result

14:51:26
<transcript>: So the end result is.

14:51:26
<transcript>: graphical

14:51:35
<transcript>: Graphical managed service that has like no maintenance overhead. It's just we define a schema. We hook it up to our Plant Skill database, and now we can query and fetch stuff.

14:51:35
<transcript>: records

14:51:37
<transcript>: Records.

14:51:37
<transcript>: without

14:51:41
<transcript>: Without having any kind of dependencies or runtime stuff to manage. There's no maintenance.

14:51:41
<transcript>: i've said a lot

14:51:45
<transcript>: I've said a lot of same words over and over. That's what we're doing. So we're done right now.

14:51:50
<transcript>: Set values, basics, vertical. So we're kind of like reverse engineering.

14:51:50
<transcript>: this

14:51:56
<transcript>: This this planet scale JavaScript SDK thing.

14:52:00
<transcript>: So we've got values now we're going to need we're gonna do a loop. We're gonna set.

14:52:00
<transcript>: off

14:52:02
<transcript>: Offset.

14:52:04
<transcript>: We'll see row.

14:52:04
<transcript>: and we're

14:52:07
<transcript>: And we're gonna do a new loop.

14:52:10
<transcript>: For.

14:52:16
<transcript>: Reference my VTL stuff here.

14:52:16
<transcript>: for each

14:52:17
<transcript>: For each.

14:52:17
<transcript>: i

14:52:19
<transcript>: I in range.

14:52:19
<transcript>: no

14:52:24
<transcript>: No, we just kind of want to do, like a for loop where we just keep going.

14:52:26
<transcript>: Can I do that.

14:52:26
<transcript>: guess i can't

14:52:27
<transcript>: Guess I can't do that.

14:52:27
<transcript>: i need to

14:52:30
<transcript>: I need to loop in something.

14:52:30
skylercodes: Your $json.rows and $json.columns needs to be $json.result.rows and $json.result.columns _i think_

14:52:43
<transcript>: Well, I'm okay. So I'm I'm looping over the links array, so there is a link Surray.

14:52:43
<transcript>: so

14:52:44
<transcript>: So.

14:52:44
<transcript>: for each

14:52:46
<transcript>: For each.

14:52:49
<transcript>: Link.

14:52:55
<transcript>: In it'll be row.

14:52:55
<transcript>: link

14:52:57
<transcript>: Links.

14:52:57
<transcript>: right

14:52:58
<transcript>: Right.

14:53:04
<transcript>: We're.

14:53:04
<transcript>: going

14:53:06
<transcript>: Going through each of these.

14:53:11
<transcript>: And doing something? What do we doing.

14:53:16
<transcript>: And okay, so here's our loop.

14:53:22
<transcript>: Oh, and if you don't if you're not aware.

14:53:22
<transcript>: vtl

14:53:31
<transcript>: Vtl is the worst at author time. Great runtime characteristics in terms of app sync resolvers, but the author experience authoring experience is bad.

14:53:31
<transcript>: but

14:53:39
<transcript>: But there is there some like murmurs in the wind that AWS is working on typescripts left JavaScript.

14:53:39
<transcript>: resolvers

14:53:44
<transcript>: Resolvers so you can write this in TypeScript. That's what I'm really excited about is to build a Springle. Some TypeScript.

14:53:44
<transcript>: no

14:54:00
<transcript>: No actual node runtime. It's just some TypeScript that ultimately fetches data from data sources. And then this case, a SQL Server masking server, a SQL MySQL managed database through Planet Scale. Okay, so enough trying to lay out what we're doing here.

14:54:00
<transcript>: json

14:54:08
<transcript>: Json. Rose and JSON columns need to be JSON result. Rows, rows, and JSON result.com. I think.

14:54:08
<transcript>: you might be right

14:54:09
<transcript>: You might be right.

14:54:09
<transcript>: json

14:54:13
<transcript>: Json is what harsh JSON contextresolt, body.

14:54:13
<transcript>: you're saying

14:54:21
<transcript>: You're saying JSON. Rose needs to be JSON result rows. Let's look. Here is our Blob of JSON.

14:54:25
<transcript>: Oh, I think you're right? I think you're absolutely right.

14:54:25
<transcript>: rose

14:54:27
<transcript>: Rose is part of result.

14:54:27
<transcript>: because

14:54:34
<transcript>: Because there's session and then there's result. Yeah. You're You're right. Good call. Thank you for the call out.

14:54:37
<transcript>: It'll be context our result.

14:54:43
<transcript>: I could just do. I need anything else from that. I don't need the session. I think I just do this.

14:54:46
<transcript>: Dot result.

14:54:46
<transcript>: i can't

14:54:49
<transcript>: I can't because body has to be parsed first. Okay.

14:54:49
oskrm: you can copy that string to chrome console and parse it?

14:54:53
<transcript>: We found out results.

14:54:57
<transcript>: As a result. Columns. Okay, cool.

14:55:03
<transcript>: So, Kant's, what am I doing? I'm running JavaScript in a VTL template. That's bad.

14:55:08
<transcript>: Okay.

14:55:08
<transcript>: so

14:55:10
<transcript>: So for each link.

14:55:10
<transcript>: in

14:55:14
<transcript>: In row links. We need a.

14:55:17
<transcript>: This is what? Reverse Engineering, right.

14:55:17
<transcript>: a whip

14:55:20
<transcript>: A whip, so set.

14:55:20
<transcript>: set

14:55:21
<transcript>: Set.

14:55:21
<transcript>: width

14:55:23
<transcript>: Width.

14:55:23
<transcript>: equals

14:55:24
<transcript>: Equals.

14:55:27
<transcript>: Parse? Int.

14:55:30
<transcript>: Parse Int. In.

14:55:30
<transcript>: vt

14:55:33
<transcript>: Vtl would be what.

14:55:33
<transcript>: parse

14:55:35
<transcript>: Parse.

14:55:35
<transcript>: json

14:55:36
<transcript>: Json.

14:55:40
<transcript>: If I want to turn a string into a number.

14:55:46
<transcript>: Is number.

14:55:54
<transcript>: Cast? Can I cast? Map list.

14:55:54
<transcript>: time

14:55:55
<transcript>: Time helpers.

14:55:59
<transcript>: Math, string, helpers. Here we go.

14:55:59
<transcript>: normally

14:56:02
<transcript>: Normally. Nope. Not this one.

14:56:05
<transcript>: Math helpers.

14:56:08
<transcript>: Transformation. Maybe that'll be it.

14:56:11
<transcript>: Math round number. Yeah, no, no.

14:56:11
<transcript>: transformation

14:56:14
<transcript>: Transformation helpers that's two dynamics.

14:56:14
<transcript>: okay

14:56:15
<transcript>: Okay.

14:56:18
<transcript>: To Int.

14:56:26
<transcript>: Oh, this better not be the thing that gets us that'd be a bummer. Would that.

14:56:28
<transcript>: Utilities.

14:56:38
<transcript>: Why do I need it to be a number in the first place? Let's look and see what we're getting ready to do next.

14:56:48
<transcript>: Give me that.

14:56:58
<transcript>: Well.

14:57:03
<transcript>: Maybe it's just in the builtin programming stuff. It's not even a utility. Maybe.

14:57:09
<transcript>: Resolver. Let's see operators contact filtering. Can I cast.

14:57:11
<transcript>: Cast.

14:57:15
<transcript>: Let's just do this. App sync.

14:57:15
<transcript>: et

14:57:20
<transcript>: Etl parse int. I don't know.

14:57:24
<transcript>: Oh, here we go.

14:57:33
<transcript>: Indeed. An ugly way. There it is. Integer, not parsant. There we go. We did it. Everybody.

14:57:33
<transcript>: well we did it

14:57:34
<transcript>: Well, we did it.

14:57:39
<transcript>: Paste. Integer. Not Parsons.

14:57:42
<transcript>: We want this to be.

14:57:42
<transcript>: the

14:57:43
<transcript>: The links.

14:57:48
<transcript>: Right. Or maybe not. I don't know. Let's see.

14:58:00
<transcript>: With this parthen's size. So. Yeah, that's the. This is the size we loop through links. Yeah. What's the tin? I don't even remember what's that do. Parsant in JavaScript.

14:58:00
<transcript>: javascript

14:58:04
<transcript>: Javascript. Parse. Int. What is that second number.

14:58:11
<transcript>: Like the base or something. The Radics. Yeah, the base. So doesn't that this is gonna be the default.

14:58:11
<transcript>: this ten maybe

14:58:12
<transcript>: This ten. Maybe.

14:58:17
<transcript>: Default does not always default to ten in retail. It probably does. I don't know.

14:58:17
<transcript>: i'm not worried about it

14:58:18
schrew: yep

14:58:19
<transcript>: I'm not worried about it.

14:58:22
<transcript>: Maybe I should be but I'm not.

14:58:27
<transcript>: Fast forward 1 hour later super obscure bug we can't figure out what's going on. It was this moment.

14:58:27
<transcript>: this is very

14:58:31
<transcript>: This is very moment where I was like now worried about it.

14:58:41
<transcript>: Okay. I need something. I need something on my face. You guys have been looking at my face too long.

14:58:44
<transcript>: Without something on it.

14:58:50
<transcript>: Okay, heart glasses. I love VTS so much.

14:58:51
<transcript>: so these

14:58:54
trash_dev: i got something for your face

14:58:57
<transcript>: So these on my face. Okay, so here's where we're at. So we've got a width. We're parsing it.

14:59:02
<transcript>: Now if if width is less than zero, return null.

14:59:05
<transcript>: Okay.

14:59:10
<transcript>: Everybody's putting stuff on my face now you got something on my face trash.

14:59:18
<transcript>: You really are everywhere you go. You're not safer work like you show up in other people's channels. Still not safe for work. I love it.

14:59:25
<transcript>: A trash have you ever written VTL templates.

14:59:26
trash_dev: trashdevLick

14:59:28
<transcript>: Ever do anything with AWS.

14:59:34
trash_dev: Never

14:59:35
<transcript>: Doing weird stuff right now, but it involves planet scale. You've probably heard of plantscale that's kind of normal.

14:59:35
<transcript>: that's the only norm

14:59:38
<transcript>: That's the only normal part of what I'm doing right now.

14:59:38
trash_dev: Teach me AWS

14:59:41
<transcript>: That with integrator parsing length.

14:59:44
<transcript>: Each UBS you got it trash.

14:59:44
<transcript>: you got it

15:00:04
<transcript>: You got it. So we're doing right now. So what we're trying to do? I'm gonna tell trash. I've told everyone, like, five times because I feel like I'm doing the really weird stuff. I should explain what I'm doing over and over. So people kind of contract along. What we're doing is we've got a planet scale database. You've heard a plant scale? I'm sure we've got a plansfield database with a couple of tables, categories and products just from their quick start.

15:00:07
trash_dev: Yup

15:00:09
<transcript>: And I'm trying to hit it from a GraphQL.

15:00:09
<transcript>: so

15:00:13
<transcript>: So a managed GraphQL service or graphical API.

15:00:13
<transcript>: app

15:00:26
<transcript>: App Sync is an AWS service. It's just serverless GraphQL. So I define a graphical schema, and I say here's my schema, and then I write Resolvers to fetch data for any operations against the API.

15:00:26
<transcript>: so the way i

15:00:31
<transcript>: So the way I write those resolvers could just be a Lambda function. If you're familiar with Lambda functions.

15:00:31
<transcript>: basically

15:00:34
<transcript>: Basically like functions as a service. Run this code.

15:00:34
<transcript>: kind of like an api

15:00:46
trash_dev: 🤣🤣🤣

15:00:52
<transcript>: Kind of like an API route next. Js. I don't know what I don't know what you do, trash. You just do TypeScript, challenges in my world. That's all you do, because I've only been on Twitch for, like two months, so I don't really know what you do. I know you work in Netflix. They use AWS. So maybe you just aren't pretty to all that stuff that they do. I don't know what you do at Netflix. I have so many questions.

15:00:56
<transcript>: So the way you write those resolvers.

15:00:56
<transcript>: you can just

15:01:02
trash_dev: i know a little more than the normal folk but I don’t do it everyday

15:01:06
<transcript>: You can just like hit a Lambda function and fetch your stuff however you want. You can directly integrate with other AWS services like DynamoDB as a database offering it's like a key value database.

15:01:19
<transcript>: Kind of. It's a NoSQL database. I just hate the word no sequel, because it has all these connotations with like, MongoDB. Five years ago, eight years ago, when everyone hated MongoDB. And I still do. But okay, I'm getting off track.

15:01:34
<transcript>: You can also write resolvers that use VTL templates and make http requests so there's no runtime code at all. There's nothing that has code rot like I don't have dependencies going stale, I don't have.

15:01:34
<transcript>: cold starts

15:01:44
<transcript>: Cold starts like you do with functions as a service. Like Lambda. It's just a template. Take my income request, transform it into a template, and then execute that template.

15:01:44
<transcript>: so

15:01:59
<transcript>: So in this case, make an http request to plant scales new http API. Okay, that's a lot of words. Ultimately, the end result is super easy to maintain GraphQL API that I don't have to have any running code or anything.

15:01:59
<transcript>: i need to worry about

15:02:09
<transcript>: I need to worry about. And I'm interacting with my planet scale database. That's what it is for building a little more than the normal folk. But I don't do it everyday. Got it. Okay, then you should have understood all that. I think.

15:02:15
<transcript>: Okay. And this is our app sync. We've got an app Synth API.

15:02:15
<transcript>: that we're playing with

15:02:17
trash_dev: Yeah I’m following

15:02:19
<transcript>: That we're playing with thanks for the Follow, Buck, Dray and Nasca.

15:02:22
<transcript>: Okay. So.

15:02:41
<transcript>: We're just reversing engineering. So Plant Scale announced this JavaScript thing for, like, service environments with JavaScript, it's bindings for JavaScript, and we're kind of reverse engineering it and writing it in VTL and finding out what's possible in VTL along the way, because some of these things I didn't know you could do, like, base 60 40 code. I've never had to do that.

15:02:42
<transcript>: Have a utility for that.

15:02:42
<transcript>: so

15:02:49
<transcript>: So where are we at? We're right here. We just parsed the width. And now if with this less than zero.

15:02:52
trash_dev: is vtl a new thing? Never heard of it

15:02:53
<transcript>: If width is less than zero.

15:02:56
<transcript>: If, how do you do if statements.

15:02:58
<transcript>: If.

15:03:01
<transcript>: Conditional checks.

15:03:02
oskrm: come back to DankAdam nice

15:03:05
<transcript>: If.

15:03:05
<transcript>: thing else

15:03:08
<transcript>: Thing else ends okay so if.

15:03:12
<transcript>: Width is less than zero.

15:03:16
laytanl_: ngl VTL is looking very bad

15:03:16
<transcript>: Then something.

15:03:19
<transcript>: And then.

15:03:26
laytanl_: no dx at all

15:03:31
<transcript>: End, we're gonna bail out early. But what does that mean in this context? Ultimately, at the end of this whole thing, we're gonna return some results. So we're gonna set an array results.

15:03:31
<transcript>: okay

15:03:32
<transcript>: Okay.

15:03:32
<transcript>: it's on a

15:03:36
trash_dev: @laytanl_ yeah im not a fan at a glance lol

15:03:37
<transcript>: It's on a map, right? It's a yeah, it's an actual array. And at the end.

15:03:37
<transcript>: in

15:03:41
<transcript>: In VTL. In these templates, you just like return the thing like this.

15:03:41
<transcript>: sort of

15:03:42
<transcript>: Sort of like.

15:03:42
<transcript>: functional

15:03:43
trash_dev: sounds like typo city

15:03:45
<transcript>: Functional languages like.

15:03:45
<transcript>: elixir

15:03:50
<transcript>: Elixir, I think you do that right. You just name the thing that's, like, return that thing.

15:03:58
<transcript>: So set results as an array. We're going to loop this. In this case, if width is less than zero, we're just going to continue. Is there a continuing loops.

15:03:58
oskrm: @laytanl_ the dx of constantly shooting yourself in the foot

15:04:02
trash_dev: unless there’s a language server for it?

15:04:05
<transcript>: I did see that there's a do while.

15:04:05
<transcript>: should i see that

15:04:07
<transcript>: Should I see that oh, break.

15:04:11
<transcript>: Using the count along with conditionals in the brake statement allows you to do this.

15:04:11
<transcript>: if

15:04:14
laytanl_: Its all just one big string lol

15:04:17
<transcript>: If for each count, grant too. But that would break out of the loop. We don't want to do that. We just want to not do this thing.

15:04:22
trash_dev: cursed

15:04:24
<transcript>: Very common when transforming data, such as for writing a reading from a data source, loop over objects and perform checks.

15:04:24
<transcript>: for forming

15:04:26
<transcript>: For Forming Action Combined socials.

15:04:30
<transcript>: Tried to count.

15:04:30
<transcript>: for each

15:04:32
<transcript>: For each count. Okay.

15:04:35
<transcript>: Plug out value.

15:04:40
<transcript>: I want to see what they said about do while.

15:04:43
<transcript>: There is no do while in lost.

15:04:50
<transcript>: So I think I just need to if with this lesson zero.

15:04:50
<transcript>: i'm going to do nothing

15:04:51
<transcript>: I'm going to do nothing.

15:04:55
<transcript>: We're just gonna literally do nothing, and then we're gonna have an else statement.

15:04:55
<transcript>: right

15:04:56
<transcript>: Right.

15:05:00
<transcript>: So like this.

15:05:00
trash_dev: could parse it in TS 😬

15:05:07
<transcript>: Oh, and then we'll write our actual code here, so it's a little less elegant than what they were doing in JavaScript.

15:05:16
<transcript>: But I think it works. So if width is less than zero, do nothing or I guess I could just we don't need to know this is done. This is dumb.

15:05:16
<transcript>: let's just say if

15:05:18
oskrm: @adamelmore can i get a discount on Animadam?

15:05:19
<transcript>: Let's just say if width is greater than zero. Right.

15:05:23
<transcript>: Then we do stuff. Otherwise we do nothing.

15:05:31
<transcript>: Splice values, substring. Offset offset plus width. This is where they're getting the section of the decoded string.

15:05:31
<transcript>: that

15:05:34
<transcript>: That we're ultimately going to parse.

15:05:34
<transcript>: the casting

15:05:40
<transcript>: The casting is going to be a trick. I don't know how we're gonna do the casting yet, but we'll figure it out right.

15:05:45
<transcript>: We'll figure it out. I think.

15:05:45
<transcript>: i think we'll

15:05:48
<transcript>: I think we'll be able to do this in VTL. I hope.

15:05:48
<transcript>: it would suck to get

15:05:52
<transcript>: It would suck to get to the very end. And like, there's one little thing we can't do.

15:06:00
<transcript>: Can you get a discount on Anim no. But I have infinite points, so I guess I'll do it just for you all.

15:06:00
<transcript>: and i'm adam here

15:06:06
<transcript>: And I'm Adam here guns. 1 million points SLEX in my infinite points, man, I hate this one. So much.

15:06:06
<transcript>: it's

15:06:08
<transcript>: It's just so creepy.

15:06:11
<transcript>: It's just too much for me.

15:06:11
<transcript>: did it

15:06:16
<transcript>: Did it work? Yeah. There it is. I'm a cartoon.

15:06:17
oskrm: LUL

15:06:18
<transcript>: Okay.

15:06:20
trash_dev: that looks scary

15:06:21
<transcript>: Spice so we need substring.

15:06:26
<transcript>: Substring is in the string utilities. I believe.

15:06:29
<transcript>: Will be right here.

15:06:32
<transcript>: No, it is not.

15:06:32
<transcript>: to replace

15:06:34
<transcript>: To replace string helpers.

15:06:39
<transcript>: Surely we can do substring. Right.

15:06:41
laytanl_: That is strange, you are right

15:06:47
<transcript>: Maybe it's just like you index the string.

15:06:49
<transcript>: Maybe.

15:06:51
laytanl_: Imagine coming into the stream now

15:06:52
<transcript>: His string matches log.

15:07:03
<transcript>: Maybe it's not even a helper. Maybe it's just part of programming.

15:07:06
<transcript>: Here, strings.

15:07:06
laytanl_: Looks like that kid from Up

15:07:08
<transcript>: Yeah. Just part of it, right.

15:07:08
<transcript>: and just substring it

15:07:10
<transcript>: And just substring it if you want. Yeah.

15:07:10
<transcript>: subs

15:07:13
<transcript>: Substring. So. Dot. Substring. Okay.

15:07:15
<transcript>: Just like you would expect.

15:07:16
oskrm: Don't call me Shirley

15:07:17
<transcript>: Except.

15:07:17
<transcript>: what

15:07:23
<transcript>: What? Comma. Oh, that's an index. So I'm sure just works, just like the JavaScript one.

15:07:25
<transcript>: Can you just do like.

15:07:27
<transcript>: First.

15:07:29
<transcript>: Let's see.

15:07:29
<transcript>: sub str

15:07:30
<transcript>: Sub. String.

15:07:44
<transcript>: Any Java public class on the string class or public anything on the public string class. So substring and Java that's the other thing this VTL stuff runs.

15:07:44
<transcript>: on the

15:07:51
<transcript>: On the AWS side in a Java context. So it's kind of like you're writing something that works in Java, I guess two and three. Okay, that's fine.

15:08:03
<transcript>: Okay. If with greater than zero, let's go back here. We need to get splice. So we'll say, Oh.

15:08:07
<transcript>: We'll say.

15:08:12
<transcript>: We know how many spaces I'm kind of doing random ones every time I think set.

15:08:12
<transcript>: twice

15:08:14
<transcript>: Twice.

15:08:15
<transcript>: Equals.

15:08:18
<transcript>: Values.

15:08:22
<transcript>: Values substring. So values is actually a thing. Okay.

15:08:22
<transcript>: substring

15:08:24
<transcript>: Substring.

15:08:27
<transcript>: It's going to be offset.

15:08:32
<transcript>: To offset plus width.

15:08:32
<transcript>: plus

15:08:33
<transcript>: Plus.

15:08:33
<transcript>: width

15:08:35
<transcript>: Width. Width. Okay.

15:08:47
<transcript>: So if we have Splice now we can say offset. So set.

15:08:50
<transcript>: Offset.

15:08:53
<transcript>: I'm doing sets all wrong. Do you see this.

15:09:00
<transcript>: I'm gonna do in the whole buffer.

15:09:00
<transcript>: i

15:09:02
<transcript>: I want to do.

15:09:04
<transcript>: String.

15:09:07
<transcript>: Set? Is this how it works.

15:09:07
<transcript>: how do i

15:09:09
<transcript>: How do I replace.

15:09:11
<transcript>: Set.

15:09:17
<transcript>: Dollar sign Set I can't see behind my key. Castor. That treasury nut.

15:09:21
oskrm: :%s

15:09:25
daneoshiga: :%s

15:09:26
<transcript>: Replace with how do I do this? Someone tell me, how do I string replace it's like that. That right. Yeah. So maybe I have to do that.

15:09:28
<transcript>: Set.

15:09:30
<transcript>: Place with.

15:09:30
<transcript>: hash

15:09:33
<transcript>: Hash set could have just done it by now.

15:09:36
<transcript>: Doing wrong.

15:09:36
<transcript>: yeah percent

15:09:38
daneoshiga: start with :, not /

15:09:39
<transcript>: Yeah. Percent s. That's what I did.

15:09:39
<transcript>: oh

15:09:44
<transcript>: Oh, I always put the leading slash. I always do that. Why do I do that.

15:09:47
<transcript>: Wait. No, that's just. That's what it did.

15:09:47
<transcript>: colon

15:09:48
oskrm: ::

15:09:49
<transcript>: Colon, yeah, colon.

15:09:49
<transcript>: i was miss

15:09:52
<transcript>: I was miss like one character. And that's not important, right.

15:09:55
<transcript>: Did it work.

15:09:59
<transcript>: Oh, maybe I don't need to actually escape.

15:10:04
oskrm: remove /

15:10:08
<transcript>: Jeez, what's wrong with me? Start with colon, not start over. Starting over.

15:10:14
<transcript>: Right here. We're gonna do colon.

15:10:15
<transcript>: Percent.

15:10:16
daneoshiga: your first character should be :

15:10:16
laytanl_: You can also visual mode select it, and then ':s/replace/with'

15:10:17
<transcript>: S.

15:10:24
<transcript>: And then we're gonna say, Dollar sign.

15:10:24
<transcript>: set

15:10:27
<transcript>: Set. Perfect. We're there.

15:10:27
<transcript>: replace

15:10:27
trash_dev: loll

15:10:28
<transcript>: Replace with.

15:10:28
<transcript>: hash

15:10:30
<transcript>: Hash set.

15:10:32
<transcript>: Global.

15:10:43
<transcript>: I can visual select and then do the S replacement. That's cool. Okay. We did it. We did it, everybody.

15:10:48
<transcript>: Okay. I could just do it right for some that we could set.

15:10:51
oskrm: perfecto

15:10:52
<transcript>: Spice So we're gonna say, Set, offset.

15:10:54
<transcript>: Equals.

15:10:56
<transcript>: Offset.

15:10:56
<transcript>: plus

15:10:58
<transcript>: Plus.

15:10:58
<transcript>: width

15:10:59
<transcript>: Width.

15:11:03
<transcript>: Then we're gonna add slice.

15:11:03
<transcript>: to

15:11:04
<transcript>: To our.

15:11:07
<transcript>: Results. Right.

15:11:11
<transcript>: Which is like.

15:11:11
<transcript>: result

15:11:17
<transcript>: Results? I'm gonna say it's push but I think I'm wrong splice. Let's see.

15:11:24
<transcript>: Set add. I want to do add.

15:11:26
<transcript>: Right.

15:11:30
<transcript>: So if it's a set and add.

15:11:30
<transcript>: an array

15:11:33
<transcript>: An array. What would Fed do.

15:11:40
<transcript>: Oh, put on a put. No array. Add. Yeah, that's fine. Okay.

15:11:41
<transcript>: Results.

15:11:41
<transcript>: dot

15:11:43
<transcript>: Dot.

15:11:45
<transcript>: Add.

15:11:48
<transcript>: Okay.

15:11:48
<transcript>: so far

15:11:51
<transcript>: So far we've got our results. Now.

15:11:51
<transcript>: we're not parsing

15:11:52
<transcript>: We're not parsing them.

15:11:52
<transcript>: do

15:11:55
<transcript>: Do I need to.

15:11:55
<transcript>: yeah because

15:11:58
<transcript>: Yeah, because these are just the values.

15:12:03
<transcript>: These are just the values. Now I have to actually go through and do like the.

15:12:03
<transcript>: i have to

15:12:08
<transcript>: I have to create a map, so I have to take the keys and add the values right.

15:12:16
<transcript>: So this is gonna get a little gnarly. So at this point, once we've decoded the row.

15:12:16
<transcript>: they go through

15:12:19
<transcript>: They go through all the fields and they create.

15:12:19
<transcript>: a map object

15:12:20
<transcript>: A map object.

15:12:20
<transcript>: yeah this

15:12:26
<transcript>: Yeah, this is gonna be kind of no fun. I've got a P really bad again, so I'll be right back.

15:15:21
<transcript>: All right.

15:15:24
<transcript>: Just gonna go around back to it. I know.

15:15:24
<transcript>: i come

15:15:29
<transcript>: I come back and break and like we talk for a little bit or whatever. But now.

15:15:33
<transcript>: Cronberg thanks for following.

15:15:33
<transcript>: appreciate that

15:15:35
<transcript>: Appreciate that.

15:15:37
<transcript>: Also.

15:15:37
<transcript>: tech three

15:15:39
<transcript>: Tech, Three, text.

15:15:48
<transcript>: Three. Okay, so we're where are we? We've got results and splice. So result is an array of.

15:15:48
<transcript>: values

15:15:54
<transcript>: Values. But we need to take that array, and we need to go through here like this.

15:15:54
<transcript>: to turn

15:15:58
<transcript>: To turn this into an actual row. So okay, let's go over here and let's say.

15:16:00
<transcript>: Set.

15:16:03
<transcript>: Row equals.

15:16:03
<transcript>: the map

15:16:05
<transcript>: The map. Okay.

15:16:10
<transcript>: No, sorry. Rows is an array.

15:16:16
<transcript>: Each row.

15:16:19
<transcript>: I already have rows.

15:16:22
<transcript>: It's the rows. I'm gonna return.

15:16:26
<transcript>: Results was not the thing. I'm going to return down here. I did that wrong.

15:16:34
<transcript>: Well, okay. Result will be the thing we return, but we're gonna also have a set.

15:16:40
<transcript>: What do we call them? Spices? Values where they have values, don't we radio values.

15:16:43
<transcript>: Lyric values down there.

15:16:52
<transcript>: Row values? I don't know. I'm feeling very uninspired about that. But row values.

15:16:56
<transcript>: Okay.

15:16:58
<transcript>: Call them slices.

15:17:01
<transcript>: An array of splice.

15:17:08
<transcript>: Variables. Okay. So we have all our row values. Now we need to go for each.

15:17:11
<transcript>: For each thing.

15:17:11
<transcript>: in

15:17:12
<transcript>: In.

15:17:15
<transcript>: Row, values.

15:17:17
<transcript>: Yeah.

15:17:21
<transcript>: Or each how this works.

15:17:24
<transcript>: Row, in.

15:17:24
<transcript>: row

15:17:26
<transcript>: Row, values.

15:17:39
<transcript>: I do need like Dollar sign in pizza. Really don't want to have a it's really hard to write detail. You have no syntax highlighting of nothing.

15:17:39
<transcript>: just alone

15:17:41
<transcript>: Just alone in the dark.

15:17:41
<transcript>: writing text

15:17:42
<transcript>: Writing text.

15:17:53
<transcript>: And it sucks when you break it and you have to go and figure out what's going on. So for each row in row values, we need to decode the row the way they're doing that way. I already did that. What am I talking about.

15:17:53
<transcript>: parse

15:17:57
<transcript>: Parse Field. Rose Rosemap parsero.

15:18:04
<transcript>: Here. We decoded the row, and then we go through the fields, right.

15:18:10
<transcript>: So for each row in row values, I could have just done this in the first loop. I guess.

15:18:13
<transcript>: Like once we have the row valves.

15:18:13
<transcript>: then

15:18:16
<transcript>: Then I don't have to do all this nonsense.

15:18:30
<transcript>: Up here. We don't have roboties anymore. We can just say, okay, we have our splice. Let's do stuff with it.

15:18:35
<transcript>: Right.

15:18:35
<transcript>: wait

15:18:37
<transcript>: Wait.

15:18:37
<transcript>: ow

15:18:40
<transcript>: Ow. That was actually something. Splice.

15:18:43
<transcript>: Yes. Okay.

15:18:49
<transcript>: So what do I want to do with Splice? Is basically row, right here. This row is what Spice is.

15:18:56
<transcript>: We want to go through each field. So here, at this point, we're gonna go through each field.

15:18:59
<transcript>: So for each.

15:19:01
<transcript>: Field.

15:19:01
<transcript>: in

15:19:03
<transcript>: In.

15:19:03
<transcript>: columns

15:19:05
<transcript>: Columns. I guess those are columns.

15:19:11
<transcript>: Where do the fields come from? Anyone else? Why would anyone know? You guys aren't paying attention.

15:19:12
<transcript>: Fields.

15:19:12
<transcript>: result

15:19:15
<transcript>: Result fields. Okay.

15:19:19
<transcript>: Headers Result Result fields.

15:19:22
<transcript>: Interesting.

15:19:24
<transcript>: Did we see that in our result here.

15:19:34
<transcript>: Result. Yeah. Fields. Okay. So there's our fields there in a row with a name and a type and a table and an.org table.

15:19:34
<transcript>: and

15:19:36
<transcript>: And a data test.

15:19:36
<transcript>: what

15:19:38
<transcript>: What.

15:19:38
<transcript>: oh no

15:19:40
<transcript>: Oh, no database.

15:19:40
<transcript>: and

15:19:42
<transcript>: And an.org name.

15:19:42
<transcript>: okay

15:19:46
<transcript>: Okay. There's a lot of things on the fields. I don't know if I need all those things on the field.

15:19:49
<transcript>: What do I need on the field.

15:19:54
<transcript>: We go through here. Fields, reduce.

15:19:54
<transcript>: field names

15:19:56
<transcript>: Field names.

15:20:02
<transcript>: And we cast the field based on the type. Probably.

15:20:02
<transcript>: field

15:20:03
<transcript>: Field.

15:20:03
<transcript>: yeah field

15:20:06
<transcript>: Yeah. Field type. Okay. Okay.

15:20:06
<transcript>: we're good

15:20:08
<transcript>: We're good. We got this. I think.

15:20:14
<transcript>: I don't know how if we can do a switch statement.

15:20:18
<transcript>: We might have to just do a big ugly conditional thing.

15:20:20
<transcript>: Which.

15:20:22
<transcript>: No switch statements.

15:20:22
<transcript>: no kind of

15:20:29
<transcript>: No kind of luxuries like that in VTL Land, right? It didn't just. It's not just slow, right? No. Okay.

15:20:33
<transcript>: For each field in.

15:20:33
<transcript>: field

15:20:37
<transcript>: Field? What was columns? What did? What was columns.

15:20:41
<transcript>: Anything. Is there such thing as columns? No, it was always fields.

15:20:41
<transcript>: it was

15:20:45
<transcript>: It was fields all along, columns.

15:20:45
<transcript>: no there's no

15:20:46
<transcript>: No, there's no cost.

15:20:46
<transcript>: there's fields

15:20:49
<transcript>: There's fields, there's rose and there's.

15:20:56
<transcript>: So up here, this is gonna be fields.

15:20:56
<transcript>: and

15:21:00
<transcript>: And this is gonna be fields.

15:21:00
<transcript>: with

15:21:03
<transcript>: With an dollar sign.

15:21:15
<transcript>: Okay really hope this works. I want to lead you on this journey and then find out there's something we can't do in VTL. I think we can do it all though I don't see anything so far that we can't do.

15:21:15
<transcript>: for each field

15:21:17
<transcript>: For each field in fields.

15:21:22
kylecurtisdev: Hello

15:21:27
<transcript>: So what are we gonna do in here? We're going to.

15:21:37
<transcript>: Get the field name.

15:21:42
<transcript>: So the question is can I set our map so we need to create a map.

15:21:49
<transcript>: Let's see here. We're going to create a map for this row to set.

15:21:49
<transcript>: row mat

15:21:50
<transcript>: Row, mat.

15:21:50
<transcript>: equals

15:21:54
<transcript>: Equals this. This is where we'll be setting properties on. Okay.

15:21:54
<transcript>: and then

15:21:57
<transcript>: And then ultimately we're going to add.

15:22:02
<transcript>: After we add all the values to that map, we're going to do.

15:22:05
<transcript>: We're going to do what.

15:22:05
<transcript>: result

15:22:07
<transcript>: Results.

15:22:09
<transcript>: Add.

15:22:13
<transcript>: Romap. Okay.

15:22:13
<transcript>: hear me

15:22:17
<transcript>: Hear me out results is really like our.

15:22:19
<transcript>: Collection of rows.

15:22:19
<transcript>: we're returning

15:22:21
<transcript>: We're returning at the end.

15:22:25
<transcript>: Results Add ROMAP.

15:22:31
<transcript>: And here we just need to build up this roadmap.

15:22:33
<transcript>: And.

15:22:41
<transcript>: So we build up this roadmap here by adding the parsed values from our slice.

15:22:41
<transcript>: remember

15:22:48
<transcript>: Remember, slice is in array. No, it's not. Splice is the actual value right.

15:22:48
<transcript>: yeah

15:22:49
<transcript>: Yeah.

15:22:52
<transcript>: Wait a minute. We're going through rows.

15:22:55
<transcript>: And then split.

15:22:58
<transcript>: Is greater than zero.

15:22:58
<transcript>: wait

15:23:03
<transcript>: Wait, wait. No. I did this. Too far. Out.

15:23:03
<transcript>: romap

15:23:05
<transcript>: Romap is gonna go.

15:23:10
<transcript>: I did this wrong.

15:23:13
<transcript>: Parse.

15:23:13
<transcript>: you take

15:23:18
<transcript>: You take fields. You take rows. You map each row. You parse the row.

15:23:23
<transcript>: Small kind of backwards. It's out of order. So row, decode. Row.

15:23:23
<transcript>: and then you have

15:23:26
<transcript>: And then you have what is row.

15:23:29
<transcript>: Decode, row, returns.

15:23:31
<transcript>: The.

15:23:31
<transcript>: an array of the

15:23:35
<transcript>: An array of the values. Okay. So we could say.

15:23:39
<transcript>: We could say we want to put those all.

15:23:39
<transcript>: in

15:23:40
<transcript>: In.

15:23:44
<transcript>: Yeah. I think I want to do this. So each row.

15:23:46
<transcript>: Offset now on.

15:23:46
<transcript>: set

15:23:48
<transcript>: Set.

15:23:52
<transcript>: Hello, Kyle. Curtis, Dev. Welcome.

15:23:54
<transcript>: Welcome, welcome, welcome, welcome, welcome, welcome, welcome.

15:23:58
<transcript>: Check out kind of quiet because we're running VTL, and then I don't know what's going on.

15:23:58
<transcript>: that's basically

15:24:01
<transcript>: That's basically what's happening right now. I think.

15:24:01
<transcript>: set

15:24:02
<transcript>: Set.

15:24:09
<transcript>: When I value parsed parse values is going to be an array. I'm going to push.

15:24:09
<transcript>: each

15:24:17
<transcript>: Each of the parse values here. So after with zero. Ok. We have slice. We set off set.

15:24:17
<transcript>: and we're

15:24:19
<transcript>: And we're going to.

15:24:24
<transcript>: Parse Nope parse values add.

15:24:24
<transcript>: the

15:24:27
<transcript>: The slice. Okay.

15:24:29
<transcript>: At this point.

15:24:31
<transcript>: We're.

15:24:38
<transcript>: Going to loop a separate loop. So I got to get out of here. So this.

15:24:41
<transcript>: Stuff.

15:24:41
<transcript>: all comes

15:24:43
<transcript>: All comes out.

15:24:44
<transcript>: We're gonna paste it.

15:24:47
<transcript>: Here.

15:24:47
<transcript>: no

15:24:49
<transcript>: No.

15:24:51
<transcript>: Okay.

15:24:56
<transcript>: Keep just keeping patient. You guys doing great.

15:25:03
<transcript>: At the end of this, we're gonna have a pretty cool thing. I'm pretty excited about it. Get out here. Keycaster.

15:25:07
<transcript>: Okay. So at the end of this.

15:25:07
<transcript>: we're gonna have

15:25:08
oskrm: is it too late to rm -rf? LUL

15:25:11
<transcript>: We're gonna have a row map. So we go through each field.

15:25:14
<transcript>: And we're gonna need an index for the fields.

15:25:20
<transcript>: Do we have an index? By default, the field index exists. Probably not.

15:25:24
<transcript>: Our fields. I think it does. Fields. Index. Did I see that.

15:25:30
<transcript>: See loops.

15:25:34
<transcript>: I think we get like an index. We can reference.

15:25:38
<transcript>: No.

15:25:42
<transcript>: Any more room.

15:25:48
<transcript>: Loop variable.

15:25:52
<transcript>: I.

15:25:59
<transcript>: Think we get the index somewhere. Where was that.

15:26:02
<transcript>: Programming.

15:26:09
<transcript>: List helpers.

15:26:14
<transcript>: I just saw that somewhere. Where did I see that.

15:26:25
<transcript>: Maybe it wasn't here. Loops.

15:26:30
<transcript>: Index. There we go.

15:26:30
<transcript>: nope

15:26:32
<transcript>: Nope. That's a string index.

15:26:42
<transcript>: Before each.

15:26:49
<transcript>: Additional check. Here we go, here we go, here we go. This is where it was.

15:26:52
<transcript>: Right.

15:26:57
<transcript>: Right? Yeah. Array size. Now.

15:27:06
<transcript>: There's more loops and conditions. Got. This is where it was for each count.

15:27:12
<transcript>: That gives you what pressure to count on each item.

15:27:14
<transcript>: Is that like the index.

15:27:18
<transcript>: Now.

15:27:20
<transcript>: Entry.

15:27:20
<transcript>: key

15:27:22
<transcript>: Key entry value.

15:27:26
<transcript>: Is count supposed to be.

15:27:29
<transcript>: For each count.

15:27:32
<transcript>: So see the index.

15:27:39
<transcript>: For example, maybe you want to just pick up values and math is under certain size. Using the catalog conditionals. The brake signal allows you to do this.

15:27:42
<transcript>: Okay. Maybe not.

15:27:46
<transcript>: With account on each item.

15:27:48
<transcript>: Index.

15:27:50
<transcript>: Equals I.

15:27:53
<transcript>: For each count.

15:28:03
<transcript>: I feel like they mean like an index here. Anyone can get a sense.

15:28:03
<transcript>: is it

15:28:07
<transcript>: Is it too late to rim wrap delete the whole thing.

15:28:07
<transcript>: yes

15:28:10
oskrm: that's really ugly

15:28:11
<transcript>: Yes, it's too late. We're so close, we're almost done.

15:28:11
<transcript>: oh esk

15:28:16
<transcript>: Oh, eskr. It's really ugly. Yeah, I know. Details. It's the worst. I did it.

15:28:16
<transcript>: i get it

15:28:19
<transcript>: I get it, but the runtime benefits.

15:28:19
<transcript>: great

15:28:20
<transcript>: Great.

15:28:25
<transcript>: In the maintenance benefits, you know. So up here we have.

15:28:28
<transcript>: Parsed values.

15:28:34
<transcript>: We slice added to the now we have our parsed values, and we have our fields.

15:28:38
<transcript>: So we can go through each field in fields.

15:28:38
<transcript>: i guess i can

15:28:41
<transcript>: I guess I can keep track of the index manually. I just was trying not to.

15:28:41
<transcript>: for

15:28:44
<transcript>: For each count.

15:28:44
<transcript>: this is on

15:28:46
<transcript>: This is on each item.

15:28:51
<transcript>: Like right. That would mean.

15:29:01
<transcript>: We add it. Yeah. It seems like it's like the index, which is kind of weird. And I also don't know if it's zero base.

15:29:07
<transcript>: Is it zero based.

15:29:09
oskrm: you can just do $i = 0 and increment?

15:29:14
<transcript>: Let's say VTL VTL for each count.

15:29:23
<transcript>: That works for me.

15:29:31
<transcript>: What.

15:29:41
<transcript>: I know that the four each loop has a built in variable called counter, though in the guide they do refer to for each count.

15:29:41
<transcript>: i just

15:29:43
<transcript>: I just wonder if it starts out at zero.

15:29:49
<transcript>: Yeah. This person's asking.

15:29:57
<transcript>: Index and count.

15:30:00
<transcript>: One base. Okay, so I just subtract one from it.

15:30:04
<transcript>: We'll just subtract one from it. What could go wrong.

15:30:12
<transcript>: Yeah, we could just do an I equal zero increment. That's right, SKR. But this would be cooler. I don't know.

15:30:15
<transcript>: Cooler's? Better? Right.

15:30:17
<transcript>: For each field.

15:30:17
<transcript>: we've got

15:30:20
<transcript>: We've got this row map. We're gonna be adding.

15:30:26
<transcript>: We're gonna be adding something. Thanks for the follow Cronberg. I don't know if I saw that. Did I see that you saw it.

15:30:28
<transcript>: Field. Infields.

15:30:33
<transcript>: Reduce. So we set the row map, field name.

15:30:33
<transcript>: to

15:30:38
<transcript>: To cast the field and we get the value from here.

15:30:38
<transcript>: so

15:30:40
<transcript>: So let's do this.

15:30:44
<transcript>: Nope.

15:30:46
<transcript>: This is going to be set.

15:30:51
<transcript>: A field value equals.

15:30:55
<transcript>: Fields. Okay.

15:30:55
<transcript>: no sorry

15:30:56
<transcript>: No, sorry.

15:31:00
<transcript>: What was it? Parsed, values.

15:31:04
<transcript>: Yeah? Parsed? Values.

15:31:04
<transcript>: and then the

15:31:06
<transcript>: And then the index is going to be.

15:31:10
<transcript>: For each. This is so weird.

15:31:11
<transcript>: For each.

15:31:15
<transcript>: Dot.

15:31:15
<transcript>: count

15:31:23
<transcript>: Count. It says there's a dot index, but then I'll mention it. Let's just try it. We'll try it. It'll tell us if it doesn't work pretty quickly. When we upload the template.

15:31:27
<transcript>: Set field value equals parts values the index.

15:31:30
<transcript>: Because we're going through each field. This is what they're doing.

15:31:30
<transcript>: that

15:31:33
<transcript>: That's our field value. And then we're gonna say.

15:31:33
<transcript>: set

15:31:35
<transcript>: Set.

15:31:37
ajukraine: anyone else can hear “it’s corn” tiktok trend when look at thhe NeoVim?))

15:31:42
<transcript>: So I need to I need to cast it. So we need to do the cast. We'll figure that in a second. Now, I'm gonna say.

15:31:45
<transcript>: Romap.

15:31:45
<transcript>: set

15:31:45
ajukraine: like “it’s viiiiim”

15:31:49
<transcript>: Set and the name is going to be sealed.

15:31:49
<transcript>: name

15:31:51
<transcript>: Name.

15:31:55
<transcript>: And the value is going to be field value.

15:32:09
<transcript>: Thing. And I know the ticket trim. It's corn.

15:32:12
<transcript>: Okay.

15:32:17
<transcript>: So this should be everything except for the cast.

15:32:17
<transcript>: okay

15:32:18
<transcript>: Okay.

15:32:18
<transcript>: this is

15:32:20
<transcript>: This is not casting.

15:32:25
<transcript>: We just need a cast.

15:32:25
<transcript>: based on

15:32:26
<transcript>: Based on.

15:32:32
<transcript>: The logic. We look at the field type it's either an Int.

15:32:32
<transcript>: or a fl

15:32:36
<transcript>: Or a float or a JSON value.

15:32:38
<transcript>: Or.

15:32:41
<transcript>: Oh no.

15:32:44
<transcript>: Decode. This is like recursive.

15:32:49
<transcript>: No, no. If it's JSON you have to.

15:32:49
<transcript>: what is

15:32:50
<transcript>: What is decode.

15:32:55
<transcript>: Hex JS with what is that.

15:33:02
<transcript>: Decode.

15:33:04
<transcript>: Decoder.

15:33:05
ajukraine: https://youtube.com/shorts/4yzV-rZybZA?feature=share

15:33:07
<transcript>: Human array.

15:33:12
<transcript>: Well, we're not gonna be JSON fields in this database. We would have to solve this.

15:33:12
<transcript>: if we did

15:33:13
<transcript>: If we did.

15:33:18
<transcript>: In our case that it's a very simple structure. Right. We just have.

15:33:19
ajukraine: 😅

15:33:20
bebenzer: hello! what is this weird string you re building?

15:33:23
<transcript>: What do we have? Name is a string. String, string and an Int. Okay.

15:33:23
<transcript>: so

15:33:24
<transcript>: So.

15:33:24
<transcript>: we're good

15:33:26
<transcript>: We're good.

15:33:37
<transcript>: What is this weird string? Your buildings. Welcome to Chat that in the Binzer. This weird string is VTL and we're trying to build.

15:33:37
<transcript>: an app sync

15:33:46
llcoolchris_: @bebenzer Oh yo

15:33:48
<transcript>: An app sync Resolver, then AWS app sync Resolver that connects directly to Planet Skills new http API something I want to play with for a while and I just decided to do it on street today.

15:33:54
<transcript>: So we're not gonna decode JSON, we're gonna ignore. We don't have any JSON types.

15:33:54
<transcript>: binary

15:33:57
<transcript>: Binary would just be return the value.

15:33:57
<transcript>: default

15:33:59
<transcript>: Default. We decode.

15:34:09
<transcript>: We're gonna have a bunch of VAR cars. Are those here? Oh, no, those are default.

15:34:09
<transcript>: so

15:34:12
<transcript>: So we have to do this for strings.

15:34:14
bebenzer: hey @LLCoolChris_

15:34:16
<transcript>: We have to do the decode thing.

15:34:21
<transcript>: What is the decode thing? Decoder. Text. Decoder.

15:34:23
<transcript>: Okay.

15:34:26
<transcript>: So how do we decode.

15:34:26
<transcript>: a

15:34:29
<transcript>: A U Int eight array.

15:34:35
<transcript>: String helpers maybe.

15:34:39
<transcript>: Utilities. Maybe.

15:34:47
<transcript>: Url. Encode base 64. Decode.

15:34:50
<transcript>: decodes

15:34:51
<transcript>: Decodes.

15:34:51
<transcript>: so

15:34:54
<transcript>: So you're telling me this is going to be an array.

15:34:56
<transcript>: Of something.

15:34:56
<transcript>: of

15:34:58
<transcript>: Of what.

15:35:03
<transcript>: Let's just see what happens when we don't cast it.

15:35:11
<transcript>: Let's just see if we just return the values as they are what's it gonna do? What's that roadmap gonna be.

15:35:11
<transcript>: let's just save it

15:35:12
<transcript>: Let's just save it.

15:35:15
<transcript>: Let's deploy it.

15:35:22
<transcript>: I really don't know what I'm expecting to work here or what I'm expecting to happen.

15:35:26
<transcript>: Okay.

15:35:30
<transcript>: Did we do it? It filled this. The point.

15:35:43
<transcript>: There's so many things that could break here that makes it even sweeter? If it works.

15:35:45
<transcript>: It'll just be that much better.

15:35:45
<transcript>: if and when it

15:35:47
<transcript>: If and when it works.

15:35:51
<transcript>: Okay.

15:35:53
<transcript>: It's done.

15:35:56
<transcript>: Let's try it.

15:36:02
<transcript>: Okay lexical Air encountered a plus after that.

15:36:02
<transcript>: at

15:36:04
<transcript>: At unset. Okay.

15:36:06
<transcript>: Logs.

15:36:15
<transcript>: Right here.

15:36:19
<transcript>: So I need to make sure not to leak a secret here.

15:36:19
<transcript>: but

15:36:23
<transcript>: But we want to look at the response mapping.

15:36:23
<transcript>: right

15:36:25
<transcript>: Right here.

15:36:28
<transcript>: Okay. There's the body.

15:36:33
<transcript>: And the error encountered plus after.

15:36:33
<transcript>: all

15:36:35
<transcript>: All the escaping.

15:36:39
<transcript>: At Unset line 15, column.

15:36:41
<transcript>: 59.

15:36:45
<transcript>: So Line 15.

15:36:48
<transcript>: Of this template here.

15:36:55
<transcript>: Something like this one. Oh, plus, right here. So I did this. The mass operation wrong.

15:36:55
<transcript>: offset

15:36:57
<transcript>: Offset equals Offset plus.

15:36:57
<transcript>: let's do this

15:37:02
<transcript>: Let's do this app sync VTL Increment. Number.

15:37:10
<transcript>: One. How do I do that with Math? Yeah. No, it's a mutation.

15:37:14
<transcript>: I don't want that I want.

15:37:14
<transcript>: vtl

15:37:17
<transcript>: Vtl people VTL.

15:37:22
<transcript>: Vtl.

15:37:24
<transcript>: Programming guide.

15:37:29
<transcript>: So just the basic.

15:37:32
<transcript>: Rule calling methods variables.

15:37:35
<transcript>: How do I just increment.

15:37:41
<transcript>: Increments.

15:38:01
<transcript>: Utilities helpers. I shouldn't have to use math helpers just to add two numbers. Right.

15:38:06
<transcript>: I'm just trying to understand the basics of programming.

15:38:09
<transcript>: Programming with VTL.

15:38:12
<transcript>: Ad.

15:38:23
<transcript>: Okay. Here we go. Operators? Here we go.

15:38:26
<transcript>: Plus.

15:38:26
<transcript>: so

15:38:28
<transcript>: So set Z equals.

15:38:28
<transcript>: x plus

15:38:31
<transcript>: X plus Y. What's wrong with this.

15:38:33
<transcript>: So many things that could be wrong with this actually.

15:38:39
<transcript>: But what specifically if with is greater than zero.

15:38:45
<transcript>: Do I need to.

15:38:49
<transcript>: Set offset. So offset already exists. I'm just trying to override it.

15:38:59
<transcript>: Do I need to QR. Whenever I add stuff to a map? Maybe.

15:39:04
<transcript>: Maybe partially parse values is an array though should be able to do that right.

15:39:09
<transcript>: What was the air, exactly.

15:39:09
<transcript>: encountered

15:39:11
<transcript>: Encountered plus.

15:39:11
<transcript>: after

15:39:12
<transcript>: After.

15:39:14
<transcript>: A quote.

15:39:20
<transcript>: At unsettling.

15:39:33
<transcript>: Oh, it might actually be on this line. Offset. So substring offset plus.

15:39:33
<transcript>: width

15:39:34
<transcript>: Width.

15:39:38
<transcript>: Values.

15:39:42
<transcript>: Is values? A string? Yeah.

15:39:42
<transcript>: so subscribe

15:39:44
<transcript>: So Subscribe.

15:39:44
<transcript>: offset

15:39:48
<transcript>: Offset and then offset plus width.

15:40:07
<transcript>: Set.

15:40:15
<transcript>: Plus.

15:40:15
<transcript>: wit

15:40:19
<transcript>: Wit is either these string.

15:40:23
<transcript>: Width is integer parsant.

15:40:23
<transcript>: offset

15:40:27
<transcript>: Offset is already a number of here, right? Yeah.

15:40:29
<transcript>: So.

15:40:31
<transcript>: Then we're going to make this one.

15:40:38
<transcript>: End. Okay, substring offset. And we'll show that.

15:40:42
<transcript>: And then I'm trying to set off, set.

15:40:42
<transcript>: to be

15:40:45
<transcript>: To be offset plus width.

15:40:50
<transcript>: Oh, is this actually some white space.

15:40:50
<transcript>: i don't know if

15:40:52
<transcript>: I don't know if that's okay.

15:41:00
<transcript>: But also have like a tab character in here or something.

15:41:13
<transcript>: Like that. Okay, let's save that.

15:41:13
<transcript>: let's try to play

15:41:14
<transcript>: Let's try to play again.

15:41:21
<transcript>: Hope this works.

15:41:21
<transcript>: i hope we're able

15:41:23
<transcript>: I hope we're able to do this.

15:41:38
<transcript>: We're really close. I mean, we're getting data out of the Http API. We're just not transforming it into what graph Kill needs it to be what app Sync needs it to be.

15:41:43
<transcript>: That's what we're trying to do right now.

15:41:43
<transcript>: and

15:41:45
<transcript>: And it's a bit complicated.

15:41:53
<transcript>: Let's actually decode this real quick. I want to see what the value looks like.

15:42:08
<transcript>: 64 decode.

15:42:17
<transcript>: What? One ballpoint? Pin? I'm sorry. What.

15:42:26
<transcript>: Oh, that's the data that's actually in that thing, isn't it.

15:42:26
<transcript>: let's

15:42:29
<transcript>: Let's do Select.

15:42:33
<transcript>: Disabled for production branches. Really.

15:42:36
<transcript>: Well let's do about that.

15:42:36
<transcript>: look at the

15:42:38
<transcript>: Look at the data.

15:42:40
<transcript>: Console.

15:42:40
<transcript>: go

15:42:44
<transcript>: Go to settings. Enable production branch console. Okay.

15:42:48
<transcript>: Allow webcut. Yeah. Let's do that.

15:42:48
<transcript>: i see what

15:42:50
<transcript>: I see what they're doing. That makes sense.

15:42:50
<transcript>: but

15:42:52
<transcript>: But.

15:42:55
<transcript>: Also I'd like to do it so.

15:42:57
<transcript>: Branches.

15:43:01
<transcript>: Branches Main console.

15:43:07
<transcript>: Select all I think that's actually the data select all from.

15:43:07
<transcript>: products

15:43:08
<transcript>: Products.

15:43:18
<transcript>: Yeah. One ballpoint pin. And then that example. Okay. So that's actually the data. It just kind of caught me off guard. When I see this, I'm like, what in the world is going on.

15:43:19
<transcript>: Okay.

15:43:19
<transcript>: so i don't

15:43:24
<transcript>: So I don't know why we'd have to cast those strings. I think they could just be strings.

15:43:24
<transcript>: and if i

15:43:30
<transcript>: And if I look at the code harder, I'd probably understand. Okay. We deployed. Let's test it again.

15:43:36
<transcript>: Invoking method get.

15:43:36
<transcript>: an array list

15:43:39
<transcript>: An array list at velocity line. Okay.

15:43:39
<transcript>: that's new

15:43:41
<transcript>: That's new. A new failure.

15:43:41
<transcript>: feels good

15:43:43
<transcript>: Feels good.

15:43:43
<transcript>: so

15:43:46
<transcript>: So error invoking method get.

15:43:46
<transcript>: in java

15:43:54
<transcript>: In Java Util array list at velocity 24, column 38. So this is line One. I think this is probably line one.

15:43:54
<transcript>: twenty

15:43:59
<transcript>: 24. Is ROMAP Set Seal Name Field value.

15:44:03
<transcript>: Column 38.

15:44:10
<transcript>: 38.

15:44:10
<transcript>: no

15:44:12
<transcript>: No, it's this one.

15:44:15
<transcript>: So we're not able to get.

15:44:15
<transcript>: for each

15:44:18
<transcript>: For each index. Okay, so that this was wrong.

15:44:21
<transcript>: Let's try for each count.

15:44:21
<transcript>: minus

15:44:24
<transcript>: Minus one. Okay.

15:44:31
<transcript>: We're going out on the limb. We're trying stuff. We could just keep track of the index ourselves, but I don't know. Sounds boring.

15:44:37
<transcript>: Want to explore VTL.

15:44:37
<transcript>: wind

15:44:40
<transcript>: Window all that's different secrets.

15:44:52
<transcript>: We could do CDK watch and every time we save this file, it would redeploy.

15:44:54
<transcript>: That's the kind of like.

15:44:54
<transcript>: fast

15:44:56
<transcript>: Fastest you can get.

15:44:56
<transcript>: your

15:44:57
<transcript>: Your.

15:45:04
<transcript>: Feedback loop to be with CDK and with cloud stuff. One that was all cloud stuff. There's faster things.

15:45:07
<transcript>: Okay.

15:45:07
<transcript>: let's

15:45:09
<transcript>: Let's try again.

15:45:13
<transcript>: Encountered something after something.

15:45:13
<transcript>: line

15:45:15
<transcript>: Line 24 55.

15:45:15
<transcript>: i told you the size

15:45:17
<transcript>: I told you the size.

15:45:17
<transcript>: sucks

15:45:20
<transcript>: Sucks real bad. You know what though.

15:45:22
<transcript>: Mapping tool.

15:45:24
<transcript>: There's a tool for this.

15:45:27
<transcript>: Sign in.

15:45:33
<transcript>: Api F sync. Okay.

15:45:33
<transcript>: there's

15:45:38
<transcript>: There's a tool for this. We can paste our template in here.

15:45:40
<transcript>: So let's do.

15:45:43
<transcript>: Let's do.

15:45:47
<transcript>: Just copy all this.

15:45:50
<transcript>: Like that.

15:45:53
<transcript>: Let's paste it over here.

15:45:54
<transcript>: Right.

15:45:54
<transcript>: there's our

15:45:56
<transcript>: There's our template.

15:45:56
<transcript>: oh

15:45:59
<transcript>: Oh, see, there's a problem. It's just telling me right now.

15:46:08
<transcript>: I can also put a body in here like we can put looks at context. I can actually take this whole blob. This is awesome.

15:46:08
<transcript>: this

15:46:10
<transcript>: This whole context.

15:46:14
<transcript>: Right.

15:46:14
<transcript>: i can

15:46:16
<transcript>: I can paste it into.

15:46:21
<transcript>: Arguments. Now it become context. Wait.

15:46:24
<transcript>: What am I trying to do here.

15:46:24
<transcript>: more

15:46:26
<transcript>: More template.

15:46:29
<transcript>: Output. I want contacts.

15:46:31
<transcript>: Request.

15:46:34
<transcript>: Results.

15:46:36
<transcript>: Source.

15:46:36
<transcript>: why

15:46:38
<transcript>: Why am I blanking on this.

15:46:38
<transcript>: request

15:46:39
<transcript>: Request.

15:46:41
<transcript>: Now.

15:46:41
<transcript>: argument

15:46:43
<transcript>: Arguments.

15:46:43
<transcript>: was this

15:46:45
<transcript>: Was this where it would be.

15:46:51
<transcript>: Info.

15:46:58
cowfacedude99: next time you should try yi` copying.

15:46:59
<transcript>: Oh, I guess the context result, like I do it per thing. So here's the result. I just need the result.

15:47:01
<transcript>: So here.

15:47:03
<transcript>: Yeah.

15:47:03
<transcript>: yeah

15:47:04
<transcript>: Yeah.

15:47:08
<transcript>: Just pass the result in to mapping tool.

15:47:08
<transcript>: like so

15:47:09
<transcript>: Like so.

15:47:12
<transcript>: Except.

15:47:12
<transcript>: needs to be wrap

15:47:14
<transcript>: Needs to be wrapped.

15:47:17
<transcript>: Like this.

15:47:24
<transcript>: And then I can so I can put my template and my result.

15:47:32
<transcript>: Except it's not right, but we can see the output right. So I can actually run this thing. It's going to say there's an issue.

15:47:32
<transcript>: it's

15:47:34
<transcript>: It's gonna be the same error. Hopefully.

15:47:38
<transcript>: Problems.

15:47:38
<transcript>: yeah

15:47:47
<transcript>: Yeah. Unexpected token. Yeah, yeah. So here's our here's our thing. We can write this in here, and we get a lot better experience, right? I still have Vin bindings. So don't have me.

15:47:47
<transcript>: i shouldn't

15:47:50
<transcript>: I shouldn't try. Why.

15:47:50
<transcript>: i

15:47:57
<transcript>: I. Oh, I should try. Oh, that would be a good idea. I could copy everything inside the string. I want to do that right now. That's such a good idea.

15:47:59
<transcript>: Why I.

15:48:02
<transcript>: Do.

15:48:05
<transcript>: Why I.

15:48:05
<transcript>: did it work

15:48:06
<transcript>: Did it work.

15:48:08
<transcript>: I yanked it.

15:48:11
<transcript>: No.

15:48:11
<transcript>: i just don't have

15:48:13
<transcript>: I just don't have clipboard stuff working.

15:48:17
<transcript>: I think that just how many Clipboard and Alec Gritty working right.

15:48:23
<transcript>: So field value equals part size for each count minus one can't do that.

15:48:26
<transcript>: Can't do that.

15:48:29
<transcript>: And what does it say when I do index.

15:48:32
<transcript>: It doesn't like that at all.

15:48:32
<transcript>: okay

15:48:34
<transcript>: Okay.

15:48:37
<transcript>: I give up. Let's just keep track of the index ourselves.

15:48:37
<transcript>: boring

15:48:40
<transcript>: Boring things, but it's the correct thing.

15:48:43
<transcript>: Index equals zero.

15:48:43
<transcript>: and then

15:48:47
<transcript>: And then I keep trying to use them bindings and then index.

15:48:50
<transcript>: What's wrong with that.

15:48:52
<transcript>: For.

15:48:57
<transcript>: What's wrong with that fields? Oh, now it's just discovering other issues.

15:48:58
<transcript>: Json.

15:48:58
<transcript>: that result

15:49:01
<transcript>: That results. Okay. So.

15:49:01
<transcript>: context

15:49:02
<transcript>: Context result.

15:49:02
<transcript>: body

15:49:04
<transcript>: Body.

15:49:04
<transcript>: i'll show that

15:49:05
<transcript>: I'll show that.

15:49:11
<transcript>: Body does not exist. Oh, I have to define it in the result tab.

15:49:15
<transcript>: Result body that is.

15:49:21
<transcript>: Sure does.

15:49:21
<transcript>: it's right here

15:49:22
<transcript>: It's right here. See.

15:49:28
<transcript>: I really want to get this working because I think this gonna make it a lot easier.

15:49:28
<transcript>: is this

15:49:31
<transcript>: Is this Invalid JSON. Maybe this is Invalid.

15:49:35
<transcript>: How do I format it.

15:49:35
<transcript>: should auto form

15:49:38
<transcript>: Should auto format if it's correct, I guess.

15:49:46
<transcript>: I just I don't I don't include result. I just do this.

15:49:46
<transcript>: right

15:49:48
<transcript>: Right? Yeah, Yeah.

15:49:56
<transcript>: It should be that should be better. So now we have a body.

15:49:56
<transcript>: json

15:49:58
<transcript>: Json.

15:50:02
<transcript>: As an unset by neuronius set directive. Oh, really.

15:50:05
<transcript>: Did I do that? What.

15:50:05
<transcript>: variable json

15:50:09
<transcript>: Variable JSON has been unset by an Erroneous Set directive.

15:50:11
<transcript>: Be sure. But that's.

15:50:23
<transcript>: Try running it and see if it gives me better now.

15:50:26
<transcript>: What do you mean.

15:50:29
<transcript>: Unset parse JSON? Coming.

15:50:46
<transcript>: Maybe I should try writing this real quick and see if we can just get it working the way that I should have done it from the beginning, which is like this.

15:50:50
<transcript>: Set index. And then here.

15:50:50
<transcript>: this

15:50:52
cowfacedude99: Offtopic question, looking at aws(or insert any other cloud provider) looks too vast. How would you start with it?

15:50:52
<transcript>: This is going to be index.

15:50:59
<transcript>: Right. And then get out here keycaster. We need to increment index.

15:50:59
<transcript>: here

15:51:00
<transcript>: Here.

15:51:08
<transcript>: Index equals index plus one sided. It like that. Did we decide I could do that.

15:51:11
<transcript>: I think so, Yeah.

15:51:19
<transcript>: Okay, save it. Deploy it. Let's see. I don't know what's going on with mapping template. That doesn't seem right.

15:51:21
<transcript>: Json.

15:51:26
<transcript>: Is it unset by an Erroneous set directive.

15:51:27
<transcript>: That's so.

15:51:40
<transcript>: Erroneous. Oh, I wonder if it's he.

15:51:40
<transcript>: heavy

15:51:41
cowfacedude99: I started with aws twice and backed out in about a week because it was overwhelming

15:51:43
<transcript>: Heavy. Oh, right here. Do I need to.

15:51:45
<transcript>: Qr.

15:51:45
<transcript>: q

15:51:47
<transcript>: Qr.

15:51:50
<transcript>: Something.

15:51:52
<transcript>: Hills QR.

15:51:54
<transcript>: This is the problem.

15:51:58
<transcript>: I do need to get it working over here. I think this is gonna fix our maybe not.

15:52:02
<transcript>: Maybe not.

15:52:05
<transcript>: I don't know.

15:52:05
<transcript>: i don't know

15:52:10
<transcript>: I don't know if it's actually a problem with a VTL or if it's something I misunderstanding.

15:52:10
<transcript>: about

15:52:12
<transcript>: About mapping.

15:52:12
<transcript>: util

15:52:14
<transcript>: Util or Mapping tool.

15:52:22
<transcript>: Still an issue with invoking method get did that actually deploy? Yeah.

15:52:24
<transcript>: Index.

15:52:31
<transcript>: Let's try and work through it here. I don't know if I should believe this. Let's just make a simpler template.

15:52:33
<transcript>: Let's do.

15:52:33
<transcript>: just

15:52:35
<transcript>: Just JSON.

15:52:37
<transcript>: Just do this.

15:52:40
<transcript>: And then let's return JSON.

15:52:40
<transcript>: does that

15:52:42
<transcript>: Does that work.

15:52:42
<transcript>: little

15:52:44
<transcript>: Little low will slowly.

15:52:44
<transcript>: layer

15:52:47
<transcript>: Layer in some stuff.

15:52:47
<transcript>: un

15:52:49
<transcript>: Unset by Neroneous sectorective.

15:52:52
<transcript>: Well, I don't think so.

15:52:56
<transcript>: Hopefully so.

15:52:58
<transcript>: Reload sites.

15:53:03
<transcript>: Result.

15:53:08
<transcript>: So we paste that in.

15:53:08
<transcript>: argument

15:53:10
<transcript>: Arguments none.

15:53:10
<transcript>: so then

15:53:12
<transcript>: So then I'm going to take the first line.

15:53:17
<transcript>: Yank it.

15:53:22
<transcript>: And then just JSON, right.

15:53:22
<transcript>: what's wrong

15:53:24
<transcript>: What's wrong.

15:53:28
<transcript>: One step by an Erroneous set directive. I think I have to ignore that.

15:53:32
<transcript>: Because here it's showing it. It parts. It okay.

15:53:32
<transcript>: so j

15:53:34
<transcript>: So JSON.

15:53:35
<transcript>: Result.

15:53:44
<transcript>: Yeah. Fields. Okay. So then let's paste all this. Let's do Yank in. Nope.

15:53:48
<transcript>: How's that not working. Yeah.

15:53:50
<transcript>: Did it work.

15:54:00
<transcript>: Okay. What's wrong with my clipboard? Or is that not actually yanking? It might just not be yanking.

15:54:05
<transcript>: Yank.

15:54:09
<transcript>: Okay.

15:54:09
<transcript>: what's this

15:54:11
<transcript>: What's this do.

15:54:14
<transcript>: Problem.

15:54:18
<transcript>: I don't believe it I don't believe these errors.

15:54:21
<transcript>: Rows.

15:54:21
<transcript>: set

15:54:23
<transcript>: Set values.

15:54:35
<transcript>: I just don't believe it.

15:54:44
<transcript>: Next time you should try off topic question looking at AWS or insert any other cloud provider looks too vast. How would you start with it.

15:54:57
<transcript>: Yeah. I would start with like some kind of infrastructure as code. So I'd start with either like serverless framework and then look at some early, like getting started projects with service framework.

15:54:57
<transcript>: or

15:55:00
kainthegame1: have you ever setup a dev environment that you ssh into to dev instead of dev directly on your host machine?

15:55:02
<transcript>: Or the CDK, which is a little more overwhelming, probably for beginners.

15:55:02
<transcript>: you could look

15:55:04
<transcript>: You could look at.

15:55:14
<transcript>: Cloudformation is a big now I would start with the Product Service Framework or oh or Polumi or TerraForm.

15:55:20
<transcript>: Terraform is good for Big. Orgs. Bad for small. Orgs. That's my opinion.

15:55:24
<transcript>: Yeah. I would start with one of those. So I'd look up like Serverless framework.

15:55:35
<transcript>: You know, build a graph field API or something. Look, Google stuff like that finding a good starter. Or if you want to build a Rest API, build like Serverless Framework Rest API.

15:55:35
<transcript>: and then

15:55:46
<transcript>: And then play around with deploying Lambda functions through serverless framework and those sorts of things. That's how I would start. And then just like it weighs you into, like, eight to twelve AWS services you need to care about.

15:55:46
<transcript>: and

15:55:50
<transcript>: And not the 300 servers you'll see on the console immediately.

15:55:55
<transcript>: Let's see. First time Chat. Welcome to chat.

15:56:06
<transcript>: Cane the game. Have you ever set up a Dev environment that you SSH into to Dev instead of Dev directly on your host machine? No. I mean, have I ever. Yes. Do I do that regularly? No.

15:56:11
<transcript>: And I'm not even I'm just not like not into.

15:56:13
<transcript>: The.

15:56:13
<transcript>: like

15:56:19
<transcript>: Like web based Ides. Cloud Nine is AWS One, I think.

15:56:19
<transcript>: is that cloud

15:56:22
<transcript>: Is that Cloud Net? Is that what it's called? I don't know.

15:56:29
<transcript>: There's like Git Pod and all those. I just haven't gotten into it yet. I get that it's powerful to have your whole development environment like.

15:56:29
kronborg10: Why is REST API so popular? It seems to be the de facto standard

15:56:36
<transcript>: Wrapped up in a big thing that you just go to a website and you use it. I just. I don't know. It's not for me. Not yet anyway.

15:56:37
kainthegame1: k :P , I have that setup of ssh into a vm to dev and the yank to clipboard is always an issue :(

15:56:48
<transcript>: Why is Rest API so popular? Welcome to Jack Cronberg. That seems to be the Defacto stainard. Yeah, I think it's just I think it's just that it's the de facto saying. I think it's just what everyone started with. We started with recipe.

15:56:48
<transcript>: now

15:56:51
<transcript>: Now we're exploring other things.

15:56:56
<transcript>: So GraphQL kind of came on later. And then you've got our PC stuff.

15:57:06
<transcript>: Yeah. I don't know. I think rest was. Nobody does rest like rest anymore. Maybe they do, but I'm not aware of it. Most of the rest I see is just like.

15:57:12
<transcript>: Rpc but with just http calls like it's just ad hoc.

15:57:12
<transcript>: http

15:57:19
<transcript>: Http calls like we don't really set up resources and have all the path naming and all that stuff to be really rest. Like I think red rest is just like.

15:57:19
<transcript>: make http

15:57:30
<transcript>: Make http call get data back in JSON. That's what I take it to me these days. Maybe someone could correct me if they've seen rest. Use the original rest way in the wild.

15:57:39
<transcript>: Have that set up of SSH into a VM to Dev, and the yanked clipboard is always an issue. Yeah, that feels like layers of layers of things that would start breaking for you.

15:57:44
<transcript>: Thing I care about right now is why.

15:57:44
<transcript>: why

15:57:45
<transcript>: Why.

15:57:49
<transcript>: Is this not working? Let's see variable has been set.

15:57:49
<transcript>: errone

15:57:53
<transcript>: Erroneous, set directive. Let's just Google this.

15:57:55
<transcript>: Variable something.

15:57:59
<transcript>: Has been set by an Erroneous Set directive.

15:58:09
<transcript>: I just don't believe it.

15:58:14
<transcript>: There's anything wrong with what I'm doing here.

15:58:26
<transcript>: Because it's like the second line. When I like, just do anything with JSON. It starts throwing that error.

15:58:30
<transcript>: Property result does not exist. Lines two.

15:58:30
<transcript>: it does

15:58:32
<transcript>: It does.

15:58:35
<transcript>: Look at it. It's right here.

15:58:38
<transcript>: Request no.

15:58:38
<transcript>: result

15:58:39
<transcript>: Result.

15:58:43
<transcript>: And dot body. Wait a minute.

15:58:43
<transcript>: did i make a mistake

15:58:44
<transcript>: Did I make a mistake.

15:58:47
<transcript>: Where's the template.

15:58:47
<transcript>: template

15:58:53
<transcript>: Template JSON is content result body parsed. Okay.

15:58:57
<transcript>: Seems good to me.

15:58:57
<transcript>: context

15:58:58
<transcript>: Context.

15:59:00
<transcript>: Result.

15:59:05
<transcript>: Body is a string.

15:59:05
<transcript>: so bodies

15:59:12
<transcript>: So bodies a string. We're setting JSON to that. Oh, we're parsing it first. So what is JSON.

15:59:17
<transcript>: Json has a.

15:59:17
<transcript>: result

15:59:18
<transcript>: Result.

15:59:20
<transcript>: And arose.

15:59:35
<transcript>: It's something I'm doing.

15:59:41
<transcript>: So rows.

15:59:41
<transcript>: it already

15:59:43
<transcript>: It already says.

15:59:50
<transcript>: Been unset by Neuronius set directive. Do I have to put all of these sets in.

15:59:53
<transcript>: Qr. Surely not.

15:59:57
<transcript>: I surely do not need to do that.

16:00:01
<transcript>: Now what is it say in the Docs? Says.

16:00:04
<transcript>: Programming Guide let's see.

16:00:06
<transcript>: Qr.

16:00:12
<transcript>: So when they do map puts, they're using QR. Maybe I need to do that.

16:00:18
<transcript>: Are they doing it for Array, ads.

16:00:18
llcoolchris_: @kronborg10 What alternatives are you thinking about?

16:00:37
<transcript>: You can access this function. I'll say you might be you might use this technique in your tip is it prevents the architecture being printed in a template. A Tobs app sync provides an alternative convenience function that offers the same.

16:00:45
<transcript>: Behavior and a more succinct notation. This enables you to not have to think about these specific implementations. There's the actual function.

16:00:45
<transcript>: or

16:00:47
<transcript>: Or QR.

16:00:47
<transcript>: so

16:00:50
<transcript>: So add or put.

16:00:50
<transcript>: well

16:00:54
<transcript>: Well, we'll do it. We'll see if that makes anything happy.

16:01:00
<transcript>: Let's see. Qr.

16:01:03
<transcript>: But not on sets, though what I'm gathering.

16:01:11
<transcript>: Now we wouldn't do it on set.

16:01:23
<transcript>: On basic, just VTL syntax stuff. And that's painful because that shouldn't be our problem right now.

16:01:23
<transcript>: let's go

16:01:25
<transcript>: Let's go. Let's see what the error was exactly again.

16:01:33
<transcript>: Invoking method line 25. 38.

16:01:33
<transcript>: so up

16:01:35
<transcript>: So up here.

16:01:35
<transcript>: twenty five

16:01:37
<transcript>: 25 is.

16:01:39
<transcript>: Here.

16:01:42
<transcript>: 38 is.

16:01:46
<transcript>: Here. Now, that must be the line above. So here.

16:01:51
<transcript>: Parse values. And we're trying to use index.

16:01:55
<transcript>: Parsed values is an array.

16:01:57
<transcript>: So.

16:02:00
<transcript>: What if we did the.

16:02:12
<transcript>: Hardware.

16:02:15
<transcript>: Index.

16:02:18
<transcript>: Okay. We've did that.

16:02:27
<transcript>: Okay, let's try it.

16:02:34
<transcript>: I don't know what the deal here is. I just feel like this is not.

16:02:36
<transcript>: Real.

16:02:40
<transcript>: The airs I'm seeing are not real.

16:02:47
<transcript>: Unless I guess unless.

16:02:47
<transcript>: i

16:02:49
<transcript>: I haven't tried.

16:02:54
<transcript>: Whenever I set.

16:02:54
<transcript>: let's

16:02:57
<transcript>: Let's see par studies. I add if I QR. This.

16:03:03
<transcript>: I'm trying that I guess I should try that.

16:03:06
<transcript>: Oh, that's gonna be the issue, though.

16:03:23
<transcript>: Yeah, it's just not all right.

16:03:23
<transcript>: run it

16:03:25
<transcript>: Run it.

16:03:25
<transcript>: really

16:03:26
<transcript>: Really get this to work.

16:03:26
<transcript>: oh

16:03:28
<transcript>: Oh.

16:03:28
<transcript>: invoking

16:03:32
<transcript>: Invoking method get an array list at velocity.

16:03:37
<transcript>: Let's see.

16:03:40
<transcript>: Oh, that one.

16:03:48
<transcript>: I.

16:03:53
<transcript>: Smoking method get lined up.

16:03:53
<transcript>: column forty

16:03:55
<transcript>: Column 44.

16:04:04
<transcript>: That one right there. So this get on this parse values. It's like parse values. Has nothing in it.

16:04:11
<transcript>: Oh, does it not if width is greater than zero. Oh, Geez, maybe we've got a problem here.

16:04:16
<transcript>: Vtl App Sync VTL.

16:04:16
<transcript>: log

16:04:18
<transcript>: Log.

16:04:18
<transcript>: logging

16:04:19
<transcript>: Logging.

16:04:19
<transcript>: there's only like

16:04:23
<transcript>: There's only like debug beast. Thanks for the follow. I candier.

16:04:25
<transcript>: I can deer.

16:04:33
<transcript>: Also straight out of shape. Thank you for the follow.

16:04:37
<transcript>: Super nasty ways util validate.

16:04:48
<transcript>: I.

16:04:48
<transcript>: debug

16:04:51
<transcript>: Debug abstine VTL.

16:04:54
<transcript>: Yeah. Kind of utilize util errors.

16:05:00
<transcript>: I just want to log. I know this is the thing I've seen.

16:05:03
<transcript>: You to validate.

16:05:07
<transcript>: This is the thing they added support for actually.

16:05:14
<transcript>: Oh, there we go. It's right here. Test and debug resolvers.

16:05:44
<transcript>: There is like some stuff in the app singing console though. Here, let's go here.

16:05:47
<transcript>: Functions Data sources.

16:05:49
<transcript>: Schema.

16:05:49
<transcript>: we're gonna

16:05:50
<transcript>: We're gonna go.

16:06:04
<transcript>: Let's see Schema. We're looking for a query here's our http data source. This should show us our template. Yeah, right here. We can just actually change the template in here if we want instead of CDK stepping it.

16:06:20
<transcript>: Parts values, index. What is wrong with that? I need to output what is the parse values already look like when we get to this part. That's what I need to do. It could be that the index is off.

16:06:27
<transcript>: We could be off on the index, and we're trying to hit a value that doesn't exist. Oh, because if null Oh.

16:06:32
<transcript>: If there's any nulls, I don't think there are any nulls, though.

16:06:32
<transcript>: if

16:06:36
<transcript>: If it's not null, we need to add.

16:06:36
<transcript>: watch this

16:06:39
<transcript>: Watch this. We need to else.

16:06:42
<transcript>: We need to.

16:06:42
<transcript>: parse

16:06:44
<transcript>: Parse values.

16:06:44
<transcript>: add

16:06:49
<transcript>: Add null. Can you do that in detail.

16:06:49
<transcript>: at sy

16:06:52
<transcript>: At sync. Vtl. No.

16:06:57
<transcript>: Silence is easy. It sure is, isn't it? It's pretty easy to be quiet.

16:06:57
<transcript>: how do i insert

16:07:00
<transcript>: How do I insert an optional field is null.

16:07:06
<transcript>: Thank you so much for the follow.

16:07:06
<transcript>: icon

16:07:07
<transcript>: Icon or.

16:07:07
<transcript>: look on

16:07:11
<transcript>: Look on our icon or thank you.

16:07:11
<transcript>: oh man

16:07:18
<transcript>: Oh, man, I am Fee. Thank you for the following look at all these follows. What did I do if something happened, something funny happening.

16:07:22
<transcript>: To have a Booger or something. What's going on.

16:07:29
<transcript>: Tilde are you should use utilju there's another one Austin thank you all for the follows.

16:07:29
<transcript>: i don't know the

16:07:31
<transcript>: I don't know the VTL did it for you.

16:07:33
llcoolchris_: Follow party

16:07:34
<transcript>: No with a string.

16:07:34
iamfeek: Nah, you just look like a nice content creator!

16:07:41
<transcript>: Thank you. Hi. I am Willow.

16:07:41
<transcript>: you just look

16:07:43
kylliangamer: you're still live :o

16:07:45
<transcript>: You just look like a nice content creator. Thank you. I am Vik.

16:07:45
<transcript>: thank you

16:07:50
<transcript>: Thank you. I don't think of myself as a content creator, but I will take it.

16:07:56
<transcript>: So here they're doing null. I think null is a keyword. I can just use null.

16:07:56
<transcript>: let's save

16:08:05
<transcript>: Let's save this thing. Parse values add null. So it said in the planet scale docs if width is less than zero is null.

16:08:05
<transcript>: so

16:08:07
<transcript>: So let's try that.

16:08:07
<transcript>: like i need

16:08:16
<transcript>: Like, I need to add something, right? Because it was madping before. Yeah, yeah, I broke it. I did a dumb thing. This is better. I don't know that it'll fix it, but it's better.

16:08:22
<transcript>: Trailing characters at the end of the JSON string are not allowed. Look how close we are. I think we're really close.

16:08:22
<transcript>: maybe

16:08:23
<transcript>: Maybe.

16:08:26
<transcript>: I think it's possible that we're really close.

16:08:26
<transcript>: eleven

16:08:30
<transcript>: 1103. That's not it. 1108. That's the one.

16:08:34
<transcript>: Response mapping. Let's see what we got.

16:08:42
<transcript>: Transformed template. Oh, oh, what is that? What did we get out of our response mapping? Not the right thing.

16:08:42
<transcript>: what

16:08:44
<transcript>: What is this.

16:08:54
<transcript>: That transform template would be.

16:08:55
<transcript>: True.

16:09:03
<transcript>: Romap Set field. What in the world? What is going on.

16:09:13
<transcript>: I think that's supposed to be the result that's sent.

16:09:19
<transcript>: Okay, we need a QR. All these I'm gonna queue. Are them.

16:09:24
<transcript>: We're just gonna copy all this and paste it in later.

16:09:24
<transcript>: into our cdk

16:09:31
<transcript>: Into our CDK app. We're just gonna work directly with the template here. That's the fastest way, and we gotta think about time. I'm running a little low on it.

16:09:34
<transcript>: Link in row, links.

16:09:34
<transcript>: set with the

16:09:36
<transcript>: Set with the linear version is okay.

16:09:41
<transcript>: So we add no in that case. But we want to all of these.

16:09:41
<transcript>: ut

16:09:43
<transcript>: Util QR.

16:09:55
<transcript>: And then.

16:09:58
<transcript>: Also when we let's see.

16:10:00
<transcript>: Here.

16:10:10
<transcript>: And then results right here as well. And then do we want to do like a util two JSON or something.

16:10:15
<transcript>: Result? I don't know.

16:10:19
<transcript>: Not done. Let's try that.

16:10:26
<transcript>: Mapping request is good.

16:10:29
<transcript>: Savers over.

16:10:39
<transcript>: Okay. Let's try that.

16:10:47
<transcript>: Can it return nonnoval type string with in parent product we are so close.

16:10:47
<transcript>: i think

16:10:49
<transcript>: I think we're so close.

16:10:51
<transcript>: I think.

16:10:54
<transcript>: I think we're so.

16:10:54
<transcript>: let's see

16:10:56
<transcript>: Let's see response mapping.

16:11:01
<transcript>: Transformed template. That's a bunch of new lines. Okay.

16:11:09
<transcript>: Tracing oh, here we go.

16:11:11
<transcript>: Products.

16:11:18
<transcript>: Let's go on here.

16:11:22
<transcript>: Products ID.

16:11:26
<transcript>: Products name.

16:11:47
<transcript>: Field Name Image URL.

16:11:50
<transcript>: Start offset.

16:11:51
<transcript>: So.

16:11:57
<transcript>: I don't know where I'm looking. I'm looking for execution summary.

16:12:00
<transcript>: Like where is the value.

16:12:05
<transcript>: So now it's just saying it can't return null.

16:12:08
<transcript>: Here are our links.

16:12:08
<transcript>: and our values

16:12:13
<transcript>: And our values we saw over here we did the values with this thing.

16:12:17
<transcript>: One, and then ballpoint, pin.

16:12:17
<transcript>: and then

16:12:20
<transcript>: And then that.

16:12:20
<transcript>: those

16:12:22
<transcript>: Those are all strings.

16:12:27
<transcript>: So what's the problem here.

16:12:31
<transcript>: Can I return null.

16:12:40
<transcript>: Products is null. Oh, so Products is returning null. That's a problem. We need to output some stuff we need to console log the equivalent of console log in.

16:12:48
<transcript>: How to log inside of Responsibly. Yes.

16:12:48
<transcript>: this is

16:12:53
<transcript>: This is what I want to do. Validate. Okay, so false. And then just the thing.

16:12:57
<transcript>: Oh, I could stash it? That's true? We could stash it.

16:13:01
<transcript>: Let's stash it. That's a little less gross.

16:13:08
<transcript>: Here. I want to log parsed values right before we go into this. Right here.

16:13:10
<transcript>: So stash.

16:13:10
<transcript>: put

16:13:12
<transcript>: Put.

16:13:15
<transcript>: Parsed values.

16:13:19
<transcript>: And it's going to be.

16:13:19
<transcript>: parsed

16:13:23
<transcript>: Parsed values. Okay, let's say that.

16:13:27
<transcript>: And run the query again.

16:13:30
<transcript>: And we'll look at the stash.

16:13:34
<transcript>: Right here.

16:13:39
<transcript>: I'm still live Killion. I am.

16:13:39
<transcript>: how you doing

16:13:41
<transcript>: How you doing? Kylian.

16:13:44
<transcript>: Just think I wasn't still alive.

16:13:49
<transcript>: So we're gonna look at the Stash and our response mapping template. Now.

16:13:51
<transcript>: No, no.

16:13:58
<transcript>: That's not ideal. I think that's the problem.

16:14:04
<transcript>: I'm out of water, but we got to push through.

16:14:06
<transcript>: We're at 6 hours on this stream.

16:14:09
<transcript>: Going long today.

16:14:09
<transcript>: follow party

16:14:10
<transcript>: Follow party.

16:14:13
<transcript>: Yeah, I've got to.

16:14:22
<transcript>: Welcome to Chat. I'm Peak I don't know if I told you welcome to Chat. We've got to figure out why are those all null? That's a problem. That won't. That won't work.

16:14:25
<transcript>: So part values.

16:14:25
<transcript>: is an array

16:14:33
<transcript>: Is an array. We are doing Parselle add splice, which is a substrate of offset and end. Let's do.

16:14:33
<transcript>: offset

16:14:34
<transcript>: Offset.

16:14:36
<transcript>: And in.

16:14:42
<transcript>: The validate thing.

16:14:44
<transcript>: Because.

16:14:48
<transcript>: We can only stash so many things.

16:14:54
<transcript>: And I want to just figure out I don't want to figure that out. So we're just gonna validate like this.

16:14:54
<transcript>: you feel

16:14:56
<transcript>: You feel validate false.

16:14:58
<transcript>: Let's do.

16:14:58
<transcript>: int

16:14:59
<transcript>: Int.

16:14:59
<transcript>: and then let's

16:15:00
kylliangamer: Well I'm glad you are. I realized today that the only days I can actually fully watch a stream are wednesday, saturday and sunday. Which are very annoyingly the exact days you don't stream! :D

16:15:01
<transcript>: And then let's do.

16:15:03
<transcript>: Offset.

16:15:09
<transcript>: And let's I guess let's do values as well. Right.

16:15:14
<transcript>: Values.

16:15:20
<transcript>: That's the substrain that we're working with values is the thing right? Util's base six word decode.

16:15:20
<transcript>: row

16:15:23
<transcript>: Row, values.

16:15:27
<transcript>: Let's do the row as well. Up here.

16:15:34
<transcript>: Only one row. I could just stash the row. But I'm gonna do this.

16:15:34
<transcript>: okay

16:15:35
<transcript>: Okay.

16:15:44
<transcript>: Debugging VTL the good thing is you put in the work up front. You write your VTL tone template that works.

16:15:44
<transcript>: and then

16:15:46
<transcript>: And then you profit.

16:15:46
<transcript>: you no longer

16:15:49
<transcript>: You no longer have to.

16:15:50
<transcript>: Worry about.

16:15:50
<transcript>: code that's gonna

16:15:56
<transcript>: Code that's gonna get it's gonna rot I'm able to convert validate false row.

16:15:56
<transcript>: to object

16:15:58
<transcript>: To object Oh.

16:16:03
<transcript>: So the problem is this part where you're writing it.

16:16:03
<transcript>: is not fun

16:16:05
<transcript>: Is not fun.

16:16:08
<transcript>: Response, mapping.

16:16:18
<transcript>: So validate not so much working.

16:16:24
<transcript>: This validate thing not working util validity. False row.

16:16:28
<transcript>: And it says, what now unable to convert.

16:16:43
<transcript>: That to an object. Thank you for the follow mole concept. Well, I'm glad you are. I realize today the only days I can actually fully watch a stream or Wednesday, Saturday, and Sunday, which are very annoyingly. The exact days I don't stream. That is exactly right. Kilian.

16:16:43
<transcript>: the holidays

16:16:49
<transcript>: The holidays. You can watch a full. You can fully watch a stream. Can you partially watch other days.

16:16:55
<transcript>: Because I'd love to have you here.

16:16:59
<transcript>: And able to convert that.

16:16:59
<transcript>: to

16:17:01
<transcript>: To object.

16:17:03
<transcript>: What.

16:17:06
<transcript>: Don't understand.

16:17:06
<transcript>: false

16:17:07
<transcript>: False.

16:17:11
<transcript>: Let's remove all the validates and let's just stash some stuff.

16:17:17
<transcript>: Validate don't have any more validates I don't think so.

16:17:20
<transcript>: This is ugly.

16:17:24
<transcript>: So no more validate. We're gonna do stash instead.

16:17:30
<transcript>: The row.

16:17:32
<transcript>: Row.

16:17:34
<transcript>: And Let's.

16:17:34
<transcript>: stash

16:17:36
<transcript>: Stash.

16:17:36
<transcript>: at this point

16:17:41
<transcript>: At this point we'll just stash offset this at the very end after it's already done all.

16:17:43
<transcript>: Offset.

16:17:49
<transcript>: See if we're getting any values on any of this stuff.

16:17:49
<transcript>: then

16:17:50
<transcript>: Then, ROMAP.

16:17:55
<transcript>: Did I already do runap.

16:17:55
<transcript>: it already

16:17:56
<transcript>: It already.

16:18:10
<transcript>: Okay.

16:18:14
<transcript>: An index just get ourselves all set up here.

16:18:19
<transcript>: Being this in the browser good times.

16:18:22
<transcript>: Dave, thank you for the follow. Sand.

16:18:25
<transcript>: Appreciate all the followups today.

16:18:29
<transcript>: Let's do this.

16:18:29
<transcript>: can i

16:18:34
<transcript>: Can I return null. Okay. That's expected. Let's look at the log.

16:18:37
<transcript>: Okay.

16:18:37
<transcript>: eleven fifteen

16:18:38
<transcript>: 1115.

16:18:43
<transcript>: You know it's great about this project is I don't care.

16:18:49
<transcript>: I don't care like this is exploration. I'm trying to figure out if I can do this.

16:18:49
<transcript>: in vtl

16:18:51
<transcript>: In VTL. But if I can't.

16:18:51
<transcript>: okay

16:18:52
kylliangamer: What are you doing?

16:18:53
<transcript>: Okay, I just want.

16:18:53
<transcript>: i like using

16:18:58
<transcript>: I like using DynamoDB anyway. Okay, stash. So we have zero.

16:18:58
<transcript>: for

16:18:59
<transcript>: For Wait, what is going on.

16:19:05
<transcript>: No, no. Oh, I need to not do it with like, it's like expanding the variables.

16:19:09
<transcript>: So Oops needs to not do this.

16:19:12
<transcript>: Oh, what was that.

16:19:15
<transcript>: So like this.

16:19:18
<transcript>: Right.

16:19:20
<transcript>: Okay.

16:19:20
<transcript>: so

16:19:23
<transcript>: So that.

16:19:25
<transcript>: The feedback loop though.

16:19:27
<transcript>: Not the best.

16:19:27
<transcript>: not the best

16:19:29
<transcript>: Not the best feedback loop.

16:19:33
<transcript>: Maybe not the worst, but it's not the best.

16:19:35
<transcript>: Might be the worst.

16:19:40
<transcript>: I There it is.

16:19:44
<transcript>: Response mapping. Here we go.

16:19:46
<transcript>: Stash.

16:19:46
<transcript>: not what

16:19:50
<transcript>: Not what I expected. I did not expect it to still be doing this.

16:19:50
<transcript>: link

16:19:54
<transcript>: Links. One, two, three. That's the row, right.

16:20:04
<transcript>: Now. Yeah. Links and values. That's the row. And then whatever this is.

16:20:04
<transcript>: empty

16:20:05
<transcript>: Empty.

16:20:07
<transcript>: Ha.

16:20:11
<transcript>: But can I not stash.

16:20:11
<transcript>: without

16:20:13
<transcript>: Without it being the variable.

16:20:18
<transcript>: Did I save it.

16:20:18
<transcript>: i saved

16:20:20
<transcript>: I saved it. Right.

16:20:23
<transcript>: Row, stash, put, row.

16:20:27
<transcript>: S one.

16:20:31
<transcript>: Test two. Test three.

16:20:33
<transcript>: Four.

16:20:36
<transcript>: Five, I feel like I'm I'm.

16:20:36
<transcript>: going crazy

16:20:41
<transcript>: Going crazy here. Did I see what I just saw? Maybe she's in the old version of the Resolver.

16:20:46
<transcript>: I should give it a second. Maybe I'll run it a couple times. I don't know.

16:20:54
<transcript>: Products are no. We want to see products back from our database. That's the goal right now.

16:20:57
<transcript>: Want to see some products.

16:20:59
<transcript>: One product, I guess.

16:21:04
<transcript>: Look at the stash.

16:21:08
<transcript>: There we go. Test one.

16:21:08
<transcript>: links

16:21:15
<transcript>: Links and values. Test to a bunch of nulls test. Three is zero to four. Is that into five? Okay, so let's look at what these are.

16:21:19
<transcript>: Tests. Three is offset.

16:21:22
<transcript>: Offset should be.

16:21:26
<transcript>: Zero. No, that's wrong.

16:21:30
<transcript>: So this is a problem. Offset is zero.

16:21:33
<transcript>: Row, links.

16:21:40
<transcript>: Should be an array of Oh.

16:21:42
<transcript>: Array of.

16:21:42
<transcript>: strings

16:21:44
<transcript>: Strings.

16:21:51
<transcript>: Links. Am I doing links, anyway? I'm not outputting links.

16:21:55
<transcript>: Row, dot, links. Seems wrong.

16:22:00
<transcript>: Here test one links array of numbers.

16:22:00
<transcript>: then test two

16:22:01
<transcript>: Then test two.

16:22:11
<transcript>: Parsed values, which is an array of null, so every width is greater than zero, so integrated Parson may not be working.

16:22:15
<transcript>: Let's do row, dot links. Let's do this.

16:22:15
<transcript>: now we

16:22:18
<transcript>: Now we already know what it is. It's right here.

16:22:18
<transcript>: it's an

16:22:21
<transcript>: It's an array of numbers.

16:22:21
<transcript>: what we want to

16:22:26
<transcript>: What we want to know is is with ever being set as an integer. Maybe this doesn't work.

16:22:26
<transcript>: we

16:22:29
<transcript>: We did get this from the internet.

16:22:32
<transcript>: Parse. Int. May not work.

16:22:34
<transcript>: Vtl.

16:22:34
<transcript>: integer

16:22:35
<transcript>: Integer.

16:22:37
<transcript>: Parse? Int.

16:22:42
<transcript>: Is that a thing.

16:22:50
<transcript>: Is it a thing.

16:22:58
<transcript>: Bow parse. Int.

16:23:00
<transcript>: What.

16:23:14
<transcript>: Exception case the string is not possible.

16:23:17
<transcript>: Number tool? What.

16:23:17
<transcript>: so

16:23:19
<transcript>: So they're saying, if you take a number.

16:23:19
<transcript>: like any

16:23:23
<transcript>: Like any arbitrary number and you use parsing on it.

16:23:26
<transcript>: You can get the integer.

16:23:36
<transcript>: I'd really like to be an app sync thing. Oh, here we go. Bring string to end.

16:23:38
<transcript>: This one I looked at earlier.

16:23:56
<transcript>: Something native from details which should be influenced some way.

16:23:56
<transcript>: so this

16:23:58
<transcript>: So this doesn't exist? Is that you're saying.

16:24:08
<transcript>: But my value is for third party guys. An integer in string format. I know, I've done.

16:24:08
<transcript>: before

16:24:18
<transcript>: Before that we can convert strain to Int with VTL, but we can't test them right now. The working solution is this. Oh, okay. Integer. So I have to set integer equals zero.

16:24:18
<transcript>: okay

16:24:20
<transcript>: Okay, this is the problem.

16:24:20
<transcript>: one of the

16:24:22
<transcript>: One of the problems at least.

16:24:29
<transcript>: One of the problems is this. We need to do this and now integer parts in should work.

16:24:29
<transcript>: set width

16:24:33
<transcript>: Set width equals. That. Okay.

16:24:33
<transcript>: do we do it

16:24:34
homiecoder: @adamelmore  heyo! ur still on? boss!

16:24:36
<transcript>: Do we do it? Did we fix it? Let's see.

16:24:41
<transcript>: I'm still on homie? I'm still on and killing? What are we doing.

16:24:41
<transcript>: we're trying

16:24:54
<transcript>: We're trying to get PlanetScale data from their http API through a graph dual API on app sync with VTL resolvers. That's a lot. There's a handful there.

16:24:57
<transcript>: That's still let's see what's going on here.

16:25:04
<transcript>: So we're trying to do it without any Lambda functions. Basically. Like we want to do this with BTL only.

16:25:07
<transcript>: Like we know what we're doing.

16:25:11
<transcript>: Response, mapping.

16:25:13
<transcript>: Okay.

16:25:13
<transcript>: links value

16:25:18
homiecoder: keeping it bleeding edge! aight

16:25:22
<transcript>: Links, values, tests. Oh, oh, these are the values. Those look correct. One ballpoint, pin. 501.

16:25:31
<transcript>: Test three is 42. Test four. Is that okay. So where do we break down this time? What was the actual error.

16:25:33
<transcript>: Can return null.

16:25:37
<transcript>: How we're getting closer though.

16:25:43
<transcript>: Okay. So.

16:25:50
<transcript>: Values we at least have values.

16:25:50
<transcript>: but

16:25:52
<transcript>: But then down here.

16:25:52
<transcript>: results

16:25:53
<transcript>: Results.

16:25:59
<transcript>: What is our result? Transformed template.

16:26:02
<transcript>: A bunch of garbage. What is that.

16:26:20
<transcript>: What are these? Indexes? Test five, which is good. That's the last index 42 is test three.

16:26:20
<transcript>: offset

16:26:21
<transcript>: Offset.

16:26:24
<transcript>: What were the links.

16:26:26
<transcript>: Links.

16:26:34
<transcript>: So 113. 27. Yeah, it'd be 42. Okay.

16:26:40
<transcript>: Why does it get that long.

16:26:45
<transcript>: There's no. There's no fourth value, right.

16:26:51
<transcript>: This database doesn't have four values, does it? Oh, does the category ID my bad. So it's values. Okay.

16:26:51
<transcript>: i'm feeling like

16:26:53
<transcript>: I'm feeling like we're really close.

16:26:56
<transcript>: So then what's going on here? We're setting.

16:26:56
<transcript>: romap

16:26:59
<transcript>: Romap. Set. Field name.

16:27:03
<transcript>: Field name. So let's do fields.

16:27:08
<transcript>: Test Six is fields.

16:27:14
<transcript>: Field.

16:27:17
<transcript>: Okay.

16:27:35
<transcript>: 27.

16:27:37
<transcript>: Spots.

16:27:37
<transcript>: mapping

16:27:39
<transcript>: Mapping here we go.

16:27:44
<transcript>: Test six. Oh, oh, look at these.

16:27:48
<transcript>: What are these? Again? These are the.

16:27:53
<transcript>: I don't know what they are, but I like them. Test six fields. Oh.

16:27:58
<transcript>: It's not a big deal, just the names of the field. So ID.

16:27:58
<transcript>: and the

16:28:00
<transcript>: And the Products table.

16:28:02
<transcript>: Category.

16:28:04
<transcript>: Also Products table.

16:28:04
<transcript>: so

16:28:08
<transcript>: So then where are we going? Wrong here. When we.

16:28:17
<transcript>: Go through each field and fields, and we set in the row map. Am I not? Romap? Is four.

16:28:18
<transcript>: So what? We.

16:28:18
<transcript>: test for is

16:28:24
<transcript>: Test for is an empty map, so we're not setting anything on the roadmap. We're going through each field.

16:28:24
<transcript>: fields look like

16:28:27
<transcript>: Fields look like this. An array of these things.

16:28:36
<transcript>: And what we're saying? Romap Set. Field name. Do they have a name? Yes. Field name.

16:28:40
<transcript>: Parsed Values index.

16:28:43
<transcript>: Index we know ends up in the right place.

16:28:43
<transcript>: let's test

16:28:48
<transcript>: Let's test five, and then parsed values is test two.

16:28:52
<transcript>: Tests two. That's an array.

16:28:52
<transcript>: index

16:28:58
<transcript>: Index ends up at four. That's correct. Wait. 00123.

16:28:58
<transcript>: but we yeah

16:29:02
<transcript>: But we yeah, we add one more to four, and then we just don't do anything.

16:29:05
<transcript>: Every field.

16:29:05
<transcript>: wait a minute

16:29:07
<transcript>: Wait a minute.

16:29:11
<transcript>: Wait a minute. We're going through the fields.

16:29:16
<transcript>: And we're adding.

16:29:16
<transcript>: these

16:29:18
<transcript>: These, to ROMAP.

16:29:21
<transcript>: Rome.

16:29:21
<transcript>: set

16:29:24
<transcript>: Set field name parse. Let's do this.

16:29:26
<transcript>: Let's say set.

16:29:28
<transcript>: Field.

16:29:30
<transcript>: Value equals.

16:29:30
<transcript>: parsed

16:29:32
<transcript>: Parsed values.

16:29:35
<transcript>: Index. And Let's.

16:29:35
<transcript>: output

16:29:36
<transcript>: Output that.

16:29:40
<transcript>: Ash.

16:29:47
<transcript>: Index.

16:29:53
<transcript>: We're getting there.

16:29:53
<transcript>: field

16:29:55
<transcript>: Field value.

16:29:55
<transcript>: like that

16:29:56
<transcript>: Like that.

16:29:59
<transcript>: Save Resolver.

16:30:06
<transcript>: Keeping it bleeding. Edge. That's right. We are. We're bleeding the edge.

16:30:11
<transcript>: We. Are we're bleeding? Something.

16:30:11
<transcript>: another

16:30:14
<transcript>: Another edge. But something.

16:30:14
<transcript>: twenty seven

16:30:17
<transcript>: 27. So we're looking for 30.

16:30:17
<transcript>: come on new

16:30:19
<transcript>: Come on new logs.

16:30:19
<transcript>: there

16:30:21
<transcript>: There they are.

16:30:21
<transcript>: response

16:30:25
<transcript>: Response template. So now we should have index things. Yeah, one.

16:30:25
<transcript>: zero

16:30:27
<transcript>: 0123.

16:30:35
<transcript>: Those are right. Those are the correct values. Why are they not getting set? This is gonna be something easy, and then we're gonna delete all this stashing.

16:30:35
<transcript>: romap

16:30:37
<transcript>: Romap, set.

16:30:37
<transcript>: field

16:30:39
<transcript>: Field name.

16:30:43
<transcript>: Is there something wrong here? Field name.

16:30:46
<transcript>: And then the parsed value.

16:30:46
<transcript>: we know

16:30:48
<transcript>: We know the parse values are correct.

16:30:53
<transcript>: Have this field value. Right. We can just draw this.

16:30:57
<transcript>: Right.

16:30:59
<transcript>: We're setting the row map.

16:31:04
<transcript>: We're adding ROMAP to results.

16:31:09
<transcript>: Let's just do this.

16:31:22
<transcript>: What's the problem.

16:31:25
<transcript>: What is the problem.

16:31:28
oskrm: oof you still doin vtl stuff?

16:31:33
<transcript>: Can't wait to find out the problem is it's gonna be so dumb.

16:31:33
<transcript>: so easy

16:31:36
<transcript>: So easy should have seen it all along, that kind of thing.

16:31:40
<transcript>: 1131. There they are.

16:31:44
<transcript>: Okay.

16:31:44
<transcript>: we have result

16:31:48
<transcript>: We have results. Dash is an array of.

16:31:48
<transcript>: an empty thing

16:31:50
<transcript>: An empty thing.

16:31:52
<transcript>: It's an array of nothing.

16:31:52
<transcript>: there should be

16:31:55
<transcript>: There should be one row. The row should not be nothing.

16:31:55
<transcript>: the row

16:31:58
<transcript>: The row should be something.

16:32:01
<transcript>: And this is the line right here.

16:32:08
<transcript>: Romap set in my misunderstanding maps and how you set them.

16:32:11
<transcript>: Set set set.

16:32:11
<transcript>: map

16:32:12
<transcript>: Map.

16:32:18
<transcript>: Set my map. That property. That's one way to do it. But can't you just do it directly.

16:32:21
<transcript>: On so if I do not set.

16:32:21
<transcript>: this

16:32:26
<transcript>: This. That's an array. Oh, array. Oh, no. Can you do it on maps.

16:32:26
<transcript>: oh

16:32:32
<transcript>: Oh, no, I'm dumb. That's a problem. Well, good. I mean, I'm glad it's obvious.

16:32:38
<transcript>: A loops arrays Where's a map calling method. So this is how I do it.

16:32:38
<transcript>: no nothing

16:32:43
<transcript>: No, nothing. Puts that what this is. Right? Yeah, right here. Put it's not. Set it's put.

16:32:43
<transcript>: it's outside

16:32:50
<transcript>: It's outside. It's put. I'm so dumb. Oh, my goodness. All this time. And it was put not set.

16:32:56
<transcript>: All this nonsense.

16:33:01
<transcript>: Alright.

16:33:01
<transcript>: we're in business

16:33:02
<transcript>: We're in business.

16:33:02
<transcript>: watch this

16:33:03
<transcript>: Watch this.

16:33:03
<transcript>: watch

16:33:05
<transcript>: Watch this.

16:33:05
<transcript>: save

16:33:07
<transcript>: Save.

16:33:15
<transcript>: There they are, our products. We did it. We did it. I'm actually really excited about this.

16:33:18
<transcript>: We are doing detail, stuff.

16:33:18
<transcript>: so

16:33:24
<transcript>: So I'm really excited about this. What we did is we created a GraphQL API.

16:33:24
<transcript>: okay

16:33:25
<transcript>: Okay.

16:33:31
<transcript>: And it's an app sync, which means it's serverless. We don't have to manage this thing. Let's come over here.

16:33:39
<transcript>: This is how we're gonna end the stream here. I'm just gonna kind of explain what we did, and then I'm gonna push this to GitHub.

16:33:39
<transcript>: and

16:33:40
<transcript>: And.

16:33:40
<transcript>: i don't know

16:33:46
cowfacedude99: `I am so dumb` every programmer ever LUL `I am a genius` every programmer ever NotLikeThis

16:33:51
oskrm: 🎉🎉🎉🎉🎉🎉🎉

16:33:52
<transcript>: I don't know. Someone could maybe profit from this. I'm definitely gonna use this pattern a lot in the future because I have a lot of clients that they don't want to use. Dynamo they're used to using SQLbased databases.

16:33:55
<transcript>: And the problem with that is.

16:33:55
<transcript>: there's

16:34:03
kylliangamer: MySQL 😍

16:34:15
<transcript>: There's no good serverless sequel offerings. Intel Planet Scale came along and they made a really great sequel offering. That the managed service. It's all layered on top eight of us. They're just taking care of a lot of stuff. Stuff that honestly should have been handled in Aurora service. Aws. If you're listening drawn that product team, why is the road service not what we want? It should be what.

16:34:15
<transcript>: we want but it

16:34:16
homiecoder: @cowfacedude99 right

16:34:19
<transcript>: We want, but it's not. Thanks for the file. Sod so.

16:34:19
<transcript>: now

16:34:23
<transcript>: Now we have Planet Scale. They release this http. Api. Right.

16:34:28
<transcript>: And that API while they release these JavaScript bindings.

16:34:28
<transcript>: so

16:34:32
<transcript>: So it's meant for service context. You want to connect to your plant Skill database.

16:34:32
<transcript>: from

16:34:33
sadmadladsalman: :) /

16:34:36
<transcript>: From a serverless context, like a Lambda function or something else.

16:34:36
<transcript>: so you don't want to deal with

16:34:39
<transcript>: So you don't want to deal with Connection pools and all that stuff.

16:34:43
<transcript>: Sad welcome to Chat. I'm waving back.

16:34:45
<transcript>: Okay. So.

16:34:56
<transcript>: Where was that? So they created these JavaScript bindings, but hidden below those bindings. They also released this very Alpha, very early Http API.

16:34:56
<transcript>: and they weren't really

16:35:08
<transcript>: And they weren't really advertising that. But if you look at the JavaScript bindings, it's just a GitHub repo. If you look at it, you see they're just calling us http API. So first time Planet Scales exposed this http API. It's hard to say.

16:35:08
<transcript>: when i

16:35:26
<transcript>: When I saw that on Twitter, I freaked out because I said, hey, you know what I can do with http APIs? Like I do a Dynamo. I can make requests from Vtlts. And why do I want to make requests for VTL templates? Why would I want to do that when veto is the absolute worst thing ever invented? I want to do that because.

16:35:26
<transcript>: then i don't

16:35:35
<transcript>: Then I don't have to write Lambda functions. I don't have to deploy Lambda functions. I don't have to maintain Lambda functions. I can just say here's a VTL template.

16:35:35
<transcript>: set my data

16:35:39
<transcript>: Set my data for me GraphQL API thing.

16:35:39
<transcript>: appsyn

16:35:40
<transcript>: Appsync.

16:35:42
<transcript>: And there's no color.

16:35:43
<transcript>: colors there's no

16:35:43
<transcript>: colors there's no runtime

16:35:50
<transcript>: Colors. There's no runtime downsides at all. The only downside is at author time is spin 3 hours writing a detail template.

16:35:58
<transcript>: The reason I don't care about that. That problem with retail templates is that they're going away kind of.

16:35:58
<transcript>: app sync is working

16:36:01
<transcript>: App Sync is working on TypeScript and JavaScript.

16:36:14
<transcript>: Template where we can write a little bit of TypeScript that does all that stuff we just did. But in TypeScript where we have tieds and we have a type system and it can correct this when we fail. All the things that were bad about that author experience. Those are going away in the fall, hopefully.

16:36:21
<transcript>: I say that because they just updated the RSD and they're talking about implementing it. I think that's the happening soon.

16:36:21
<transcript>: so

16:36:23
<transcript>: So now.

16:36:23
<transcript>: you can stand up

16:36:25
<transcript>: You can stand up a serverless.

16:36:25
<transcript>: graphq

16:36:30
<transcript>: Graphql Service, or API through App. Sync.

16:36:30
<transcript>: and

16:36:37
<transcript>: And write no file functions. You don't have to write any Lambda functions and deploy those Lambda functions. You can just write.

16:36:37
<transcript>: eventually

16:36:39
<transcript>: Eventually some TypeScript.

16:36:39
<transcript>: that

16:36:49
<transcript>: That interacts with this planet skill http. Api and you've got basically what I had in the old world with Dynamo.

16:36:49
<transcript>: but with

16:37:02
<transcript>: But with an Rsql based database, that's very exciting to me. It's exciting because it's super fast. There's just no overhead, there's no cold starts. There's no runtime costs. I mean, your planet scale costs, whatever that is.

16:37:19
<transcript>: This is super cool. I'm excited. I didn't know if it was possible if we could do everything we needed to do from the TL. We can if we can do it for retail. That means eventually when they replace when they give us this TypeScript. Transpiler that transpose VTL. We should be able to accomplish it in TypeScript.

16:37:33
<transcript>: Okay. This is the most I've like gone down a rabbit hole and nerd it out a bit on stream, mostly. For the last two months, I've been poking around with the Twitch API and doing stupid stuff for the stream.

16:37:33
<transcript>: i don't

16:37:41
<transcript>: I don't know. Would you guys think, is this fun? Do you want to work on this kind of stuff on my stream? Do you want to listen to me, work on this kind of stuff? Do you want to have me in the background.

16:37:41
<transcript>: doing weird

16:37:43
stiefbroerikzitvast: hell no!

16:37:46
<transcript>: Doing weird VTL thing or do you like it better when I'm doing other things.

16:37:54
stiefbroerikzitvast: pls play fortnite

16:37:55
<transcript>: Bro. Thank you for being honest. Thanks for keeping it real. Step, bro. I know that you're always.

16:37:55
<transcript>: telling me

16:37:55
oskrm: anything works

16:37:56
<transcript>: Telling me the truth.

16:37:58
cowfacedude99: I would love this kind of stuff

16:37:59
<transcript>: Please fight for.

16:38:03
sadmadladsalman: true play fortnite

16:38:03
<transcript>: You guys don't care what I'm doing. Oh, calface blessed. This kind of stuff. Cool.

16:38:07
<transcript>: I also want to play on stream.

16:38:10
<transcript>: Stuck on my cord.

16:38:10
<transcript>: i also

16:38:14
<transcript>: I also want to play with TrpC on stream and so.

16:38:18
kylliangamer: just stream

16:38:19
jenswoeste: hey @StiefbroerIkZitVast

16:38:20
<transcript>: Is any of this worth? It is TRPC just as fast. Am I wasting my time.

16:38:20
<transcript>: this

16:38:22
<transcript>: This is pretty fast.

16:38:28
oskrm: and Deno

16:38:28
<transcript>: You can deploy absent globally. So like we could have this deployed.

16:38:31
<transcript>: In five regions around the globe.

16:38:36
sadmadladsalman: I'm not the one to speak since I'm new here, but for me, everything is pretty interesting to me

16:38:36
<transcript>: And using latency Resolvers or Latency records.

16:38:39
oskrm: Deno fresh

16:38:46
<transcript>: In Route 53, we can sort of like have this globally distributed API Planet Scale, I think is globally distributed on that http API. So.

16:38:46
<transcript>: since you can

16:38:51
<transcript>: Since you can use create really stupid fast graph build APIs if you're into that kind of thing and.

16:38:51
<transcript>: the best part

16:38:58
<transcript>: The best part is the maintenance is just there's no maintenance. You don't have anything running that you have to worry about.

16:38:58
<transcript>: no

16:39:07
<transcript>: No servers or OSS or anything in your purview. You're just writing bits of TypeScript and a graphical schema. That's it.

16:39:09
<transcript>: Okay.

16:39:09
<transcript>: just

16:39:12
<transcript>: Just stream, okay? I'll just stream. Kill you. And you know what.

16:39:12
<transcript>: i'll just stream stuff

16:39:14
<transcript>: I'll just stream stuff.

16:39:14
<transcript>: who knows what it

16:39:28
<transcript>: Who knows what it'll be any given day? Oh, you want to see Deena and Dino Fresh? I'd like to play with. You know, I hadn't really decided when I would dip my toes into the new JavaScript runtimes. I know Dina is not new. It's a couple years old or whatever, but.

16:39:28
<transcript>: i don't know

16:39:30
<transcript>: I don't know there's just so many things I want to play with.

16:39:31
seija_creations: What this?

16:39:35
<transcript>: In the more mainstream like Node JS realm.

16:39:35
<transcript>: it's hard

16:39:42
<transcript>: It's hard to dip into whole new runtimes. And like, Buns, that's probably a couple years for me before I'm gonna touch bun.

16:39:48
<transcript>: What this? Sega. This is my face. Just talking.

16:39:48
<transcript>: just explaining what

16:39:49
<transcript>: Just explaining what we did today.

16:39:55
<transcript>: I'm not the one to speak since I'm new here, but for me, everything is pretty interesting to me. Well, there you go.

16:39:55
<transcript>: it's interesting

16:39:58
<transcript>: It's interesting. I'll just keep doing interesting things. No pressure.

16:40:01
<transcript>: All Right? I gotta get off here.

16:40:01
<transcript>: it's been a lot of

16:40:03
<transcript>: It's been a lot of sitting today.

16:40:03
<transcript>: don't normally

16:40:06
<transcript>: Don't normally stream this long, six and a half hours.

16:40:06
<transcript>: we were

16:40:12
sadmadladsalman: oof

16:40:12
<transcript>: We were testing out OBS 28. That's what I'll say. We were testing out Kenneth Stream for 6 hours.

16:40:15
<transcript>: Okay.

16:40:27
<transcript>: Cool. This has been a lot of fun. I really appreciate all of you coming along, hanging out with me while I work. I used to just work in silence. I would have done all this nonsense, all this VTL stuff. Just alone in my office.

16:40:27
sadmadladsalman: thanks for the stream!

16:40:29
<transcript>: That's a lot sadder.

16:40:29
<transcript>: it's pretty sad

16:40:33
<transcript>: It's pretty sad either way, but it was a lot sadder when I didn't have you all to talk to.

16:40:33
<transcript>: so

16:40:37
<transcript>: So with that this has been a ton of fun. Maybe we could do it again. Sometimes.

16:40:39
stiefbroerikzitvast: @JensWoeste hi Woeste Jens

16:40:39
jenswoeste: thx for yet another awesome "co-working" stream - very cool!

16:40:41
mjewl: LuvSign

16:40:45
stiefbroerikzitvast: bye adam

16:40:53
adamelmore: byyyyyye all

16:40:56
adamelmore: raid coming

16:40:58
kylliangamer: bye

16:41:02
oskrm: primeagenBig

16:41:42
oskrm: never seen that keyboard thats nice LUL

16:41:46
sadmadladsalman: these scenes are pretty fun