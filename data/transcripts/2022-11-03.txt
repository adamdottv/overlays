

11:35:31
<transcript>: Subscribe.

11:35:37
adamdotdev: !topic building awguess

11:35:49
adamdotdev: !topic building awguess, i guess

11:40:11
<transcript>: You.

00:02:51
vim_cerf: sthHype

00:03:43
bheet: robotarm is crazy

00:04:26
schrew: I woke up earlier than Adam today. This is a good morning

00:07:29
ohmymndy: Good morning everyone!

00:07:36
ohmymndy: New tune who dis!?

00:07:39
corfliss: Good morning.

00:07:52
myst3rymage: Good morning !

00:09:52
oetziofficial: kruzSadge sound

00:10:10
oetziofficial: hello 👋🤗

00:10:20
ohmymndy: Long time no see

00:10:53
<transcript>: Mandy.

00:10:53
<transcript>: mandy

00:10:55
<transcript>: Mandy's, here.

00:10:55
<transcript>: it's

00:11:00
<transcript>: It's been so long. Mandy not trying to guilt you. I just missed you. Longtime. No. See.

00:11:03
<transcript>: Oh, it's easier.

00:11:03
<transcript>: mystery

00:11:07
sargath666: hail! @adamdotdev

00:11:07
<transcript>: Mystery mades and corpless and Shrew is up before me.

00:11:07
<transcript>: what

00:11:09
<transcript>: What.

00:11:12
<transcript>: And Vincerf, and beat.

00:11:14
ohmymndy: Super busy at work, lots of meetings and stuff

00:11:18
cowfacedude99: chat. should I rick roll him into working????

00:11:19
<transcript>: And something like 20 other people that aren't saying Hi and chat, that's fine.

00:11:19
<transcript>: no guilt

00:11:22
gutsyphilip: Damn... Crisp video! Welcome!

00:11:22
<transcript>: No guilt. Super busy at work. Oh, I totally get it.

00:11:25
aarrjaay: Hi

00:11:26
<transcript>: Stargoth is here in calfase.

00:11:26
<transcript>: should you rick

00:11:26
tayloreddev: hi

00:11:26
jakepagee: heyyy

00:11:40
<transcript>: Should you, Rick, roll me into working just straight off the bit. Just right off the bat gutsy, Phillip. Welcome to chat. Oh, welcome to chat, Jake. Paige. Hey, I know you seen you underscore there's a little plug hop in the discord, Taylor's here in RJ's. Here.

00:11:45
ohmymndy: Cool neon sign, is it LED?

00:11:47
gutsyphilip: What cam do you use?

00:11:48
<transcript>: Oh, I said I was gonna say, oh, yeah? The music? It stops during the intro. It's an off by one error. Maybe we'll fix it on my stream.

00:11:51
<transcript>: Yes, it is. Led. Mandy.

00:11:51
<transcript>: what camera

00:11:54
<transcript>: What camera? It's a.

00:11:54
<transcript>: sony

00:11:56
<transcript>: Sony A Seven S three.

00:11:56
<transcript>: i think all

00:11:58
adamdotdev: !camera

00:11:58
fossabot: Adam uses two main cameras, a Sony A7S III with a Sony FE 35mm F1.8 Lens which sits behind a teleprompter and serves as the wide angle shot of the office. As well as a Sony A7 IV with a Sony FE 50mm F1.2 GM which is used for the green screen camera whilst Adam is sharing his screen.

00:12:02
<transcript>: I think all that stuff is in like a command where you can just do like that. It's a long I haven't seen that command.

00:12:02
<transcript>: and as long as i

00:12:04
<transcript>: And as long as I haven't seen Mandy.

00:12:07
<transcript>: I've got a little eye Twitch developing.

00:12:08
oetziofficial: audio delayed? or is it just me

00:12:11
<transcript>: So getting old things I guess I'm 36.

00:12:16
<transcript>: Audio delay to oh, okay, it could be there could be a issue.

00:12:18
ohmymndy: eyetwitch.io

00:12:19
<transcript>: Anybody else having an audience delay.

00:12:19
<transcript>: or does

00:12:21
oetziofficial: or video delayed?

00:12:22
<transcript>: Or does they just need to refresh, refresh.

00:12:22
<transcript>: i twitch

00:12:23
schrew: Just you, methinks

00:12:24
<transcript>: I Twitch. Yeah, I've been streaming on Twitch. Now. I have.

00:12:24
<transcript>: i

00:12:25
jakepagee: looks good for me

00:12:28
<transcript>: I have a Twitch in my eye.

00:12:28
<transcript>: it's

00:12:29
oetziofficial: ah okok

00:12:29
<transcript>: It's like right here.

00:12:31
cowfacedude99: LGTM

00:12:32
<transcript>: Just a little throbbing.

00:12:32
<transcript>: it's been

00:12:34
<transcript>: It's been like a week now.

00:12:37
<transcript>: So.

00:12:37
<transcript>: i don't know

00:12:37
oetziofficial: SeemsGood SeemsGood

00:12:39
<transcript>: I don't know. I was thinking about that.

00:12:39
<transcript>: like it hasn't

00:12:41
<transcript>: Like it hasn't stopped.

00:12:44
corfliss: Good morning, Mr. Elmore. Don't forget to drink water. Should be helpful for debugging.

00:12:47
<transcript>: I don't think it's, like, visible on you can, like, watch it Twitch. But I feel it.

00:12:47
<transcript>: good morning

00:12:52
<transcript>: Good Morning, Corps List Don't forget to drink water should be helpful for Dbling that's a good.

00:12:55
<transcript>: Call. I do have my water.

00:13:01
<transcript>: I don't know what's with the arrow. The arrow hands. Today. I keep doing this.

00:13:04
cowfacedude99: did you see prime's PR to next? LGTM reminded me of it LUL

00:13:14
<transcript>: Some people, like, have a thing. I've been recording YouTube videos, and I've kind of got a thing going where I'm like, I'm right, let's do it. And that kind of hate it. I might bail on it immediately.

00:13:14
<transcript>: see prime's

00:13:17
<transcript>: See Prime's PR to next oh, Yeah.

00:13:23
<transcript>: Comment on it.

00:13:23
<transcript>: that's awesome

00:13:25
<transcript>: That's awesome. An emoji. It.

00:13:34
sargath666: @adamdotdev tbh you have the most crispy stream quality among twitch programmers and gammers, everything looks so decent, smooth, and solid

00:13:37
<transcript>: I might make a video this week. A YouTube video, just about next font. Would that be the lamest YouTube video ever? Would you all hate me and just unsubscribe.

00:13:38
bheet: go watch some sunrine/skylines/far aways sights to relax your eye muscles

00:13:50
<transcript>: To perhaps you have the most crispy stream quality among Twitter programmers in Game and gamers. Everything looks so decent, smooth and solid. I appreciate that, Sargass. I like production quality. I like.

00:13:50
<transcript>: getting

00:13:53
<transcript>: Getting things just right aesthetic.

00:14:03
<transcript>: Go watch some sunrise skylines far away sights to relax your eye muscles. Is that what it is? Beat if I just spent too much time looking at a screen? Thank you for the follow breath on.

00:14:03
<transcript>: or

00:14:05
<transcript>: Or ex. Breebon.

00:14:10
ohmymndy: 20/20/20 rule might help

00:14:12
corfliss: Adam did the branding like a month, afaik.

00:14:14
bheet: could be

00:14:15
xbrivon: yoo

00:14:16
<transcript>: Mandy. Mandy. What have you missed? Who knows? Probably nothing. I don't know. We're just hanging out. Mostly. I'm all we do. 20 2020 rule. I know that rule.

00:14:16
<transcript>: that

00:14:19
xbrivon: :D

00:14:25
cowfacedude99: @sargath666 Sorry adam but personally altf4 tops your quality

00:14:26
<transcript>: That rule is look at something 20ft away every 20 minutes or 20 seconds for 20 seconds, look at them. Look at something 20ft away for 20 seconds.

00:14:26
<transcript>: every twenty minutes

00:14:27
<transcript>: Every 20 minutes.

00:14:27
<transcript>: i don't do that

00:14:31
<transcript>: I don't do that at all. I just don't.

00:14:31
<transcript>: oh

00:14:36
sargath666: I don't think so

00:14:37
<transcript>: Oh, no? Alt F? Four tops my quality? Someone tops my quot? What do you mean by quality.

00:14:37
<transcript>: quality

00:14:45
<transcript>: Quality of the whole product like their personality is better than mine totally get it but they're production quality is better than mine.

00:14:45
<transcript>: not

00:14:47
<transcript>: Not it's very possible.

00:14:47
<transcript>: i do

00:14:50
sargath666: nope

00:14:50
<transcript>: I do have some ideas. I had some things on my.

00:14:50
<transcript>: go

00:14:55
gutsyphilip: Nah

00:14:58
<transcript>: Go down that rabbit hole too hard. Like, I don't want to spend another month on stream, just like building out stuff.

00:14:58
schrew: probably just in terms of coffee quality Kappa

00:15:02
<transcript>: But I have some ideas. I do.

00:15:10
<transcript>: Coffee quality. Yeah. My coffee is sake. I will. I'll give you that all the coffee you see on this stream. Steak.

00:15:10
<transcript>: danny blend

00:15:11
<transcript>: Danny blend.

00:15:18
<transcript>: Today I put a little tea packet in there. Some black tea.

00:15:21
<transcript>: Little caffeine. I'm not just like I needed it today.

00:15:21
<transcript>: it's one of those

00:15:23
<transcript>: It's one of those mornings.

00:15:25
sargath666: camera work, focus, everything from adam is so refined

00:15:26
laytanl_: hey!

00:15:29
<transcript>: We're gonna we're gonna work on AW, guess.

00:15:33
<transcript>: Aw, guess again. Leighton is here.

00:15:38
sargath666: in this mater ofc

00:15:38
<transcript>: I just. I want to get it done for reinvent. Because, like, reinventing.

00:15:40
<transcript>: Aws, Christmas.

00:15:40
<transcript>: and i

00:15:40
bheet: coffee with thee?

00:15:45
<transcript>: And I want to have, like, a leaderboard. I want to have some fun stuff going on.

00:15:57
<transcript>: With a to you. Yes. And now when I announce it like I haven't said anything about it on Twitter. And I know like most of my Twitter following is following me because of AWS stuff. So I want them to get the play with it.

00:16:05
<transcript>: Release it into the wild. Have a reason to, like, actually play it where you get a score, and then there's a leaderboard. We're doing it.

00:16:05
<transcript>: we gotta finish it

00:16:06
<transcript>: We gotta finish it.

00:16:06
<transcript>: maybe maybe we

00:16:14
<transcript>: Maybe. Maybe we finish it this week, Thursday and Fridays. That enough time. We've gone incredibly slow. Part of it's because I spend all this time talking to you all like, I'm a late night.

00:16:14
<transcript>: talk show

00:16:16
<transcript>: Talk show host or something.

00:16:16
<transcript>: not

00:16:20
<transcript>: Not. I'm just setting up my desk to do some work.

00:16:24
<transcript>: I should probably do that work. We ready? Are we ready.

00:16:28
<transcript>: Coffee with the C.

00:16:32
<transcript>: It's Dandy Blend It's made out of Dandelion root.

00:16:32
<transcript>: and then

00:16:34
<transcript>: And then.

00:16:36
gutsyphilip: ready!

00:16:38
nexxeln: hi adam

00:16:39
<transcript>: Today I put, oh, Geez, there, that's a way to put me in the work mode.

00:16:48
<transcript>: It doesn't really, though, because it doesn't do the full transition, like we're getting an ad. Really.

00:16:53
<transcript>: Eric Roll ad.

00:16:55
ohmymndy: Haha no adblocker, come on Adam!

00:16:59
yeltrah_: Haha

00:17:01
<transcript>: Here you are.

00:17:01
<transcript>: kathy

00:17:03
ohmymndy: And no audio...

00:17:05
nexxeln: youtube premium or brave browser when

00:17:06
<transcript>: Kathy. So you just got you got points to burn there's ad blockers.

00:17:06
<transcript>: for youtube

00:17:08
cowfacedude99: no premium?

00:17:08
<transcript>: For YouTube.

00:17:08
<transcript>: yeah we

00:17:24
<transcript>: Yeah, we don't do the audio on this one, Mandy. It's a whole thing. It's like Copyright. And I can't seem to pipe Chrome audio into the second channel of my audio that doesn't go to the VOD. It's just it's a problem, but I've just given up. So there you go.

00:17:32
<transcript>: I didn't know you could Nexus here. I didn't know you could add block YouTube ads.

00:17:32
<transcript>: youtube

00:17:35
laytanl_: anyone else have ublock origin but the YouTube ads still show?

00:17:36
ohmymndy: Can't audioflower or something route audio on OSX?

00:17:37
lilfreezi: oy

00:17:37
sargath666: yeah you can apply adblock for everything on routing lvl ;)

00:17:39
<transcript>: Youtube Premium or Brave Browser. Okay, interesting. Thank you for the follow Esu.

00:17:39
<transcript>: no premium

00:17:45
<transcript>: No premium. No, I don't pay. Why would I pay YouTube? It's free. Anyone else have other.

00:17:47
yeltrah_: Hey hey

00:17:49
<transcript>: Origin with the YouTube ads still show.

00:17:57
ohmymndy: Rather pay 8 bucks for verified Twitter am I right?

00:18:05
<transcript>: So I'm using a thing called Loops or something like that. Mandy to do my audio routing, but there's a Chrome bug, and you can't route Chrome audio on a Mac. You just can't. It goes to a random, weird channel and you can't stop it. There's no stopping it.

00:18:07
<transcript>: What I want to do here.

00:18:07
<transcript>: i want to

00:18:08
nexxeln: when you buy yt premium, it pays creators more too

00:18:09
<transcript>: I want to detach.

00:18:09
<transcript>: i want to create

00:18:12
<transcript>: I want to create a new tmux.

00:18:18
<transcript>: I just say Tmax. That appeared a new session, right? Yeah, Yeah.

00:18:21
<transcript>: Code.

00:18:23
<transcript>: Playground.

00:18:23
<transcript>: aw

00:18:25
laytanl_: ublock origin used to block YouTube ads too

00:18:25
<transcript>: Aw guess.

00:18:25
<transcript>: man

00:18:30
<transcript>: Mandy, we're making a thing called, AWS, it's a guessing game.

00:18:30
<transcript>: you probably haven't seen

00:18:30
ohmymndy: You can play the youtube video in VLC

00:18:30
laytanl_: not anymore I think

00:18:31
<transcript>: You probably haven't seen any of this.

00:18:34
nexxeln: its better than ad blockers because you can have no ads and creator still get paid

00:18:35
<transcript>: Let's do like this.

00:18:40
<transcript>: Oh, did I just create, like, three of them? Okay, cool.

00:18:43
<transcript>: Let's do like this.

00:18:50
<transcript>: So we're gonna do P scale connect AWS X state.

00:18:56
<transcript>: What? Is that? An xDate branch. So what? I call that. Okay.

00:18:56
<transcript>: and then let's

00:18:59
<transcript>: And then let's go to.

00:19:02
<transcript>: Cd code, playground.

00:19:06
<transcript>: Let's do.

00:19:06
<transcript>: is

00:19:09
<transcript>: Is that the only thing I have to do? Maybe that's a one has to.

00:19:11
sargath666: awguess sound almost like aws to me xD  - you should gain some credits from them

00:19:15
<transcript>: And then yarn Dev.

00:19:18
<transcript>: Over here.

00:19:19
ohmymndy: If I hadn't have enough subscriptions already... Deezer, Tidal, Netflix, Disney, Amazon prime, Serato...

00:19:21
<transcript>: Open it up, and Neal, vim.

00:19:21
<transcript>: i need to update

00:19:26
<transcript>: I need to update Neal them again. I got some weird errors. I think they're just deprecation warnings, but.

00:19:30
<transcript>: Let's see you guys are still talking about.

00:19:30
<transcript>: paying

00:19:34
<transcript>: Paying paying people for free things.

00:19:36
<transcript>: Just mess with you.

00:19:39
<transcript>: Heart gene is here.

00:19:47
<transcript>: Let's see rather pay $8 for verified Twitter am. Alright. Alright. That's the topical thing right now. That's the thing we talk about.

00:19:47
<transcript>: is el

00:19:53
anitrogen: whats the most useful programming language in your opinion

00:20:00
<transcript>: Is Elon Musk buying Twitter when you buy YouTube premium, it pays creators more to. I didn't know that next. Okay, so I will do it then, because I do the Turbo. What is it on Twitch? Turbo, Twitch, or whatever it's called.

00:20:00
<transcript>: something just

00:20:08
<transcript>: Something just happened and it's not in my activity, but thank you so much for whoever just did some. I think they just maybe resubscribed.

00:20:13
<transcript>: You can play the YouTube video in VLC.

00:20:13
<transcript>: not anymore

00:20:16
<transcript>: Not anymore. Okay, I'm just gonna stop with the.

00:20:18
<transcript>: Ad talk.

00:20:18
<transcript>: interview guest

00:20:23
<transcript>: Interview Guest Sounds almost like AWS to me. You should get some credits from them.

00:20:23
<transcript>: i

00:20:26
iann0036: I'd rather pay uncle Jeff for Prime ;)

00:20:30
<transcript>: I do have some credits. I've got a lot of credit. Actually, I've got more credits than I'll spin before they expire. Probably.

00:20:47
<transcript>: I hadn't have enough subscriptions already. These are titled Netflix, Disney, Amazon Prime Serato. Wow. Do you pay for title? What is title? It's the audio thing, right? I didn't know people still use that. I thought it like Win Under or something. Or maybe it just didn't do as well as people thought it would do. And they got all upset.

00:20:47
<transcript>: what's the most

00:20:51
<transcript>: What's the most useful programming language, in your opinion.

00:20:54
<transcript>: Well, nitrogen.

00:20:54
<transcript>: i

00:20:56
<transcript>: I.

00:21:02
ohmymndy: Yes Tidal and Deezer for music, I like high fidelity audio, and Spotify doesn't delivery

00:21:05
<transcript>: 'm of the job persuasion because I build things for the web if you build things for the web. Sorry, I got some little back behind the curtain here.

00:21:05
<transcript>: wizard

00:21:10
<transcript>: Wizard of Oz. This is the part we don't show.

00:21:23
nexxeln: tidal is not available in my country t3ggCry

00:21:25
<transcript>: So I build stuff for the web. I think JavaScript is the most important language if you're building for the web, because ultimately you have to write some for the browser like the browser. Well, I say that.

00:21:25
<transcript>: you

00:21:28
iann0036: And where can we party with you at re:Invent?

00:21:34
ghostyx101: hello

00:21:36
<transcript>: You don't have to Washm. You could write a lot of differently. Okay, take it all back. I don't know. Anybody know what's the most important language? I think the most important one is the one that you'll stick with learning because it's fun.

00:21:41
gutsyphilip: Rust!

00:21:42
<transcript>: It's kind of a dumb, non answer, but welcome to Chat. A nitrogen. I appreciate you.

00:21:42
<transcript>: and thanks for

00:21:46
<transcript>: And thanks for the follow. I'd rather pay Uncle Jeff for prize.

00:21:53
<transcript>: Title and dieser for Music OOH High Fidelity Audio Spotify doesn't deliver speaking of.

00:21:53
<transcript>: its spotify

00:21:55
<transcript>: Its Spotify time.

00:21:59
ghostyx101: whatever is in demand and what u could bring more value with is the most important language

00:22:03
j3sus_h: ayyyoo we building

00:22:04
<transcript>: We're not going to shuffle today. We're just gonna ride with all J. So I need a new Chrome window over here because.

00:22:04
<transcript>: somebody

00:22:06
<transcript>: Somebody.

00:22:07
nexxeln: javascript cause you can build anything, websites, clis, mobile apps, desktop apps, embedded. doesn't mean its good in all of them but its useful

00:22:07
<transcript>: Killed my cry.

00:22:12
<transcript>: Who did that? Who killed my Chrome. I'm just kidding. I know who did it.

00:22:21
<transcript>: All right, we're gonna go local host. And is it on three, three, three. Now it's 3000.

00:22:21
<transcript>: aw

00:22:25
<transcript>: Aw guess everyone's favorite AW guessing game.

00:22:26
laytanl_: how good does your audio setup need to be to hear the difference @ohmymndy

00:22:32
<transcript>: Are AWS guessing game. We're gonna do a new font because this one sucks. Oh, maybe we'll upgrade it to next 13. Why not.

00:22:39
j3sus_h: We doing Azure this morning

00:22:39
bheet: +

00:22:39
<transcript>: Why not? Because everything's experimental and broken. That's a good reason. But otherwise, why not.

00:22:41
corfliss: Brainf*** is so intuitive. Kappa

00:22:43
j3sus_h: let's gooo

00:22:43
<transcript>: Everything's not broken. All the component library stuff is great.

00:22:48
<transcript>: Ayo Jesus H we are building AW.

00:22:48
<transcript>: guess

00:22:58
lilfreezi: @j3sus_h yo

00:23:01
j3sus_h: Azure Working Services

00:23:01
<transcript>: Guess also. Thank you for the follow lazy developer. I didn't hear that one in my ear. Rust says gutsy. Phillip, I don't know if you should start people unrest. I feel like the learning curve of rest is such that maybe not the best first language.

00:23:03
lilfreezi: fancy seeing you here

00:23:06
gutsyphilip: Worried about building anything major on Next 13

00:23:07
<transcript>: But maybe the most important language in the future. It does seem like everything's being written in rest now.

00:23:10
j3sus_h: it's muh boi freezi!

00:23:11
ohmymndy: 200+ euro headphones and some high quality dac

00:23:14
ghostyx101: but also dont follow every trend u can find, u also have a life outside programming so go live

00:23:14
<transcript>: In. Where can we party with you at Reinvent? Great question.

00:23:19
j3sus_h: @lilfreezi PowerUpL ending9Hype PowerUpR

00:23:20
<transcript>: I don't know. I've never been I'm very excited. I'm gonna be.

00:23:25
j3sus_h: hanaxbLight hanaxbLight hanaxbLight hanaxbLight hanaxbLight

00:23:31
<transcript>: Wherever the action is, I'm gonna be hanging out. There is like a hero booth. So I'm sure I'll meet a lot of people at the hero booth. I'll go there at some point because I'm sure there'll be a lot of heroes.

00:23:31
<transcript>: converging

00:23:44
<transcript>: Converging on the hero booth. Or I don't know if it's a booth or like a lounge. Hero Lamb lounge. I think that's better like an airport lounge. I hope it's better than airport lounges, though, because those are kind of terrible.

00:23:46
bheet: +++

00:23:50
<transcript>: Javascript because you can build anything with.

00:23:50
<transcript>: cli's mob

00:23:52
gutsyphilip: Definitely agree with not starting with it. Stuck with JS for the past 6 years but I'm adding Rust to my stack now. Seems important for the future

00:23:58
<transcript>: Cli's mobile apps to sub apps embedded doesn't mean it's good and all of them, but it's useful. It's true. Next you can. You can pretty well touch everything with JavaScript.

00:23:58
<transcript>: how

00:24:01
<transcript>: How does your oh, you're talking to Mandy.

00:24:01
<transcript>: we doing

00:24:03
bheet: +++++

00:24:08
<transcript>: We doing Azure this morning? No, it's on. Aii might rewrite the backend soon. Ish.

00:24:08
<transcript>: not

00:24:12
<transcript>: Not a huge fan of Prisma and slowness on Versaille.

00:24:15
<transcript>: Let's see.

00:24:17
sargath666: we use php, go, and react js - we plan to migrate to react typscript because vanilla js is hell to me - I had to emphasize this xD

00:24:23
<transcript>: Shootuju also don't follow every trend you can find. You also have a live outside programming so go live live your life.

00:24:27
<transcript>: I'm trying to keep up with that. You guys are chatty.

00:24:27
<transcript>: not

00:24:32
nexxeln: rewrite in rust serverless functions

00:24:36
ghostyx101: what do u think of ysqla

00:24:39
<transcript>: Not starting with it. Stuck with JS for the past six years, adding rest to my staggering now seems important for the future. Yeah, I'm gonna be I'm gonna be learning some rest on stream on this very stream that you're watching right now. I'll be learning some rest. I'm excited.

00:24:39
<transcript>: talk with

00:24:43
ghostyx101: mysql, planetscale

00:24:45
<transcript>: Talk with TG the other day. There's a thing he's working on. Then I'm pretty excited. Subdivision.

00:24:53
corfliss: Question: ever wonder if you will do AI?

00:24:55
ohmymndy: Nice, also wanting to learn Rust and Go

00:24:56
<transcript>: There's some little side quests I could go on to try and build something that matters. I need something up front that matters. Like I know this thing is important to build.

00:24:57
gutsyphilip: Awesome!

00:25:02
<transcript>: Let's see ever wonder if you will do AI.

00:25:02
<transcript>: well corpus

00:25:06
<transcript>: Well Corpus, we've done some AI in the last week.

00:25:06
<transcript>: this is an

00:25:08
<transcript>: This is an AI stream.

00:25:08
<transcript>: we're

00:25:10
foobfoob: how do you deploy nextjs with api routes on lambda, do you use a framework for creating an lambda func for every api route or how does that work?

00:25:11
<transcript>: We're, AI programmers.

00:25:11
<transcript>: which means

00:25:16
<transcript>: Which means we know how to cobble together a bunch of Python to use other people's hard work.

00:25:16
<transcript>: that's what

00:25:19
<transcript>: That's what AI developers are.

00:25:19
<transcript>: also

00:25:20
ohmymndy: I have enough ebooks about go and rust but not enough energy and time...

00:25:22
<transcript>: Also wanting to learn, rest and go.

00:25:22
<transcript>: yes

00:25:29
maleero: What is he building?

00:25:36
<transcript>: Yes. Same. I've done some go work, but I want to do a lot of rest. That's what I want to spend all my time doing. This. Sounds like if you write Rust, you just enjoy life. You stay out of all the drama. You're just right. And Rust, it's got a great type system.

00:25:36
<transcript>: just

00:25:48
<transcript>: Just write really good software. Sounds fun. How do you deploy an XJS with API routes on the Lambda to use a framework for creating a land for every API route? Or how does that work? You just upload. Versaille. That's the problem with next. Yes.

00:25:48
<transcript>: they say you can

00:25:52
<transcript>: They say you can deploy it anywhere and like.

00:25:52
bheet: just write assembly

00:25:54
<transcript>: Whatever.

00:25:54
<transcript>: anywhere

00:25:56
nexxeln: adam has come full circle on the twitch dev streamer, first neovim now rust

00:25:57
ohmymndy: Go because a lot of the cloud native stuffs are written in it and Rust because speed

00:26:03
<transcript>: Anywhere you want, but really, it's not a fire Versaille. You can play those two places and soon AWS, AWS is gonna get better about nextdef deployments, but mostly.

00:26:03
<transcript>: you're stuck

00:26:04
j3sus_h: we're building a new binary prototype to compete with protobuf

00:26:07
<transcript>: You're stuck to pulling to Versailles. Do you want to use everything next? Does.

00:26:07
<transcript>: you're stuck

00:26:09
<transcript>: You're stuck on yourself.

00:26:13
<transcript>: Okay. What is he building? Well, so far.

00:26:13
<transcript>: so far nothing

00:26:14
<transcript>: So far nothing.

00:26:30
<transcript>: So far I'm building nothing. This is what I'm building, though. It's called, AW. Guess that was a slow transition. You've got like, these things. You gotta guess what is it? What is it? Cloudy, SM. And then it says, Ja. And you got a point. We're gonna make this look better, obviously.

00:26:30
<transcript>: this one

00:26:33
<transcript>: This one is something with coffee. What is this.

00:26:36
<transcript>: Oh, Geez, I have no idea.

00:26:36
<transcript>: what why would

00:26:41
<transcript>: What? Why would it look like a coffee cup? Corto that's like the Java? Oh, Java.

00:26:51
<transcript>: It just clicked. So when you miss one, it takes off 5 seconds when you get it right. Can I get one right? When you get it right it adds 5 seconds to the timer. Okay, game over.

00:26:51
<transcript>: so

00:26:54
<transcript>: So it's a little rough.

00:26:54
<transcript>: on

00:26:59
<transcript>: On the visuals, but we got all of the state management stuff and the game.

00:26:59
<transcript>: mechanics

00:27:01
<transcript>: Mechanics mostly working.

00:27:09
maleero: No, not this nonsense LUL the important thing

00:27:21
<transcript>: So the front and the back end, we just have to make it look nice. And then I have to add a leaderboard. And then I want to I want to change the score system to take into account streaks. So when you're on a streak, we're gonna visualize that it's like getting bigger and bigger and more intense and more scale that you're on a streak. Don't miss one, don't miss one, you're on a streak. You know what I'm saying.

00:27:24
<transcript>: Just write assembly. I don't know about that.

00:27:31
<transcript>: We're building a new binary prototype to compete with Protobust. Definitely not that.

00:27:36
<transcript>: The important thing, Maliro? What's the important thing.

00:27:40
<transcript>: You want me to build something else today? Not this dumb thing.

00:27:48
<transcript>: Do I work on important things ever. Oh, the rust thing. You may build a rough thing. There's, like, seven things I could be doing this morning.

00:27:48
<transcript>: and

00:28:00
<transcript>: And I just I thought I need to come back and finish this reinvents coming into the month. I couldn't build this offstream if you guys don't want to watch AW, guess I would get it. I don't know if I want to watch myself build AW guests.

00:28:07
<transcript>: What I really want to be doing is working on some.

00:28:07
<transcript>: dream

00:28:08
<transcript>: Dream booth.

00:28:08
<transcript>: on the

00:28:10
jakepagee: I kinda do

00:28:11
<transcript>: On the cloud stuff.

00:28:14
<transcript>: Would you guys want to watch me do that.

00:28:18
lilfreezi: im interested i havent watched any nextjs development

00:28:23
<transcript>: This is a T three app. So familiar with the T three stack. Aw, guess is a bunch of that.

00:28:25
<transcript>: It's.

00:28:28
bheet: cloud hacking

00:28:29
<transcript>: Next JS, and.

00:28:31
<transcript>: Planet Scale is a database.

00:28:37
nexxeln: beta.create.t3.gg

00:28:37
<transcript>: Interested? I haven't watched any next shift development. You know I got cut off earlier.

00:28:39
<transcript>: So.

00:28:39
<transcript>: calf a just

00:28:42
maleero: No, I’m just joking, this looks fun. You just mentioned “something important”

00:28:46
<transcript>: Calf a just sent me over to my desktop, and I wasn't quite ready. I had more I wanted to say. And one of the things I want to say is.

00:28:55
<transcript>: Well, what do we want to do on this stream? I might stream every morning. I might start streaming every morning for 4 hours. And if I do that, we're gonna have to have like a purpose.

00:28:55
<transcript>: i feel like

00:29:00
<transcript>: I feel like there needs to be a reason that I'm doing this like a theme.

00:29:02
maleero: With teej or something

00:29:06
<transcript>: It can't just be what could just be hanging out. But is that the theme? Should I just stop writing stuff.

00:29:06
nexxeln: finish the rust book!

00:29:10
<transcript>: And joking. This looks like fun. You just mentioned something important with TJ.

00:29:14
nexxeln: i'd co learn with you

00:29:17
<transcript>: Finish the rust book on stream. You guys want to watch me read the rest book and I guess do the little examples and stuff.

00:29:17
<transcript>: co learn with me

00:29:18
ohmymndy: Learn Rust with us

00:29:26
<transcript>: Co learn with me. I do want to learn. Rest. That wasn't like the next thing I was thinking on the string. But I could we could, we could do it. Let's do it.

00:29:26
<transcript>: i actually am

00:29:29
<transcript>: I actually am in the mood? I'm in the mood to learn something new.

00:29:29
<transcript>: since

00:29:35
<transcript>: Since we're just gonna abandon everything I had planned, we'll see I'm gonna change the title? We're gonna change the topic.

00:29:35
<transcript>: where

00:29:37
<transcript>: Where.

00:29:37
<transcript>: learning

00:29:38
<transcript>: Learning rust.

00:29:41
adamdotdev: !topic we're LEARNING RUST

00:29:46
<transcript>: And then I'm gonna change the title of the stream.

00:29:49
<transcript>: Learning rust.

00:29:51
nexxeln: rust by example or the official rust book/

00:29:55
<transcript>: And.

00:29:55
<transcript>: building

00:29:57
<transcript>: Building with.

00:30:01
<transcript>: What's it called building with you.

00:30:01
<transcript>: okay

00:30:02
<transcript>: Okay.

00:30:09
vim_cerf: We learning! hypComfy

00:30:11
<transcript>: We're gonna change the title now we'll draw in the rest craft. They can all come in and make fun of me. I hope we got the PrimeGen mustache. That's good.

00:30:11
<transcript>: we're learning

00:30:31
<transcript>: We're learning rust people we're gonna read. I don't think we're gonna do either rest by example or the official S book. I think I'm gonna start just with you. I'm just gonna start with the getting started on you because I want to build stuff that runs in the browser and I think I think that'll be good enough. If not, we'll jump back and we'll find something better with the rest book. Might be it.

00:30:31
<transcript>: the rest book

00:30:37
ohmymndy: Blazingly fast!

00:30:38
aarrjaay: Starting with me?  :D

00:30:39
<transcript>: The rest book might be a little like a little too slow for this stream and for like everyone enjoying themselves.

00:30:42
cowfacedude99: not sure you would want to start with yew

00:30:44
<transcript>: Blazingly fast. Starting with you, RJ.

00:30:44
<transcript>: so

00:30:48
<transcript>: So what are we starting with? Not sure you want to start with you really.

00:30:48
<transcript>: oh

00:30:50
aarrjaay: ohhh Yew?  me?

00:30:51
<transcript>: Oh, starting with me. You. I get it, I get it.

00:30:56
<transcript>: Okay. Since we're doing like we're doing random stuff now, and we're not doing anything I had planned.

00:30:56
<transcript>: first thing

00:31:01
<transcript>: First thing I want to do is fix that audio thing in my intro. I'm sorry, not sorry.

00:31:12
<transcript>: It'll take 2 seconds. It's literally an off by one error, but I can't sink and I need you all to just tell me, oh, minus one, you dummy. So I can just move on because it's an issue, and I just want to fix it.

00:31:16
<transcript>: And then we're learning, rest.

00:31:16
<transcript>: let's

00:31:18
<transcript>: Let's do it.

00:31:18
<transcript>: now i

00:31:20
sargath666: @adamdotdev to me, exercism.org is nice spot to check out, if it comes to play with new language

00:31:25
nexxeln: off by 1 errors REEE

00:31:28
<transcript>: Now I'm ready cafe. See how I kind of like my body language suggests I'm shifting over here now I'm ready to start sharing my screen.

00:31:28
<transcript>: you know i'm

00:31:29
nexxeln: no reee emote :(

00:31:30
<transcript>: You know, I'm saying.

00:31:30
<transcript>: to

00:31:37
<transcript>: To me, exorcism.org is a nice spot to check out if it comes to play with a new language.

00:31:37
<transcript>: exorci

00:31:41
<transcript>: Exorcism.org. Okay, we'll take a look.

00:31:46
<transcript>: No re emote? What's? Re.

00:31:49
<transcript>: What's a re emote.

00:31:53
<transcript>: Rj thank you so much for the resub. Thank you so much.

00:31:53
<transcript>: for

00:31:59
<transcript>: For your resub and for your original sub. All of your subs. Really. Thank you.

00:31:59
<transcript>: the first one

00:31:59
sargath666: resuba emote

00:32:00
<transcript>: The first one. This one.

00:32:00
<transcript>: just all of them

00:32:02
<transcript>: Just all of them.

00:32:07
<transcript>: A resubmote. I should have a resub amount. What is this.

00:32:13
nexxeln: https://betterttv.com/emotes/5f8d26fb473f4802fe473b29

00:32:13
<transcript>: Also. What's a remote. Okay, get out of here. Aw, guess. Get out of here.

00:32:13
<transcript>: let's

00:32:15
<transcript>: Let's just get out of here.

00:32:19
<transcript>: Okay.

00:32:19
<transcript>: i want to fix

00:32:22
<transcript>: I want to fix you off by one bug. Here we go. We're fixing it.

00:32:26
corfliss: Question: do you know Codewars? I learned some Rust a bit with it by some problem-solving.

00:32:26
<transcript>: We're gonna go like this.

00:32:26
<transcript>: and

00:32:28
<transcript>: And we're gonna say.

00:32:30
<transcript>: Inv.

00:32:32
<transcript>: I really hate.

00:32:43
cowfacedude99: @sargath666 You do get other people to review your code so that's nice

00:32:44
<transcript>: In VM. Now the node manager. I hate it because of in them. Like it's too close, too close. Envy is too close to NVM. I don't like it.

00:32:44
<transcript>: let's

00:32:47
<transcript>: Let's go to intro.

00:32:50
sargath666: yep

00:32:51
cowfacedude99: I have my nvim aliased to vi

00:32:53
ohmymndy: Are you using some kind of tiling program on osx?

00:32:56
<transcript>: I've made changes that I haven't committed. That's not good. Okay, so I made some changes recently to just have it play random songs in, like, a playlist. Basically.

00:32:59
nexxeln: i aliased nvim to n

00:32:59
<transcript>: But then when it gets to the end.

00:33:01
<transcript>: Right here.

00:33:04
<transcript>: When I get to the end, it's supposed to.

00:33:04
<transcript>: let's

00:33:09
nexxeln: yabai @OhMyMndy

00:33:10
<transcript>: Let's see. Set the index back to zero. This is my off by one error. So next index.

00:33:20
<transcript>: Equals current index. Okay, which is the playlist index of the current song. Okay, wait, if the song ended. No. Yeah, there's still song. Okay.

00:33:24
<transcript>: The next index is current INEX.

00:33:24
<transcript>: so if we're on

00:33:26
<transcript>: So if we're on the first one, we're on zero.

00:33:26
<transcript>: and

00:33:28
<transcript>: And then the next.

00:33:28
<transcript>: current index

00:33:29
ohmymndy: Thanks I'll check that out

00:33:40
<transcript>: Current index plus one would be one is greater than the playlist links, which would be two if there were two elements zero and one right? I hate, I hate array, math, or whatever this is.

00:33:40
<transcript>: so

00:33:49
<transcript>: So if the playlist links is 20 plus one is one not greater than two. So it should go over here.

00:33:49
<transcript>: and it should

00:33:51
<transcript>: And it should be.

00:33:51
<transcript>: this current

00:34:05
<transcript>: This current index plus one. So one is the new index. That's what it's doing. It's playing through each song. But then when it gets to the next one, current index is one plus one is two. Still not greater than Playlist links.

00:34:05
<transcript>: and that's

00:34:07
<transcript>: And that's the problem.

00:34:14
ohmymndy: We don't have the characters you are typing on the screen Adam?

00:34:15
<transcript>: It should be it should be current index is greater than no or else just make that greater than or equal to.

00:34:17
<transcript>: Maybe.

00:34:17
<transcript>: what do we

00:34:19
<transcript>: What do we think.

00:34:19
<transcript>: might work greater than

00:34:22
<transcript>: Might work greater than or equal to then on that second one.

00:34:22
<transcript>: current

00:34:23
gutsyphilip: >=

00:34:31
<transcript>: Current index plus one would be two, which is greater than or equal to the playlist link. So we need to go back to the beginning to zero. Is that it all we have to do.

00:34:35
<transcript>: We don't have the characters you're typing on screen. I don't know.

00:34:35
<transcript>: sorry how about

00:34:36
<transcript>: Sorry, how about.

00:34:36
<transcript>: yeah yeah

00:34:39
<transcript>: Yeah, yeah, okay.

00:34:44
<transcript>: What do we think? Is this it? Did I fix it.

00:34:44
<transcript>: you aid

00:34:47
lilfreezi: >= or playlist.length - 1 yea

00:34:48
<transcript>: You AIDS in them to in that's so short.

00:34:48
<transcript>: oh

00:34:55
<transcript>: Oh in Calvis did it to V like your SSHing SSHing into some old machine. And you need to use v.

00:35:04
<transcript>: Do you know Code Wars? I learned some rust a bit with it by doing by some problems. So I know I've never heard of that.

00:35:16
<transcript>: Using some kind of Tyling program. Okay. Yeah. You answered that. Cool. Play or playlist link. Dot one. Yeah. Do we like that better? I kind of like that better. Because, like.

00:35:16
<transcript>: it sounds

00:35:22
<transcript>: It sounds weird to me to be greater than or equal to it's like it's just gonna eventually get to be equal to.

00:35:29
<transcript>: It's never gonna be greater because we're gonna reset. So I don't know something about that. Does that feel better.

00:35:29
<transcript>: nice one

00:35:43
<transcript>: Nice one. I think that feels better. Okay. We did it. We fixed the bug. I'm not gonna test her right now, but I'm pretty sure we fixed it. Let's just commit all this stuff, too. Get status. What do we got it'll. Crown intro. Sure.

00:35:49
<transcript>: Breakmaster Cylinder made a medium version of my theme Love it.

00:35:49
<transcript>: i just

00:35:52
<transcript>: I just love Brake Master Cylinder. He's the best.

00:35:54
<transcript>: Feet.

00:35:54
corfliss: Will lurk, prepping vital exams. You do you, sir.

00:36:01
<transcript>: Or latest. I've done this before.

00:36:04
<transcript>: We've been here before.

00:36:10
aarrjaay: Is that how debugging works?  Make a change and just assume it fixes it without testing?  I'm new to programming so good to learn from the master

00:36:13
<transcript>: Okay get push actually love that I store my transcripts like that's actually really great. Maybe I shouldn't put them in git though I don't know.

00:36:13
<transcript>: uploading

00:36:16
<transcript>: Uploading a giant wave file don't mind me.

00:36:24
<transcript>: All right, Corplus. I'll keep doing me. You keep doing you prepping for your vital exams.

00:36:29
nexxeln: @adamdotdev i sent the link to the emote btw

00:36:29
<transcript>: Is that how Debugging works. Make a change and just suit it, fixes it with that testing.

00:36:29
<transcript>: yes

00:36:43
bheet: autopilot WutFace

00:36:46
<transcript>: Yes. Rj. You've learned. Good job learning. You're welcome. Okay. I'm gonna close this pane and we're good. We did it. We fixed the thing. We checked in the code. Now let's do some rest. Okay? We're gonna go. Cd.

00:36:46
<transcript>: code

00:36:55
<transcript>: Code pullground. Okay. This is probably like this thing on my list of, like, time sensitive things I should be doing. But you know what.

00:37:03
<transcript>: Finger arrows. We're doing it. I keep doing this today. We're learning a rest. Let's make a directory like rust.

00:37:03
<transcript>: now

00:37:05
<transcript>: Now.

00:37:08
<transcript>: Learning, rest.

00:37:15
<transcript>: We think learning rust. I'm gonna get hung up on naming the directory for my learning.

00:37:19
<transcript>: Because that's how dumb I am. The Rest book.

00:37:23
<transcript>: I had a vote of no confidence for learning.

00:37:23
<transcript>: via

00:37:25
<transcript>: Via.

00:37:25
<transcript>: the

00:37:27
<transcript>: The U.

00:37:27
<transcript>: getting

00:37:29
<transcript>: Getting started.

00:37:29
<transcript>: we

00:37:31
<transcript>: We don't think I should learn with you.

00:37:36
<transcript>: I just kind of want to, like, build a thing that runs in the browser.

00:37:48
<transcript>: I really want to build a CLI like that. There's something about, like, removing frontend concerns that I really like when you're learning something new, just like, just get me down into the programming part. I just want to.

00:37:48
<transcript>: in and out

00:37:51
<transcript>: In and out. I don't want to do any.

00:37:51
<transcript>: styling

00:37:53
<transcript>: Styling or.

00:37:53
<transcript>: comp

00:37:58
<transcript>: Components or whatever on the front end. So maybe in that sense I should start with the book.

00:38:02
cowfacedude99: you can start with aocd last year's challenges

00:38:08
<transcript>: You sent me a link. Let's see to the emote. What is the emote? Let's see here.

00:38:08
<transcript>: better

00:38:10
<transcript>: Better TTV.

00:38:10
<transcript>: cop

00:38:15
<transcript>: Copy link. Do I have to do something to enable better TTV emotes? I thought there were already enabled or something.

00:38:15
<transcript>: oh

00:38:21
<transcript>: Oh, really? So you can't do that in mine. But you can do that in other people's. That you're saying.

00:38:24
<transcript>: Is that what you're saying to me.

00:38:29
aarrjaay: Sorry Myst3ryMage

00:38:32
cowfacedude99: those seems to be a good starting point.

00:38:33
nexxeln: yeah you need to login and add the emote

00:38:33
<transcript>: You can start with AOCD last year's challenges. Oh, what's that.

00:38:36
<transcript>: Advent of code.

00:38:38
<transcript>: Having of code.

00:38:43
<transcript>: What's? The D? Sorry, mystery mage.

00:38:51
<transcript>: Those seem to be a good starting point. Yeah. You need to login and add the emote. Oh, that's how better TTV works. What.

00:38:53
fragaverage: yoooo

00:38:54
<transcript>: Log in to add to your chat.

00:38:54
<transcript>: i would love

00:38:55
lilfreezi: advent of co duh

00:38:55
cowfacedude99: yes. advent of code

00:38:57
<transcript>: I would love to where do I? How do I.

00:39:00
<transcript>: Know I was logged in.

00:39:00
<transcript>: i didn't

00:39:03
ghostyx101: 2Syndras1Cup

00:39:07
<transcript>: I didn't know how I didn't know how this worked. Okay, well, it's added, but any other request while we're in here adding stuff.

00:39:11
vim_cerf: REEE

00:39:11
nexxeln: REEE

00:39:13
<transcript>: Suit. Two syndras. One cup. Is that another one? You want me to add.

00:39:16
vim_cerf: pugPls

00:39:18
nexxeln: EZ

00:39:18
<transcript>: Was it not working? Is it so much working.

00:39:18
<transcript>: pug

00:39:20
lilfreezi: @ghostyx101 🤨

00:39:23
<transcript>: Pug, please. Oh, you guys have lots of requests. How do I just like, search.

00:39:23
player__piano: REE

00:39:25
justreusek: Sycamore is perhaps better than yew...

00:39:25
<transcript>: Bitter TV.

00:39:25
yeltrah_: That doesn't sound safe

00:39:35
yeltrah_: @ghostyx101 O.o

00:39:35
ghostyx101: looks cool

00:39:36
lilfreezi: make window bigger

00:39:39
<transcript>: Sycamore is perhaps better than you. Interesting. I've heard I've heard Mumbles of Sycamore. I'm not even in the Wrest landscape, rust community. And I've heard doesn't sound safe.

00:39:42
<transcript>: Make window bigger.

00:39:42
<transcript>: oh it

00:39:43
oetziofficial: idk if it's NODDERS or nodders

00:39:47
nexxeln: NODDERS AND NOPERS

00:39:49
<transcript>: Oh, it's too zoomed in. Yeah. So now I can log in. No. Now I can search.

00:39:52
oetziofficial: ^

00:39:53
<transcript>: Dashboard? Emotes.

00:39:53
<transcript>: okay

00:39:59
<transcript>: Okay. What do you guys want? Call them out. I thought these were just built into Twitch. To be honest.

00:39:59
<transcript>: nodders

00:40:00
<transcript>: Nodders.

00:40:01
vim_cerf: pugPls

00:40:05
<transcript>: Nodders slackened time. Thanks for the follow this one.

00:40:06
nexxeln: OMERGALUL

00:40:07
<transcript>: No.

00:40:10
<transcript>: Oh, there's so many nodders.

00:40:10
<transcript>: we got a lot of no

00:40:11
<transcript>: We got a lot of nodders.

00:40:14
<transcript>: Do we have a favorite Nodder.

00:40:19
ghostyx101: lol tailwind is literally everywhere

00:40:22
<transcript>: Omer. This is getting insane. You guys have so many opinions on emotes.

00:40:33
oetziofficial: OMEGALUL

00:40:33
<transcript>: So there's a frog one. It's a global emote. So they did next. So that's easy. But are my TTV one's not working? I don't see them.

00:40:34
lilfreezi: tailwind is important to my mental health 💯

00:40:38
nexxeln: do the christmas one

00:40:40
<transcript>: Addons.

00:40:40
<transcript>: i don't know

00:40:43
nexxeln: you need to get the extension @adamdotdev

00:40:43
player__piano: REEE

00:40:48
oetziofficial: you need the extension

00:40:50
ghostyx101: scss is even better

00:40:50
<transcript>: I don't know. How do you do this in Firefox? I'm trying to do this in Firefox. And I don't know. Seven TV. I don't have the better TV. Are you kidding me? I don't even have this. People.

00:40:52
<transcript>: Let's see.

00:40:52
<transcript>: better

00:40:55
<transcript>: Better T. I'm just gonna do this right now.

00:40:58
<transcript>: I have seven TV, better.

00:41:01
<transcript>: Ttv.com.

00:41:04
<transcript>: So I'm so behind.

00:41:08
<transcript>: So behind the times add.

00:41:13
<transcript>: Stuff.

00:41:16
<transcript>: Okay.

00:41:16
<transcript>: i think i

00:41:18
<transcript>: I think I did it.

00:41:24
<transcript>: Now I should see. Do I need to refresh this page? Maybe.

00:41:28
<transcript>: This is fun.

00:41:33
nexxeln: how were you using twitch without bttv

00:41:36
<transcript>: We are gonna learn rust after I choose a Nodder or something I think with the file could use base player.

00:41:39
<transcript>: I've got to have the extension now.

00:41:39
<transcript>: let me

00:41:43
jakobkg: learning rust? good times

00:41:45
<transcript>: Let me see if I can see a re. I don't see any reason. Oh, I do see Reese. Okay. Yeah.

00:41:45
<transcript>: so you want puzzle

00:41:49
player__piano: REEE

00:41:49
<transcript>: So you want puzzle please this one seems like it'll be easier to search.

00:41:52
<transcript>: Geez there's so many so many of each one though.

00:41:52
<transcript>: to use

00:41:56
<transcript>: To use thank you so much for the sub. The prime sub.

00:41:59
kyooz_bass_player: hi man!

00:42:01
<transcript>: All right, this is a distraction. I feel like I could spend a lot of time on this page.

00:42:02
lilfreezi: ICANT

00:42:06
<transcript>: Give me. I want the top three. What are the top three? You're missing.

00:42:06
<transcript>: and

00:42:12
<transcript>: And I'm gonna add them. Welcome to my chat to use I gotta figure out how to say your name in a more.

00:42:14
<transcript>: Like a more.

00:42:14
<transcript>: fluid

00:42:15
nexxeln: catJAM

00:42:19
<transcript>: Fluid like a fluent fluid way, like in the middle of conversation.

00:42:19
<transcript>: i'm like to use

00:42:21
nexxeln: popcat

00:42:25
<transcript>: I'm like to use it's kind of hard cat jam. I've seen that one. I can't, I can't.

00:42:32
<transcript>: If there weren't so many options topping. Let's just go to top emotes. Catch it. Okay. Here we go. We're adding this one.

00:42:32
<transcript>: we're gonna

00:42:34
kyooz_bass_player: you can call me kyo

00:42:39
<transcript>: We're gonna add I've seen if I've seen it before and I'm old if I've seen it before that means it belongs in my channel.

00:42:39
<transcript>: omega

00:42:41
<transcript>: Omega. Lowell. Is that it.

00:42:41
<transcript>: is that the

00:42:43
<transcript>: Is that the Omega low.

00:42:43
<transcript>: i guess

00:42:45
<transcript>: I guess.

00:42:50
nexxeln: yay OMEGALUL

00:42:52
<transcript>: Kyo Kyo. I think it's the K, it's the K and the Y. They're the hard thing for me, so.

00:42:54
<transcript>: Kyo.

00:42:57
nexxeln: Sadge

00:43:00
<transcript>: Ko Ko I can say Kyo.

00:43:01
sargath666: @adamdotdev fyi just checked the https://adam.dev/#contact tweet link leads to old nickname I believe https://twitter.com/aeduhm

00:43:04
<transcript>: I thought I had this one. Is that a seven TV thing.

00:43:11
kyooz_bass_player: yes

00:43:12
<transcript>: Just checked M. Dev contact tweet link leads to old nickname. Yeah, I target it's so sad because.

00:43:23
<transcript>: I'm literally making a thing for building your personal site, and I can't update my personal site. Something's broken on it. I tried, and then I just gave up. I didn't want to mess with it.

00:43:23
<transcript>: so

00:43:26
<transcript>: So I'm just gonna redo my personal site.

00:43:26
<transcript>: i just

00:43:31
<transcript>: I just need to get to it. It's like number eight on my list. Learning Rust is number five.

00:43:31
<transcript>: so we'll get there

00:43:33
<transcript>: So we'll get there eventually.

00:43:33
sargath666: roger that

00:43:40
<transcript>: Let's see. Ko. We got it. So I'm gonna add, like, a few more of these. I just added.

00:43:40
<transcript>: do i have this

00:43:42
<transcript>: Do I have this? Okay, give me that one.

00:43:43
fragaverage: Adam takes 40 minutes to get started in stream, you think he's gunna update that page? 👀👀👀

00:43:47
<transcript>: And then, oh, is that clap? I've never seen that before. How about easy, though.

00:43:49
<transcript>: Sounds good.

00:43:52
<transcript>: Poggers.

00:43:53
player__piano: EZ

00:43:57
<transcript>: Heard people say pokers. I think that means good things are happening.

00:43:57
<transcript>: pepe

00:43:58
myst3rymage: POGGERS

00:43:58
lilfreezi: ez gets paired with clap

00:43:58
nexxeln: MODCHECK PLS

00:44:02
<transcript>: Pepe hands. Okay, we're doing stuff. We're adding them PIPA, jam.

00:44:05
lilfreezi: for EZ Clap

00:44:07
nexxeln: add HUH

00:44:07
<transcript>: This frog. I've believed that is Pepe, right.

00:44:10
<transcript>: I've understood that from the internet.

00:44:10
<transcript>: pipp

00:44:15
<transcript>: Pippid D. I don't know. Now I'm just adding a ton of Is there like a button where I can just add all the good ones.

00:44:15
<transcript>: like a

00:44:16
nexxeln: pepeD

00:44:17
<transcript>: Like a pack of them.

00:44:20
fragaverage: REEE  REEE  REEE  REEE  REEE

00:44:21
<transcript>: Okay.

00:44:21
<transcript>: i like this

00:44:25
<transcript>: I like this one. This is fun. So I'm adding it okay, we're done, we're done.

00:44:25
<transcript>: so not

00:44:28
nexxeln: 5HEAD

00:44:30
<transcript>: So not you. That's what I'm being told. Don't do you.

00:44:38
<transcript>: Mind check, please. Oh, can my mods hop in here and do the same time they want to.

00:44:43
sargath666: @FragAverage :D

00:44:47
<transcript>: Frag, 40 minutes to get started stream because you can update that page. Exactly. Frag is here. Hey, Frag. Mandy's here, too.

00:44:47
<transcript>: i have two my

00:44:48
<transcript>: I have two my.

00:44:48
<transcript>: in my

00:44:50
<transcript>: In my chat today.

00:44:50
<transcript>: some days i

00:44:54
<transcript>: Some days I don't have any I need to make people more people mods. I guess.

00:44:55
lilfreezi: they can i think you have to give them permission on the betterttv site

00:44:57
fragaverage: :O

00:45:04
<transcript>: They can. I think you have to give them permission on the better TV site. Okay. Okay.

00:45:04
<transcript>: that's worth

00:45:08
<transcript>: That's worth doing. Because then things can get better even when I'm not.

00:45:08
<transcript>: even when i'm

00:45:12
<transcript>: Even when I'm not doing things. But I don't see where I would give them permission.

00:45:15
lilfreezi: i think on dashboard

00:45:17
<transcript>: Dashboard.

00:45:17
<transcript>: connection

00:45:21
<transcript>: Connection Editors. Here we go.

00:45:24
<transcript>: Here we go. I'll have to do it manually, though.

00:45:26
<transcript>: Frag.

00:45:26
<transcript>: average

00:45:29
<transcript>: Average judges do like that.

00:45:29
<transcript>: does it know who

00:45:31
<transcript>: Does it know who that is.

00:45:34
<transcript>: Oh, sure enough. Look at that.

00:45:39
<transcript>: Okay, well, Frag, you can change my better TV, emotes.

00:45:41
<transcript>: If J station.

00:45:49
<transcript>: I'm just gonna add mods that I remember their username. Oh, he's not on here. It's got to be people who are under.

00:45:49
<transcript>: thirty five

00:45:50
<transcript>: 35.

00:45:50
<transcript>: and that

00:45:54
<transcript>: And that those are the people who actually have a better TTV account. Probably.

00:46:01
nexxeln: LUL

00:46:05
<transcript>: Oh, man. Okay, we're done with this. We gotta get started. Frag called me out that I spent 40 minutes doing nothing. It's being a my stream and it's true? It's true.

00:46:05
<transcript>: i can't

00:46:12
<transcript>: I can't. I can't argue with it. Oh, hey, next you're getting it. You're getting it. You know, these things. Next.

00:46:12
<transcript>: own

00:46:14
<transcript>: Own.

00:46:14
<transcript>: there you go

00:46:15
<transcript>: There you go.

00:46:15
<transcript>: next

00:46:19
<transcript>: Next. Wait. Did I do it wrong? Do you have a different username.

00:46:21
<transcript>: Oh no.

00:46:25
nexxeln: i don't have an acc wait

00:46:26
<transcript>: Next, ELN.

00:46:26
<transcript>: o's

00:46:27
<transcript>: O's.

00:46:27
<transcript>: you don't

00:46:30
<transcript>: You don't have an account. It's fine.

00:46:30
lilfreezi: have to be a mod possibly?

00:46:36
<transcript>: It's fine. You just you consume you consume better TTV you don't create better TV. And that's okay.

00:46:36
<transcript>: i have to

00:46:43
<transcript>: I have to be a nod. Possibly. I don't think so. I think it's you have to have a better TTV account and I just guessed right on Frag. I knew he would.

00:46:43
<transcript>: just knew

00:46:47
<transcript>: Just knew I can look at Frag and I can say he's got a better TTV account.

00:46:48
nexxeln: okay i have an acc now

00:46:55
fragaverage: what a wild assumption 👀👀

00:46:55
<transcript>: Okay. So I promise we were gonna actually do something. Are we reading the rest book? Are we starting with you? Somebody said, don't even start with you.

00:46:55
<transcript>: you

00:46:59
<transcript>: You is old news these days.

00:46:59
<transcript>: or a wild

00:47:03
<transcript>: Or a wild function these days you want to use and I forgot what it's called. I'm scrolling.

00:47:06
<transcript>: These days.

00:47:06
<transcript>: these days

00:47:06
laytanl_: does everybody see these emotes or do you need some kind of extension?

00:47:07
<transcript>: These days.

00:47:10
<transcript>: Forget about you.

00:47:15
<transcript>: Where is.

00:47:16
fragaverage: catJAM

00:47:18
<transcript>: Where is it you guys talked about tailwind earlier.

00:47:18
fragaverage: wut

00:47:20
vim_cerf: @laytanl_ you need the betterttv extension

00:47:23
lilfreezi: @laytanl_ betterttv

00:47:23
<transcript>: Sycamore. Yeah. Sycamore. Sycamore. That's the new stuff.

00:47:28
<transcript>: That Sycamore, Sycamore, rust.

00:47:28
<transcript>: that's the thing

00:47:33
<transcript>: That's the thing you want. Sycamore. You don't want this. You. It's the lightning speed.

00:47:47
<transcript>: Sycamore harnesses the full power of Recipe, a WebAssembly, giving you full control over performance, ergonomic and intuitive record feels natural. Everything is built on reactive primitives without a cumbersome virtual Dom, no JavaScript.

00:47:47
<transcript>: so have we

00:47:50
lilfreezi: lightning speed < blazingly fast

00:47:52
<transcript>: So have we create apps without Sycamore or using sickMORE, without touching a single line of JavaScript.

00:47:54
lilfreezi: abandon sycamore

00:48:06
<transcript>: Yeah, lightning speed is not quite as good as blazingly fast, but abandon Sycamore. No, man, I'm getting mixed signals. Here. Let's look at stars. I'm gonna that's the only way you can judge anything.

00:48:10
<transcript>: You let's go to their GitHub.

00:48:12
lilfreezi: LUL i dont actually know about rust

00:48:15
fragaverage: abandon rust, finish public.dev. noice

00:48:16
<transcript>: Just see who wins on the start apart. Probably you because it's older. Oh, wait a minute.

00:48:16
<transcript>: oh yeah

00:48:18
<transcript>: Oh, yeah, Yeah.

00:48:19
lilfreezi: i was just joking bc its not blazingly fast

00:48:24
<transcript>: I thought you had one, six, K, two. And I was like, they have the exact same number of stars. What am I gonna do.

00:48:24
<transcript>: so

00:48:26
<transcript>: So you has more stars.

00:48:31
<transcript>: But Sycamore, this the upandcomer.

00:48:31
<transcript>: two days ago

00:48:33
<transcript>: Two days ago, there was a commit to Sycamore.

00:48:33
<transcript>: u

00:48:35
<transcript>: U.

00:48:35
<transcript>: get a little

00:48:38
<transcript>: Get a little crusty 14 days ago Uhoh.

00:48:46
<transcript>: They're starting to move a little slower. You could say they're more mature, though that's why they're moving along a little slower.

00:48:46
<transcript>: alright

00:48:48
<transcript>: Alright, let's write something in rust.

00:48:53
<transcript>: I feel like I want to start with something faster.

00:48:53
<transcript>: than

00:48:55
<transcript>: Than the rest book.

00:48:55
<transcript>: but

00:48:56
<transcript>: But.

00:48:56
<transcript>: i don't

00:48:58
<transcript>: I don't know.

00:48:58
<transcript>: oh

00:49:04
nexxeln: rustbyexample

00:49:05
<transcript>: Oh, my word frag stop it too many opinions today abandoned rest finished public eye Dev.

00:49:07
<transcript>: I was just joking because it's not blazingly fast.

00:49:17
<transcript>: Rust by example, Neck says, So we got we got options. I'm gonna do a poll because I just don't care. I just don't. I literally don't care how it's start with rest.

00:49:19
<transcript>: Whole.

00:49:24
<transcript>: How should I start learning rust.

00:49:26
<transcript>: Sponsors.

00:49:28
<transcript>: You.

00:49:32
<transcript>: The rest book.

00:49:36
<transcript>: Rust by example.

00:49:40
<transcript>: And then.

00:49:40
<transcript>: sycamore

00:49:41
<transcript>: Sycamore.

00:49:45
<transcript>: Other okay.

00:49:51
<transcript>: Duration 1 minute Start poll.

00:49:51
<transcript>: here we go

00:49:53
<transcript>: Here we go.

00:50:00
<transcript>: Either my chair got taller or my camera and my.

00:50:05
<transcript>: Teleprompter got shorter. I'm not sure which.

00:50:11
<transcript>: Okay. There's a pole. Please vote on the poll. Give me direction.

00:50:11
<transcript>: i'm wandering

00:50:13
<transcript>: I'm wandering. There's been three of you.

00:50:13
<transcript>: there are seventy

00:50:16
<transcript>: There are 72 people in this stream. I need more votes.

00:50:16
<transcript>: let's

00:50:19
<transcript>: Let's go, let's vote.

00:50:24
<transcript>: 30 seconds left need some votes.

00:50:29
<transcript>: Thank you for the follow. Rafael.

00:50:34
<transcript>: This is the most inclusive poll I've ever seen.

00:50:34
<transcript>: this

00:50:34
lilfreezi: my vote means nothing i know 0 about rust

00:50:36
<transcript>: This is pathetic people.

00:50:39
<transcript>: Please don't end at a time that's all I ask.

00:50:41
yeltrah_: I cna't help never used rust

00:50:42
<transcript>: Just don't die.

00:50:42
<transcript>: oh come on

00:50:43
<transcript>: Oh, come on.

00:50:49
<transcript>: We're so close Somebody win Rust by example. Five.

00:50:52
<transcript>: Oh, my word.

00:50:57
yeltrah_: Hahah

00:51:00
<transcript>: Somebody to talk on purpose. Somebody just tied it up on purpose. The Rust Book Arrest by example. Awesome.

00:51:00
<transcript>: help

00:51:01
vim_cerf: PepeHands

00:51:01
<transcript>: Help.

00:51:02
j3sus_h: learn it the hard way, write a compiler

00:51:04
lilfreezi: its time for the championship

00:51:05
laytanl_: I didn't vote, I say rust by example

00:51:06
whoa_dood: classic twitch poll tie

00:51:09
yeltrah_: Well now you have two choices

00:51:11
aarrjaay: No just poll those two options

00:51:14
<transcript>: My vote means nothing. I know zero about Russ. Well, your vote means something. Even if it's random, they for the follow archae. Archetyme. I'm gonna call you arc.

00:51:16
aarrjaay: no = now

00:51:19
lilfreezi: playoffs for the final 2 votes

00:51:19
<transcript>: Learn it the hard way. Write a compiler.

00:51:21
yeltrah_: Yea just poll those two

00:51:23
<transcript>: It's time for the Championship. Okay.

00:51:23
<transcript>: head

00:51:30
gutsyphilip: rudt book

00:51:30
<transcript>: Head. We're not gonna do that. I didn't vote. I say rust by example. Thank you. Layton broke the tie. There we go.

00:51:30
<transcript>: classic twitch ball

00:51:32
<transcript>: Classic Twitch Ball tie.

00:51:35
<transcript>: Just pull those two options. No, no.

00:51:37
<transcript>: I'll take too long.

00:51:37
<transcript>: okay

00:51:42
<transcript>: Okay, here we go. It's rust by example.

00:51:42
<transcript>: i've never even

00:51:47
<transcript>: I've never even heard of Rust by example think for the follow just Rusic Russia rust.

00:51:47
<transcript>: by example

00:51:49
<transcript>: By example.

00:51:50
silverdezign: hello hello rust by example yes :)

00:51:54
<transcript>: I've never heard of it. And it's the best. Is this the best way to start.

00:51:58
<transcript>: I don't want to do a Hello world.

00:51:58
<transcript>: learn about

00:52:11
<transcript>: Learn about find integers, unsigned integers, and other primitives. I'm gonna get so exposed on this stream for not knowing anything about programming. Like if you've been a web developer for 15 years, it's amazing how little you can understand about computers.

00:52:11
<transcript>: i just don't know anything

00:52:12
j3sus_h: we know nothing

00:52:12
<transcript>: I just don't know anything about them.

00:52:12
<transcript>: i hear you have

00:52:18
<transcript>: I hear you have to allocate memory and old programming languages and new ones like rest.

00:52:18
<transcript>: sounds terrible

00:52:19
<transcript>: Sounds terrible.

00:52:25
<transcript>: Did I? Is that even right? Maybe you don't even have. Maybe I just said something that's not even true. I don't even know.

00:52:27
j3sus_h: malloc

00:52:29
j3sus_h: vibes

00:52:32
<transcript>: Okay, here we go. Rust is a modern system program. We're gonna kind of try and move fast.

00:52:35
<transcript>: fastens

00:52:36
<transcript>: Fastens.

00:52:40
<transcript>: I'm pretty sure I have rust installed. Well, let's just do this.

00:52:46
<transcript>: I love just copy pasting shell scripts and running them on the internet.

00:52:46
benanna19: If you have frontend masters, ThePrimeagen teaches how to build a cli tool in rust in one of his courses

00:52:48
j3sus_h: your voice broke for a sec, homie is nervous

00:52:50
<transcript>: Oh, it's already installed. Wait.

00:52:53
<transcript>: I thought it would just override it.

00:52:53
<transcript>: oh no

00:52:54
<transcript>: Oh no.

00:52:54
<transcript>: i used

00:52:55
j3sus_h: fork bombs ftw

00:52:56
<transcript>: I used Homebrew.

00:53:01
<transcript>: Okay, we're gonna brew.

00:53:02
yeltrah_: You installed it via brew

00:53:03
<transcript>: Uninstall.

00:53:09
<transcript>: Uninstall rust. I hate running brew. This means we're gonna do a whole lot of things that I don't want to do.

00:53:18
<transcript>: All right. While we're waiting on that bruise gonna take, like, three minutes. Wait. Did it do it? It just did it. Is it done.

00:53:20
fragaverage: inb4 every app now updates

00:53:21
<transcript>: I think it's done.

00:53:24
<transcript>: Cool. Okay.

00:53:27
<transcript>: Current Installation options.

00:53:27
<transcript>: proceed

00:53:30
<transcript>: Proceed with installation. Customize insulation.

00:53:30
<transcript>: which can proceed

00:53:31
j3sus_h: are we running ventura

00:53:32
<transcript>: Which can proceed.

00:53:50
<transcript>: Rust is being solved really quick, though. We're gonna shuffle and I'm gonna remove some stocks from this playlist. Andrew Bird, every time you come on, I used to be a huge Bird fan, and I still am. But every time he comes on, I just feel depressed and I don't want to listen to it. So how do I remove all of these.

00:53:50
<transcript>: oh just

00:53:52
<transcript>: Oh, just like that.

00:53:52
<transcript>: remove from this

00:53:55
<transcript>: Remove from this playlist. Perfect.

00:53:57
yeltrah_: You have Rust LSP setup and all that jazz for nvim?

00:53:58
<transcript>: What else I want to remove.

00:53:58
<transcript>: we

00:54:00
<transcript>: We have a bunch of all J.

00:54:00
<transcript>: we got a bunch of

00:54:02
<transcript>: We got a bunch of glass animals.

00:54:02
<transcript>: we got some random

00:54:03
<transcript>: We got some random.

00:54:03
<transcript>: dirty

00:54:06
<transcript>: Dirty work by Stealy Dan.

00:54:08
<transcript>: Some Queen.

00:54:15
<transcript>: Anybody else is just like two or three represented too much stuff in one playlist.

00:54:15
<transcript>: all

00:54:18
<transcript>: All Jay is the only one that has earned that.

00:54:28
<transcript>: I think that's good. Otigan and Sarah, that's a lot of Tegan and Sarah, I do like them. That's a lot of really Tigers.

00:54:43
<transcript>: Oh, big data. Yeah. Okay. This is okay. Nickel Creek. Maybe I should remove some. Nickel Creek. Got a little Rufus in here. That's a lot of Postal Service. Geez, it's a lot of representation for a band that hasn't existed for a decade or whatever.

00:54:45
<transcript>: I.

00:54:49
<transcript>: 'm Just gonna remove some of the Nickel Creek.

00:54:53
<transcript>: Like.

00:54:55
<transcript>: This much of it.

00:54:59
daglee: Rust or bust!

00:55:05
<transcript>: Also this song. I'm gonna remove this song because I don't like it. What does this do in here.

00:55:12
<transcript>: Okay, cool. We fixed it.

00:55:12
<transcript>: r

00:55:15
<transcript>: Rust LSP yeah, let's do that real quick.

00:55:19
<transcript>: Real quick. I heard this. Took it took.

00:55:22
<transcript>: Forever to do this part.

00:55:26
laytanl_: "Real quick" LUL

00:55:27
<transcript>: My voice broke.

00:55:29
yeltrah_: Haha

00:55:34
<transcript>: The prime engine teaches how to build a CLI, tool and rust. And one of these courses that sounds awesome.

00:55:41
<transcript>: We are running Ventura.

00:55:41
<transcript>: okay let's

00:55:42
laytanl_: Proceeds to set up nvim for the rest of the stream haha

00:55:43
<transcript>: Okay, let's do the rest. Element LSP real quick.

00:55:43
<transcript>: rust

00:55:45
<transcript>: Rust.

00:55:45
<transcript>: meal

00:55:47
<transcript>: Meal them.

00:55:49
yeltrah_: @laytanl_ Agreed

00:55:50
<transcript>: I just need to do like Mason.

00:55:50
<transcript>: what am i doing

00:55:51
<transcript>: What am I doing.

00:55:51
<transcript>: not

00:55:54
<transcript>: Not in the Ovim.

00:56:00
<transcript>: Let's do.

00:56:00
<transcript>: mason

00:56:01
<transcript>: Mason.

00:56:03
<transcript>: I think it's just gonna.

00:56:11
j3sus_h: We rusty

00:56:13
<transcript>: Just. There we go.

00:56:15
<transcript>: Russ.

00:56:18
<transcript>: Is it as simple as just this.

00:56:21
<transcript>: We've already added rest.

00:56:26
<transcript>: There's rust check. Maybe rust Analyzer.

00:56:26
<transcript>: we'll install this

00:56:28
<transcript>: We'll install this guy.

00:56:30
laytanl_: rust-analyzer

00:56:34
laytanl_: is the lsp

00:56:38
<transcript>: So I'm gonna do Mason, install rust Analyzer.

00:56:43
<transcript>: That's the LSP. Cool. Okay. Installed.

00:56:43
<transcript>: let's just see if

00:56:47
<transcript>: Let's just see if we have everything now. I'd love to not have to do anything else.

00:56:51
<transcript>: Sample near them for rest development.

00:56:54
<transcript>: You'll just see when we start building something.

00:56:57
<transcript>: So we've installed it.

00:57:04
aurumnameistaken: now you need to configure the lsp

00:57:06
<transcript>: I guess we can start with all the world. Whatever. Why not.

00:57:10
<transcript>: We'll write it by hand. It least let's do that.

00:57:10
<transcript>: function

00:57:12
<transcript>: Function.

00:57:12
<transcript>: main

00:57:14
aurumnameistaken: i thonk

00:57:15
<transcript>: Main. I this isn't a file. What am I doing.

00:57:18
<transcript>: Maine.

00:57:19
laytanl_: I forgot how you set everything up, but I don't think this is it

00:57:23
<transcript>: Rest like that. Hello, Russ. Is that what they did.

00:57:29
<transcript>: Okay.

00:57:30
daglee: src/main.rs

00:57:32
<transcript>: Function main.

00:57:35
<transcript>: Print line.

00:57:37
<transcript>: So far I'm understanding.

00:57:40
daglee: You should do cargo init tbh.

00:57:44
<transcript>: Just have to actually put semicolons in rest. Cool, cool.

00:57:44
<transcript>: i can just

00:57:46
<transcript>: I can just do rust C.

00:57:46
<transcript>: hello

00:57:48
<transcript>: Hello.

00:57:54
<transcript>: Did we learn anything? Oh, it didn't even print. I literally. I broke it.

00:57:54
<transcript>: i didn't even

00:57:56
yeltrah_: Haha I just had deja vu watching trash do this

00:58:06
<transcript>: I didn't even succeed at Hello World. What's it say, Rusty? Oh, it produced the binary. And then I can say Hello, Hello World. Okay, we did it. We did it. We wrote a roast program.

00:58:09
<transcript>: What's next.

00:58:14
<transcript>: Should I read that? Should I like Stop being a jerk and actually read.

00:58:14
<transcript>: this

00:58:18
<transcript>: This is a comment. Yep. This code is edible.

00:58:18
<transcript>: oh

00:58:22
<transcript>: Oh, I can edit in here. Well, that wouldn't be as fun. We don't want to do that.

00:58:25
<transcript>: Macro. I've heard about macros.

00:58:25
<transcript>: they sound exciting

00:58:27
<transcript>: They sound exciting. Vineyard.

00:58:27
<transcript>: okay

00:58:30
<transcript>: Okay. Activity. Okay.

00:58:44
<transcript>: A program required. Comments. Rust supports a few different varieties. Regular Comments Yep. Block comments. Okay. And Dot comments are parsed into HTML library documentation. That's cool. Okay.

00:58:53
<transcript>: Here we go. Oh, I should have put it in source. Is that retail me.

00:59:02
<transcript>: I need to configure the LSP. Oh, you might be right. I might have missed a step. Shawn, thank you for the follow. Sean Sumava.

00:59:08
<transcript>: I don't think this is it. Yeah, I think we need to add let's go to our dot files. So let's go.

00:59:20
<transcript>: Let's go.

00:59:25
<transcript>: Then I have multiple sessions. Am I not in T. Max.

00:59:29
<transcript>: Is this not T. Max? Oh, my bad.

00:59:31
<transcript>: T. Max.

00:59:36
<transcript>: Create a new one altogether.

00:59:36
<transcript>: and i'm gonna

00:59:38
<transcript>: And I'm gonna say.

00:59:38
<transcript>: that

00:59:39
<transcript>: That file.

00:59:48
<transcript>: Music. Okay, we gotta go in here, and we got to add.

00:59:48
<transcript>: stuff

00:59:49
<transcript>: Stuff.

00:59:52
<transcript>: We got to add some stuff in here.

00:59:54
<transcript>: Probably.

00:59:57
<transcript>: Let's see.

00:59:57
<transcript>: so just

01:00:00
<transcript>: So just make a change now.

01:00:01
daglee: Well, you don't need to put it in src but it's a convention. Like rust-analyser looks for a Cargo.toml and for code in the src/ directory.

01:00:04
<transcript>: Do I mean anything.

01:00:08
<transcript>: Like what would I add in here.

01:00:13
<transcript>: Rest, Neil. Them.

01:00:16
laytanl_: require'lspconfig'.rust_analyzer.setup{}

01:00:29
<transcript>: It's a convention. Let's see. You don't need to put it in Source, but it's a convention. Oh, I like conventions. Like Rust analysis, looks for cargo Tomo, and for code in the source directory. Cool. We will do that. We'll put it in source. I require LSP config. Rust Analyzer setup. Oh, Yeah.

01:00:29
<transcript>: where am i

01:00:31
<transcript>: Where am I doing that right now.

01:00:35
<transcript>: You might see something obvious.

01:00:39
<transcript>: Not Mason. Or maybe Mason.

01:00:42
<transcript>: I guess I could search.

01:00:45
<transcript>: Lsp? Config.

01:00:45
<transcript>: oh i've

01:00:47
laytanl_: You are doing that in the file you are in

01:00:48
<transcript>: Oh, I've got like.

01:00:48
<transcript>: hang on

01:00:49
<transcript>: Hang on.

01:00:56
<transcript>: Just for search to work here.

01:00:59
<transcript>: I'm. A. Search? Lsp? Config.

01:01:03
<transcript>: There we go. It's in my Mason File. Yeah.

01:01:03
<transcript>: what was this

01:01:04
<transcript>: What was this.

01:01:11
<transcript>: So right here.

01:01:11
<transcript>: ensure installed

01:01:12
<transcript>: Ensure installed.

01:01:12
<transcript>: they tell me i

01:01:17
<transcript>: They tell me I need the anatomy to do something here. Rest, Analyzer, setup.

01:01:21
<transcript>: Oh, I was already doing it in the file. I was in you say I was doing it here.

01:01:24
yeltrah_: No I think you have it in your lspconfig.lua

01:01:26
<transcript>: Am I missing that.

01:01:32
<transcript>: Ts Server setup. Oh, I see. Yeah, yeah, okay. Yeah, you're right. Okay.

01:01:33
2dorkstv: morning, party people!

01:01:35
<transcript>: So in them. Lsp.

01:01:38
<transcript>: Rust.

01:01:38
<transcript>: analyz

01:01:40
<transcript>: Analyzer.

01:01:44
<transcript>: Setup so I need to add anything.

01:01:46
<transcript>: Just like that maybe.

01:01:53
<transcript>: Let's see.

01:01:53
<transcript>: anything else

01:01:57
<transcript>: Anything else that wired this all together is that it just need to call, set up.

01:02:01
<transcript>: Think I said.

01:02:04
laytanl_: thats it for lsp I think

01:02:06
<transcript>: We'll see what somebody has here in the examples.

01:02:10
myst3rymage: yep that's it

01:02:11
daglee: You would want your on_attach connected

01:02:12
<transcript>: What am I looking at? Here.

01:02:17
<transcript>: Packer. So this is a lot of stuff.

01:02:18
laytanl_: it will look for a 'cargo.toml' file and treat that as the root

01:02:19
daglee: Or you don't run your on_attach

01:02:22
<transcript>: Hit me with your anybody have any plugins for Rust? They really like.

01:02:22
<transcript>: they're really

01:02:26
<transcript>: They're really important. What's? Rust tools.

01:02:35
<transcript>: It will look for a cargo Tomo file and treat that as the root.

01:02:40
<transcript>: Oh, I want my on attach connected or you don't run your unattached.

01:02:41
nexxeln: rust-tools for sure

01:02:44
<transcript>: Okay.

01:02:47
<transcript>: Attach to what.

01:02:49
<transcript>: Like.

01:02:55
noscik: rust-tools yep

01:02:58
<transcript>: Here we have on Attach. Oh, you're saying I need to run? What am I doing in Eyach? Oh, no, the Clip lists.

01:03:02
<transcript>: I hate this is I hate it so much.

01:03:04
daglee: setup({ on_attach = on_attach })

01:03:10
<transcript>: Thank you for the follows in the things that are happening. Thank you for the following Amber.

01:03:10
<transcript>: and

01:03:13
<transcript>: And two dorks. Thanks for the resub.

01:03:16
<transcript>: Rest. Tools? Yep. I need address. Tools.

01:03:16
<transcript>: i just want to see

01:03:20
<transcript>: I just want to see what I do in on it. Why do I have it here.

01:03:23
<transcript>: I guess this is important.

01:03:23
<transcript>: yeah

01:03:28
<transcript>: Yeah, I'm not gonna pretend to know what it's doing. It's setting some key maps.

01:03:30
<transcript>: Okay. So we need to add.

01:03:30
<transcript>: why am i not doing

01:03:35
<transcript>: Why am I not doing that for I'm not doing that for a lot of these graph twelve and towend.

01:03:35
<transcript>: i guess i'm

01:03:37
<transcript>: I guess I'm doing it.

01:03:37
<transcript>: for

01:03:38
<transcript>: For.

01:03:38
<transcript>: some echo

01:03:42
<transcript>: Some Echo. Okay, we'll do it right here.

01:03:49
<transcript>: On. Attach is attached.

01:03:49
<transcript>: and then somebody

01:03:54
<transcript>: And then somebody says, Rust, threemonth streaked. What's going on to dorks.

01:03:58
<transcript>: No sick, no sick massacre? Welcome to chat.

01:03:58
<transcript>: rust tool

01:04:03
<transcript>: Rust tools for sure. Okay, it's a plug I need to add and then.

01:04:03
<transcript>: rust

01:04:05
<transcript>: Rust tools.

01:04:19
<transcript>: This is a special treat. You guys are getting Leroy Brown. Today. It's one song in, like, a 200 song playlist. And we only hit it every so often. But today, today is your day.

01:04:27
<transcript>: A plugin to remove your rest improve your rest experience. Let's see.

01:04:27
<transcript>: so it's just called

01:04:34
<transcript>: So it's just called Rest tools. We need to go to first thing we need to do is cClose. I really need a key bind that.

01:04:37
<transcript>: We need to go to plugin.

01:04:40
<transcript>: Plugins.

01:04:42
<transcript>: Here.

01:04:42
<transcript>: we're gonna add

01:04:44
<transcript>: We're gonna add rust tools.

01:04:53
<transcript>: What is that? Autosave. Oh, we turn that off. Okay, use Rust tools, just like that. No, that's not it.

01:04:57
<transcript>: Simrat 39.

01:05:04
<transcript>: Sim Wrap 39 Rust tools.

01:05:04
<transcript>: dot

01:05:05
<transcript>: Dot.

01:05:07
<transcript>: In them.

01:05:16
<transcript>: So we've got invlusp config and we've got rust tools, and then debugging we've already got punnary in vim DAP what.

01:05:20
<transcript>: Oh, it automatically sets up Inv.

01:05:20
<transcript>: invig

01:05:21
<transcript>: Invig.

01:05:25
<transcript>: So don't do that manually.

01:05:25
<transcript>: so i should reverse

01:05:27
<transcript>: So I should reverse that. You're telling me.

01:05:31
<transcript>: Who thinks, who thinks this is the way to go.

01:05:32
daglee: Minion gang!

01:05:36
<transcript>: Whoa, everybody with the Redeems Minion gang.

01:05:39
silverdezign: lol

01:05:46
laytanl_: I don't use rust-tools

01:05:49
<transcript>: Do we recommend who writes Rust a lot in Neovem? Do we recommend this? We recommend Rust tools and don't do the manual setting up of the thing that I just did. The LC config.

01:05:55
laytanl_: but don't rust that much

01:05:59
daglee: I would skip rust-tools until you know rust.

01:06:00
<transcript>: Yeah, I'm gonna not use rust tools? And if I feel like I'm missing something? And if someone's like, oh, I just updated all my plugins. Feels bad.

01:06:00
fragaverage: oooof bad hair day looks terrible

01:06:05
<transcript>: Feels bad. Well, we'll see. Maybe it's fine.

01:06:09
<transcript>: What's going on.

01:06:14
<transcript>: So I can't get rid of the.

01:06:17
caasidev: good afternoon sir

01:06:17
<transcript>: Get rid of it.

01:06:25
<transcript>: There we go. Everything's up to date, okay.

01:06:31
<transcript>: Well, we're gonna find out if that's bad, if inJim is broken now.

01:06:31
justosophy: yew is fun

01:06:33
<transcript>: Okay.

01:06:33
silverdezign: @caasidev it's miss today :D

01:06:38
<transcript>: Where were we learning? Rust. Here. No. Here.

01:06:42
<transcript>: Wait, no.

01:06:46
<transcript>: I wasn't doing that in.

01:06:47
daglee: Nah, rust-tools doesn't do anything unless you start it.

01:06:49
<transcript>: Code, code.

01:06:51
<transcript>: Playground.

01:06:55
<transcript>: Learning rust.

01:06:58
<transcript>: Here we go.

01:07:04
<transcript>: So we're gonna create a source directory. Hope everything's not broken. Seriously.

01:07:11
<transcript>: Add source. We're gonna move this one. What is that.

01:07:11
<transcript>: well that's the

01:07:13
<transcript>: Well, that's the binary.

01:07:13
<transcript>: i'm so

01:07:17
<transcript>: I'm so dumb we're gonna rename that to be.

01:07:22
<transcript>: Source Hello.

01:07:30
<transcript>: So we've written our first row. Oh, man.

01:07:30
<transcript>: kargo metadata

01:07:35
<transcript>: Kargo. Metadata? Failed. Erica Knot find. Oh, cargo. Yeah, I need to do that.

01:07:37
ropetin: "Hope everythings not broken, seriously" - me every morning logging into work

01:07:42
<transcript>: Okay, we need to create a cargo diet. Tomnel, is there a way to do, like, cargo and knit or something.

01:07:42
<transcript>: can i

01:07:44
<transcript>: Can I just do that.

01:07:44
<transcript>: instead

01:07:49
justosophy: cargo init

01:07:49
<transcript>: Instead, you is fun, says Gesosophy. Welcome to Chat dystosophy.

01:07:50
jakobkg: yup

01:07:51
<transcript>: It's fun to say that.

01:07:51
<transcript>: yeah bad

01:07:51
myst3rymage: ye

01:07:54
<transcript>: Yeah. Bad hairdo looks terrible. I might get rid of it.

01:07:54
<transcript>: it just breaks my

01:07:54
the_real_enrico_pallazzo: cargo new hello_world

01:07:55
<transcript>: It just breaks my Chroma.

01:07:55
myst3rymage: just do cargo init

01:07:57
nixfleyks: use the cargo cli to generate rust projects

01:08:00
<transcript>: Good afternoon. Cassie. Dev.

01:08:00
jakobkg: cargo init --name coolname

01:08:03
<transcript>: devil

01:08:10
<transcript>: Devil dystosophy. Russell doesn't do anything unless you start it. Hope everything not broken. Seriously.

01:08:10
<transcript>: every morning

01:08:12
<transcript>: Every morning longing away.

01:08:12
<transcript>: cargo init

01:08:16
<transcript>: Cargo init okay, cool. Cargo. New. Oh, fancy.

01:08:16
<transcript>: cargo

01:08:21
<transcript>: Cargo sealide, generate restaurants. Okay, we're just gonna do cargo and knit.

01:08:23
<transcript>: So we're gonna say, let's see.

01:08:31
<transcript>: We're in. So we're in the Learning Rest directory. I'm gonna say Cargo in it.

01:08:31
<transcript>: okay

01:08:32
<transcript>: Okay.

01:08:37
<transcript>: Did it. Do it. We got a cargo Tomo. It created a main Rs.

01:08:37
<transcript>: but literally

01:08:40
<transcript>: But literally created a Hello world.

01:08:43
<transcript>: In Maine Rs so we can get rid of.

01:08:46
<transcript>: That one.

01:08:46
<transcript>: okay

01:08:48
<transcript>: Okay.

01:08:52
<transcript>: Then. Target. What is this.

01:08:58
myst3rymage: and to run it just do cargo r

01:09:01
<transcript>: Their car goes, I'm gonna learn what this looks like. Package learning rest version. Okay, so this is our package JSON, if you will, and then there's our dependencies cool, cool.

01:09:04
<transcript>: Let's.

01:09:04
<transcript>: let's keep moving

01:09:06
<transcript>: Let's keep moving.

01:09:06
<transcript>: so

01:09:14
<transcript>: So rust by example formatted. Print printing is handled by a series of macros defined in standard format, some of which include that.

01:09:21
<transcript>: Okay print is same as format, but the Texas printed the console.

01:09:21
<transcript>: print

01:09:23
<transcript>: Print line same as print.

01:09:23
<transcript>: but

01:09:30
<transcript>: But a new line is appended e print same as prank at the Texas printed to the standard error. Okay, cool.

01:09:30
<transcript>: all

01:09:37
<transcript>: All parsetecs in the same fashion as a plus rest checks, format and correctness at compile time.

01:09:37
<transcript>: okay

01:09:39
<transcript>: Okay, let's do some of this.

01:09:39
<transcript>: so

01:09:45
<transcript>: So we're gonna open up main restaurants. Good. Feels good to be in rest.

01:09:45
<transcript>: excited

01:09:47
<transcript>: Excited.

01:09:50
<transcript>: Excitement in the air we're gonna.

01:09:50
<transcript>: four spaces

01:09:51
<transcript>: Four spaces.

01:09:55
<transcript>: I'm used to I think.

01:09:55
<transcript>: think prime

01:09:59
<transcript>: Think prime would vomit on my toothpaste code.

01:09:59
<transcript>: it's also

01:10:01
<transcript>: It's also JavaScript. So.

01:10:08
<transcript>: The bracket will be automatically replaced with any arguments. These will be stringified. So if we say.

01:10:08
<transcript>: let's

01:10:10
<transcript>: Let's just do like.

01:10:14
<transcript>: So sorry doing print line. I can do that.

01:10:14
<transcript>: is

01:10:17
<transcript>: Is a variable. And then I can say.

01:10:17
<transcript>: we're not a variable

01:10:19
<transcript>: We're not a variable.

01:10:20
<transcript>: Is.

01:10:20
<transcript>: replace

01:10:22
<transcript>: Replace.

01:10:22
<transcript>: like that

01:10:23
<transcript>: Like that.

01:10:23
<transcript>: what's

01:10:29
<transcript>: What's the fast way to just rerun my thing. But just every time I have to do, like rust up something.

01:10:31
<transcript>: Every time.

01:10:31
<transcript>: how did you

01:10:35
<transcript>: How did you rest up? No. Rest up.

01:10:36
daglee: cargo run

01:10:37
<transcript>: Main Rs. This like every time.

01:10:39
gabes2k16: cargo run

01:10:39
nixfleyks: cargo run

01:10:43
<transcript>: Did I mean man? No. I mean no. What was it.

01:10:47
<transcript>: Let me remind me how do I how do I build it again.

01:10:47
<transcript>: i've already forgotten

01:10:50
<transcript>: I've already forgotten the first step in rest.

01:10:53
myst3rymage: cargo run

01:11:00
<transcript>: C oh the compiler is rust C rust e.

01:11:03
<transcript>: I even need to say Maine if it's the only font, man. Yeah, I do.

01:11:05
<transcript>: Russ, C.

01:11:05
<transcript>: source

01:11:07
<transcript>: Source.

01:11:07
<transcript>: main

01:11:09
<transcript>: Maine Rs.

01:11:11
<transcript>: I feel like there's a faster.

01:11:11
<transcript>: a faster thing

01:11:13
<transcript>: A faster thing to do here.

01:11:13
jakobkg: cargo run to build and run, or rustc to do the thing by hand if you hate yourself

01:11:16
<transcript>: And then I can just do.

01:11:19
<transcript>: Target Maine.

01:11:22
<transcript>: 31 is replaced. Okay.

01:11:24
<transcript>: Okay.

01:11:26
<transcript>: Let's keep moving.

01:11:26
<transcript>: rust c hello

01:11:32
<transcript>: Rust C Hello, Rs cargo run. Are you kidding me? I should have looked over way earlier.

01:11:46
<transcript>: And to run it. Just do cargo R. Look at that cargo R. Cargo run to build and run or rust seed to do the thing by hand if you hit yourself. I don't hate myself most days, so from now on, we're gonna say cargo.

01:11:50
<transcript>: R. Look at that 31 is replaced. Field. Great.

01:11:50
<transcript>: okay

01:11:53
nixfleyks: tldr cargo

01:11:57
<transcript>: Okay. So we did that. We learned that you can just swap stuff out. It's stringified.

01:11:57
<transcript>: if we do

01:12:01
<transcript>: If we do multiple so if I go like.

01:12:03
<transcript>: What.

01:12:03
<transcript>: is

01:12:05
<transcript>: Is replaced.

01:12:08
<transcript>: With.

01:12:09
<transcript>: I don't know.

01:12:12
<transcript>: That.

01:12:15
<transcript>: And.

01:12:15
<transcript>: this

01:12:18
<transcript>: This too I don't know.

01:12:18
<transcript>: so i can just

01:12:20
<transcript>: So I can just start adding more.

01:12:23
<transcript>: More things here. You're saying.

01:12:28
<transcript>: So. Oh, that's they did like the numbered. Oh, the numbered thing. Okay.

01:12:28
<transcript>: so

01:12:30
<transcript>: So.

01:12:32
<transcript>: Two, and we'll do one.

01:12:36
<transcript>: Why don't I do this backward? I don't even know.

01:12:41
<transcript>: So.

01:12:41
<transcript>: then i would

01:12:44
<transcript>: Then I would say, this one is zero.

01:12:47
<transcript>: And this one is one.

01:12:52
<transcript>: And then.

01:12:57
<transcript>: Okay.

01:13:01
<transcript>: I can do cargo R.

01:13:01
<transcript>: one is replaced with

01:13:02
daglee: The cool thing is that println! is a macro, so the amount of arguments and types are checked at compile time!

01:13:11
<transcript>: One is replaced with one and one. And this is two, two. Okay, that was a bunch of nonsense, but I did it. You can order. You can use indexes like that.

01:13:17
<transcript>: Can name arguments. Oh, that's cool. So the subject verb object. Cool. Okay.

01:13:26
<transcript>: Different formats can be invoked by Seth. Sign the format character after a quote.

01:13:28
<transcript>: Binary.

01:13:33
<transcript>: Octo. Hexadesimal okay.

01:13:52
<transcript>: Right. A line text. Okay. These are the kind of things I will find out when I need to know them. I don't want to start with this kind of thing. This is why I wanted to start with you is like, I just want to build like, a highlevel thing and kind of pick up the minutia on the way. Like, oh, I need a format, this thing. How do you do that in rest. I prefer learning that way. Personally, this is a little painful for me.

01:13:56
<transcript>: Till the R cargo got it.

01:14:05
<transcript>: Cool thing is that print line is a macro, so the amount of arguments and types are checked at compile time. Yeah. I keep hearing about the type system and how great it is.

01:14:09
<transcript>: But I think I'd rather learn about the types of stuff.

01:14:21
<transcript>: In a let's see. Oh, this sounds important. All types which want to use standard format formatting traits or chronic implementation to be printable automatic implementations. So you're saying, like, this is a string, but if I'm like.

01:14:21
<transcript>: let's

01:14:25
<transcript>: Let's do two in there. It's gonna say.

01:14:31
<transcript>: And do that because there is no two argument. I love it. I love that.

01:14:31
<transcript>: drop troops

01:14:33
<transcript>: Drop troops. Not this smart, right.

01:14:40
maleero: I’m the same way, I scan stuff like this and then jump into making something

01:14:43
<transcript>: You put stuff in the string JavaScript and it's super dumb. It's like, sure, whatever you want. It just won't work. It run time, not in rest. No surprises here.

01:14:43
<transcript>: i like it

01:14:44
<transcript>: I like it.

01:14:49
jakobkg: the rust tools are mostly very smart

01:15:00
<transcript>: So this is saying dbug trait makes this very straightforward. All types can derive automatically create the format debug imputation not true for format display, which must be manually implemented. Okay, this structure cannot be printed either with format display or with format debug.

01:15:06
<transcript>: The derive attribute automatically creates implementation required to make the struct printable with format debug.

01:15:06
<transcript>: have i learned what

01:15:08
theloniousbird: I just started to learn rust myself, what I wild ride

01:15:09
<transcript>: Have I learned what format debug is yet.

01:15:09
<transcript>: is form

01:15:12
<transcript>: Is format debug what's.

01:15:15
<transcript>: Wait. What.

01:15:17
jakobkg: i've been doing my algorithms uni class in rust to teach myself the language and it's a joy

01:15:18
<transcript>: So format debug.

01:15:18
<transcript>: definitely makes

01:15:20
theloniousbird: What a* wild ride

01:15:23
<transcript>: Definitely makes this printable that sacrifices some elegance. Rust also provides pretty printing with that.

01:15:31
<transcript>: I feel like I'm already going too fast. I've missed something.

01:15:40
daglee: So, format debug is a way to print any type with println!

01:15:43
<transcript>: Do I need to work? I don't need to learn this right now. I'm gonna make on.

01:15:52
<transcript>: There's something about certain types. Structs. I have to derive debug or something if I want to. Okay, cool.

01:15:52
<transcript>: display

01:15:53
<transcript>: Display.

01:15:53
<transcript>: i

01:15:59
<transcript>: I don't know if this is gonna be for me people I don't know if the rest by example is my style.

01:16:11
<transcript>: Implementing for my display like this is the last place I want to start is like how to format strings.

01:16:16
<transcript>: Primitives.

01:16:21
<transcript>: Okay. Now we're getting somewhere. This. I can enjoy this.

01:16:25
<transcript>: Sign integers, unsigned integers.

01:16:25
<transcript>: floating

01:16:26
<transcript>: Floating point.

01:16:30
<transcript>: Car.

01:16:37
<transcript>: And the type or the unit type who's only possible value is an empty tuple. Okay.

01:16:48
<transcript>: Despite the value of the unit type being a tuple, it is not considered a compound type because it does not contain multiple values.

01:16:52
gabes2k16: i think struct traits error handling memory browning ae the most important things

01:17:00
<transcript>: Compound types, raise and tuples variables can always be annotated. Oh, wait can always be type. Annotated numbers may Additionally be annotated via suffix or by default. Okay.

01:17:02
<transcript>: Let's.

01:17:02
<transcript>: let's

01:17:03
<transcript>: Let's.

01:17:03
<transcript>: just delete all this

01:17:05
<transcript>: Just delete all this. Let's start over.

01:17:05
<transcript>: function

01:17:07
<transcript>: Function main.

01:17:15
<transcript>: Variables can be type annotated. So just like in TypeScript. I can say logical.

01:17:15
<transcript>: bull

01:17:18
<transcript>: Bull equals true.

01:17:20
<transcript>: Let.

01:17:20
<transcript>: float

01:17:31
<transcript>: Float. Always snake casing. How you do variables. Interesting. Okay, very Python. Like F, six, four. Not that like Python has rights to snake casing.

01:17:36
<transcript>: F 64, so this is a floating 64.

01:17:36
<transcript>: bit

01:17:45
<transcript>: Bit number or something. I just said something really dumb. I don't know what that means. Floating 64, but it's a float. It's a float, but it takes up more space.

01:17:45
<transcript>: can hold

01:17:49
<transcript>: Can hold bigger numbers or smaller numbers. I don't know.

01:17:58
<transcript>: Float equals one point oh regular orientation or suffix. Annotation. Let and editor.

01:18:00
<transcript>: Equal.

01:18:07
<transcript>: Okay. So you can put that as a suffix to the number. Okay. Yeah. I've seen that kind of stuff. Okay.

01:18:12
<transcript>: Or a default will be used. So if we say let default float.

01:18:12
<transcript>: equals three

01:18:16
<transcript>: Equals 30. It figures out that that's an F 64. Okay.

01:18:25
<transcript>: All right. Defaults at 64, as opposed to like a 32.32 bit floating number. Okay. And then default integer.

01:18:27
<transcript>: Is.

01:18:27
<transcript>: an i thirty

01:18:27
daglee: rust uses CamelCase for types and snake_case for variables (and functions).

01:18:28
<transcript>: An I 32.

01:18:28
<transcript>: makes

01:18:30
<transcript>: Makes sense.

01:18:38
<transcript>: Or type can also be inferred from context. So we let a mutual mutable.

01:18:38
<transcript>: inferred

01:18:40
<transcript>: Inferred type.

01:18:44
<transcript>: Twelve. And that's an I 64.

01:18:44
<transcript>: oh infert from

01:18:50
<transcript>: Oh infert from another line. So. Okay. So I 64. Because.

01:18:54
rollie042: Can you do `let f: f64 = 5`?

01:18:57
<transcript>: We say here because it's mutable. We can say inferred type E equals big number.

01:19:02
<transcript>: Oh, and then we said, I 64, so it figured out.

01:19:02
<transcript>: right

01:19:03
<transcript>: Right.

01:19:10
<transcript>: Figured out this thing is an I 64, because we put this in here. But if we said.

01:19:12
<transcript>: Instead.

01:19:12
<transcript>: we want to

01:19:14
<transcript>: We want to make that 32.

01:19:14
<transcript>: right

01:19:16
<transcript>: Right then.

01:19:16
<transcript>: then

01:19:17
daglee: @rollie042 Yes, since 5 is a float.

01:19:21
<transcript>: Then this is going to be an I 32. Got it. Cool.

01:19:26
<transcript>: What do I just do? I'm going to delete.

01:19:33
<transcript>: Oh unused variables type system not happy literal out of range.

01:19:39
<transcript>: Now we just got about you shouldn't do that. You're not using it.

01:19:39
<transcript>: let's

01:19:44
<transcript>: Let's see a mutable variable value cannot or can be changed.

01:19:53
<transcript>: But the title of the variable can't be changed. That's so cool. Okay. I don't know why that's exciting to me, but if I have this inferred type and it's now.

01:19:53
<transcript>: you see

01:19:58
<transcript>: You see at the I 32 so 32 bit integer if I say like actually inferred type.

01:20:05
<transcript>: Equals false. Like in JavaScript. You can just do this because JavaScript is dumb. But Russ, it's like.

01:20:05
<transcript>: that's a thirty

01:20:11
<transcript>: That's a 32 bit thing. You can't put a boolean in it.

01:20:15
<transcript>: You're dummy? Like I like that like that a lot.

01:20:18
<transcript>: Can you do let s 64 equals five.

01:20:18
<transcript>: yeah

01:20:20
<transcript>: Yeah, Yeah.

01:20:26
<transcript>: And if you you would want to explicitly say that if you knew you wanted that to be a 64 bit.

01:20:28
<transcript>: Full.

01:20:28
<transcript>: then

01:20:30
<transcript>: Then you'd want to set.

01:20:32
<transcript>: What'd you say? F.

01:20:41
<transcript>: 64 bit equal five. Otherwise it would default. Let's just see so right now S 64 if we just delete.

01:20:53
<transcript>: That then it's gonna default to an I an integer. So you bit integer. So yeah, you'd want to in that case, you do that kind of stuff in JavaScript. I know. I'm just gonna compare everything to JavaScript because that's all I do because I'm a web developer.

01:20:58
gabes2k16: u can do let inferred_type=false

01:21:03
<transcript>: We do that sometimes in TypeScript, we say, like, I know this thing is a thing, even though I'm gonna give it a default value. That seems like maybe not the thing or less specific. Right. Okay.

01:21:06
tayloreddev: I learn best by having a problem to solve. I've been learning Go via advent of code puzzzles

01:21:10
rollie042: Guessing you can't do `let x: i32 = 5.0`?

01:21:10
<transcript>: Let's just delete that okay so the type system is good can confirm.

01:21:12
<transcript>: A site system's. Good.

01:21:16
<transcript>: You can do let infer type equal false.

01:21:16
<transcript>: oh so i can

01:21:19
<transcript>: Oh so I can override it with let.

01:21:22
<transcript>: 's.

01:21:28
<transcript>: Okay camel case for types Snake case for variables and functions good to know.

01:21:35
<transcript>: Guessing you can't do let X. Oh, that's a good guess. Yeah, we shouldn't be able to do.

01:21:40
nexxeln: it won't be overriden, it will shadowed

01:21:41
<transcript>: Let X is a 32 bit integer equals five points zero.

01:21:48
<transcript>: Probably can't do that, right. Even though it's dot zero. Yeah. And it's a floating point. So it can't do that.

01:21:50
<transcript>: Cool. Okay.

01:22:01
<transcript>: Moving mutable variable value can be changed. The type of verbal can't change variables can be overridden with shadowing. So that's what you were saying. You could say.

01:22:06
<transcript>: Some mutable right now the inferred type is.

01:22:10
<transcript>: 32. And if I say.

01:22:10
<transcript>: let

01:22:15
<transcript>: Let inferred type equal false. I can do that.

01:22:18
<transcript>: Shadowing.

01:22:22
<transcript>: But just overrides it. Okay. I learned something.

01:22:22
<transcript>: we learned

01:22:24
<transcript>: We learned rest.

01:22:24
<transcript>: it won't be

01:22:27
<transcript>: It won't be overridden. It will be shadowed. What does that mean? That's different.

01:22:27
<transcript>: shadowing

01:22:30
<transcript>: Shadowing is different than overriding.

01:22:30
<transcript>: so now there

01:22:32
rollie042: That seems weird

01:22:33
nexxeln: inside the scope

01:22:34
<transcript>: So now there's like two of these things floating around. What are you telling me.

01:22:37
<transcript>: The shadowing.

01:22:39
<transcript>: We get into.

01:22:39
<transcript>: stuff i

01:22:41
<transcript>: Stuff I can't understand.

01:22:43
<transcript>: Inside the scope.

01:22:44
nexxeln: you will still have the old value in the parent scope

01:22:49
nexxeln: here you have just one scope tho

01:22:56
jakobkg: here you overwrite

01:22:57
<transcript>: I learned best by having a problem to solve. I've been learning go via Advent of code puzzles. Yeah, I do, too, Taylor. I like building something where at some point here, I'm just gonna forget the poll, and I'm gonna switch over to you. You all are gonna deal with it.

01:23:05
<transcript>: Because this is my stream. I'm just kidding. Nobody was, like, forcing me to do it this way. I just. I made a poll.

01:23:05
<transcript>: here you

01:23:06
<transcript>: Here, you overwrite.

01:23:17
<transcript>: Got it next that you. You helped me make it make sense. Yeah. Here. We only have one scope. But if we had another function.

01:23:19
jakobkg: but if you have an inner scope with a variable with the same name, you "shadow" (overwrite only within that scope)

01:23:25
<transcript>: Like, can I just define nested functions? I'm not gonna jump ahead, but like, could I define a function in here? Function, test.

01:23:27
<transcript>: And then call it later.

01:23:30
<transcript>: Forgetting.

01:23:37
<transcript>: Need to put to my phones in there. Right. So if I have function test then in here.

01:23:44
nexxeln: you can even do just {} to go to an inner scope just to test

01:23:45
rollie042: Why did they require semicolons when they made this language :(

01:23:49
<transcript>: And here inferred type is a Bool up here. It's an I 32. Very cool, very cool. Why is it not formatting that buns me out.

01:23:54
<transcript>: This restaurant. I thought it's been auto formatting, but is it not been.

01:23:54
<transcript>: okay i need

01:23:54
rollie042: such a nuisance

01:23:56
daglee: Shadowing is quite easy to implement. You just rename all the old variable with the same name to something else internally.

01:23:58
nexxeln: cause they are sane devs @rollie042

01:23:59
<transcript>: Okay. I need to know what you guys use for rust formatting, and then I'll move on.

01:23:59
<transcript>: why

01:24:04
egob22: sounce like the same shadowing as in JS

01:24:07
<transcript>: Why did they require semicolons when they made this language? I think that's probably best I'm dumb that I just like to rip them out of my JavaScript with prettier.

01:24:07
jakobkg: semicolons are for cool people

01:24:07
gabes2k16: u can remove ; if it's at the end

01:24:15
daglee: Semicolon means something in rust.

01:24:17
<transcript>: Yes. You shadow it only within that skill that seems very useful. I feel like there's been cases in my programming career where I wished I could do something like that. You can even do just.

01:24:17
<transcript>: brackets

01:24:22
egob22: *sounds

01:24:22
<transcript>: Brackets to go to an Interscope just to test. Oh, interesting.

01:24:22
<transcript>: like it

01:24:25
<transcript>: Like it doesn't need to be a function. Why they require some.

01:24:25
<transcript>: the shadow

01:24:30
<transcript>: The shadowing is quite easy to implement. You just rename all the old variable, the same name to something else internally.

01:24:43
<transcript>: Welcome to Chat Ego Source like the same shadowing as in JS. Oh, sounds like the same jettang is in JS. Oh, does this work? Can you do that in JavaScript? And I didn't even know.

01:24:43
<transcript>: i'm dumb

01:24:46
<transcript>: I'm dumb. I don't know anything about the stuff I work with.

01:24:46
<transcript>: thanks for following the game

01:24:51
daglee: ; means that it doesn't return , without ";" means that it does return call;

01:24:54
<transcript>: Thanks for following the game. Oh, in Shashka and Bruno, if I didn't already see that and just off, did I see any of these? Yeah, I saw that one.

01:25:02
<transcript>: You can remove semicolon if it's at the end. Oh, okay. Oh, it means nothing. Oh, it means something in rest. Okay.

01:25:07
<transcript>: So does someone want to tell me what I use for formatting rest.

01:25:07
<transcript>: that'd be great

01:25:09
<transcript>: That'd be great.

01:25:22
laytanl_: https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md#rustfmt

01:25:29
<transcript>: Literals and operators, integers, floats, characters, strings, booleans and unit type can be expressed using literals. Integers can Alternatively be expressed using Hexadesimal October binary decision using these prefixes respectfully got it. Okay. Underscores can be inserted in numeric numeric literal to improve readability. Yep. Okay.

01:25:31
laytanl_: you use null-ls right?

01:25:38
<transcript>: We need to tell the compiler the type of the literals we use. For now, we use the U 32 seven to indicate that the literal is an Unscience artist bit injure.

01:25:42
<transcript>: Subject to indicate that it's assigned 32 bit integer.

01:25:49
<transcript>: Okay.

01:25:49
<transcript>: operator

01:25:54
<transcript>: Operators available in their Precedents and Rest are similar to other C like languages. Okay.

01:25:54
<transcript>: integer

01:25:54
gabes2k16: cargo fmt  to format

01:25:55
<transcript>: Integer edition.

01:25:59
<transcript>: Integer. Subtraction.

01:26:06
<transcript>: Okay, changing one I 32 to one U 32 to see why the type is important. Oh, try changing it.

01:26:06
<transcript>: okay

01:26:09
<transcript>: Okay, let's do it.

01:26:19
<transcript>: So one minus two. We've got.

01:26:19
<transcript>: thirty two bit

01:26:24
<transcript>: 32 bit integer one minus two. And he's saying try and change to.

01:26:26
<transcript>: One so you.

01:26:31
<transcript>: What happened.

01:26:33
<transcript>: See why the type is important.

01:26:36
<transcript>: Do I need to run it.

01:26:36
<transcript>: is that the thing

01:26:38
<transcript>: Is that the thing? Fargo.

01:26:45
<transcript>: Attempted to compute one userty to minus two U three two, which would overflow.

01:26:53
<transcript>: I Now I have to learn.

01:26:53
<transcript>: something

01:26:56
<transcript>: Something about math. Or something.

01:26:56
<transcript>: so i'm gonna explain this

01:26:58
<transcript>: So I'm gonna explain this to me.

01:27:02
<transcript>: Unsigned 32 bit integer.

01:27:05
daglee: So, 1-2 is negative

01:27:07
<transcript>: Can't go negative because it's unsigned only signed integers.

01:27:09
jakobkg: it will fail to compile now, since your arithmetic would be a negative value that an unsigned value can't represent

01:27:09
<transcript>: Can do that.

01:27:13
<transcript>: Let's delete all this.

01:27:14
maleero: Unsigned is positives

01:27:20
<transcript>: Okay.

01:27:20
nexxeln: they have ranges

01:27:22
<transcript>: You're telling me.

01:27:23
laytanl_: you can also try to run :lua vim.lsp.buf.format()

01:27:26
<transcript>: Only unsigned integers can go negative. Is that the deal.

01:27:30
<transcript>: Unsigned is positive, got it.

01:27:32
laytanl_: and keybind that if it is supported

01:27:33
maleero: Sign like +/-

01:27:34
<transcript>: Loua Vim? Lsp? Buff format.

01:27:34
<transcript>: you know

01:27:38
<transcript>: You know what? I'm using prettier in JavaScript. I need.

01:27:38
<transcript>: to set up

01:27:39
<transcript>: To set up my formatting.

01:27:39
<transcript>: for

01:27:41
<transcript>: For rust.

01:27:44
gabes2k16: cargo fmt  to format

01:27:44
<transcript>: Auto format.

01:27:44
<transcript>: in

01:27:46
<transcript>: In India.

01:27:50
<transcript>: Rest format okay.

01:27:51
myst3rymage: rustfmt

01:27:53
<transcript>: Rust vim.

01:27:58
laytanl_: use this https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md#rustfmt

01:27:58
<transcript>: No, I don't need a plugin. Do I there. Do I.

01:27:58
<transcript>: using

01:28:00
<transcript>: Using rest format.

01:28:05
daglee: So, rust doesn't allow overflow by default. Numbers flipping over because the amount of bits runs out is a bug by default. You can do it but the default is to return error.

01:28:07
nexxeln: https://github.com/nexxeln/nvim/blob/main/plugin/null-ls.lua#L15

01:28:10
<transcript>: Anybody done this auto format in rest.

01:28:16
<transcript>: Use this Latent says Latent links Me a Neoven plugin.

01:28:16
<transcript>: i install it

01:28:16
nexxeln: just add this to your null-ls

01:28:19
<transcript>: I install it. That's just how it works. That's the deal.

01:28:24
<transcript>: Rest format tool for my rest code according to style guidelines.

01:28:24
<transcript>: usage

01:28:26
<transcript>: Usage.

01:28:26
<transcript>: just like

01:28:28
laytanl_: you already have the plugin

01:28:31
laytanl_: for prettier

01:28:32
<transcript>: Just like that. Oh, no. Ls yeah. Okay, let's go to my dot files.

01:28:32
<transcript>: where

01:28:34
myst3rymage: i think rust.vim adds a RustFmt command

01:28:37
<transcript>: Where are my Dot files? Don't have them in somewhere.

01:28:55
<transcript>: Okay. Plug in. No. Ls.

01:28:57
<transcript>: Oh.

01:28:57
<transcript>: oh tree sitter

01:28:59
<transcript>: Oh, tree, sitter. What's going on.

01:29:01
<transcript>: Ouch.

01:29:06
<transcript>: What did I do.

01:29:11
laytanl_: :TSInstall lua

01:29:18
<transcript>: I broke everything I updated to the latest.

01:29:18
<transcript>: and we

01:29:22
<transcript>: And we broke it. Well, that's okay. We're just gonna say formatting.

01:29:25
<transcript>: Rust format.

01:29:30
<transcript>: That in our source is and then do I need to do anything else? That's probably it.

01:29:33
<transcript>: Okay.

01:29:41
<transcript>: Oh, come on.

01:29:44
jamdotexe: Why Rust? Just out of interest :)

01:29:45
<transcript>: In them.

01:29:49
<transcript>: Okay. We got some work to do on the Dofiles at some point, but.

01:29:51
<transcript>: Ignore it for now.

01:29:51
<transcript>: so now

01:29:53
<transcript>: So now do we just get auto formatting.

01:29:53
<transcript>: yes

01:29:55
<transcript>: Yes.

01:29:58
<transcript>: Feels good. Okay.

01:30:01
<transcript>: Does it.

01:30:05
<transcript>: Add semicolon for me. No.

01:30:10
<transcript>: Does that mean something in Rest? He said it means something right.

01:30:19
<transcript>: Yeah. Rest of them at the form. Okay. Tsm saw Lua.

01:30:23
<transcript>: Y rust just out of interest jam Exe.

01:30:23
<transcript>: yeah

01:30:31
<transcript>: Yeah, I'm interested in learning rest. There's a few things I want to build now. I didn't have anything a couple days ago, and then I just started mentioning, I want to learn rust.

01:30:31
<transcript>: and people gave me a

01:30:34
<transcript>: And people gave me a ideas for things I should build with rest.

01:30:43
<transcript>: So now we got some ideas. But first we got to learn it got a walk before you can run. They say.

01:30:47
<transcript>: Okay so integer subtraction.

01:30:47
<transcript>: short

01:30:47
jamdotexe: 'why not' is a perfectly valid response to that question, fair enough!

01:30:49
<transcript>: Shortcircuiting boolean logic.

01:30:49
<transcript>: true and

01:30:53
<transcript>: True and false is true or false.

01:30:58
<transcript>: Not true should I just I should just run all this.

01:31:20
<transcript>: Okay. True and false is false. True or false is true. Not true is false. Yep. One one and 0101 is zero. Zero. So those are like Bitwise things.

01:31:20
<transcript>: bitwise

01:31:21
<transcript>: Bitwise operations.

01:31:21
<transcript>: ooh

01:31:23
<transcript>: Ooh okay.

01:31:30
nexxeln: you can also print like this println!("{variable}")

01:31:30
<transcript>: Binary. We're learning binary. This is the life of a rest developer.

01:31:36
<transcript>: And just a web developer. People I don't know things about computers.

01:31:44
<transcript>: Okay. I'm gonna take the word for it. Those are some Bitwise operators. I will probably never use them. But maybe I would. Maybe.

01:31:55
<transcript>: Xor. I haven't heard of XOR since College, and I don't remember anything about College, so, okay, we're done. 1 million is written as Yep. Got it.

01:32:06
<transcript>: Tuples collection of values of different types. Couples of constructs using parentheses. Each tuple itself is valued with type signature. I'm gonna have to start building something pretty soon. We might come back and refer to this thing.

01:32:06
<transcript>: but

01:32:11
jamdotexe: I did C++ during my first degree, long time ago now LUL

01:32:11
<transcript>: But this is this is too much for me. I need I need a thing.

01:32:11
<transcript>: a thing that i'm making

01:32:12
<transcript>: A thing that I'm making.

01:32:15
<transcript>: I'm gonna make something.

01:32:19
<transcript>: A long time ago since College.

01:32:19
<transcript>: you can also

01:32:24
<transcript>: You can also print like this print line variable. Oh, really? That's cool.

01:32:24
<transcript>: so you don't have to actually

01:32:29
jezza1212: thoughts on finite state automata?

01:32:29
<transcript>: So you don't have to. Actually, I thought if you use the names like that. Okay. So if I said.

01:32:30
laytanl_: yeah 'go-by-example' is great but this sucks

01:32:31
<transcript>: If I said.

01:32:32
jamdotexe: I knew more then than I do now Kappa

01:32:34
<transcript>: Like let.

01:32:37
<transcript>: Test equal.

01:32:37
<transcript>: test

01:32:41
<transcript>: Test. Then I can say print, line.

01:32:42
<transcript>: Test.

01:32:42
<transcript>: oh i forgot

01:32:45
<transcript>: Oh, I forgot the quotes.

01:32:54
<transcript>: It works.

01:32:54
<transcript>: but then if

01:32:56
<transcript>: But then if I said.

01:33:02
jakobkg: speaking of college, if you want something to build feel very free to implement lempel-ziv compression for me. it's due next week

01:33:03
<transcript>: How is it they were doing the named parameters earlier. Well, that was variables. Those were variables. Okay. Yeah.

01:33:03
<transcript>: cool

01:33:06
<transcript>: Cool. Sounds good.

01:33:11
<transcript>: That's on finite state automatic.

01:33:11
<transcript>: jeza

01:33:14
<transcript>: Jeza. Welcome to Chat. I don't know what you're talking about. I don't know what that is.

01:33:14
<transcript>: i've heard

01:33:17
<transcript>: I've heard of finite state.

01:33:17
<transcript>: fin

01:33:18
the_real_enrico_pallazzo: Feels like an ASMR stream with all the clickety-claks of the keyboard...awesome switches!

01:33:19
<transcript>: Finite State machines.

01:33:21
<transcript>: Automatic. I don't know what that is.

01:33:25
<transcript>: You've. Clearly you've come into the stream.

01:33:25
<transcript>: you

01:33:30
<transcript>: You saw Rust. And you thought this guy's smart. I'm gonna ask him a question about SmartThings.

01:33:30
jezza1212: same thing!

01:33:32
<transcript>: No, I have no idea what we're talking about.

01:33:32
<transcript>: i'm a

01:33:35
<transcript>: I'm a web developer. All right, JavaScript.

01:33:38
<transcript>: Sometimes CSS.

01:33:55
<transcript>: Thanks. Really in Rico. Awesome. Switches. Yeah. It's. The keyboard is great. My mode keyboard fantastic. Also, the mic pretty good. It's like a $1200 mic. Nice Mike's. Make everything sound better. They make my voice sound better. I don't sound as good in person.

01:33:55
<transcript>: you kidding me

01:33:57
<transcript>: You kidding me.

01:33:59
<transcript>: And then the keyboard. It just makes it all better.

01:34:04
<transcript>: Okay. So do we need to learn about Tuples? I guess I should probably.

01:34:06
the_real_enrico_pallazzo: Autotune you say?

01:34:10
<transcript>: Let's just skip. Okay, let's just go back to the table to contents. Let's see here. Introduction.

01:34:13
<transcript>: So functions.

01:34:13
<transcript>: flow of

01:34:15
<transcript>: Flow of control.

01:34:15
<transcript>: what

01:34:19
<transcript>: What if what if we kept this as a reference.

01:34:19
<transcript>: and then we just

01:34:22
<transcript>: And then we just start building something with Sycamore. What if we did that.

01:34:29
<transcript>: Let's do. Let's do that. Or maybe we build a CLI. Maybe we want to build a CLI that does something.

01:34:29
<transcript>: what's a seal

01:34:32
<transcript>: What's a seal. I want to exist.

01:34:38
<transcript>: I'm gonna take a break and think about it because I got a pee.

01:34:38
<transcript>: i'm not thinking

01:34:43
theloniousbird: trust me and do a CLI lol

01:34:52
<transcript>: I'm not thinking about it. You think about it, too. What are we gonna build a real thing? I want to build a real thing with Rust, and then I'm gonna learn this stuff, just kind of on the way. That's how I like to learn. So we're gonna do it that way. After I come back from this break, I'll be back.

01:35:20
jamdotexe: This is the problem with lower level things, as someone who uses high level labguages daily for work, I can never think of anything I want to build!

01:35:29
jamdotexe: languages, fat fingers

01:36:00
jezza1212: sometimes you just have to start SOMETHING and it will turn into something

01:36:12
laytanl_: You wanted to make a CLI that sets up a secure/well configured AWS account, right?

01:36:22
jakobkg: grab the first, worst idea you get and run with it

01:36:25
jamdotexe: Yea that's usually what happens @jezza1212

01:36:32
jezza1212: make a cli text based rpg. full of if else statements

01:37:21
jezza1212: @jamdotexe exactly, can't get too caught up in the planning stage otherwise you'll never start

01:37:38
jezza1212: sometimes its better to start and plan later

01:38:01
jamdotexe: That's true too, especially for fun side projects, who cares about planning those right

01:38:32
jezza1212: exactly, you can always refine later if you want to use it as a portfolio project if it turns out to be interesting

01:39:11
jezza1212: got to keep the github commit history very serious though, just in case

01:39:29
cowfacedude99: cli game? aws service description vs name? *awguess-cli*

01:39:56
jamdotexe: Thanks for that - kinda needed that advice, used dynamically typed languages for years now and want to switch to something statically typed, so will start something new later and see what happens!

01:41:30
maleero: Maybe just write some simple wasm stuff that you can call in JavaScript?

01:41:55
jezza1212: hackathons are great for it, loosely planned projects and limited time. The result for the submission might not be fantastic but you can go back, refine and create something pretty good

01:43:28
jezza1212: lack of sleep for a few days is the only downside

01:44:26
<transcript>: Alright.

01:44:26
<transcript>: looks

01:44:28
<transcript>: Looks like we had some ideas.

01:44:28
<transcript>: thrown

01:44:30
<transcript>: Thrown out there.

01:44:37
<transcript>: Lower level things. As someone who uses Hyal languages daily for work, I can never think of anything I want to build.

01:44:37
<transcript>: sometimes

01:44:46
<transcript>: Sometimes you just have to start something and it will turn into something that's good. Good advice. You wanted to make a CLI that sets up a secure, well configured a BS account.

01:44:46
<transcript>: yeah so

01:45:06
<transcript>: Yeah. So Leighton, it was actually going to be like a little web app and not a CLI, but like a web app that you click. And it launched a CloudFormation template to connect to your account to it. And then you can, like, stand up Best practices in your account or click buttons and make certain things happen in your account. It's called Yoke. Thanks for the follow Mary and morted.

01:45:09
<transcript>: And Gabes, and Roley.

01:45:12
<transcript>: I think that's all that I hadn't seen.

01:45:23
morded__: I just saw on your youtube shorts that you're a vegan, you also listen to Alt-j and code in vim. I love you

01:45:24
<transcript>: It's usually what happened. Make a CLI text based RPG full of if else statements exactly can't get too caught up in the plane stage otherwise you'll never start.

01:45:28
<transcript>: Exactly you can always refine later.

01:45:33
<transcript>: Cli game a Tobia service description versus name.

01:45:44
<transcript>: Oh, I like that. So it describes it's like the description. You have to figure out which which is it AWS guests or AW. Guess CLI. Interesting. Okay. That's a good idea.

01:45:48
<transcript>: Just write some simple WASM stuff.

01:45:57
<transcript>: First time chat. Welcome to Chat, Morted. I just saw on your YouTube shorts that you're a vegan. You also listen to LJ and Code and Vim. You love me.

01:46:00
<transcript>: Those are all things that you like.

01:46:02
<transcript>: That's awesome.

01:46:11
<transcript>: Okay. So I had an idea. So Calface had an idea. There's been a few ideas. My idea was what if.

01:46:19
<transcript>: I lost it. I had an idea.

01:46:25
<transcript>: I'm completely blank. Oh, chat client. What if I built.

01:46:39
<transcript>: Like a CLI based check client for Twitch where I could, like, send you all messages from this rest CLI. It would make me, like, go out and grab some crates for like, connecting to Twitch. It would make me sort out.

01:46:39
<transcript>: like

01:46:46
<transcript>: Like storing things to disk. I probably want to save the Twitch sessions stuff in a file and I'd have to sort that out.

01:46:46
<transcript>: and then

01:46:56
cowfacedude99: subd does that.

01:46:56
nameless912: ooh yeah good idea! Twitch chat is based on IRC isn't it?

01:47:00
<transcript>: And then maybe I'd have to sort out something weird where I'm like displaying chat messages that come in, but also allowing me to type, like, I don't know what that would be. Let's just CLI things. I guess. Like, I'd have to hit a key to, like, go into.

01:47:00
<transcript>: sub does that

01:47:02
nameless912: should be a relatively easy protocol to hit against

01:47:02
<transcript>: Sub does that. Yeah. Calf A. So actually.

01:47:05
<transcript>: This wasn't really my idea.

01:47:05
<transcript>: this was

01:47:09
<transcript>: This was an idea Tiege gave me. He said. Start with building a chat client.

01:47:09
<transcript>: like

01:47:15
maleero: Twitch bot in rust

01:47:17
<transcript>: Like, that's a good idea. He was saying, do it in you like with an interface. But maybe I just start with the CLI. What do you think.

01:47:25
<transcript>: Welcome to Chat Nameless Twitch. Chat is based on Iowa, isn't it? Yeah. There's. I think there's libraries. There's an API where you can send chat messages.

01:47:26
gabes2k16: maybe a smaller scope

01:47:27
jezza1212: discord bot in rust

01:47:31
<transcript>: And there's probably a crate for interacting with Twitch. I would think.

01:47:38
<transcript>: Twitch bot in Rest, maybe a smaller scope. Discord bot and rest.

01:47:38
<transcript>: yeah

01:47:47
<transcript>: Yeah. Like I think like, the scope to me is just like, can I send you all a message before I get off today's? Stream from rest from a rust CLI.

01:47:49
<transcript>: What do we think.

01:47:50
daglee: Twitch isn't really irc but it has a bridge.

01:47:55
<transcript>: Twitch bot Twitch isn't really IRC, but has a bridge.

01:47:55
<transcript>: yeah i don't

01:48:00
sailazaray: great idea :)

01:48:02
<transcript>: Yeah. I don't think I'll have to mess with, like, too much of the lowlevel parts of it. I think there's probably just a crate. Let's just see. Let's find out.

01:48:02
<transcript>: but

01:48:07
<transcript>: But just like having to involve some thirdparty code and understand how the bundle.

01:48:09
cowfacedude99: I think you can start with the chat cli, and maybe later make a lib that you can use in yew later

01:48:10
<transcript>: Package system works, and all that.

01:48:14
<transcript>: And there's just like a tangible thing that we can all see when I'm done.

01:48:21
<transcript>: Start with the chat seat CLI, and maybe later make a lid that you can use in you exactly. Cow face. Exactly.

01:48:21
<transcript>: so right

01:48:22
<transcript>: So right.

01:48:27
<transcript>: Connect to Twitch or rest.

01:48:27
<transcript>: tw

01:48:30
nameless912: dumb question since I'm new-what is Yew?

01:48:30
<transcript>: Twitch which create.

01:48:34
<transcript>: creates

01:48:37
<transcript>: Creates Twitch. Irc.

01:48:41
<transcript>: Twitch oh, off to its types Twitch, jet.

01:48:46
<transcript>: Let's see. Are we looking for recent downloads? Is that how we do this on.

01:48:46
<transcript>: crates i

01:48:51
<transcript>: Crates I. O. Updated this 30 days ago. This seems like a winner.

01:48:52
<transcript>: Actually.

01:48:52
<transcript>: it's my

01:48:59
<transcript>: It's my fuzzy. Working. I might just let's see. Fuzzy. No, it's not working. Hang on one SEC.

01:48:59
<transcript>: i think

01:49:00
<transcript>: I think.

01:49:00
<transcript>: tee

01:49:08
<transcript>: Tee'd even sent me a crate that would be helpful. Oh, that's Twitch API, too.

01:49:10
<transcript>: Features.

01:49:10
<transcript>: okay we're gonna

01:49:14
<transcript>: Okay. We're gonna look at what this is. This is what he's using and subbed.

01:49:20
<transcript>: Or Subd as we call it in the biz. We can unfuzzy now.

01:49:25
<transcript>: Which one is the fuzzy? That one's. The fuzzy. Okay.

01:49:25
<transcript>: so he says

01:49:27
<transcript>: So he says, Use this one.

01:49:30
<transcript>: Api. To.

01:49:39
<transcript>: Does this allow working with chat.

01:49:43
<transcript>: Sometimes this libraries are like separate.

01:49:43
<transcript>: chat

01:49:49
<transcript>: Chat versus like event sub. I think I don't know if this one actually does chat.

01:49:49
<transcript>: it might not

01:49:50
<transcript>: It might not.

01:49:50
<transcript>: doesn't look close

01:49:51
<transcript>: Doesn't look close.

01:49:54
jezza1212: @nameless912 right there with you, I've never used rust, have no idea what yew is

01:49:57
<transcript>: And we're not as interested in that for this we want to build.

01:50:01
<transcript>: The Twitch chat from a rest application.

01:50:06
<transcript>: Okay. Let's start with Twitch IRC and just.

01:50:06
<transcript>: find

01:50:08
<transcript>: Find out that we're wrong.

01:50:11
<transcript>: Common types for Twitch.

01:50:18
<transcript>: Async and runs using the Tokyo runtime. That was a terrible prime engine.

01:50:21
<transcript>: Impersonation.

01:50:24
daglee: TOKIOOOOOOOOOOOOO

01:50:25
<transcript>: Dom question? Since I'm new? What is you.

01:50:25
<transcript>: u is

01:50:29
<transcript>: U is like a Rust UI library.

01:50:32
<transcript>: It's like.

01:50:37
<transcript>: Filled interfaces that run the browser and WASM with rest.

01:50:37
<transcript>: you'll

01:50:45
<transcript>: You'll notice today I'm not eating Lara bar, and I'm kind of depressed about it. I ran out of Lar bars. I'm eating these RX bars. Now I've got Larvars coming.

01:50:48
cowfacedude99: @nameless912 basically react in rust

01:50:53
<transcript>: Terrible miscalculation of LARB our inventory.

01:50:58
<transcript>: Yeah. Basically. React and rest. Exactly.

01:51:00
<transcript>: Okay.

01:51:04
<transcript>: Example Usage Simple Listener example.

01:51:09
<transcript>: Oh, no. Would I be done just like right now if I just use this.

01:51:09
<transcript>: is this like

01:51:11
jezza1212: huh, interesting

01:51:12
<transcript>: Is this like the easiest thing ever because I'm not writing any of the code.

01:51:17
<transcript>: We'll do something more interesting if it's too easy.

01:51:19
<transcript>: It's a good problem to have.

01:51:24
<transcript>: Steps static logging credentials.

01:51:28
<transcript>: Thank you for the follow Mark.

01:51:28
<transcript>: marcus

01:51:29
<transcript>: Marcus.

01:51:34
<transcript>: So client config.

01:51:34
<transcript>: default

01:51:37
<transcript>: Default is a join is anonymous.

01:51:42
<transcript>: Start consuming incoming messages. Otherwise it will back up.

01:51:45
<transcript>: Okay.

01:51:55
<transcript>: Join a channel only returns an error of the pass channel login name is malformed.

01:51:58
jezza1212: OSX, windows or Linux for development. What is your preference? what are you using?

01:52:01
<transcript>: We can ignore the potential error with unwrap.

01:52:06
<transcript>: Keep the Tokyo exit.

01:52:07
<transcript>: alive

01:52:10
<transcript>: Alive if you return instead of weighing the background has to exit.

01:52:10
<transcript>: okay

01:52:12
<transcript>: Okay.

01:52:12
<transcript>: so

01:52:13
jezza1212: looks like OSX?

01:52:17
<transcript>: So just even trying to like, understand what all this code does will be a great learning exercise.

01:52:25
<transcript>: But what are they doing with the Twitch IRC? So that's the Twitch RC client. Where is that.

01:52:29
<transcript>: Here, let.

01:52:29
<transcript>: incoming

01:52:30
<transcript>: Incoming messages.

01:52:30
<transcript>: a client

01:52:32
<transcript>: A client.

01:52:42
<transcript>: Equal Twitch IRC clients, security transport, static logging credentials new and we pass in Config, which is the default. Okay, let's try playing with this.

01:52:45
<transcript>: Tokyo I got to add some stuff, right.

01:52:49
<transcript>: I got to add the dependency.

01:52:54
<transcript>: At the following line to your cargo. That's it. That's the one.

01:52:54
<transcript>: ask

01:52:55
<transcript>: Ask the one.

01:52:59
<transcript>: Hit it.

01:52:59
<transcript>: we did it

01:53:01
<transcript>: We did it. People.

01:53:07
<transcript>: Yeah. Did Twitch IRC? Does it just download automatically? Do I have to run, like Cargo install or something.

01:53:11
<transcript>: Anybody know.

01:53:13
daglee: You can also do: cargo add twitch-irc

01:53:13
<transcript>: Let's see.

01:53:15
charliec97: @jezza1212 MacOS

01:53:18
<transcript>: So if I'm here and I say, Cargo install.

01:53:18
<transcript>: just make it stuff up

01:53:18
whoami1509: <3

01:53:19
<transcript>: Just make it stuff up.

01:53:19
<transcript>: to install

01:53:23
<transcript>: To install the binaries for the Packaging current Working Directory use cargo.

01:53:26
daglee: cargo build or cargo run will download it

01:53:31
<transcript>: Cargo build. Is it gonna get yeah, it's gonna get the things from yeah, there it is. It's fetching it.

01:53:31
myst3rymage: cargo r wiill do it

01:53:35
<transcript>: Okay so cargo run would have done it too.

01:53:39
<transcript>: Oh, cargo, ad, Twitch, IRC, cool.

01:53:45
<transcript>: I'm using OSX for everything.

01:53:45
<transcript>: for

01:53:48
<transcript>: For developing for streaming.

01:53:48
<transcript>: all of it

01:53:49
<transcript>: All of it.

01:53:58
<transcript>: So I'm guessing.

01:53:58
<transcript>: twitter

01:54:02
<transcript>: Twitter RC Includes Tokyo as I get a pencil. Yeah. Okay.

01:54:05
<transcript>: So now.

01:54:08
<transcript>: We can say.

01:54:08
<transcript>: we

01:54:09
jezza1212: is there a preference for OSX? if so why is that?

01:54:11
<transcript>: We want to paste all this.

01:54:14
<transcript>: Not all that all this.

01:54:36
<transcript>: Okay, I'll fail to resolve.

01:54:39
<transcript>: Okay. Why.

01:54:44
<transcript>: It's of unclear crate or module? Tokyo.

01:54:54
<transcript>: Wait, what is it? Of undeclared.

01:54:58
<transcript>: I need to clear it somewhere.

01:55:01
<transcript>: And here.

01:55:07
daglee: Yes

01:55:10
<transcript>: These are Preference Rosex. I just like Max.

01:55:14
<transcript>: I just like Mac hardware. And so I use OSX.

01:55:14
carlosgn: install tokyo

01:55:16
carlosgn: check the docs

01:55:19
daglee: You need to install tokio

01:55:21
<transcript>: I just assume it takes advantage of the Mac hardware. The best install Tokyo, check the docs or does it say that.

01:55:31
<transcript>: Getting started.

01:55:36
<transcript>: Slide to actually.

01:55:39
<transcript>: Oh, this is so much more information.

01:55:41
cowfacedude99: you got a rust expert @daglee in here. So you are in good hands

01:55:44
<transcript>: I have to do an install. I thought it would just be installed.

01:55:53
myst3rymage: cargo add tokio

01:55:53
<transcript>: Daglie Russ expert.

01:55:53
<transcript>: awesome

01:55:55
<transcript>: Awesome.

01:55:58
<transcript>: Dagley welcome. Thank you for helping me.

01:56:00
<transcript>: Let's see.

01:56:01
deletofull: 2 line

01:56:04
<transcript>: Install Tokyokyo Cargo Ad Tokyo, look at that.

01:56:06
daglee: I'm a rust expert now? :D

01:56:18
jezza1212: yes

01:56:20
<transcript>: Added all the features.

01:56:23
jezza1212: you're an expert

01:56:23
<transcript>: I don't know if I should have added all the features but.

01:56:27
<transcript>: Some now.

01:56:27
<transcript>: it's

01:56:28
<transcript>: It's from.

01:56:28
<transcript>: a default runtime

01:56:33
<transcript>: A default runtime flavor is more, but the RT Multi thread feature is disabled.

01:56:35
<transcript>: Okay.

01:56:42
<transcript>: Two line welcome to Chat. The leader to full.

01:56:47
<transcript>: Okay. So what's this? What's to say? I need to.

01:56:47
carlosgn: in the toml add the plugins like

01:56:50
<transcript>: tok

01:56:50
<transcript>: tokyo

01:56:53
<transcript>: Tokyo Default Runtime flavor.

01:57:01
<transcript>: Did it say in these docs.

01:57:01
<transcript>: and the twitch api

01:57:02
<transcript>: And the Twitch API.

01:57:07
<transcript>: Or no, I'm sorry. The Twist Twitch RC, Tokyo.

01:57:14
<transcript>: It doesn't really say.

01:57:14
<transcript>: in their injections

01:57:16
<transcript>: In their injections. Just assumed. You know how to do this.

01:57:19
carlosgn: tokio = { version = "1.21.2", features = ["rt-multi-thread"] }

01:57:20
<transcript>: So.

01:57:25
<transcript>: Add the plugin like Tokyo version of features RT multithread IC.

01:57:27
<transcript>: I see.

01:57:28
carlosgn: change the version with yours

01:57:31
<transcript>: So I need to not just do the default thing.

01:57:33
<transcript>: We did add Tokyo.

01:57:38
<transcript>: We need to say Features, RT, multiphread.

01:57:43
<transcript>: Assuming that's the features are you sure that's the features I need, I guess.

01:57:46
<transcript>: Cargo build.

01:58:02
<transcript>: So you can like, is it like manual tree shaking? You basically just choose, like the name spaces or something of things they're called features, the parts of the library that you want, and you don't get the parts that you don't specify.

01:58:06
<transcript>: Okay, we got rid of that error. So Tokyo main.

01:58:06
<transcript>: default consistent

01:58:09
<transcript>: Default consistent fig. We're probably gonna change.

01:58:14
<transcript>: We're not gonna I don't want to just be anonymous? I want to.

01:58:18
<transcript>: Excuse me. How to log in.

01:58:22
jezza1212: are you building a multithreaded application? what does rt-multi-thread mean?

01:58:23
<transcript>: What.

01:58:27
carlosgn: yeah you specified the features so the build can be smaller

01:58:30
<transcript>: This is cool. You can learn some stuff about matching. This feels very like Elixir to me.

01:58:30
<transcript>: feel

01:58:32
<transcript>: Feels good.

01:58:37
maleero: Adamdotbot

01:58:42
<transcript>: Tokyo provides multiple tasks, scheduling strategies. Oh, I'm in the Tokyo docs. I want to go back to the Twitch IRC.

01:58:44
<transcript>: So.

01:58:46
<transcript>: Send messages.

01:58:54
<transcript>: We need to log in so it ships a static logging credentials in refreshing logging credentials for simple cases.

01:58:54
<transcript>: static

01:58:58
<transcript>: Static logging digital fulfills all needs, so that's what we're going to do.

01:58:58
<transcript>: so we have

01:59:00
<transcript>: So we have a simple use case.

01:59:08
<transcript>: We're in Neovent. So hopefully, Leighton's wonderful. Invoke.

01:59:08
<transcript>: will

01:59:13
<transcript>: Will meet all of our needs. We've already got static logging credentials. What am I talking about.

01:59:13
<transcript>: why

01:59:16
<transcript>: Why did I think oh default this to join is anonymous.

01:59:16
<transcript>: we want

01:59:19
<transcript>: We want login name. So let's see here.

01:59:19
<transcript>: let

01:59:22
<transcript>: Let login name.

01:59:24
<transcript>: Equals.

01:59:24
<transcript>: my bot

01:59:26
<transcript>: My bot name.

01:59:31
<transcript>: Adam bot.

01:59:34
<transcript>: Can I just log in as myself.

01:59:37
<transcript>: I have to create a twitchbot.

01:59:37
<transcript>: i think

01:59:39
<transcript>: I think I can just.

01:59:41
daglee: @jezza1212 rt-multi-thread means that when you start a async task, it will set up a working queue and if there are unused cores it will use additional cores to run code instead of just sharing using async. This is how golang does it.

01:59:44
<transcript>: Log in as myself.

01:59:49
<transcript>: Okay. Here's.

01:59:53
<transcript>: Specify the feature so the bill can be smaller.

02:00:06
<transcript>: Rt multithread means that when you start an Async task, it will set up a working queue, and if there are unused cores, it will use additional quartering code instead of just sharing using Async. Okay.

02:00:11
<transcript>: So give Golling does it cool.

02:00:14
<transcript>: Let's see, let's go to Twitch.

02:00:14
<transcript>: td

02:00:17
<transcript>: Td. Let's go to.

02:00:20
<transcript>: Developer or something.

02:00:21
jezza1212: intersting

02:00:25
<transcript>: Developer connection.

02:00:28
jezza1212: interesting*

02:00:30
<transcript>: Let's see. Where is that.

02:00:36
<transcript>: Where is it? Create a dashboard.

02:00:38
<transcript>: Maybe.

02:00:38
<transcript>: discovery

02:00:39
<transcript>: Discovery.

02:00:39
<transcript>: my extens

02:00:41
<transcript>: My extensions.

02:00:52
<transcript>: Why am I having hard time finding what I'm looking for here.

02:00:56
<transcript>: There's like a developer, right? Twitch developer.

02:01:00
<transcript>: Dev, Twitch TV. There we go.

02:01:10
<transcript>: Your console. I'm gonna leak something. Confirmed. I will link. Okay, so there's my overlay.

02:01:13
<transcript>: Register your application.

02:01:19
<transcript>: Create a Twitch bot.

02:01:27
<transcript>: I know. Like Mark had done this. Who else has a Twitch bot.

02:01:40
<transcript>: Or I could just connect as myself.

02:01:55
<transcript>: Thinking with the Twitch RC server.

02:02:10
<transcript>: Ah, here we go. Getting an access token. After registering your bot getting a client ID, you can generate a user access token for inverse values, number ways the access token. Okay, I'm going to go to Fuzzy and I'm gonna just see if I can just use my atoms overlay thing.

02:02:10
<transcript>: so

02:02:10
cowfacedude99: teej has one. and BG has quirk which is used by some other people

02:02:13
<transcript>: So my button isn't working anymore.

02:02:13
<transcript>: we do like that

02:02:14
<transcript>: We do like that.

02:02:14
<transcript>: we're gonna go

02:02:16
<transcript>: We're gonna go M's overlay.

02:02:19
<transcript>: Oauth, redirect, let's see.

02:02:19
<transcript>: client id

02:02:22
<transcript>: Client ID and Client secret.

02:02:26
<transcript>: I'm just gonna have to create a new one. I don't want to change the secret.

02:02:26
<transcript>: so reg

02:02:26
stiefbroerikzitvast: I dont know what "yew" is, but I'm pretty sure Kanye West doesnt like it

02:02:28
<transcript>: So register your application.

02:02:36
<transcript>: Okay.

02:02:38
daglee: @StiefbroerIkZitVast To soon

02:02:38
jezza1212: do you use a mouse and a magic trackpad?

02:02:39
<transcript>: Step, row.

02:02:40
jcasimiro2: why everybody is learning rust right now?

02:02:47
<transcript>: Background has quirk which is used by some other people.

02:02:54
stiefbroerikzitvast: @StiefbroerIkZitVast never too soon

02:02:57
<transcript>: Do you use a mouse in a magic track bed? I just use a magic trackpad, that's all. Welcome to Chat Gasamiro. Why is everybody learning Rust right now.

02:03:02
<transcript>: There's just some influential people in this Dev community of ours.

02:03:02
<transcript>: like

02:03:03
daglee: :D

02:03:11
<transcript>: Like prime and Tiege and the rest community seems fantastic if they're representative of the rest community, but I want to be a part of it. I register your application.

02:03:11
<transcript>: we're gonna call

02:03:12
<transcript>: We're gonna call it.

02:03:15
<transcript>: Rest spot.

02:03:15
<transcript>: odor

02:03:17
<transcript>: Odorok oh, awesome.

02:03:23
<transcript>: Chat bot.

02:03:24
<transcript>: i'm

02:03:27
<transcript>: I'm not a robot. I do have to put.

02:03:31
<transcript>: Token.

02:03:33
<transcript>: Generator.

02:03:38
<transcript>: Okay.

02:03:42
<transcript>: Bot chat token.

02:03:44
<transcript>: Authorize.

02:03:50
<transcript>: Not a robot. Sorry, I'll take it off the fuzzy stuff soon.

02:03:54
<transcript>: Use my client secret or let's see.

02:03:57
jezza1212: Kanye will let us know if he doesn't like it, for now its safe

02:04:01
<transcript>: There's I guess we could just do.

02:04:01
<transcript>: this

02:04:03
<transcript>: This. Okay.

02:04:07
<transcript>: Okay, let's do it.

02:04:07
<transcript>: so if i go

02:04:08
<transcript>: So if I go back to the.

02:04:08
<transcript>: twitch

02:04:15
<transcript>: Twitch. So they just have the OAuth token, like right there. Should I read it from a file or something? How do I keep this thing hidden.

02:04:23
<transcript>: Refreshing token.

02:04:23
<transcript>: let's see

02:04:26
<transcript>: Let's see, how does this work.

02:04:29
<transcript>: Update token.

02:04:47
<transcript>: Well.

02:04:52
<transcript>: I think I should use this refreshing token.

02:04:55
<transcript>: But.

02:05:02
<transcript>: I'm just trying to figure out how to not have.

02:05:09
<transcript>: Where they define the to do function.

02:05:09
<transcript>: or is that

02:05:12
<transcript>: Or is that like you need to build it.

02:05:20
<transcript>: Loads are currently store token from storage.

02:05:34
<transcript>: Well, I want to put I want to.

02:05:35
<transcript>: token

02:05:36
<transcript>: Token.

02:05:38
maleero: Environment variable?

02:05:41
<transcript>: That's an access token. That's different. Right.

02:05:45
<transcript>: Chat, read, chat.

02:05:56
<transcript>: I always get hung up on this.

02:06:00
<transcript>: Let's see.

02:06:04
<transcript>: Your bot name.

02:06:04
<transcript>: and then

02:06:07
<transcript>: And then, oh, off token.

02:06:10
<transcript>: Stabbed login, credentials.

02:06:15
<transcript>: What is that? Token.

02:06:35
<transcript>: Variable. Yeah. We should learn how to read environment variables in rest. That's a thing, right.

02:06:35
<transcript>: twitch api

02:06:39
<transcript>: Twitch API is required. Access Tokens, Access resources.

02:06:39
<transcript>: and

02:06:40
<transcript>: And.

02:06:54
<transcript>: Stuff.

02:06:57
<transcript>: That's how I can get a refresh token.

02:07:01
<transcript>: Okay, let me just try this for quick.

02:07:01
<transcript>: while i'm

02:07:05
<transcript>: While I'm still fuzzy, I'm gonna just try taking this access token.

02:07:13
<transcript>: And put it in the code like they have it here.

02:07:20
<transcript>: Twitter. See? Okay. So they're putting OAuth token.

02:07:27
<transcript>: Let's see.

02:07:35
<transcript>: Login name. Adam. Nev.

02:07:38
<transcript>: nevada

02:07:39
<transcript>: Nevada.

02:07:59
brunooomelo: why is your screen like this?

02:08:08
<transcript>: Name and OAuth token. And then the config is going to be client config, new, simple.

02:08:16
<transcript>: And then static login credentials, new login name.

02:08:19
<transcript>: And some.

02:08:19
<transcript>: oauth

02:08:21
<transcript>: Oauth token.

02:08:24
<transcript>: Okay.

02:08:24
<transcript>: let me

02:08:25
<transcript>: Let me.

02:08:25
<transcript>: see message

02:08:27
<transcript>: See message. Join.

02:08:27
<transcript>: to

02:08:31
<transcript>: To own unwrap. Okay, let's try running this cargo.

02:08:34
<transcript>: What are we missing? Here.

02:08:37
<transcript>: Oh, is it actually working.

02:08:39
<transcript>: Prefix.

02:08:46
adamdotdev: test

02:08:48
<transcript>: Let me say something in chat. My screen is like this because I'm got some secrets on the screen.

02:08:48
<transcript>: and i just didn't

02:08:49
daglee: test

02:08:52
<transcript>: And I just didn't want to. Oh, sure. Enough. Yeah. Okay. So it's connected.

02:08:52
<transcript>: i

02:08:53
brunooomelo: test

02:08:59
<transcript>: I will unfuzzy. I'm just surely going to leak this thing, but I'll just remove I'll just revoke the token if I do.

02:08:59
<transcript>: so we've got

02:09:01
<transcript>: So we've got it connected.

02:09:01
<transcript>: now i want

02:09:07
<transcript>: Now I want to actually learn something, and I want to make it where you can send, so receive message.

02:09:07
<transcript>: pong

02:09:08
<transcript>: Pong.

02:09:08
<transcript>: okay

02:09:09
<transcript>: Okay.

02:09:17
<transcript>: Oh, this is so here the test message.

02:09:17
<transcript>: paramed

02:09:19
<transcript>: Paramed.

02:09:24
<transcript>: From Bruno. That's you okay, cool, cool.

02:09:31
<transcript>: So Apparently, I use the right token.

02:09:31
<transcript>: let's try

02:09:37
<transcript>: Let's try to send a message. There's the token man. I linked. It. Okay. That was inevitable.

02:09:42
<transcript>: Sind send a message.

02:09:45
brunooomelo: ping

02:09:48
<transcript>: Send messages to send messages. Uses Twitch RC client handle you get from that.

02:09:50
<transcript>: So.

02:09:50
<transcript>: client

02:09:54
<transcript>: Client you get from Twitch IRC. Let's see.

02:09:54
<transcript>: client

02:09:57
<transcript>: Client. There it is. So join.

02:10:00
<transcript>: Here.

02:10:03
<transcript>: And then we're going to do client.

02:10:05
maleero: LUL

02:10:07
<transcript>: Say.

02:10:09
<transcript>: Adam Dev.

02:10:12
<transcript>: To.

02:10:18
<transcript>: This is a test.

02:10:20
<transcript>: From rest.

02:10:31
<transcript>: And then dot await.

02:10:31
<transcript>: that unw

02:10:33
<transcript>: That unwrap.

02:10:36
<transcript>: We're gonna learn what all this means.

02:10:38
<transcript>: Important to me.

02:10:42
<transcript>: Okay, let's try it again.

02:10:49
<transcript>: This will confirm that the towing is valid because it won't let me send a message.

02:10:53
<transcript>: If it's not valid, it does not look like it is.

02:11:00
<transcript>: So apparently I can read the chat without a valid token, just can't write to it.

02:11:04
aarrjaay: Hi

02:11:05
<transcript>: Maybe receive message.

02:11:15
<transcript>: Or.

02:11:16
maleero: You don’t seem concerned about the leak.

02:11:18
impostorengineer: are you using tmi.js, if yes . yes you can  read

02:11:22
<transcript>: Is it just. It's only waiting right now. On.

02:11:25
<transcript>: Is only waiting.

02:11:25
<transcript>: until it

02:11:27
<transcript>: Until it can't.

02:11:28
impostorengineer: unless they changed something

02:11:29
<transcript>: Say.

02:11:35
<transcript>: Because we're doing all this first thing you should do, start consuming income messages. They will back up.

02:11:40
<transcript>: But then it executes this code. The join code.

02:11:46
<transcript>: Keep the Tokyo execution alive if you return instead of waiting, the background has to exit.

02:11:50
<transcript>: Okay. I don't know why I can't send a message.

02:11:50
<transcript>: i don't

02:11:53
<transcript>: I don't see an error.

02:11:59
<transcript>: Now see one.

02:12:02
machinemob: I'm in week 2 of learning rust: currently wrestling with "String" vs. "Str" lol

02:12:05
<transcript>: Okay, let's just not log.

02:12:05
<transcript>: let's not log

02:12:07
<transcript>: Let's not log all the messages.

02:12:12
adamdotdev: This is a test, from rust

02:12:14
<transcript>: Cluttering up.

02:12:18
<transcript>: To just see when it tries to send amount.

02:12:19
<transcript>: amounts it even try

02:12:20
<transcript>: Amounts it even try.

02:12:30
impostorengineer: something happend :)

02:12:31
<transcript>: Oh, It works.

02:12:35
<transcript>: It worked.

02:12:41
<transcript>: Don't seem concerned about the leak. I mean, I guess I should be.

02:12:46
<transcript>: Mirror sheath things over to the follow.

02:12:52
<transcript>: Week two of Learning rows currently resting with String versus STR.

02:12:56
<transcript>: Okay.

02:13:00
<transcript>: So why why did it work.

02:13:05
<transcript>: That time, but not the first time. Why doesn't it work when I'm writing all these messages.

02:13:08
adamdotdev: This is a test, from rust

02:13:13
<transcript>: Riddle me this. Okay, so it's working every time now.

02:13:15
<transcript>: You just need to warm up.

02:13:18
<transcript>: Okay.

02:13:19
impostorengineer: test?

02:13:24
<transcript>: Let's learn what this code means. What does it mean? Okay, there's a cut. There's a token.

02:13:27
jezza1212: guys it really did a thing

02:13:27
<transcript>: I'm just gonna go and revert that token or revoke it.

02:13:32
<transcript>: I only know why I'm going fuzzy because.

02:13:35
<transcript>: You've already seen the token.

02:13:35
<transcript>: but

02:13:37
<transcript>: But let's revoke.

02:13:41
<transcript>: Revoke.

02:13:47
<transcript>: Let's see, I.

02:13:47
<transcript>: can copy

02:13:48
<transcript>: Can copy.

02:13:54
<transcript>: Guys, it really did a thing. It did. I mean, we did nothing, but it did a thing.

02:13:59
<transcript>: And about Refresh token. Oh, revoke your Axis token.

02:14:01
<transcript>: Cool revoked.

02:14:10
<transcript>: Okay, so what did we learn? Basically nothing yet. This is not the best way to learn because we didn't learn anything.

02:14:14
<transcript>: But we did something with Russ.

02:14:18
<transcript>: Now it's actually used this as a method of learning what we did.

02:14:23
<transcript>: So this token is bogus. Now you can use it, but it's doesn't work.

02:14:27
<transcript>: So we have a login name. What is two owned.

02:14:27
<transcript>: creates own

02:14:32
<transcript>: Creates own data from borrowed data usually by cloning all the borrow checker.

02:14:32
<transcript>: i should

02:14:34
<transcript>: I should probably learn about the borrow checker.

02:14:39
<transcript>: Okay.

02:14:41
<transcript>: So.

02:14:45
<transcript>: We'll learn what that means.

02:14:45
<transcript>: we

02:14:50
<transcript>: We created a new so this like way you in we create new things.

02:14:53
<transcript>: This syntax.

02:14:53
<transcript>: and these are

02:14:58
<transcript>: And these are probably like kind of go to definition on that.

02:15:02
<transcript>: Oh, okay, can't go to definition.

02:15:05
<transcript>: Let you do that.

02:15:06
daglee: Time to go, bbl

02:15:07
<transcript>: That's a bummer.

02:15:14
<transcript>: But we created new static login credentials with a login name and some OAuth token.

02:15:14
<transcript>: so

02:15:16
<transcript>: So that sum.

02:15:16
<transcript>: that's like

02:15:17
<transcript>: That's like.

02:15:24
<transcript>: As opposed to none, right? I don't know. I'm just mixing up my elixir. I'm just assuming things based on elixir.

02:15:35
<transcript>: Mutable incoming messages, and the client. We get those back as a couple from creating this Twitch IRC client.

02:15:36
cowfacedude99: your lsp does work

02:15:37
<transcript>: Passing in the config.

02:15:46
<transcript>: Up there, right.

02:15:52
<transcript>: First thing you should do, start consuming incoming messages. So Tokyo spawn.

02:15:55
<transcript>: My LSP is busted.

02:16:02
<transcript>: Like I'm not getting stuff I should be getting from my LSP.

02:16:02
<transcript>: like

02:16:03
<transcript>: Like you're telling me.

02:16:03
<transcript>: spawn

02:16:04
<transcript>: Spawn.

02:16:04
<transcript>: there we go

02:16:06
<transcript>: There we go.

02:16:10
<transcript>: Yeah, I was just broken. It was just. It was bad.

02:16:10
<transcript>: now i

02:16:17
<transcript>: Now I can actually go to definition. Yeah. Okay. But, like, here, I wanted to go to the new simple definition.

02:16:27
<transcript>: So these are like static. What are these called constructors creates a new configuration from the given logging credentials, all other configuration.

02:16:30
<transcript>: So pub function new simple.

02:16:32
<transcript>: And that.

02:16:32
<transcript>: creates that

02:16:35
<transcript>: Creates that return the client config.

02:16:37
<transcript>: This is interesting.

02:16:41
<transcript>: The generic it returns a generic.

02:16:44
<transcript>: Up here.

02:16:50
cowfacedude99: it was not broken. the rust lsp fetches stuff from the internet. that's why it may be slow sometimes

02:16:51
<transcript>: Implement source functionality for a type. We'll implement some functionality for a type.

02:16:55
<transcript>: Primarily used to define implementations on types.

02:17:04
<transcript>: Well, trait inherent implementations, or standalone, while trade implementations are used to implement traits for types or other traits.

02:17:14
<transcript>: Functions and comps can both be defined in implementation. A function define in an impulb block can be standalone, meaning it would be called like Foo bar is a function takes self.

02:17:14
<transcript>: insulf

02:17:25
<transcript>: Insulf or in mute self as its first argument. It can also be called using method called syntax. A familiar feature to any object oriented programming, so you can have an object like Su and say bar got it.

02:17:25
<transcript>: struct

02:17:27
<transcript>: Struct. Example number 30. Okay.

02:17:40
<transcript>: I wanted to, like, scroll down. I don't know how to scroll down in this thing.

02:17:43
<transcript>: Singie do thingy.

02:17:47
<transcript>: Okay. More information on implementation.

02:17:47
<transcript>: okay

02:17:48
<transcript>: Okay.

02:17:48
<transcript>: so

02:17:51
<transcript>: So this is how you can define.

02:18:00
<transcript>: The generic. So this is like a generic type login credentials. So for a login credentials, this is a new simple function.

02:18:04
<transcript>: And what is this.

02:18:09
<transcript>: Implementation login, credentials.

02:18:09
<transcript>: return the

02:18:14
<transcript>: Return the client. Config no takes in a client. What is the syntax here.

02:18:22
<transcript>: That's like what it is called from. And this is what it returns.

02:18:27
<transcript>: The rest sales P Fetches stuff from the internet that's why it may be slow sometimes oh gotcha.

02:18:27
<transcript>: see

02:18:29
<transcript>: See it.

02:18:29
<transcript>: i can already

02:18:34
<transcript>: I can already feel the weight of rest bearing down on me now that you're not here to help me.

02:18:40
<transcript>: But that's okay. I get it. Thanks for the following. Machine. Mob.

02:18:42
<transcript>: Okay.

02:18:42
<transcript>: so does everyone

02:18:50
<transcript>: So does everyone understand the syntax? So implementation of logging credentials that returns a client config and it's a public function.

02:18:58
<transcript>: Called New Simple takes in logging credentials. L returns a client config. L.

02:19:01
<transcript>: Okay.

02:19:06
fredkisss: feels like c++ OOP

02:19:06
esitsu: Implemented on ClientConfig where L implements the trait LoginCredentials.

02:19:11
<transcript>: And then we're just creating a new client config. And this just returns the thing we create right here.

02:19:11
<transcript>: is that the syntax

02:19:17
<transcript>: Is that the syntax? You don't say return you just like the last thing you instantiate or declare.

02:19:17
<transcript>: gets returned

02:19:20
<transcript>: Gets returned. That's kind of how Elixir works, too. Right.

02:19:25
<transcript>: I'm comparing this to Elixir. I'm sure Rest is like older than Elixir or something. I don't know.

02:19:25
<transcript>: log

02:19:26
fredkisss: where you define your interface in your headers and your implementation in a cpp file

02:19:30
bausmeier: Unless there's a trailing ;

02:19:33
<transcript>: Login credentials, Max channels per connection, Max waiting times. So this is just Newing. Up a new client. Config, I guess.

02:19:33
<transcript>: unless there's

02:19:35
<transcript>: Unless there's a trailing.

02:19:35
<transcript>: semicolon

02:19:37
<transcript>: Semicolon. Okay.

02:19:37
<transcript>: oh

02:19:40
<transcript>: Oh, a sit to what? Welcome to chat.

02:19:48
<transcript>: So implemented on client config where L implements the trade logging credentials. So login credentials is a trait.

02:20:03
<transcript>: Public trade. Okay. We need to learn about traits. A common interface for a group of types. A trade is like an interface that data type can implement. Cool. Okay. When a type implements a trait, it can be treated abstractly as that trait, using generic or trade objects.

02:20:03
<transcript>: can be made

02:20:16
<transcript>: Can be made up of three varieties of associated items, functions, and methods. Types. Constants trace may also contain additional type parameters. Those type parameters, or the trade itself, can be constrained by other traits.

02:20:18
<transcript>: Okay.

02:20:22
<transcript>: Tracer declared using the trait keyword.

02:20:29
<transcript>: And then types can implement them using implement oh okay, makes sense. So trait zero.

02:20:32
<transcript>: Has a constant zero, which is seven.

02:20:32
<transcript>: function

02:20:40
<transcript>: Function is zero and self is that like reference to self. Return to Bool, and then.

02:20:40
<transcript>: this imp

02:20:43
<transcript>: This implements zero for.

02:20:43
<transcript>: an integer

02:20:44
<transcript>: An integer.

02:20:49
<transcript>: Self is zero. Is zero.

02:20:49
<transcript>: equ

02:20:50
fredkisss: trait is like an interface right ?

02:20:52
<transcript>: Equal to self zero.

02:20:55
<transcript>: Which is this? Okay.

02:21:02
<transcript>: Am I following? Am I following? I think so.

02:21:02
<transcript>: i

02:21:05
<transcript>: I think so. So traits are like interface.

02:21:10
<transcript>: So with an associated type trait builder type built.

02:21:15
<transcript>: Burner. That sound was very represented of my brain right now. Burner.

02:21:30
<transcript>: When you define your interface in your headers and your implementation as a CPV file, let's just really okay. Trait is like an interface. Yes, Fred, we are on the same page. Trait like an interface. But it sounds better. I don't know. Maybe cuz just it's rust.

02:21:46
<transcript>: Can be generic with constraints, or without trait, maybe from.

02:21:47
fredkisss: Does rust have the concept of interfaces ?

02:21:52
<transcript>: Okay. So this is a trait called maybe from with a generic T.

02:21:55
<transcript>: It has a function maybe from.

02:21:59
<transcript>: Value.

02:21:59
<transcript>: t

02:22:01
<transcript>: T pass in.

02:22:01
<transcript>: an

02:22:02
<transcript>: An option.

02:22:09
<transcript>: Where self.

02:22:09
<transcript>: implement

02:22:11
<transcript>: Implement size. Is that what those.

02:22:13
<transcript>: So if.

02:22:13
<transcript>: you're

02:22:14
<transcript>: You're.

02:22:14
<transcript>: a type that already

02:22:17
<transcript>: A type that already implements size.

02:22:20
<transcript>: Or sized. Then you can also.

02:22:25
<transcript>: Implement the trade maybe from.

02:22:31
<transcript>: Which does okay. So let's I think I show me that being used on now.

02:22:31
<transcript>: that's just gonna

02:22:34
<transcript>: That's just gonna be lost into the ether. My brain will not remember that.

02:22:37
<transcript>: Okay.

02:22:42
<transcript>: Trace can build up or build upon the requirements of other trades.

02:22:42
<transcript>: iterator

02:22:45
<transcript>: Iterator is a super trait.

02:22:55
<transcript>: Example, Iterator is a super trait, and three, Iterator is a subtrate. Okay.

02:22:57
<transcript>: So three, Iterator.

02:22:57
<transcript>: is

02:22:59
<transcript>: Is a.

02:23:02
<transcript>: Subtrate of Iterator.

02:23:05
<transcript>: Next three.

02:23:05
<transcript>: takes an immutable

02:23:06
<transcript>: Takes an immutable self.

02:23:09
<transcript>: Turns option.

02:23:14
<transcript>: Self. Item three. I don't know what any of this means.

02:23:15
<transcript>: Okay.

02:23:19
<transcript>: Trade's gonna be using functions as parameters.

02:23:19
<transcript>: yep

02:23:20
<transcript>: Yep, that makes sense.

02:23:30
<transcript>: So we know we can iterate.

02:23:32
<transcript>: It.

02:23:35
<transcript>: We can we can loop over it.

02:23:35
<transcript>: because

02:23:37
<transcript>: Because we know.

02:23:37
<transcript>: it in

02:23:40
<transcript>: It in Iterator. Trait. Got it.

02:23:44
<transcript>: Got it.

02:23:48
<transcript>: Into.

02:23:51
<transcript>: Okay.

02:24:00
<transcript>: I'm getting a little ahead of myself, so I was trying to learn what login, credentials.

02:24:03
<transcript>: Is a publisher. Public trait.

02:24:09
<transcript>: It's a it's a subtrate of debug.

02:24:09
<transcript>: plus

02:24:12
<transcript>: Plus send what's the syntax? Plus.

02:24:15
<transcript>: Rust.

02:24:19
<transcript>: Traits.

02:24:21
<transcript>: Plus operator.

02:24:33
<transcript>: That's not that's. No, that's not what I want.

02:24:37
<transcript>: Implement operator overlay.

02:24:40
<transcript>: Rust traits.

02:24:43
<transcript>: Multiple.

02:24:45
<transcript>: Subtrate.

02:24:48
<transcript>: Are super traits.

02:24:48
<transcript>: basically

02:24:50
<transcript>: Basically multiple super traits.

02:24:57
<transcript>: Yeah. Here we go.

02:25:10
<transcript>: Computer Science student subtrated both programmer and the student implementing Compsized student requires you to implement both super traits. Got it. So you just if you have multiple, you just use a plus plus static. What is that.

02:25:12
<transcript>: What is that? What is this.

02:25:15
<transcript>: Thing.

02:25:17
<transcript>: Russ.

02:25:20
<transcript>: Static.

02:25:20
<transcript>: what

02:25:21
<transcript>: What are you.

02:25:28
<transcript>: Thanks for the follow G? Casamiro. Is that what just happened? Yeah, this minute.

02:25:37
<transcript>: Russ has a few reserved lifetime names. One of those is static. You might encounter it in two situations. Reference with static lifetime.

02:25:44
<transcript>: As static string, Hello world, or as part of a trait bound. Yep. We saw that.

02:25:49
<transcript>: Oh common source of confusion when learning rest so I'm not alone.

02:25:52
<transcript>: Reference lifetime.

02:25:57
<transcript>: Okay.

02:26:02
<transcript>: So it lives for the entire lifetime of the running program.

02:26:02
<transcript>: two ways

02:26:06
<transcript>: Two ways to make a variable with static lifetime.

02:26:06
<transcript>: and both

02:26:11
<transcript>: And both are stored in the readonly memory of the Bible. Make a constant with the static declaration.

02:26:11
<transcript>: make

02:26:13
<transcript>: Make a string literal which has type.

02:26:16
<transcript>: Okay.

02:26:24
<transcript>: Static lifetime static numb returns a reference in them where it statically scores to that of the input argument.

02:26:24
<transcript>: of

02:26:26
<transcript>: Of Geez.

02:26:33
<transcript>: How we doing? How we doing here.

02:26:35
<transcript>: Not sure how I'm doing.

02:26:45
<transcript>: Treat bound as a trait bound. It means that types.

02:26:48
<transcript>: Does not contain any nonstatic references.

02:26:48
<transcript>: example

02:27:00
<transcript>: Example, the receiver can hold on to the type as long as they want it'll never become Invalid until they drop it. It's important to understand this means that any owner always passes a static lifetime bound or reference that ownation generally does not.

02:27:03
<transcript>: I.

02:27:06
<transcript>: Print it.

02:27:11
<transcript>: Input implements debug and is in this static.

02:27:13
<transcript>: Static value passing is that.

02:27:20
<transcript>: I is own and contains nowhere references. Thus it's static. Let I equals five. Print it Oops.

02:27:25
jude_b0y: rust POGGERS

02:27:26
<transcript>: Reference to I only has the lifetime defined by the scope of Maine, so it's not static.

02:27:26
<transcript>: print it

02:27:27
<transcript>: Print it.

02:27:27
<transcript>: and that's

02:27:29
<transcript>: And that's gonna fail.

02:27:35
<transcript>: Only has little lifetime to find with a scope of main so it's not that yeah yeah okay.

02:27:35
<transcript>: so

02:27:39
<transcript>: So this is limited to this.

02:27:39
<transcript>: scope's

02:27:43
<transcript>: Scope's lifetime. Therefore you can't pass it into.

02:27:43
<transcript>: print it because

02:27:46
<transcript>: Print it because it requires that it's a static thing.

02:27:46
<transcript>: okay

02:27:47
<transcript>: Okay.

02:27:50
<transcript>: Welcome to Chat. Jude, boy.

02:27:54
<transcript>: Welcome to chat.

02:27:56
<transcript>: What do we think.

02:27:56
<transcript>: are we

02:27:58
<transcript>: Are we learning.

02:27:58
<transcript>: what are

02:28:03
<transcript>: What are we learning here? I'm learning some of the basics. Some of the basics of rest.

02:28:07
<transcript>: Join handle Tokyo spawn.

02:28:21
<transcript>: Async move. So much so much to learn. Like what is move? Capture a closures environment by value. Move converts any variables captured by reference or mutable reference to variables captured by value.

02:28:23
<transcript>: Okay.

02:28:26
cowfacedude99: I can tell you that those are not the basics LUL

02:28:30
<transcript>: So I do think.

02:28:30
<transcript>: here's

02:28:31
<transcript>: Here's the problem.

02:28:33
<transcript>: Is.

02:28:38
<transcript>: I can tell you that those are not the best.

02:28:38
<transcript>: thanks cup

02:28:41
<transcript>: Thanks. Cup. Base. Yeah. Maybe we do need to start with the Rust book.

02:28:46
<transcript>: I think the problem is I don't have a thing I really want to build.

02:28:46
<transcript>: if i

02:28:49
<transcript>: If I don't really want it to exist.

02:28:52
<transcript>: Then let's learning. It feels like work.

02:28:55
maleero: Things that start with ‘ are lifetimes. There’s a rust demystified video that talks about lifetimes around the 10 minute mark

02:28:56
fredkisss: I'm learning that rust is like arcane magic, you have to learn all the basics to do a simple spell, but when you master, you become a wizard LUL

02:28:56
<transcript>: I need to like.

02:28:56
<transcript>: really

02:29:03
<transcript>: Really need something to exist in the world and Rust is the right solution and then I'll earn rest.

02:29:03
<transcript>: things

02:29:05
<transcript>: Things that start with.

02:29:18
<transcript>: The little dash thing. Our Lifetimes. There's a Rust Demystified video that talks about Lifetimes around the ten minute Mark. I'm learning that Rust is like Arcane magic. You have to learn all the basics to do a simple spell. When you master it, you become a Wizard.

02:29:20
<transcript>: I will learn. Russ.

02:29:20
<transcript>: i don't know

02:29:23
<transcript>: I don't know that I'm gonna continue learning it today.

02:29:28
<transcript>: I think I still don't have a thing.

02:29:28
<transcript>: that i

02:29:30
<transcript>: That I want to exist.

02:29:30
jude_b0y: Sadge

02:29:36
<transcript>: And I have like seven other things that I want to be working on right now.

02:29:41
<transcript>: This was fun though got a little like taste, little taste of rest.

02:29:46
<transcript>: I do need to probably work on some other projects.

02:29:50
<transcript>: And.

02:29:56
<transcript>: I think what I want to work on is.

02:29:56
<transcript>: when i started

02:30:00
<transcript>: When I started this dream working on which is AW, guess.

02:30:00
<transcript>: it's a far cr

02:30:01
<transcript>: It's a far cry from rust.

02:30:12
<transcript>: It's not learning. Rest. Not at all.

02:30:12
<transcript>: but

02:30:15
<transcript>: But that's what I want to do.

02:30:20
adamdotdev: !topic building awguess with next.js and such

02:30:22
<transcript>: Okay.

02:30:22
<transcript>: here

02:30:24
<transcript>: Here we go.

02:30:26
<transcript>: Back to it.

02:30:30
<transcript>: Goodbye, rust.

02:30:30
<transcript>: we had fun

02:30:31
<transcript>: We had fun.

02:30:33
<transcript>: That's fun.

02:30:33
<transcript>: we'll

02:30:35
<transcript>: We'll get back to it someday.

02:30:37
jude_b0y: i built an aggregator for my work that counts all the lines of code across all repositories in our github org in rust. super fun

02:30:38
<transcript>: Let's go to.

02:30:42
<transcript>: This one.

02:30:42
<transcript>: yeah

02:30:46
<transcript>: Yeah. Aw, guess we're back.

02:30:51
<transcript>: We are back.

02:30:53
standardrobot: o/

02:30:53
<transcript>: Okay.

02:30:53
<transcript>: state visual

02:30:57
<transcript>: State visualizer. I think our state machines good.

02:30:57
<transcript>: standard

02:30:59
<transcript>: Standard robot Hello.

02:30:59
<transcript>: did you

02:31:05
<transcript>: Did you build? Are you a bot? And if so, were you built using my access token.

02:31:06
standardrobot: how's it going?

02:31:07
<transcript>: That'd be funny.

02:31:07
<transcript>: if i didn't revoke

02:31:11
<transcript>: If I didn't revoke it on accident, I forgot to revoke it.

02:31:11
standardrobot: yessir

02:31:13
<transcript>: That'd be pretty funny.

02:31:20
<transcript>: Okay.

02:31:22
<transcript>: Personal dashboard.

02:31:25
<transcript>: Let's do streaks.

02:31:32
<transcript>: Before I go crazy like minimum stylization stuff.

02:31:34
<transcript>: Let's do streaks.

02:31:50
<transcript>: So here we have the score.

02:31:57
<transcript>: I guess we'll return.

02:32:05
<transcript>: What returns streak as part of the payload.

02:32:08
<transcript>: Roundupdate Game update.

02:32:15
<transcript>: Go to our schema.

02:32:25
<transcript>: Is this Neema? I really don't use Prism anymore. I'm pretty done with it game.

02:32:30
<transcript>: Guess it'd be on here. It'd be a streak.

02:32:37
<transcript>: An Inc, but it's also not required.

02:32:47
<transcript>: Okay. And then we're gonna go over here and we're gonna say.

02:32:56
<transcript>: How do we calculate street? We just know How's it going. Yes, sir. You are a robot and you are built with my token.

02:32:56
<transcript>: it's going well

02:32:57
<transcript>: It's going well.

02:33:06
<transcript>: I built an aggregator for my work that counts all the lines of code across all repositories and our GitHub organ rust. That sounds. That does sound fun.

02:33:12
<transcript>: That sounds pretty fun.

02:33:23
<transcript>: Scored, Delta, and we need to figure out, are we on a street the way we're gonna figure that out? Because we have the game here, right? Yeah.

02:33:23
<transcript>: the way we're gonna find

02:33:26
<transcript>: The way we're gonna find out if you're on a streak is.

02:33:33
<transcript>: Game streak.

02:33:37
<transcript>: Okay.

02:33:44
<transcript>: Well, has it not.

02:33:53
<transcript>: If I not actually. Oh, I haven't actually fetched the game. Oh, it's not gamed at streak. It's.

02:33:53
<transcript>: round

02:33:58
<transcript>: Round that game. Westreak. All right. Yeah, maybe, Yeah.

02:33:58
<transcript>: so

02:34:04
<transcript>: So that or zero. It defaults to zero and then streak.

02:34:04
<transcript>: plus

02:34:06
<transcript>: Plus.

02:34:09
<transcript>: Oh, I'm sorry. No, it's gonna be like.

02:34:12
<transcript>: Correct.

02:34:16
<transcript>: Then it's gonna be that plus one.

02:34:16
<transcript>: else

02:34:17
<transcript>: Else.

02:34:24
<transcript>: Gonna be zero. So if you get a wrong answer, your streak is dead, and then we're gonna update the game.

02:34:27
<transcript>: Here, score.

02:34:29
<transcript>: Expires.

02:34:29
<transcript>: streak

02:34:33
<transcript>: Streak. Just like that, right.

02:34:34
<transcript>: What's wrong.

02:34:40
<transcript>: Property street does not exist on type game check again.

02:34:44
<transcript>: Check again believe it does.

02:34:47
<transcript>: It not.

02:34:52
<transcript>: Wait? Why can I wait? What.

02:34:54
<transcript>: What.

02:34:57
<transcript>: Brown Pussy has tired.

02:35:00
<transcript>: Any because it does not have her type. Fantastic. What are you talking about.

02:35:04
<transcript>: Oh Prisma.

02:35:10
<transcript>: We've seen this before. I've had this issue before.

02:35:28
<transcript>: Game. Except it does. It definitely does.

02:35:31
<transcript>: Oh, I need to do, like.

02:35:38
<transcript>: The update or whatever DB push or something or Schema generate. Yeah, Yeah.

02:35:41
<transcript>: Let's do it up here.

02:35:43
<transcript>: I'll say.

02:35:43
<transcript>: the mp

02:35:46
<transcript>: The MPX Prisma. We be.

02:35:48
<transcript>: Generate.

02:36:02
<transcript>: How are we doing? How we doing.

02:36:17
<transcript>: I just did a big context switch on us so everyone's probably swimming. We went from learning Rust to working on YouTube. Yes, I should have never started learning rest today. I knew I just didn't have didn't have time or motivation to do that.

02:36:23
<transcript>: Try to make it something I was into, but there's wasn't.

02:36:30
<transcript>: Data streak. Okay, so now we have streak. So now we can say the score. Delta.

02:36:37
<transcript>: Right the no the school.

02:36:37
<transcript>: delta

02:36:39
<transcript>: Delta.

02:36:39
<transcript>: is

02:36:40
<transcript>: Is correct.

02:36:40
<transcript>: and not

02:36:44
<transcript>: And not expired instead of one that's going to be.

02:36:44
<transcript>: one

02:36:50
<transcript>: One plus the streak. You just get a whole nother point for your whole streak.

02:36:59
<transcript>: No, you get two points if you're on a street now, how do I do that? Longer streaks to get you more points.

02:37:07
<transcript>: We'll just do plus streak. Why not.

02:37:11
<transcript>: So every time if you're on a five.

02:37:11
<transcript>: five

02:37:13
<transcript>: Five.

02:37:13
<transcript>: guest streak

02:37:15
<transcript>: Guest Streak You got five in a row.

02:37:15
<transcript>: your next

02:37:24
<transcript>: Your next crack answer. You get six points, right? Okay. No one cares. I don't even know if anyone's here anymore. Are you guys here.

02:37:32
aarrjaay: I'm here

02:37:33
bausmeier: No

02:37:34
morded__: yes, just doing some work

02:37:39
<transcript>: Many people are still here. We're just hanging out. You're just working. You're doing stuff or my chat's broken. Oh, you're here. Okay. Good. Doing some work. I permitted.

02:37:39
<transcript>: i'll last

02:37:40
<transcript>: I'll last.

02:37:43
<transcript>: You guys can do some work.

02:37:47
<transcript>: Right round update. Okay. So this all is good. Now I'm going to.

02:37:53
<transcript>: Do a MPX Prisma DB push.

02:37:54
fragaverage: still here, working hard as always/never

02:38:00
<transcript>: Okay.

02:38:00
<transcript>: update

02:38:02
<transcript>: Update available.

02:38:03
dota2dev: yep, building together !

02:38:08
<transcript>: Let's let's run it, and then we'll show, let's show the streak.

02:38:17
<transcript>: What is all that.

02:38:21
<transcript>: Inspect. What is that.

02:38:21
<transcript>: oh that

02:38:24
<transcript>: Oh, that's stately. Yeah. Yeah. Okay.

02:38:29
<transcript>: There's our State machine.

02:38:35
<transcript>: And then here.

02:38:36
cowfacedude99: been lurking while I play some games. I got off work two hours ago so I need to blow off some steam LUL

02:38:38
<transcript>: Use timer.

02:38:42
<transcript>: What are we doing with this timer.

02:38:46
<transcript>: Oh, that reminds me.

02:38:52
<transcript>: Been lurking while I'm placing games. I got off work 2 hours ago so I need to blow up some steam totally get it cafe.

02:38:58
<transcript>: Dota to Dev. Welcome to Chat Frag. Still working or still here? Working hard, as always.

02:39:04
<transcript>: We're building together. Dodo. Dev. Welcome to my chat.

02:39:04
<transcript>: welcome welcome

02:39:06
<transcript>: Welcome, welcome.

02:39:06
<transcript>: let's

02:39:09
<transcript>: Let's do I want to check something actually.

02:39:09
<transcript>: i'm gonna

02:39:11
maleero: JavaScript is fast enough for most things, so I feel you. The only project I have in mind for rust is porting my silly interpreted language in JS over to WASM. And  I have more experience with other languages, so the only reason I'd use Rust is because it's so trendy right now. LUL

02:39:15
<transcript>: I'm gonna turn on Fuzzy to go to my Twitter DMs. David K. I actually had sent me a DM.

02:39:15
<transcript>: explaining how

02:39:19
<transcript>: Explaining how I might do this more elegantly.

02:39:22
<transcript>: Let me find it.

02:39:29
dota2dev: i've been a lurker for some time, first time on chat :p

02:39:34
<transcript>: Code sandbox open the console whenever you click the button, it adds 5 seconds to the timer. The timer is made using a dirty callback and you can do absolutely anything in there. Also fun exercise to refact that call back into a state machine.

02:39:38
<transcript>: There's State Machines in State Machines, people.

02:39:41
<transcript>: Okay, let me unfuzzy.

02:39:48
<transcript>: So here is here's what he sent me here. So toggle machine.

02:39:51
<transcript>: Let's see.

02:39:51
<transcript>: so

02:39:53
<transcript>: So toggled.

02:39:53
<transcript>: every time

02:39:57
<transcript>: Every time I toggle it adds 5 seconds of the time where he said.

02:40:01
<transcript>: Active invoke timer.

02:40:01
<transcript>: source

02:40:02
<transcript>: Source.

02:40:07
<transcript>: Send back and receive let time remaining equal ten.

02:40:09
<transcript>: Set interval is.

02:40:11
<transcript>: isnd back

02:40:13
<transcript>: Isnd back, okay.

02:40:14
<transcript>: Oh inner.

02:40:24
<transcript>: East. Okay.

02:40:27
<transcript>: Who's calling receive.

02:40:32
<transcript>: Time's up inactive.

02:40:32
<transcript>: toggle

02:40:36
<transcript>: Toggle actions into timer type answer.

02:41:01
<transcript>: Javascript is fast enough for most things, so I feel you the only project I have in mind for Rust is porting my affiliate interpreted language in JS over to WASM have more experiences with other language. The only reason I'd use Rest because it's a Trinity right now. Yeah, I there reason I want to use Rest is that people who really write a lot of Rust seem to love it. It's always like top of the ranks on like loved programming languages.

02:41:01
<transcript>: so

02:41:15
<transcript>: So sounds nice to work on something. Work with a language that you really love it so much. And the type system sounds really great. So, yeah, I came for the trend. I think I would stay for the long lasting impact.

02:41:15
<transcript>: that it has

02:41:18
<transcript>: That it has on your enjoyment as a programmer.

02:41:22
<transcript>: Lurker for a long time Dota.

02:41:27
<transcript>: Well, I'm glad to see you. Join me. Chatters.

02:41:31
<transcript>: Okay. Well.

02:41:33
<transcript>: Active state machines active.

02:41:38
<transcript>: Our State Matches Active counts, State context.

02:41:38
<transcript>: so

02:41:42
<transcript>: So send where we sending toggle? Okay? So every time we.

02:41:42
<transcript>: sin toggle

02:41:43
<transcript>: Sin toggle.

02:41:46
<transcript>: It's receiving here.

02:41:50
<transcript>: If EV type event type.

02:41:53
<transcript>: Equals answer.

02:41:59
<transcript>: Oh, okay? Here we go? So on.

02:42:06
<transcript>: Toggle we send an action to timer of type answer.

02:42:06
<transcript>: interesting so we can

02:42:08
<transcript>: Interesting so we can send it to.

02:42:09
<transcript>: The.

02:42:09
<transcript>: service

02:42:12
<transcript>: Service timer.

02:42:14
<transcript>: Okay.

02:42:21
<transcript>: So that's how I can, like, have a dirty timer. He called it so dirty.

02:42:25
<transcript>: I don't know if I want to rewrite that right now, because.

02:42:25
<transcript>: we got

02:42:27
<transcript>: We got this stuff working.

02:42:31
<transcript>: It just would be nice to have this timer built into the state machine.

02:42:31
<transcript>: we'll get

02:42:34
<transcript>: We'll get there. I'm not gonna do it right now.

02:42:36
<transcript>: Okay.

02:42:36
<transcript>: answer

02:42:39
<transcript>: Answer next so I just wanted display.

02:42:39
<transcript>: one of

02:42:43
<transcript>: One of the splay. The let's see here.

02:42:46
<transcript>: The streak next to your score.

02:42:46
<transcript>: so here

02:42:49
<transcript>: So here we have seconds. Here we have score.

02:42:51
<transcript>: Let's just do.

02:42:51
<transcript>: like this

02:42:53
<transcript>: Like this.

02:42:58
<transcript>: Street. Okay.

02:43:03
<transcript>: We're gonna display the streak our score should go up faster now.

02:43:07
<transcript>: As we get on a streak if we get on streak, that's EKS.

02:43:12
<transcript>: Oh Prisma Update Unknown Arc streak.

02:43:12
<transcript>: or game did you

02:43:15
<transcript>: Or game. Did you mean score? Oh, interesting.

02:43:18
<transcript>: I thought I've added it to the game. Schema. Did I not.

02:43:22
<transcript>: For tight game update input.

02:43:26
<transcript>: Oh, this is a TrpC issue.

02:43:29
<transcript>: What is this.

02:43:29
<transcript>: game

02:43:32
<transcript>: Game update input.

02:43:36
<transcript>: This is a TrpC.

02:43:36
<transcript>: issue

02:43:39
<transcript>: Issue Game update.

02:43:41
<transcript>: Calling.

02:43:44
<transcript>: Score.

02:43:44
<transcript>: and we're

02:43:49
<transcript>: And we're updating the game score expires in streak.

02:43:51
<transcript>: Oops.

02:43:53
<transcript>: Fema.

02:44:04
<transcript>: Game. I added it here. So.

02:44:07
<transcript>: I need to do.

02:44:15
<transcript>: Mpx Prisma DB push.

02:44:17
<transcript>: I'm here.

02:44:25
<transcript>: What is the problem here? Oh, am I on like a branch in planet scale.

02:44:33
<transcript>: Is this the problem? Did I update? Not the branch? I think I might be the problem.

02:44:37
<transcript>: Sign in.

02:44:43
<transcript>: Two branches. Yeah, yeah. I think that's the problem.

02:44:43
<transcript>: so branches

02:44:44
<transcript>: So branches.

02:44:44
<transcript>: there's

02:44:47
<transcript>: There's main and there's X state.

02:44:53
<transcript>: And I probably need to say, like, MPX.

02:44:53
<transcript>: mpxma

02:44:55
<transcript>: Mpxma DB push.

02:44:59
<transcript>: No help.

02:44:59
<transcript>: me

02:45:01
<transcript>: Me. Here we go.

02:45:08
<transcript>: No, that's schema. What am I talking about? I want to. I want to know. How do I specify a.

02:45:11
<transcript>: Twitter.

02:45:14
<transcript>: Db push.

02:45:16
<transcript>: Branch.

02:45:30
<transcript>: Prisma migrate Dev.

02:45:34
<transcript>: device

02:45:35
<transcript>: Device.

02:45:40
<transcript>: So if I push, is it pushing it to my branch or not.

02:45:47
<transcript>: Make schema changes to this branch. Once you're ready, open a Deploy request.

02:45:51
<transcript>: Oh, Geez.

02:45:58
<transcript>: Consoles. Schema. Oh, here we go. We'll see if the schema looks like it's up to date.

02:45:58
<transcript>: gain

02:46:01
<transcript>: Gain has a streak? Yeah.

02:46:03
<transcript>: Okay.

02:46:08
<transcript>: Well then is the let's see is.

02:46:14
<transcript>: My thing connected to the right schema is the app actually connected to the right schema.

02:46:17
<transcript>: Branch X state? Yeah.

02:46:23
<transcript>: Oh no.

02:46:26
<transcript>: Round.

02:46:28
<transcript>: Let's see.

02:46:38
<transcript>: Maybe I need a resource. I need to restart the server. That's totally what it is.

02:46:38
laytanl_: im back!

02:46:41
<transcript>: Always forget this stuff doesn't just.

02:46:44
<transcript>: Doesn't work.

02:46:46
laytanl_: did you stop rusting?

02:46:50
<transcript>: Doesn't let it doesn't like hot reload all the server stuff.

02:46:52
<transcript>: Okay.

02:46:55
<transcript>: So now it should work right.

02:46:58
<transcript>: Well, I don't know what that is, though.

02:47:00
<transcript>: That's not that.

02:47:07
<transcript>: Cloud Control API. Okay, Kubernetes Service got that one. Okay. Are we on a streak? We're on a one.

02:47:11
<transcript>: Person or one answer. Streak. What is this? Waff.

02:47:11
<transcript>: off stoke

02:47:15
<transcript>: Off Stoke. It's totally Stoked, so no streak, zero.

02:47:15
<transcript>: that is

02:47:16
<transcript>: That is Cognito.

02:47:28
<transcript>: We only have 7 seconds. Got to be quick, snowball. Okay, we're on two streak. So I got more than one point. Yeah, yeah. Fsx we got this one. Now we're on a three streak. I got more points.

02:47:28
<transcript>: comprehend

02:47:34
<transcript>: Comprehend medical. Oh, we're doing well. Look at this for a four streak. That's a robot.

02:47:34
<transcript>: what is it

02:47:36
<transcript>: What is it? Robo maker.

02:47:41
<transcript>: Okay, so see how I'm getting a lot more points now because I'm on a streak fault injection simulator.

02:47:41
<transcript>: i'm also

02:47:48
<transcript>: I'm also getting more time to keep going. So it's theoretically, you could just keep going forever. Oh, I'm not gonna get this one.

02:47:48
<transcript>: i got scale

02:47:50
<transcript>: I got scales the timer go game over.

02:47:54
<transcript>: We stopped resting latent. We did.

02:47:57
<transcript>: I need I just need to get AW guests done.

02:47:57
<transcript>: reinven

02:48:14
<transcript>: Reinvents coming. And I really want to get this thing done so that people can play it ahead of reinvent, get some high scores, brag about it in person in Vegas, because that's what it's everybody's gonna be thinking about. It gonna be the talk of Vegas we're gonna be talking about. Aw, guess probably probably not.

02:48:19
<transcript>: We're asked when I actually have something I want to build was rest.

02:48:23
<transcript>: Okay, so on the game over screen, we need to show the score.

02:48:27
<transcript>: We need to show this. Go out.

02:48:35
<transcript>: Really just need to make a component for each of these States, like.

02:48:52
<transcript>: Do I want to upgrade next 13 and like take advantage of some stuff here.

02:48:52
<transcript>: i was just thinking how

02:48:53
<transcript>: I was just thinking, how these.

02:49:08
<transcript>: Instead of doing all this as client side state, we could actually have like server components rendering. I don't need to though there's no reason other than just using the X 13 stuff, but like this could be on a path. It's like Game ID or something.

02:49:09
<transcript>: And.

02:49:13
<transcript>: We could render this page entirely on the server.

02:49:16
<transcript>: Good.

02:49:21
<transcript>: But I don't think so. It's a spa. It's a game. You're playing a game. I don't care.

02:49:26
<transcript>: I might upgrade an X 13 just for the font stuff. It's so good.

02:49:26
<transcript>: i keep talking

02:49:29
<transcript>: I keep talking about next font. This is so great.

02:49:35
<transcript>: Let's do this. Let's say I'm gonna make a game over component.

02:49:39
<transcript>: Let's see.

02:49:46
<transcript>: I really don't like Prisma. I really want to just bail on basically all of this.

02:49:54
<transcript>: So I came. I saw. And then I went with T three. I think I'm done with Prisma for good.

02:50:00
<transcript>: Like just if you've noticed.

02:50:02
<transcript>: When we.

02:50:12
<transcript>: If you go to a tough you GET.com interviewed guests.com like it is so slow. Prisma cold starts are terrible. Look at this. I click the button. It took like 5 seconds.

02:50:12
<transcript>: like i can't work

02:50:22
<transcript>: Like, I can't work with something that's that and possibly slow. And it's a combination of deployed under cell and the way they do it's probably a Lambda function. It's a giant bundle.

02:50:22
<transcript>: for

02:50:26
<transcript>: For Prisma and it just is slow and I just don't like it.

02:50:31
<transcript>: So we're gonna rewrite the entire back end.

02:50:31
<transcript>: at some point

02:50:32
<transcript>: At some point.

02:50:32
<transcript>: i'm trying to

02:50:34
<transcript>: I'm trying to find.

02:50:35
<transcript>: Back end.

02:50:35
<transcript>: if you can call this

02:50:39
<transcript>: If you can call this back end might not even want to launch with it.

02:50:41
<transcript>: You know what.

02:50:45
<transcript>: That's what I'll get done today. I'm gonna get anything done today.

02:50:50
<transcript>: Need to decide now because I've got a limited time.

02:50:57
<transcript>: Like all this stuff. I just don't. I don't think I'm a T three person. I'm not a T three.

02:50:57
<transcript>: person

02:51:02
<transcript>: Person. So all of this bothers me. Here's what we're gonna do. We're gonna.

02:51:02
<transcript>: re

02:51:05
<transcript>: Rebuild AW guess right now.

02:51:05
<transcript>: using

02:51:10
<transcript>: Using an actual backend that I like, let's go to.

02:51:12
<transcript>: Sst.

02:51:16
<transcript>: I think SST has a.

02:51:20
cowfacedude99: maybe use the planetscale api directly?

02:51:20
<transcript>: Sst, have.

02:51:29
<transcript>: I don't want to change, I want to use next.

02:51:34
<transcript>: I don't think their next sight thing is very good.

02:51:34
<transcript>: they

02:51:36
<transcript>: They would admit that.

02:51:37
laytanl_: does planetscale cold start?

02:51:47
<transcript>: Do I want to build my backend with SST.

02:51:48
<transcript>: And.

02:51:48
<transcript>: host

02:51:50
maleero: How much does the hosting on Vercel cost? I use EC2 and ElasticBeanstalk for most things and Lambda for simple things, but it adds up quickly

02:51:51
<transcript>: Host my front end on Versaille.

02:51:57
<transcript>: Maybe I'm not really using any next features. Am I using any next features.

02:52:06
<transcript>: Leighton. I don't know if planets go cold starts. I doubt it. I'm gonna yes, Cafe. I'm gonna use the Plant scale API directly. We're gonna write it.

02:52:06
<transcript>: in vtl

02:52:14
standardrobot: HA nerd

02:52:17
yeltrah_: Oof EC2 and EBS does get costly

02:52:20
<transcript>: In VTL because I'm a nerd, and we're gonna hit the Prisma Schema or the Prisma Serverless API. That'll be fast. And there's some new stuff coming. There's a new thing coming with Planet Scale. I don't know if you've seen the Hype. Tweets.

02:52:20
<transcript>: let me just pull this

02:52:22
<transcript>: Let me just pull this up here.

02:52:22
<transcript>: planet

02:52:24
<transcript>: Planet scale.

02:52:28
<transcript>: And that's my DNS get out of here. Dm.

02:52:28
<transcript>: this

02:52:30
<transcript>: This. Something's coming.

02:52:37
dota2dev: hosting on vercel is free for hobby projects

02:52:39
<transcript>: It's really cool. And I'm not I've not been like a planet skill Schiller in the past. I've been critical of some of their height marketing in the past.

02:52:39
<transcript>: this one

02:52:42
<transcript>: This one's really cool, pretty excited.

02:52:42
<transcript>: still got away

02:52:43
<transcript>: Still got away.

02:52:43
<transcript>: what

02:52:45
<transcript>: What, two weeks.

02:52:46
laytanl_: VTL devex is my nightmare

02:52:47
<transcript>: But.

02:52:51
<transcript>: It's a reason that I want to keep using planet scale say that.

02:53:04
<transcript>: Vtl DevX is a nightmare. It's your nightmare. Leiden. Not just eight nightmare. It's your nightmare. How much does the hosting number so costs? I use DC Two in Alaska Beanstal for most things. The Lambda for simply adds up quickly.

02:53:04
<transcript>: i would

02:53:08
<transcript>: I would say they done if like Hobby Projects, not much.

02:53:15
<transcript>: It's just as it gets big. Then obviously it gets expensive. I think Versell doesn't like pricing wise. Doesn't scale well.

02:53:35
<transcript>: Once you get past the like, I have a toy and nobody uses it. And then you get into, like, lots of people use it. Then that's when they're like, hey, you should sign up for Enterprise. You're abusing the free tier, and that's gonna be $2,000 a year now. I mean, that's not where it starts. Starts at like, 36. And I'm just gonna say it starts at like, $36,000 a year. So 3000 a month.

02:53:35
<transcript>: i did

02:53:39
<transcript>: I did that math, right? Yeah. So Versaille.

02:53:39
<transcript>: gets expensive

02:53:42
<transcript>: Gets expensive real fast as soon as you actually.

02:53:42
<transcript>: need

02:53:44
<transcript>: Need to scale.

02:53:44
<transcript>: and

02:53:47
yeltrah_: WHAT?

02:53:50
yeltrah_: 3k a month?

02:53:53
<transcript>: And I just I generally want to start moving away from Ricell, not because I don't think they're great, and they're not doing great things. But I miss today's where I could just deploy a thing.

02:53:53
<transcript>: to like

02:53:56
maleero: I'm just gonna stick with EC2 LUL

02:54:01
fragaverage: but do you NEED to scale that hard?

02:54:06
<transcript>: To like my A. Tobias account and it was easy and the infrastructure wasn't so complicated. And there's a lot of frontend frameworks now that are a lot easier to deploy. The next next is very hard to deploy like that's. Why I sell exists.

02:54:09
<transcript>: But do you need to scale that hard.

02:54:09
<transcript>: here's the thing

02:54:11
laytanl_: 3k a month for a front-end what the fk

02:54:11
<transcript>: Here's. The thing. You know what? Hang on.

02:54:11
<transcript>: i got

02:54:16
<transcript>: I got something to say Frack, I got something to say I'm gonna say it.

02:54:16
<transcript>: maybe

02:54:17
yeltrah_: Wow

02:54:20
<transcript>: Maybe I'll turn this into YouTube video. I'm gonna say it. Here's what I got to say.

02:54:31
<transcript>: Yeah, the front end. That's another good point. Latent. Like, how much will people pay for just deploying their front end? And then, like, they make it. It's a full stack framework.

02:54:31
<transcript>: this is not even

02:54:34
<transcript>: This is not even what I want to say, but.

02:54:34
<transcript>: next back

02:54:38
<transcript>: Next backends are not backends, okay? They're just not.

02:54:40
fragaverage: Bear in mind, we use Vercel for work

02:54:44
gunslinger047: hello youtube

02:54:49
<transcript>: They serve your front end, and that's basically it okay. So use Versel for work. Here's what I want to say about, but do you need to scale that.

02:54:49
<transcript>: do you need to

02:54:51
<transcript>: Do you need to.

02:54:52
fragaverage: So I have a little experience here :P

02:54:57
<transcript>: I'm gonna not probably put this on YouTube, but these goofy glasses on my face. Gunslinger. Welcome to chat.

02:54:57
<transcript>: here

02:55:01
<transcript>: Here's the thing do you need to scale.

02:55:01
<transcript>: that

02:55:07
<transcript>: That argument, and I'm not picking on you, Frag, but that argument really bothers me these days.

02:55:07
<transcript>: when people

02:55:10
<transcript>: When people say like.

02:55:10
<transcript>: just

02:55:17
<transcript>: Just move fast, like you're just building MVP. You just need to get a thing up there. I think in 2022, there are so many good.

02:55:17
<transcript>: technologies

02:55:29
<transcript>: Technologies that allow us to not pick between moving fast and building something reliable and something that we're not gonna have to rewrite as soon as we hire our first three engineers. That's the thing like ten years ago.

02:55:29
<transcript>: yeah

02:55:31
<transcript>: Yeah, you did you built with.

02:55:31
<transcript>: the simple

02:55:32
mr_yan19: The glasses are the reason to put it on youtube!  LUL

02:55:51
<transcript>: The simple thing to build for one person like one person needed a simple framework they can move really fast with. So you build your thing and then, yeah, it's gonna have to be rewritten or whatever because the same thing you built it with as an MVP doesn't work as you grow. Today, there are technologies that you can build from the beginning with technology is just getting some experience with these technologies.

02:55:51
<transcript>: that's the

02:56:05
<transcript>: That's the prerequisite. I guess there's a learning curve. But once you understand how you can build with leverage as a developer in 2022, you don't need to sacrifice scalability or reliability or any of those abilities.

02:56:24
<transcript>: Just to move fast, you can move fast and build with technology that'll work for you when you're a thousand people. Does that make sense? Like, I think that argument made a lot more sense back before we invented Serverless Compute, and we invented all these managed services and ways for a single developer to build a global.

02:56:24
<transcript>: pop

02:56:26
<transcript>: Popular thing.

02:56:26
emixmaxime: that's so true :)

02:56:30
yeltrah_: AGreed

02:56:42
<transcript>: By themselves, it's so possible. Today, a one or two person team can build from the beginning, like, day one move really fast, just like they did take ten years ago. Like, you can move really fast and you can build with stuff that's you're not gonna have to rewrite it in a year.

02:56:45
<transcript>: Okay. I'm done.

02:56:52
<transcript>: I just I do see a lot. I see a lot of people say, like, but you don't need Amazon scale. Why use AWS.

02:56:52
<transcript>: because if

02:57:12
<transcript>: Because if you just learn a little bit of AWS and you learn how to build with all these managed services, not just AWS, plant scale, plant skills and enablers of moving really fast and then scaling to whatever scale like you use planscale you don't have to think about. Is your database gonna be able to handle when you have a thousand users or 100 users or a hundred thousand users, that's the great.

02:57:12
<transcript>: part about

02:57:15
fragaverage: I think my comment was directed more towards, why do you NEED vercel enterprise. To throw some rough numbers, we run about £1mil per month revenue, and we use Vercel Pro @ £120 per month

02:57:17
standardrobot: also learning AWS is a net positive in this industry

02:57:19
<transcript>: Part about technology. We keep building better abstractions. We keep giving individual developers more leverage. And you no longer have to say.

02:57:19
<transcript>: i'm

02:57:23
yeltrah_: But I think it's hard to say you will not have technical debt within a year. Unless you aren't including that as part of "rewrite"

02:57:23
<transcript>: I'm gonna build fast, so I'm gonna use crappy stuff that won't work.

02:57:23
<transcript>: when i

02:57:25
<transcript>: When I have actually usage.

02:57:28
carlosgn: so what will it be your stack? AWS serverless?

02:57:34
<transcript>: Yeah. Frag, I realize you were not saying what. I just ran it against. You. Actually fresh. When you said that, you just reminded me of something I read the other day. That was this argument. It was on Twitter.

02:57:34
<transcript>: so i was

02:57:53
<transcript>: So I was directing all that to that tweet of not dragging it to you. I think my comment was directed more towards why do you need Versaille Enterprise? The source from rough numbers. We run about $1 million per month revenue. Oh, sorry. Million euros. And we use Versaille Pro at $120 per month. Yeah. So that's a good point.

02:58:00
<transcript>: You can still scale really far with the Versaille Free tier or the whatever it is, Versailpro is the cheap one.

02:58:07
yeltrah_: that's actually pounds :) not euros

02:58:11
<transcript>: Like even spending $120 a month? What does that mean? Like you're €120. I pay like 40 because I have multiple projects and I pay for the analytics or whatever.

02:58:11
<transcript>: but

02:58:19
fragaverage: we have 6 seats basically

02:58:23
<transcript>: But like that'll scale for a long, long time. The problem is the companies who really do make it then have this like so the ecommerce companies of the example, like DAX, talks about a lot.

02:58:23
<transcript>: they've

02:58:31
<transcript>: They've got a business and they've got actual people on their store buying a lot. So they're getting past that free tier, that whatever is fair use policy.

02:58:31
<transcript>: but

02:58:33
carlosgn: @FragAverage whats the company?

02:58:35
<transcript>: But they can't afford seventy five K a year. That's, like.

02:58:35
<transcript>: a huge

02:58:37
<transcript>: A huge line item for them, right.

02:58:41
<transcript>: Pounds. Okay. I know nothing.

02:58:47
<transcript>: Let's see also, learning AWS is a net positive in this industry. I think so.

02:58:47
<transcript>: things hard

02:58:56
<transcript>: Things hard to say you will not have technical debt within a year unless you aren't including that as part of a rewrite. Oh, yeah. No. You're gonna. I mean, like, you don't build anything the first time.

02:59:05
<transcript>: And get it right. It takes like three tries, three implementations on any price to get any semblance of nailed it.

02:59:08
<transcript>: But.

02:59:08
<transcript>: the

02:59:16
<transcript>: The technology you build with on day one don't have to be technologies that can't work on day 10 or day 5000 like there are.

02:59:16
<transcript>: stacks now

02:59:22
<transcript>: Stacks now that really work from beginning to end of your company's lifecycle.

02:59:22
<transcript>: that's not

02:59:27
<transcript>: That's not that's not Prisma deployed verselle. I'll tell you that it's just not.

02:59:31
<transcript>: And I don't know. Maybe that's offensive to some people.

02:59:31
<transcript>: like i know that

02:59:44
<transcript>: Like, I know that that's kind of been like, look, you don't need all this stuff. Just use this easy stuff. Sure. But like, it's not that much harder. Or is it even harder to learn a different set of technologies that do work indefinitely? Okay.

02:59:50
<transcript>: I'm done, I'm done, I'm done.

02:59:55
maleero: Rust cold start times on Lambda are so damn good. Maybe that should be my first project, some kind of Rust microservice. hmm

02:59:59
<transcript>: So back to plan a scale. We're gonna rewrite an AW. Guess I know we haven't even launched any of you guys. I'm just tired of working with the T three stack.

02:59:59
<transcript>: not t

03:00:03
<transcript>: Not T three. It's not Theo's fault. It's not T three's. Fault. It's just.

03:00:03
<transcript>: prism

03:00:06
<transcript>: Prisma and verselle, just kind of done.

03:00:06
<transcript>: so

03:00:09
<transcript>: So I do wonder if I could just use.

03:00:09
<transcript>: sst

03:00:11
fragaverage: We dont actually use the /api/ of next LUL

03:00:13
<transcript>: Sst's next JS thing. I'm not using any middleware.

03:00:20
<transcript>: Why would I need any Advanced Next features? Maybe I don't.

03:00:28
<transcript>: Yeah, don't use the API wraps. That's a good call, Frank. They're not even in the App directory. The new the new thing, right.

03:00:42
<transcript>: Rust cold start times on Lambda are so damn good. Maybe that should be my first project. Some kind of rust microservice. I would like to start running Rust in AWS Lamdda or Lambda Edge. I'd love to do that.

03:00:47
<transcript>: Okay, my next S 1211 features are supported.

03:00:47
<transcript>: so

03:00:53
<transcript>: So what am I missing? I'd be missing middleware Avith images don't matter to me.

03:00:53
<transcript>: okay

03:00:54
<transcript>: Okay.

03:00:58
<transcript>: I think I can just use this.

03:00:58
<transcript>: and this

03:01:03
<transcript>: And this lets me pass environment variables between my API and my thing.

03:01:03
<transcript>: love it

03:01:06
<transcript>: Love it okay. We're gonna do this. We're gonna do.

03:01:12
<transcript>: We're gonna do a serverless stack.

03:01:14
<transcript>: An SST app.

03:01:29
<transcript>: And we're gonna take control of some things that right now.

03:01:29
<transcript>: are not great

03:01:30
<transcript>: Are not great.

03:01:32
<transcript>: Okay.

03:01:36
<transcript>: So looking.

03:01:36
<transcript>: sst

03:01:37
<transcript>: Sst project.

03:01:51
<transcript>: How do I want to do this? I want to.

03:01:55
<transcript>: We're in an AW Guest directory.

03:02:01
<transcript>: I'm gonna actually back up here. I'm gonna do it in my code directory. Make their AW guess.

03:02:10
<transcript>: The only problem with SST. I've talked about this with DAX so many times. The only problem is I I build with.

03:02:19
<transcript>: I build with AppSync and I write VTL templates and this is not as.

03:02:26
<transcript>: Not as streamlined for that workflow.

03:02:31
<transcript>: But it does just use the CDK so it might be fine.

03:02:36
<transcript>: I might still be able to build whatever I want to build. I just want to take advantage of a lot of this stuff.

03:02:36
<transcript>: the ss

03:02:38
<transcript>: The SS T gives you.

03:02:49
<transcript>: Do I want to do this or do I just want to use the CDK.

03:02:49
<transcript>: what do i

03:02:56
<transcript>: What do I get? I get the next JS construct. Yeah, yeah. So I do want to use it.

03:02:58
carlosgn: i've been building a side project with Nextjs and Kysely for the db and is so complicated to add authentication to nextjs... jess..  im thinking on move the backend part to an API

03:03:05
<transcript>: So I'm thinking through more problems I can't use next 13.

03:03:09
<transcript>: Can't use next 13.

03:03:17
<transcript>: I've been building a project with Nick, JS and Kaisely for the DB and is so complicated to add authentication next year.

03:03:26
<transcript>: Thinking on move the back end parts and API so I actually do not have a hard time with us on next year because of next off I use next stop.

03:03:29
<transcript>: It's pretty great. It's really easy to add social OAuth.

03:03:33
<transcript>: And then I just use a.

03:03:33
<transcript>: custom

03:03:45
<transcript>: Custom authorizer in my app Sync API. Okay, we're gonna do this. We're gonna do this just with the CDK, because I'm gonna still deploy my next JS frontend to Versaille. Yeah, Yeah.

03:03:50
<transcript>: I want to use next 13. Okay.

03:03:50
<transcript>: so

03:03:53
<transcript>: So we're gonna make a new turbo repo.

03:03:57
<transcript>: I know I'm bouncing all over the place here. I'm just this is me like.

03:03:57
<transcript>: trying to figure

03:04:03
yeltrah_: next-auth is pretty good

03:04:07
<transcript>: Trying to figure out what is my ideal architecture. I wanted to start by learning T three app. That's why I started this project, but now I actually want to build it for real and I'm gonna use my stuff.

03:04:10
<transcript>: Let's create a new monorepo.

03:04:16
<transcript>: Let's see code. Does this create a.

03:04:17
maleero: Do you give out public.dev beta keys?

03:04:18
<transcript>: Create a nested directory.

03:04:19
fragaverage: @carlosgn its a series of automotive booking systems :)

03:04:22
<transcript>: Default is okay. Yeah, it does.

03:04:22
<transcript>: preturbo

03:04:25
<transcript>: Preturbo at latest.

03:04:26
<transcript>: Yes.

03:04:30
yeltrah_: !betakey

03:04:30
fossabot: Use beta key `adamisontwitch2` after signing up at public.dev.

03:04:32
fragaverage: I'm using supabase for backend stuff on my personal project

03:04:35
<transcript>: Maliro. You just do the bait. There you go. Harder. Jeans. Got you.

03:04:35
<transcript>: next off is

03:04:39
<transcript>: Next off is pretty good. I mean, it's just like a wrapper around all these. Like, OAuth.

03:04:39
<transcript>: maybe

03:04:42
<transcript>: Maybe. Guys, where would you like to create your turbo, though.

03:04:42
<transcript>: aw

03:04:44
<transcript>: Aw guess.

03:04:48
<transcript>: And we want to use pnpm.

03:04:49
maleero: Cool, thanks!

03:05:02
<transcript>: I want to use PNPM. I don't know if I can use Pnpm. We're gonna start with PMPM and we'll move to yarn if I have to. The only reason I'll have to is for Bundling Lambda packages. It's a bummer, but that's why I would have to.

03:05:06
<transcript>: Okay.

03:05:19
carlosgn: the problem with next-auth is that there's no adapter for Kysely

03:05:19
grasp5533: Did we ever figure out the dreambooth thing?

03:05:22
<transcript>: We got shared cash setup, which doesn't matter because I'm the only person that's gonna work on this.

03:05:26
<transcript>: Well, it does matter, I guess.

03:05:29
<transcript>: It does matter.

03:05:29
<transcript>: because

03:05:30
<transcript>: Because.

03:05:33
<transcript>: My build system, My GitHub actions.

03:05:42
<transcript>: Okay. We're gonna see how this stack holds up now with all the latest stuff.

03:05:47
<transcript>: Yes.

03:05:54
<transcript>: I don't remember.

03:05:59
<transcript>: That's all we don't know.

03:06:03
<transcript>: Let's go to Versaille.

03:06:10
kociqq: The big boy stack ayezeePoggers also ayezeeHey

03:06:16
<transcript>: What is on my personal next 13. Yeah. We want to do it on that morning, I guess.

03:06:19
<transcript>: Okay.

03:06:19
<transcript>: so

03:06:22
<transcript>: So we're linked to our remote cache.

03:06:35
<transcript>: So we got packages.

03:06:37
<transcript>: We got.

03:06:37
<transcript>: apps

03:06:43
<transcript>: Apps. I don't really love the Apps packages thing. I just kind of like putting them on packages personally.

03:06:47
<transcript>: In fact, we're gonna do that.

03:06:49
<transcript>: Elite.

03:06:53
<transcript>: So we just have packages.

03:06:53
<transcript>: pm

03:06:55
<transcript>: Pmpn lock. Let's see.

03:07:08
<transcript>: Okay.

03:07:08
<transcript>: workspace

03:07:09
<transcript>: Workspace.

03:07:12
<transcript>: Prettier.

03:07:14
<transcript>: Node 14.

03:07:16
<transcript>: Cool, cool.

03:07:18
<transcript>: Aw guess.

03:07:20
<transcript>: Version.

03:07:23
<transcript>: Zero.

03:07:23
<transcript>: one

03:07:27
<transcript>: One pool. Turbo. Run. Lynch. Turbo. Turbo. Okay.

03:07:32
<transcript>: Then we want to go to PMP work space.

03:07:34
<transcript>: Just packages.

03:07:36
<transcript>: Okay.

03:07:40
<transcript>: And then.

03:07:40
<transcript>: let's see

03:07:42
<transcript>: Let's see.

03:07:44
<transcript>: Root der.

03:07:47
<transcript>: Packages.

03:07:54
<transcript>: Load the config from the packaging. Okay. My wrist. I'm hurting my wrist.

03:07:58
<transcript>: Gotta do something different with my posture on what it is.

03:08:04
<transcript>: Is it this keyboard? Does this keyboard just have a higher? I don't know. It might just have a higher.

03:08:04
<transcript>: set

03:08:06
<transcript>: Set point here.

03:08:11
<transcript>: The problem with next off is there's no adapter for Kaisely. Yeah, I don't use kaisely.

03:08:22
<transcript>: Dreamboothing grab grass, kind of I'm doing it offstream now. I might I'll do some of it on stream. I'm just getting through kind of the hard, early, ugly part. That's probably not very fun to watch.

03:08:22
<transcript>: and then

03:08:31
<transcript>: And then I'll start streaming. Once we're doing more interesting things, definitely building something there. And I'm very excited about it. But I'm very excited about a lot of things. And that's a problem.

03:08:31
<transcript>: the

03:08:32
donald_boi: yo

03:08:34
<transcript>: The Big Boy stack.

03:08:34
<transcript>: what's the big

03:08:35
<transcript>: What's the Big Boy stack.

03:08:38
<transcript>: Yo, Donald, welcome to chat.

03:08:41
<transcript>: Welcome, welcome.

03:08:44
<transcript>: Okay. Let's see. Packages.

03:08:44
<transcript>: next

03:08:46
<transcript>: Next.

03:08:47
kociqq: LAMP Kappa

03:08:51
<transcript>: I don't know. Okay, let's go to.

03:08:51
<transcript>: ui

03:08:54
<transcript>: Ui. So I don't want to have a UI directory.

03:08:54
<transcript>: or i don't want

03:08:56
<transcript>: Or I don't want a UI package.

03:08:56
<transcript>: i'm not gonna be

03:08:58
<transcript>: I'm not gonna be sharing it across any apps.

03:08:58
<transcript>: i'm just like str

03:09:02
<transcript>: I'm just like stripping down the turbo repo default.

03:09:02
<transcript>: yes

03:09:03
<transcript>: Yes link config.

03:09:03
<transcript>: custom

03:09:05
<transcript>: Custom.

03:09:08
donald_boi: probs the most interesting stream in software and game development

03:09:09
<transcript>: X Turbo prettier.

03:09:11
<transcript>: Okay.

03:09:15
mr_yan19: LUL  Yes, we should rewrite in LAMP

03:09:22
maleero: Oh dang, you're in the Ozarks? That's cool. I'm in Springfield.

03:09:25
<transcript>: So they're doing, like, ESLint at the top level. I think the loss that I've done turbo pack. It's been a few months.

03:09:32
<transcript>: We have next JS, this is our next Sts config. And then we have the base JSON. Okay.

03:09:35
<transcript>: A React library. I don't need that.

03:09:45
<transcript>: These are base shared kiss configs from all other shifts and hair fountain. Okay.

03:09:45
<transcript>: okay

03:09:46
<transcript>: Okay.

03:09:50
<transcript>: So now I'm gonna add a new package.

03:09:51
<transcript>: Web.

03:09:57
maleero: Have you lived here a long time or did you move to MO for the low cost of living and remote dev life? LUL

03:09:57
<transcript>: And then we're gonna have a new package for our API. Okay.

03:10:04
laytanl_: Laravel is unironically a good framework

03:10:08
<transcript>: Okay. So we're just kind of like I'm standing up my preferred stack. This is kind of like the way I like to build. I'm gonna put this is gonna be a neck 13 app the web one.

03:10:10
<transcript>: And.

03:10:12
kociqq: @laytanl_ I agree

03:10:13
donald_boi: alright you have proven your chadiness on how you go through your bloody files

03:10:17
<transcript>: What? Maliro? You live in Springfield. I live in Nixa. Are you kidding me? You kidding me right now.

03:10:19
<transcript>: That's crazy.

03:10:19
<transcript>: i've

03:10:31
<transcript>: I've lived here all my life. How long have you lived a long time? Or did you move to Missouri for the lowcost? Living in remote devil life? Now I've worked as a remote Dev for 12, 13, 14 years, and I've lived in the Osaks my entire life. I grew up in Willow Springs.

03:10:31
<transcript>: and

03:10:35
<transcript>: And yeah, I've lived in Nixa for, like.

03:10:35
<transcript>: eight years

03:10:36
donald_boi: @laytanl_ PepeLaugh

03:10:37
<transcript>: Eight years. Something like that.

03:10:37
maleero: I'm gonna drive through Nixa here in an hour. LUL

03:10:39
<transcript>: How cool.

03:10:42
<transcript>: Rewriting Lamp that sounds fun.

03:10:49
maleero: Have to drive down to Branson

03:10:58
<transcript>: Drive through Nixon an hour. That's so crazy. Malirio. Hey, we should get coffee. Let's go to Architect or something. Let's get coffee sometime. Drive down to Branson. That's too cool. I took my family to a pumpkin past Standard Branson just last weekend.

03:11:07
<transcript>: Wild. You're not the first person for me, Ozarks. It's wandered into my stream. It's so crazy to me that like that happens on accident.

03:11:09
<transcript>: Wild.

03:11:16
donald_boi: "accident"

03:11:19
dota2dev: i used to live in Rolla Mo :o

03:11:29
<transcript>: If you're driving through Nixa Branson, you're gonna drive like, right by my name. I live in Kelby Creek. It's on 160, just off to the right south. Anxa. I just told the whole world where I live. Well, I told 83 of you where I live.

03:11:31
<transcript>: I guess I'm not to worry about it. Used to live in rock.

03:11:31
<transcript>: my grandma

03:11:36
<transcript>: My grandma's in Ralla. That's crazy thoughta. Look at this.

03:11:36
<transcript>: small world

03:11:37
<transcript>: Small world.

03:11:41
<transcript>: So wild.

03:11:47
<transcript>: Did I say accidentally told you by accident? I guess I told you very much on purpose.

03:11:51
cowfacedude99: nice way to dox yourself LUL

03:11:52
morded__: I live in Europe, welp

03:11:53
<transcript>: But I told you nonetheless. Okay. Web. So we're gonna do let's see, let's go.

03:11:55
<transcript>: Push the.

03:11:58
<transcript>: Packages web.

03:11:58
<transcript>: we're gonna

03:12:03
donald_boi: I live in Australia

03:12:04
<transcript>: We're gonna create a new next 13 app. We're just doing all the new stuff.

03:12:06
<transcript>: All the news.

03:12:17
donald_boi: I don't think I am gonna swim over to your house anytime

03:12:18
<transcript>: Is there not like a create new next that latest or something.

03:12:27
<transcript>: I like to have how to upgrade next their team, but what if I want to just create a new.

03:12:30
<transcript>: One.

03:12:33
<transcript>: New next 13 app.

03:12:33
<transcript>: create

03:12:36
<transcript>: Create a new item.

03:12:40
<transcript>: New next 13 app.

03:12:46
<transcript>: Live in Europe. Well, we're not very close to each other at all.

03:13:00
<transcript>: I live in Australia. We're very far apart. I don't think I'm gonna swim over here anytime soon. Yeah. You probably won't be on 160 highway 160 anytime soon. I think for the follow Elliot Banny. I didn't see that earlier.

03:13:01
<transcript>: Appreciate that.

03:13:01
<transcript>: app

03:13:07
<transcript>: App directory let's do next 13. I just want to like new next app.

03:13:07
<transcript>: create

03:13:09
laytanl_: could you clarify your stack choices for this? next13 hosted on vercel, talking to vtl, talking to planetscale?

03:13:12
ogjake: npx create-next-app@l13 ?

03:13:13
<transcript>: Create Next app and I'm wonder if that latest does 13.

03:13:21
ogjake: idk

03:13:22
<transcript>: Is that what it is? Ii. Jake? Yeah. I'm gonna clarify my stack choice. So.

03:13:28
<transcript>: Next 13 Hosten on Versaille for the front end.

03:13:28
<transcript>: and

03:13:29
<transcript>: And.

03:13:29
<transcript>: it interacts

03:13:31
<transcript>: It interacts with.

03:13:31
<transcript>: oh there's so much stuff

03:13:37
<transcript>: Oh, there's so much stuff I'm thinking I'm gonna have to pull over it's. An app Sync API deployed in my A. Dbs account.

03:13:37
<transcript>: i use

03:13:40
<transcript>: I use VTL to communicate with Planet scale.

03:13:40
<transcript>: okay

03:13:52
<transcript>: Okay, so VTL running SQL queries in planet scale. Oh, that's gonna be sober, bird verbose and so ugly and you are gonna be like, why did you abandon the T three stack? You're so dumb. And I'm gonna say because performance.

03:13:54
<transcript>: Because it's so fast.

03:13:58
<transcript>: Or maybe I'll do DynamoDB. It's a little more.

03:13:58
<transcript>: terse i'm just

03:14:00
<transcript>: Terse. I'm just more used to working with it.

03:14:00
<transcript>: but

03:14:02
<transcript>: But.

03:14:02
<transcript>: it's gonna be

03:14:04
<transcript>: It's gonna be GraphQL.

03:14:04
<transcript>: apps in

03:14:05
<transcript>: Apps Ink API.

03:14:05
<transcript>: i'll do

03:14:12
ogjake: yes that command works

03:14:13
<transcript>: I'll do graphical code generation stuff to get the end to end type safety so we can all feel cool like we're T three years.

03:14:14
ogjake: just tested

03:14:16
<transcript>: And then.

03:14:16
<transcript>: yeah

03:14:18
ogjake: gives u 13.0.1

03:14:19
<transcript>: Yeah, it's plant, scale or DynamoDB. Haven't decided.

03:14:21
<transcript>: That's it.

03:14:23
<transcript>: Right? Yeah, that's it.

03:14:23
<transcript>: that's it

03:14:25
<transcript>: That's it.

03:14:25
<transcript>: yes

03:14:27
<transcript>: Yes. That command works. Okay. Perfect.

03:14:27
<transcript>: what

03:14:30
<transcript>: What's the L L 13.

03:14:34
<transcript>: L.

03:14:34
ogjake: typo

03:14:35
grasp5533: Other than Athena, I'm okay with avoid SQL the rest of my career

03:14:38
<transcript>: What's L stand for? Feel like I should know this.

03:14:38
standardrobot: big L

03:14:44
<transcript>: L 13? Or maybe you just. Is that typo.

03:14:46
<transcript>: At 30.

03:14:48
<transcript>: Big owl.

03:14:48
ogjake: yup typ

03:14:51
ogjake: typo

03:14:54
<transcript>: Other than Athena, I'm okay with avoid SQL the rest of my career. Me too grasp we are very similar.

03:14:54
<transcript>: yeah

03:14:57
<transcript>: Yeah. Type. Okay. So just at 13.

03:14:59
<transcript>: Yes, that's okay.

03:14:59
laytanl_: will the next app just be client components or have some serverside stuff?

03:15:04
<transcript>: Just create next app created in a subdirectory man. This always has.

03:15:05
ogjake: yes

03:15:08
<transcript>: Always happened.

03:15:12
<transcript>: Yes. Would you like to use eslant.

03:15:15
<transcript>: Also. Yes.

03:15:17
<transcript>: I choose.

03:15:19
<transcript>: But I don't know.

03:15:22
standardrobot: @Grasp5533 getting back into web-dev at the moment, but from my understanding, I'd much rather be using an ORM over straight up SQL

03:15:23
<transcript>: How do I? How I do.

03:15:24
standardrobot: to an extent

03:15:25
<transcript>: That one.

03:15:28
grasp5533: Are using vercel like you would use amplify to host your frontend?

03:15:30
<transcript>: No, yes, no? Oh, it's not on insert mode.

03:15:30
standardrobot: but generally speaking

03:15:32
zirus16: neovim? is your terminal, i like that console.

03:15:34
<transcript>: Oh, There we go.

03:15:36
<transcript>: Installing the pencil.

03:15:40
<transcript>: Well, this is so wrong.

03:15:40
<transcript>: i

03:15:41
morded__: I'm currently working with a LOT of hard written SQL... Also changing into web dev atm

03:15:44
<transcript>: I want none of that. This is inside turbo repo.

03:15:48
<transcript>: Well, that's okay. We'll figure it out.

03:15:52
<transcript>: Added 236 Passage packages. Sounds like a lot.

03:15:56
<transcript>: Yep. There. Did it put it in a directory called AW, yet.

03:16:02
<transcript>: Okay. So we're gonna.

03:16:04
<transcript>: Rename this.

03:16:04
<transcript>: to

03:16:05
<transcript>: To.

03:16:05
<transcript>: web two

03:16:06
<transcript>: Web, two.

03:16:12
<transcript>: Delete that one.

03:16:14
<transcript>: And rename that one.

03:16:16
<transcript>: Okay.

03:16:16
<transcript>: web

03:16:21
<transcript>: Web pages. Okay. So some things we're gonna change here to take advantage of.

03:16:24
<transcript>: Oh, Geez.

03:16:28
<transcript>: Get out of here. Get out of here with your CSS.

03:16:37
<transcript>: Okay. Pages. We're not gonna eat. Wait. I just did Nick 13, right? Oh, yeah. Just as doesn't use it for the. Yeah, yeah, that's fine.

03:16:38
zirus16: using next 13?

03:16:41
<transcript>: Delete, you get out of here public.

03:16:41
<transcript>: that's fine

03:16:42
<transcript>: That's fine.

03:16:47
<transcript>: We're gonna need a design a logo for AW guess at some point.

03:16:47
<transcript>: yes lint

03:16:54
<transcript>: Yes, Lint. Okay. Here we go. This one next. Core Web vitals. How does that differ from.

03:16:57
<transcript>: This one.

03:17:06
<transcript>: If I'm next Babel.

03:17:19
<transcript>: One of the likelihood. What's the likelihood we actually get all of this? Even just, like, stood up, just scaffolded on this stream. I guess it depends on how long I stream, doesn't it.

03:17:25
<transcript>: I'm probably gonna stream like another. I don't know. Hour. Maybe not even that I got a P. I'll. Be right back.

03:17:48
carlosgn: @Grasp5533 i would totally the opposite lol

03:17:54
grasp5533: @Grasp5533 In my experience ORM's have just complicated things, but it could be just the people implementing it lol

03:18:13
carlosgn: raw SQL is the way to go

03:18:37
grasp5533: I had one team that was using an ORM for dynamodb, and it drove me crazy

03:19:06
shiftlessatol: @Grasp5533 I built on leveraging EntityFramework and it's still a pain

03:19:35
maleero: @Grasp5533 Django's ORM is pretty good IMO

03:19:42
shiftlessatol: I think I finally got the issues worked out but circular references are the killer

03:20:11
maleero: Coming from a raw SQL background, it seemed really bad when I started to learn it

03:20:36
shiftlessatol: I'm thinking about building something more like FireStore. That keeps the meaningful data in memory and writes a copy of it to a static file.

03:20:53
grasp5533: It took me awhile to understand how to use DynamoDb properly, but totally worth it.  Really have to change your way of thinking though

03:22:02
<transcript>: Alright.

03:22:04
maleero: Your stream setup is next level, @adamdotdev

03:22:07
<transcript>: This Reading Raw Sequel is The Way to go.

03:22:10
<transcript>: Totally the opposite.

03:22:13
<transcript>: Stuck.

03:22:20
<transcript>: Yeah. So the thing about this stack. What? I'm getting ready to build this in. Thanks, Maliro.

03:22:20
<transcript>: i'm

03:22:21
<transcript>: I'm gonna write a build a day.

03:22:21
<transcript>: that

03:22:26
<transcript>: That's the opposite of T three, I think probably.

03:22:28
<transcript>: In the sense that.

03:22:28
<transcript>: t

03:22:33
<transcript>: T three really optimizes for author time speed build stuff really fast.

03:22:39
shiftlessatol: outside of large enterprise environments - I struggle to see the need for relational databases - everything gets stripped fromt he relationships when you use the data - it's only beneficial for queries and reporting. so why not make a non-relational DB - build your manual data obects ( that you have to anyway ) and then clone that data to a relational Model for the reason you need that

03:22:39
<transcript>: The stack I'm building with optimizers for execution speed run stuff really fast.

03:22:39
<transcript>: they're on different

03:22:58
<transcript>: They're on different ends of the spectrum. I'm not gonna recommend that people use Whoa, Dave, that's a block attack. I'm not gonna recommend that you people you build with a stack, just you want to see stuff run really fast and not have giant, awful cold starts. This is what I use. So here we go.

03:23:08
<transcript>: I can't get my armrests.

03:23:08
<transcript>: and

03:23:11
<transcript>: And my wrist in the right position.

03:23:14
<transcript>: Okay.

03:23:14
<transcript>: my

03:23:17
standardrobot: since I've been getting into web dev, I've been exploring the t3 stack a lot

03:23:19
<transcript>: My ESLint setup is gonna be the thing that I spend way too long on.

03:23:19
<transcript>: because

03:23:21
<transcript>: Because turbo repo.

03:23:23
standardrobot: seems super fast, lightly opinionated

03:23:25
<transcript>: Like we're gonna do.

03:23:34
<transcript>: Just config.

03:23:44
<transcript>: This should just be importing from the other.

03:23:49
<transcript>: You know what? I need? That I need that app directory back.

03:23:51
<transcript>: In my trash.

03:23:54
<transcript>: Okay. Hang on. I'm fuzzy.

03:23:57
<transcript>: Be in my trash.

03:24:02
<transcript>: No.

03:24:07
<transcript>: Like I need to see the example turbo repo.

03:24:12
<transcript>: Next to us app how they do ESLint. I just want to spend forever on this turbo.

03:24:15
<transcript>: Turbo repo.

03:24:15
<transcript>: next

03:24:18
<transcript>: Next. Yes, yes. Plants.

03:24:24
<transcript>: Here we go. Apps, web.

03:24:24
<transcript>: so es

03:24:26
<transcript>: So ESLint RC.

03:24:26
<transcript>: i thought it just

03:24:29
<transcript>: I thought it just point to interesting. Okay.

03:24:31
<transcript>: And then.

03:24:31
<transcript>: highly done their

03:24:33
<transcript>: Highly done their TS config.

03:24:38
<transcript>: Really. So they're not sharing them. I kind of like that actually.

03:24:38
<transcript>: yeah i like that

03:24:45
<transcript>: Yeah, I like that a lot. I don't know why they're using Turbule repo. If they only have one another, they have some other things. I don't know.

03:24:51
<transcript>: I don't want to share my TS? Config and my eslant. I just don't. I don't think it's a good idea.

03:24:54
grasp5533: @shiftlessatol I think that is the way I prefer to build DynamoDb for transactional workloads, and stream changes to S3 for analytical queries & reporting

03:24:56
<transcript>: For my project because they're just gonna be very, very different, like.

03:25:01
<transcript>: This one deleted.

03:25:01
<transcript>: these

03:25:08
<transcript>: These slant for my next yes app is entirely different than my CDK app will be.

03:25:08
<transcript>: okay we have public

03:25:13
<transcript>: Okay, we have public with Styles. I don't need a good ignoring here.

03:25:13
<transcript>: i don't think

03:25:14
<transcript>: I don't think.

03:25:18
<transcript>: We're good to delete that.

03:25:22
<transcript>: Next.

03:25:23
<transcript>: Config.

03:25:29
<transcript>: Mode. We're gonna opt into the app directory. I guess we're gonna use the app directory. I don't know why not.

03:25:29
<transcript>: pack

03:25:31
<transcript>: Package lock.

03:25:31
<transcript>: no

03:25:33
morded__: Keep surprising me with your music

03:25:33
<transcript>: No.

03:25:38
<transcript>: Don't need a package lock, right.

03:25:42
<transcript>: This package JSON.

03:25:52
<transcript>: Just config. This should all be fine, right.

03:25:57
<transcript>: Next core Web vitals. Okay.

03:25:57
<transcript>: we're gonna

03:26:01
<transcript>: We're gonna add tail into that. We'll get to that in a second. Let's see. Package lock.

03:26:01
<transcript>: so

03:26:03
shiftlessatol: http://inte.ll.igent.design/2022-11-02_080629.jpg

03:26:04
<transcript>: So my workspace just has all in packages.

03:26:14
<transcript>: Now API is going to be a means CDK app. I can't decide. I'm just writing VTL so I think I just want to use a CDK app.

03:26:20
<transcript>: Let's go, pop the push the packages.

03:26:20
<transcript>: api

03:26:21
<transcript>: Api.

03:26:28
<transcript>: Let's do create a new CDK app.

03:26:31
<transcript>: Is that.

03:26:31
<transcript>: is it

03:26:34
<transcript>: Is it MPX.

03:26:37
<transcript>: Cdk knit.

03:26:37
<transcript>: app

03:26:38
<transcript>: App.

03:26:40
<transcript>: Cdk.

03:26:45
<transcript>: Edk no NPX CDK.

03:26:48
<transcript>: Yeah language TypeScript.

03:27:04
<transcript>: Install fail failed. What is it? Unsupported. Url type workspace.

03:27:06
<transcript>: What.

03:27:07
<transcript>: We talk about.

03:27:07
<transcript>: oh

03:27:12
<transcript>: Oh, it tried to do NPM install inside there. That's fine. I don't want it to.

03:27:15
<transcript>: Ignore.

03:27:20
<transcript>: It ignore I guess I need to amend my get ignore here.

03:27:20
<transcript>: we're

03:27:23
<transcript>: We're gonna CDK out.

03:27:44
<transcript>: What am I doing.

03:27:47
<transcript>: Here we go CDK out.

03:27:53
<transcript>: Cdk staging.

03:28:02
<transcript>: Now I can go over here and delete this one.

03:28:06
<transcript>: Yes. Get out of here with your jet.

03:28:16
<transcript>: Okay.

03:28:20
<transcript>: Cool, cool.

03:28:25
<transcript>: We're gonna say this one is.

03:28:27
<transcript>: If you guess April.

03:28:27
<transcript>: oh

03:28:29
<transcript>: Oh, what.

03:28:29
<transcript>: what

03:28:31
<transcript>: What.

03:28:36
<transcript>: If you guess API. I don't know what just happened. That was weird.

03:28:42
<transcript>: Okay. So we got a CDK API. We'll get into that in a second.

03:28:42
<transcript>: we

03:28:45
<transcript>: We've got packages on we got to read me just config.

03:28:49
<transcript>: Cool. And we have our website.

03:28:52
<transcript>: Which we're gonna float over sell.

03:28:57
<transcript>: Let's go ahead and add, oh, yeah, just all this out of here.

03:29:01
<transcript>: Like that. We're gonna do our tailwind thing.

03:29:08
<transcript>: Next. Yes. Tailwind kind of move really fast because it's such just the boring, like boilerplate.

03:29:12
<transcript>: Next install.

03:29:22
<transcript>: Okay. This is the part where I create a horizontal.

03:29:25
<transcript>: A vertical.

03:29:30
shiftlessatol: I also hate packages - so I usually make my own

03:29:30
<transcript>: This is toggle term. What am I doing.

03:29:33
<transcript>: What am I doing.

03:29:37
<transcript>: This is the part where over here.

03:29:39
<transcript>: No.

03:29:42
<transcript>: Yeah, I can kill all these.

03:29:42
<transcript>: we're not

03:29:45
<transcript>: We're not using I guess I might be using.

03:29:49
<transcript>: Might be using planet scale.

03:29:49
<transcript>: okay

03:29:53
<transcript>: Okay, these are all in the AW, the wrong a Tobs guest directory.

03:30:03
<transcript>: Okay.

03:30:09
shiftlessatol: I once got a site deployment from a dev that had 185MB of packages for a website build that was like 8MB total

03:30:10
<transcript>: What, what.

03:30:16
<transcript>: Okay.

03:30:20
<transcript>: Up here I'm gonna say.

03:30:22
<transcript>: Clear.

03:30:22
<transcript>: cd

03:30:25
<transcript>: Cd, that one.

03:30:25
<transcript>: we

03:30:39
<transcript>: We're gonna make a new vertical split, and we're gonna have push the packages web. We'll do API on this side and then push the package's web on this side. So now I've got my web and my.

03:30:39
<transcript>: ap

03:30:40
<transcript>: Api.

03:30:40
<transcript>: over here

03:30:42
<transcript>: Over here.

03:30:46
<transcript>: Now, if I want to do something in the web, what do I do.

03:30:46
<transcript>: i can do

03:30:50
<transcript>: I can do it over here. I wanted to paste all that.

03:30:50
<transcript>: this

03:30:51
<transcript>: This.

03:31:03
<transcript>: Why am I using NPM? I'm dumb.

03:31:03
<transcript>: no

03:31:06
<transcript>: No, not okay. To proceed.

03:31:06
<transcript>: no

03:31:07
<transcript>: No.

03:31:10
<transcript>: Pmpm.

03:31:13
<transcript>: And development.

03:31:13
<transcript>: pill

03:31:15
<transcript>: Pillind, CSS.

03:31:17
<transcript>: O CSS.

03:31:20
<transcript>: Auto prefixer.

03:31:27
<transcript>: What is it? Pnpm. Dlx.

03:31:36
<transcript>: Tailwind CSS in it. P. Can I do that.

03:31:43
<transcript>: Cool. Okay.

03:31:45
<transcript>: So let's see.

03:31:52
<transcript>: Got a tail and config.

03:32:00
<transcript>: I need to do the thing here. Oh, I need to add all this. Yeah.

03:32:06
<transcript>: Let's.

03:32:06
<transcript>: on content

03:32:07
<transcript>: On content.

03:32:13
<transcript>: We just need.

03:32:15
<transcript>: App.

03:32:18
<transcript>: Packages.

03:32:21
<transcript>: Hey, this is inside this directory, so we just need.

03:32:31
<transcript>: App, directory, pages, components. Yeah, there's not gonna be a Pages directory, so App and Components, I don't think I'm gonna have a components directory.

03:32:31
<transcript>: if i'm being honest

03:32:32
<transcript>: If I'm being honest.

03:32:36
<transcript>: So there's just an app directory.

03:32:46
<transcript>: Cool.

03:32:46
<transcript>: and then that

03:32:51
<transcript>: And then that's it, right? That's it. Okay. We did tail end.

03:32:54
<transcript>: Whew we're trying to trying to go fast here.

03:33:07
sockthedev: astro add tailwindcss

03:33:12
<transcript>: Since I've been getting into Web Dev, I've been explaining the Tseries stack a lot. Seems super fast, lightly opinionated. Yeah. No, it's Sand Robot. It's super fast at author time. I'm not impressed with the runtime performance of Prisma. Mostly it's not T three saws it's Prisma, which.

03:33:22
sockthedev: kysely!!

03:33:25
<transcript>: I don't know if you maybe if you did it a different way if you if you deployed it on different infrastructure, but on Versaille in particular, the cold starts are atrocious and yeah, if everyone uses your thing all the time, cold turns on an issue, but.

03:33:32
<transcript>: I don't know. It just bothers me. I want control over the performance a little bit more, I say as I write my JavaScript.

03:33:33
tayloreddev: I went away for a bit, what happened to the rust stream

03:33:41
carlosgn: im using kysely, but i don't know how set authentication in nextjs with it

03:33:41
standardrobot: lol, fair fair

03:33:43
<transcript>: I think that is the way I prefer to build DynamoDB for transactional workloads and stream changes to S three for analytical queries and reporting. Yeah. Graph. That's also.

03:33:43
<transcript>: what i do

03:33:45
<transcript>: What I do.

03:33:49
<transcript>: I do the whole Athena stack for analytics.

03:33:49
<transcript>: in s three

03:33:50
<transcript>: In S. Three.

03:33:52
<transcript>: Generally.

03:33:52
<transcript>: i

03:33:53
<transcript>: I.

03:33:59
<transcript>: 'm in CSS.

03:33:59
<transcript>: i

03:34:06
<transcript>: I want to work on the Astro LSP. Maybe I miss something, but the asteroid LSP. If you're using neovem.

03:34:06
<transcript>: doesn't

03:34:12
<transcript>: Doesn't work super well. I think it's a communitydriven project and it's probably pretty early.

03:34:12
<transcript>: but i couldn't

03:34:21
<transcript>: But I couldn't go to definition and stuff like that. That would be nice. So I am writing some Astro stuff right now and I'm gonna be looking at that. Maybe I'll do it on stream.

03:34:21
<transcript>: what happened

03:34:30
<transcript>: What happened to the rust stream? Taylor we switch back to AW guests using Kaisley, but I don't know how set authentication indexes with it.

03:34:30
<transcript>: yeah we're

03:34:31
<transcript>: Yeah, we're.

03:34:34
<transcript>: Gonna I'm gonna show you if I get to it on this stream we'll see.

03:34:39
<transcript>: We got CDK, we've got.

03:34:39
<transcript>: the

03:34:41
<transcript>: The web.

03:34:41
<transcript>: we

03:34:47
<transcript>: We need to do a lot more on both of these things. So let's go to our CDK app. Yes. Lantern.

03:34:47
<transcript>: the bane

03:34:48
laytanl_: LSP's are fun, I am creating a new one for PHP as a side project

03:34:48
<transcript>: The bane of me.

03:34:50
<transcript>: Cdk.

03:34:55
<transcript>: How many times have I done this? So many times.

03:35:01
<transcript>: You're creating a new LSP for PHP that sounds hard.

03:35:06
<transcript>: But it sounds like something latent could do.

03:35:08
<transcript>: What did I just do.

03:35:13
<transcript>: Api.

03:35:13
<transcript>: we were do

03:35:15
<transcript>: We were do PMTM.

03:35:17
<transcript>: Add.

03:35:17
<transcript>: bsl

03:35:18
<transcript>: Bslant.

03:35:18
<transcript>: and

03:35:23
<transcript>: And yes, Lent Plugin CDK.

03:35:26
<transcript>: Oh, man.

03:35:30
maleero: How have I never heard of Athena? That is super cool

03:35:32
sockthedev: kysely is insanely rad. i got burdened with the task of migrating data from one db into another. ran kysely against both ends and honestly it became easy from there.

03:35:34
grasp5533: I'm using python CDK right now, and I think I would just use typescript next time lol

03:35:34
<transcript>: Cdk is Lent RC.

03:35:52
carlosgn: the thing is the kysely author have a PR open in the next-auth repo with the adapter but i don't know when are they going to merge it

03:35:54
grasp5533: L1 constructs seem like a pain in non-typescript languages

03:35:55
<transcript>: How have I never heard of Athena? It is super cool. It is super cool. Malaro, wait, Maliro, are you into AWS.

03:35:58
sockthedev: my only gripe with kysely is that the docs are fairly obscufacted

03:36:02
<transcript>: Are you somebody that's into AWS and lives in Springfield, Missouri.

03:36:02
<transcript>: because we

03:36:04
<transcript>: Because we should be best friends.

03:36:05
maleero: Yes, I love AWS

03:36:07
sockthedev: obsfucated

03:36:19
<transcript>: The thing is Kaisely author has a PR open in the next author with the adapter but I don't know when they're going to merge it. L one contracts seem to seem like a plain, like a pain and nontype of languages. Yeah I only use TypeScript of CDK only graphic with Kaisely's docs are fairly.

03:36:21
maleero: I build Alexa skills on AWS

03:36:23
<transcript>: Skated.

03:36:23
<transcript>: i

03:36:25
<transcript>: I can't say it.

03:36:25
<transcript>: molly

03:36:27
<transcript>: Molly, or you love, AWS.

03:36:37
<transcript>: We should be best friends. We should get coffee. Seriously, DM me. Let's do it. Let's go somewhere. I don't know. Wherever you do, drink coffee. I don't know. I'm making some assumptions here.

03:36:45
<transcript>: I don't even drink coffee. What am I talking about? But I like coffee. And if I go out and have coffee with somebody, it's an excuse to drink coffee. So.

03:36:51
<transcript>: I was hoping to just get an example.

03:36:52
standardrobot: hey adam do you take song requests?

03:36:56
<transcript>: That's not like do all this stuff. I guess I'll just do all this stuff.

03:37:04
<transcript>: We're gonna create an yes, lint.

03:37:06
<transcript>: A dot esplant.

03:37:06
<transcript>: yes

03:37:09
<transcript>: Yes, ESLint? Rc.

03:37:14
<transcript>: I hate doing this so much.

03:37:19
<transcript>: Plugins. Okay.

03:37:28
sockthedev: are we trying to deploy next 13 via CDK?

03:37:29
<transcript>: Rules.

03:37:34
<transcript>: We're gonna just paste all this stuff in, right.

03:37:52
<transcript>: Do you take song request standard robot sure.

03:37:52
<transcript>: are we

03:37:55
<transcript>: Are we trying to play Next 13 via CDK.

03:37:55
<transcript>: no

03:38:00
<transcript>: No, we're gonna so I'm gonna host my next 13 on Versaille.

03:38:00
<transcript>: i'm just using cd

03:38:03
<transcript>: I'm just using CDK for the backend. This is not.

03:38:03
<transcript>: formatting

03:38:08
<transcript>: Formatting I'm not sure why might be that right there.

03:38:11
<transcript>: I guess I just don't have.

03:38:11
<transcript>: pretty

03:38:16
<transcript>: Pretty configured correctly or I don't have it at all in this repo.

03:38:16
<transcript>: that's the one thing

03:38:20
<transcript>: That's the one thing I do care to have globally is prettier.

03:38:20
<transcript>: that depend

03:38:22
<transcript>: That dependency is prettier.

03:38:26
<transcript>: Okay.

03:38:26
<transcript>: let's

03:38:29
<transcript>: Let's do this to.

03:38:31
<transcript>: I already have like a prettier RC now.

03:38:31
<transcript>: so

03:38:33
maleero: Aren't all developer caffeine addicts? LUL That sounds fun.

03:38:34
<transcript>: So prettier.

03:38:37
<transcript>: My false.

03:38:46
<transcript>: We have API TS. We got to get.

03:38:46
<transcript>: this working

03:38:48
<transcript>: This working right.

03:38:53
<transcript>: Yes. Slant Plugin CDK. Is it working now.

03:38:58
<transcript>: It's not the LSP. It's what is it? How do I restart.

03:39:01
<transcript>: Is it like.

03:39:05
<transcript>: Yes. Slant the restart or something.

03:39:07
<transcript>: To do it.

03:39:12
<transcript>: Lsp restart.

03:39:14
sockthedev: dax did a pretty sterling job on his auth module for sst btw.

03:39:16
<transcript>: Come on. No aminoamy. Stop.

03:39:16
<transcript>: no different

03:39:17
standardrobot: https://open.spotify.com/track/6KozGwydZSYXr50a4zY2OL?si=7ed45309e7744f66

03:39:22
<transcript>: No different configuration found in packages. App API bin what.

03:39:22
<transcript>: sorry what

03:39:24
<transcript>: Sorry? What.

03:39:28
<transcript>: Here it is. Rules. That I did. I missed something.

03:39:34
<transcript>: See a more complete realworld example. Thank you.

03:39:39
<transcript>: Art All Developer Caffeine addicts.

03:39:39
<transcript>: it does sound fun

03:40:00
<transcript>: It does sound fun. I love to get some coffee next at a pretty Sterling job in its off module for SST, by the way. Yeah, I the only thing. The only reason I've talked to Zach's about this summitime. The only reason I don't use SST yet is I'm still on the like AppSync VTL bandwagon and that workflow.

03:40:06
<transcript>: There's no real framework for, like where working with it. Maybe we need to make one. No, I don't want to do that.

03:40:06
<transcript>: let's

03:40:06
sockthedev: omg. bye

03:40:14
<transcript>: Let's see. Yes. Flat package JSON index. Where's the Esplant configuration? Do they just put it in here? What.

03:40:14
<transcript>: what

03:40:15
<transcript>: What.

03:40:18
<transcript>: I thought there was a example in here.

03:40:19
grasp5533: Are they still doing js/ts for appsync resolvers?

03:40:19
sockthedev: :P

03:40:33
<transcript>: And what is this? Where's the config? Oh, here we go.

03:40:33
<transcript>: extends

03:40:35
<transcript>: Extends ESL. Recommended.

03:40:35
<transcript>: typescript

03:40:38
<transcript>: Typescriptia. Slant prettier.

03:40:40
<transcript>: Parser options.

03:40:40
<transcript>: okay so i

03:40:43
<transcript>: Okay. So I'm just going to copy this whole thing.

03:40:48
<transcript>: Except for that prettier config. Right.

03:41:00
<transcript>: How much does he use? Is? Am I just supposed to use this, like installed as a package? You aren't add ESLint config CDK.

03:41:04
<transcript>: How do I use it.

03:41:08
<transcript>: Does it just work, then.

03:41:08
<transcript>: it'll

03:41:11
<transcript>: It'll just use my.

03:41:11
<transcript>: key

03:41:12
<transcript>: Key.

03:41:13
sockthedev: eslint configs are the new webpack configs. i do this same thing every time.

03:41:16
<transcript>: I would love to do that if.

03:41:21
<transcript>: Let's delete this.

03:41:23
<transcript>: Let's.

03:41:26
<transcript>: Go to package JSON.

03:41:29
<transcript>: Yes. Lent.

03:41:32
<transcript>: Plugin CDK.

03:41:37
<transcript>: Yes link configuration used by cdkdx.

03:41:37
<transcript>: okay

03:41:40
<transcript>: Okay. No, I don't think I can just use that. I don't think that's how it works.

03:41:45
<transcript>: Come on, somebody has to have a simple CDK length config.

03:41:45
<transcript>: somebody has to have

03:41:48
<transcript>: Somebody has to have a simple example of this. Right.

03:41:52
<transcript>: Is this one.

03:41:57
<transcript>: I do need all the TypeScript stuff and prettier.

03:42:00
<transcript>: Types.

03:42:01
<transcript>: Are.

03:42:06
<transcript>: Like the way they do this.

03:42:13
<transcript>: Core JS. I just want an RC file. I just won't the whole thing.

03:42:24
<transcript>: This official recommendation on how to do this.

03:42:34
<transcript>: It should just be built in. I don't understand why Esplan is not built into CDK. That's not being too opinionated. That's just like making people's lives better.

03:42:40
<transcript>: Dax and Pressure OC, there's a song.

03:42:40
<transcript>: a song

03:42:43
<transcript>: A song Recommendation by Standard robot.

03:42:45
<transcript>: What is this song.

03:42:45
<transcript>: let's see

03:42:47
<transcript>: Let's see.

03:42:51
<transcript>: Right here.

03:42:51
<transcript>: g

03:42:53
<transcript>: Gtrs vibe.

03:42:59
shiftlessatol: https://eslint.org/docs/latest/user-guide/configuring/ignoring-code

03:42:59
<transcript>: I don't know. I don't know if I would like it or not.

03:43:05
<transcript>: Still doing JSTs for async resolvers? Yeah, grasp, stay tuned.

03:43:05
<transcript>: stay

03:43:06
<transcript>: Stay tuned.

03:43:13
<transcript>: Yes. Like things are the new webpack configs. I do the same thing every time. I do too, and I hate it.

03:43:13
<transcript>: dave

03:43:14
<transcript>: Dave, is that.

03:43:14
<transcript>: an es

03:43:21
<transcript>: An eslant. Are you telling me how to ignore code in your slant? I don't want to ignore it. I want to just get it working quickly.

03:43:24
<transcript>: Yes. Slant plugin.

03:43:32
<transcript>: Yes. Cdk TypeScript. Eslint config. Come on now. Some of these got this right.

03:43:44
shiftlessatol: It's a pluggable JS Linter

03:43:49
shiftlessatol: by ESLint

03:43:50
<transcript>: You know what I've got? I'll just go to public now. Now I won't. I did a weird turbo repo thing in that one.

03:43:57
<transcript>: We're about this. What's this thing.

03:44:01
<transcript>: Oh, you can do them in YAML, that's new.

03:44:09
<transcript>: So this is using ESL recommended and typescriptious lent but Where's the CDK this isn't for the CDK.

03:44:17
<transcript>: What is this? T do.

03:44:21
<transcript>: Is SSD.

03:44:25
<transcript>: What would DAX do? Wwd.

03:44:28
<transcript>: Yes.

03:44:34
<transcript>: Maybe.

03:44:41
<transcript>: Yes, let.

03:44:50
<transcript>: 's Bundle Servers Framework Plugin is a service framework. I don't want that.

03:44:50
<transcript>: i just want

03:44:51
<transcript>: I just want.

03:44:51
<transcript>: cdk

03:44:54
<transcript>: Cdk type script prettier.

03:44:54
<transcript>: config

03:44:56
<transcript>: Config.

03:45:00
<transcript>: I need pretty. I don't think cuz I'm doing that.

03:45:02
<transcript>: At the top level. Right.

03:45:05
<transcript>: I just want CDK though.

03:45:16
shiftlessatol: https://prettier.io/docs/en/install.html

03:45:23
<transcript>: This is so annoying. I do this on every single project. Why don't I have like a default.

03:45:27
<transcript>: Cdk oh, I didn't say Yes.

03:45:32
shiftlessatol: If you use ESLint, install eslint-config-prettier to make ESLint and Prettier play nice with each other. It turns off all ESLint rules that are unnecessary or might conflict with Prettier. There’s a similar config for Stylelint: stylelint-config-prettier  (See Prettier vs. Linters to learn more about formatting vs linting, Integrating with Linters for more in-depth information on configuring your linters, and Related projects for even more integration possibilities, if needed.)

03:45:46
<transcript>: I've used this.

03:45:46
<transcript>: config pret

03:45:50
<transcript>: Config prettier. I've definitely done this.

03:45:51
shiftlessatol: https://github.com/prettier/eslint-config-prettier#installation

03:45:53
<transcript>: And it's the CDK, specifically.

03:45:57
<transcript>: Cdk TypeScript tooling. What's this.

03:46:01
<transcript>: Do they have any a slant.

03:46:05
<transcript>: That would be great. Oh, maybe.

03:46:05
<transcript>: maybe

03:46:06
<transcript>: Maybe.

03:46:06
<transcript>: t

03:46:08
<transcript>: Ts config.

03:46:12
<transcript>: Wait. Airbnb TypeScript Base. What.

03:46:12
<transcript>: plug in

03:46:16
<transcript>: Plug in is no CDK. Okay, what am I doing here.

03:46:22
<transcript>: All Right, Public Goddev.

03:46:26
<transcript>: I'm just gonna figure it out from my.

03:46:27
<transcript>: Public address.

03:46:33
<transcript>: I'm gonna need a reference some stuff in here anyway.

03:46:44
<transcript>: I'm not trying to figure out prettier. I'm just trying to figure out CDK any of Slant. That's all.

03:46:54
<transcript>: And I just want I just want I don't want to figure it out. I just want to drop in. I just want to, like, here's my thing. So here we go. Packages. Thank you for the follow Ike. Three.

03:46:54
<transcript>: config

03:46:58
<transcript>: Config ESLint CDK? Here we go.

03:47:00
<transcript>: Found it.

03:47:00
<transcript>: this is

03:47:02
<transcript>: This is a JS version.

03:47:05
<transcript>: Which I think is fine.

03:47:05
<transcript>: so

03:47:15
<transcript>: So then API this one just says import require config is let's see K, I'm only gonna have one CDK project, so I'm just gonna put it directly in the thing.

03:47:16
<transcript>: Okay.

03:47:19
<transcript>: What do they have typescripted.

03:47:25
<transcript>: Install some stuff. We'll do it. Let's see. Lib.

03:47:30
<transcript>: What am I looking for? I'm gonna make a new dot ESLint.

03:47:40
<transcript>: Js or something? Rc JS, what is it? How do you do an Eslant JS file? Oh, yeah, RT JS.

03:47:48
<transcript>: I hate all this stuff so much. Who's gonna make all this go away? Who's just gonna make where you don't have to do this stuff.

03:47:51
<transcript>: Ever it just does the right thing.

03:47:54
<transcript>: Okay.

03:47:54
<transcript>: type of

03:47:57
<transcript>: Type of eslant. So let's look at our package.

03:47:57
<transcript>: we need we need

03:47:59
<transcript>: We need we need these things.

03:48:01
<transcript>: Let's see.

03:48:06
<transcript>: We need Pnpm, Add, D.

03:48:09
<transcript>: Typescript.

03:48:13
<transcript>: Yes, Lant, Yes, Lant.

03:48:13
<transcript>: plug

03:48:23
<transcript>: Plugin. This is it's. Seriously. It's so web packed to me. This is like no one should have to learn this stuff. This should have been extracted away three years ago. Typescript. Eslint.

03:48:23
<transcript>: parser

03:48:29
<transcript>: Parser like, I want good. I want a good developer environment. I just don't want to have to do all of this nonsense.

03:48:32
<transcript>: Next I don't need next.

03:48:37
<transcript>: Do I need prettier.

03:48:37
<transcript>: just i'll

03:48:41
<transcript>: Just I'll like using prettier at the top just as a format auto format.

03:48:41
<transcript>: this

03:48:44
<transcript>: This List Import Resolver.

03:48:47
jamdotexe: Use VS Code then Kappa

03:48:50
<transcript>: Type script. I don't know if I need these for the CDK specifically.

03:48:53
<transcript>: Use vs. Code.

03:49:03
<transcript>: Dax doesn't use Es lens. I think DAX knows what he's doing. He's smart, not using it. Missing up here. Isolant Import at.

03:49:05
<transcript>: Helium.

03:49:05
<transcript>: add

03:49:10
<transcript>: Add the yes length plugin import at.

03:49:15
shiftlessatol: @jamdotexe SeemsGood SeemsGood

03:49:18
<transcript>: Okay.

03:49:24
<transcript>: So now we have a working ESLint. Maybe.

03:49:35
<transcript>: The question is I need to restart this land.

03:49:37
christoph0saurus: !keyboard

03:49:37
fossabot: Adam uses a custom Mode Eighty mechanical keyboard, and has a collection of other Mode keyboards!

03:49:39
<transcript>: Guess. Lint, I'm think I'm using Esmen D, right.

03:49:48
<transcript>: Am I actually am I am I using hang on.

03:49:51
<transcript>: Here's my.

03:49:51
christoph0saurus: what switches do you have in your keyboard?

03:49:53
sockthedev: next comes with an eslint config bundled right? just move their dependency to the root of the project and add the eslint-cdk-plugin to the config

03:49:55
<transcript>: Dot file somewhere.

03:50:13
<transcript>: Else.

03:50:15
<transcript>: No LS.

03:50:18
<transcript>: No.

03:50:21
<transcript>: Ls.

03:50:22
sockthedev: i do this for remix;

03:50:24
morded__: can I post my latest project for my portfolio? I would love some feedback on it to make it better maybe.

03:50:29
<transcript>: This is so broken? Yeah? Esl and D.

03:50:34
<transcript>: Then how do I restore this? Like D.

03:50:35
<transcript>: duh

03:50:35
<transcript>: duhduh

03:50:37
<transcript>: Duhduh.

03:50:48
<transcript>: Anim uses the keyboard. Let's switches you have in your keyboard. These are the mode reflex, I think wrote, yeah, reflex switches. There's a Tactile switches from mode.

03:50:50
<transcript>: Can I post my list.

03:50:59
<transcript>: Next comes with the S one fig bundled right in. Just move it. Yeah, next figured out how to object away. I just need it for everything. I never want to touch. Yesline. Configuration ever again.

03:51:02
<transcript>: Let's see. I want to go to.

03:51:02
<transcript>: restart

03:51:06
<transcript>: Restart eslant. B. Am I doing the command, right.

03:51:15
<transcript>: Yeah, just eslm. Do you restart it? Didn't work, though, did it.

03:51:19
<transcript>: Or it didn't actually.

03:51:19
<transcript>: do this

03:51:20
<transcript>: Do this.

03:51:20
<transcript>: yes i want to make sure

03:51:22
<transcript>: Yes. I want to make sure I'm actually doing this right.

03:51:26
<transcript>: Yeah. No. Okay. Cool.

03:51:26
<transcript>: so

03:51:33
<transcript>: So restarting is not working. Lsp restart also not working there's just it's still bad.

03:51:33
<transcript>: it's still

03:51:36
<transcript>: It's still bad still don't have proper.

03:51:38
<transcript>: Yes. Let support.

03:51:43
<transcript>: Oh, I need to let's see TS? Config? What's this? What's this.

03:51:53
<transcript>: Problem here is I do something wrong.

03:51:57
<transcript>: Rules, Parser options. I wonder if this is a problem.

03:52:00
alalfakawma: !font

03:52:00
fossabot: Adam uses the Dracula theme and the Operator Mono font in VSCode.

03:52:01
<transcript>: Project TS config.

03:52:09
<transcript>: I don't have the CDK plugin in here. I guess I don't need to. I just need ESL working.

03:52:12
<transcript>: Let's let's restart in them.

03:52:18
<transcript>: Restart it right.

03:52:23
<transcript>: You working.

03:52:25
<transcript>: Hey.

03:52:34
<transcript>: Slint that's five script, but I just went D as well. Okay, cool.

03:52:39
<transcript>: Start a new project spin the entire time.

03:52:39
<transcript>: configuring

03:52:42
<transcript>: Configuring eslant prettier TypeScript, whatever.

03:52:50
<transcript>: Let's see. I'm going to.

03:52:54
<transcript>: We've got ESLint, now we've got.

03:52:54
<transcript>: prettier form

03:52:57
<transcript>: Prettier formatting. I think.

03:52:59
<transcript>: Okay.

03:53:03
<transcript>: Can I find defication file source master.

03:53:03
<transcript>: f

03:53:04
<transcript>: F.

03:53:14
<transcript>: Stack. We're going to go into our stack. Here.

03:53:17
shiftlessatol: https://dev.to/elthrasher/exploring-aws-cdk-step-functions-1d1e/#linting

03:53:20
<transcript>: Okay. This is we're going to build up our API and all that stuff.

03:53:29
<transcript>: Dared all this.

03:53:39
<transcript>: Trying to actually clean up here, look at me. So let's build a simple CDK.

03:53:39
<transcript>: backend here

03:53:40
<transcript>: Backend here.

03:53:40
<transcript>: i

03:53:43
<transcript>: I'm going to use some stuff.

03:53:48
<transcript>: That I've defined here.

03:53:51
<transcript>: Let's see.

03:53:55
<transcript>: Api stack.

03:53:58
<transcript>: That's a lot of stuff.

03:54:06
<transcript>: Let's see. We create a bucket.

03:54:12
<transcript>: Oh, Geez, this is so much.

03:54:17
<transcript>: Stream listener? What's that doing? Download DB. Stream listener.

03:54:18
<transcript>: Bucket.

03:54:18
<transcript>: distribute

03:54:20
<transcript>: Distribute.

03:54:22
<transcript>: What do I have? A distribution.

03:54:24
<transcript>: What's that for.

03:54:27
<transcript>: You guys don't know.

03:54:27
<transcript>: why would you

03:54:30
<transcript>: Why would you know? So I have a CDN.

03:54:35
<transcript>: And then here we go. Here's our table, using DynamoDB.

03:54:43
<transcript>: I should build this with DynamoDB. Shouldn't I? It's an ad guest game. I should be using DynamoDB.

03:54:49
<transcript>: Okay. Let's I just want to say that the API to start.

03:54:55
<transcript>: Web hook, Oak stripe don't need that.

03:54:57
<transcript>: Okay.

03:55:00
<transcript>: Seems.

03:55:00
<transcript>: like a

03:55:06
<transcript>: Like a lot. What I really want, though, is this I have a component that does let's see, where is it.

03:55:10
<transcript>: Hydra VTL template.

03:55:13
<transcript>: Yeah, this stuff.

03:55:13
<transcript>: extra

03:55:20
<transcript>: Extract pipeline config. I do some weird stuff here to make it a lot easier to define APIs and stuff. Thanks for the follow Dr. Strange.

03:55:22
<transcript>: Thanks so much.

03:55:25
<transcript>: Let's see.

03:55:28
<transcript>: Is over paths.

03:55:34
<transcript>: Function. Don't need that.

03:55:34
<transcript>: okay

03:55:36
<transcript>: Okay.

03:55:36
<transcript>: we're going

03:55:37
<transcript>: We're going to.

03:55:43
<transcript>: Create a table.

03:55:56
<transcript>: Equals.

03:56:00
<transcript>: Actually, let's just copy this.

03:56:00
<transcript>: table

03:56:02
<transcript>: Table name.

03:56:06
<transcript>: I'm gonna have to do a whole bunch of.

03:56:10
<transcript>: Imports, import.

03:56:14
<transcript>: Cdk.

03:56:14
<transcript>: lib

03:56:15
<transcript>: Lib.

03:56:25
<transcript>: From AWS CDK now CDK Lib.

03:56:26
<transcript>: Dynamo.

03:56:26
<transcript>: yeah

03:56:28
<transcript>: Yeah.

03:56:32
<transcript>: Okay. No value exists. I don't need a table name.

03:56:32
<transcript>: paper request

03:56:34
<transcript>: Paper request partition, key.

03:56:34
<transcript>: there's no

03:56:35
<transcript>: There's no.

03:56:35
<transcript>: expir

03:56:42
<transcript>: Expiration no replication regions, and y'all have a stream on it. Okay.

03:56:43
<transcript>: There's a table.

03:56:53
<transcript>: I'll add some GS eyes to it. We'll just do two for now.

03:57:00
<transcript>: And then let's see. I need an API.

03:57:04
<transcript>: I don't need a CDN.

03:57:07
<transcript>: Or a bucket.

03:57:07
<transcript>: that i'm aware

03:57:09
<transcript>: That I'm aware of.

03:57:09
<transcript>: well

03:57:12
<transcript>: Well is this distribution.

03:57:15
<transcript>: Hosted zone.

03:57:15
<transcript>: yeah i guess

03:57:20
<transcript>: Yeah. I guess I'll eventually have it like API to be a Guess.com, but for now.

03:57:22
<transcript>: I don't need that.

03:57:27
<transcript>: I don't remember what I mean is the CDN for.

03:57:32
<transcript>: Okay, here's our AppSync, authorizer.

03:57:34
<transcript>: It's just so much complex, complexity.

03:57:37
<transcript>: For Cell data source.

03:57:37
<transcript>: what

03:57:39
<transcript>: What does that do.

03:57:39
<transcript>: oh yeah

03:57:42
<transcript>: Oh, yeah? And I know what that does.

03:57:49
<transcript>: I need to pull this in a construct. This is bad.

03:57:52
<transcript>: Subscribe.

03:57:56
<transcript>: Unsubscribe. I don't need those.

03:58:01
<transcript>: Signed URLs might need those.

03:58:07
<transcript>: Okay.

03:58:10
<transcript>: So don't need most of that. Just need.

03:58:10
<transcript>: the actual

03:58:12
<transcript>: The actual API.

03:58:15
<transcript>: Which is up here.

03:58:15
<transcript>: the app sy

03:58:17
<transcript>: The App Sync authorizer.

03:58:17
<transcript>: the dynamo

03:58:19
<transcript>: The DynamoDB data source.

03:58:27
<transcript>: Let's see.

03:58:35
<transcript>: Oh, I'm read. No.

03:58:39
<transcript>: There we go.

03:58:44
<transcript>: Let's see. App Sync authorizer is a node JS functions when you go here.

03:58:44
<transcript>: and

03:58:48
<transcript>: And import node JS function.

03:58:54
<transcript>: From Ads CDK Lib node.

03:58:58
<transcript>: Okay.

03:59:01
<transcript>: And let's see.

03:59:01
<transcript>: run

03:59:03
<transcript>: Runtime using Fort. Lambda.

03:59:18
<transcript>: Duration. I bet I can just code action. These.

03:59:21
<transcript>: Yeah.

03:59:26
<transcript>: Next. Just secret. What's that about? I don't need a secret.

03:59:26
<transcript>: exc

03:59:31
<transcript>: Excuse secret. Oh yeah yeah, I do the authorizer. Yeah, yeah okay.

03:59:33
standardrobot: secret shhhhhh

03:59:33
<transcript>: What to do with the table name, though.

03:59:45
<transcript>: Format so we need a secret.

03:59:50
<transcript>: Next to a secret.

03:59:55
<transcript>: Here.

04:00:06
<transcript>: Next is secret.

04:00:06
<transcript>: equals

04:00:08
<transcript>: Equals.

04:00:14
<transcript>: I can just generate a new secret actually.

04:00:17
<transcript>: I can just generate a new secret.

04:00:28
<transcript>: Yeah.

04:00:30
<transcript>: Like.

04:00:34
<transcript>: Integration secret.

04:00:39
<transcript>: No, I want a new, new secret.

04:00:48
<transcript>: Where do I do that.

04:00:48
<transcript>: i'm creating

04:00:50
<transcript>: I'm creating a secret here somewhere.

04:00:55
<transcript>: I think for the Fall, Spartan.

04:01:01
<transcript>: Next is I am user. Can I go to that definition.

04:01:04
<transcript>: Now go to that definition.

04:01:04
<transcript>: okay

04:01:05
<transcript>: Okay.

04:01:05
<transcript>: it's in here

04:01:08
<transcript>: It's in here. Next. Js. I am user right here.

04:01:16
<transcript>: That's a secret. Generate secret string? Yeah, it's like this. So secrets, manager, I need to go up here and import.

04:01:18
<transcript>: Import import.

04:01:21
<transcript>: From.

04:01:26
<transcript>: Secret manager? Yeah.

04:01:26
<transcript>: okay

04:01:30
<transcript>: Okay. And then down here.

04:01:30
<transcript>: next

04:01:32
<transcript>: Next is secret would be.

04:01:36
<transcript>: Nope.

04:01:40
<transcript>: Secrets, secret.

04:01:42
<transcript>: None of this.

04:01:50
<transcript>: It's just a new secret, right.

04:01:59
<transcript>: Okay, new secret. This.

04:02:03
<transcript>: Next secret secret.

04:02:03
<transcript>: this is for shit

04:02:08
<transcript>: This is for shit. This is a shared seeker for off. So it's just a secret that I use.

04:02:08
<transcript>: who's calling me

04:02:09
<transcript>: Who's calling me.

04:02:09
<transcript>: secrets i

04:02:11
<transcript>: Secrets I use for.

04:02:11
<transcript>: the lam

04:02:15
<transcript>: The Lambda authorizer to recognize calls from my next JS app.

04:02:21
<transcript>: And I need to do all this stuff. And it's a generate secret string.

04:02:25
<transcript>: Let's see.

04:02:28
<transcript>: Dinner.

04:02:28
<transcript>: key

04:02:30
<transcript>: Key? No.

04:02:32
<transcript>: String key.

04:02:34
<transcript>: Secret.

04:02:38
<transcript>: Now, I don't need all that.

04:02:43
<transcript>: Template access key. And I don't need that.

04:02:45
<transcript>: And in fact, I don't need any of this.

04:02:52
<transcript>: Kind of generate a secret value. I think it automatically does this.

04:02:52
<transcript>: i don't think i need to

04:02:53
<transcript>: I don't think I need to do this.

04:03:04
<transcript>: Yeah. There we go. Okay. Just default. Yeah, that's fine.

04:03:06
<transcript>: In fact.

04:03:09
<transcript>: If you have secret there we go.

04:03:11
<transcript>: And then this.

04:03:17
<transcript>: Delete all that okay.

04:03:21
<transcript>: Format? Esm.

04:03:21
<transcript>: function

04:03:24
<transcript>: Function? Ts? Config? Js.

04:03:26
<transcript>: Sentry now.

04:03:28
mlodszy_pumbus: what do you think about Sprints?

04:03:33
<transcript>: Secrets manager client. I'm going to be lived on a movie. Next off. Okay. I need to add all that stuff.

04:03:38
<transcript>: Oh, man. So much to do. A stand on this up. It is not.

04:03:38
<transcript>: it is not a

04:03:41
<transcript>: It is not a fast author time experience.

04:03:45
<transcript>: Not in the least.

04:03:48
<transcript>: Asset runtime.

04:03:48
<transcript>: difference

04:03:49
<transcript>: Difference.

04:04:08
<transcript>: Okay. So this allows.

04:04:08
<transcript>: appth sync

04:04:10
<transcript>: Appth sync.

04:04:10
<transcript>: to inv

04:04:11
<transcript>: To invoke.

04:04:13
<transcript>: Our.

04:04:19
<transcript>: Next JS or Sorry, our Lambda authorizer. And then we're going to create a new graphical API.

04:04:24
<transcript>: I actually need to add that module. Okay, let's add some modules.

04:04:27
<transcript>: That models.

04:04:34
<transcript>: Pmpm Ad and these aren't development. These are real.

04:04:38
<transcript>: Let's see.

04:04:42
<transcript>: Dependent.

04:04:45
<transcript>: On.

04:04:50
<transcript>: Can I paste it.

04:04:53
<transcript>: Copy.

04:04:57
mlodszy_pumbus: because you looks a little tired (no offence)

04:04:57
<transcript>: Paste. There we go. And I need this one.

04:05:03
<transcript>: And I need.

04:05:10
<transcript>: This one. Oh, I actually do I need API Gateway version two. I don't know why I have that in there.

04:05:13
<transcript>: Now. I don't think I need that.

04:05:13
<transcript>: okay

04:05:15
<transcript>: Okay actually undo.

04:05:19
<transcript>: Pmpm, and.

04:05:24
<transcript>: Pmpm.

04:05:24
<transcript>: and just

04:05:26
<transcript>: And just this one.

04:05:28
<transcript>: Happy.

04:05:31
<transcript>: This one.

04:05:36
benanna19: He does wake up at 3am his time though so it would make sense

04:05:40
<transcript>: Is three. Not only that client secrets Manager, I do need that.

04:05:45
<transcript>: And live DynamoDB.

04:05:51
<transcript>: What do you think about sprints.

04:05:53
<transcript>: sprintsy

04:05:53
<transcript>: sprintsy welcome

04:05:54
cowfacedude99: Sorry Adam. gonna watch prime. he is getting live tutorial from creator of astro :(

04:05:59
<transcript>: Sprintsy. Welcome to Chat. You look a little because you look like a little tired. No fence.

04:06:10
<transcript>: Oh, you're good. Coffee. Oh, it's Prime's on. You should definitely watch prime getting a live tutorial from creator of Astro. Oh, Fret's on OOH, that sounds super fun.

04:06:10
<transcript>: yeah

04:06:15
<transcript>: Yeah. I was gonna wrap up here in, like, ten minutes anyway. See you Cafes. I'll probably see you on Prime Stream. I'll be lurking.

04:06:23
<transcript>: What do I think about Sprint's? I don't know. I work alone. So not really into.

04:06:23
<transcript>: methodologies

04:06:25
<transcript>: Methodologies of any sort.

04:06:27
<transcript>: Just kind of build.

04:06:32
<transcript>: They're means Prime's, gonna learn.

04:06:32
<transcript>: in neil

04:06:38
<transcript>: In Neil Them how to work with Astro if the LSP is better than I realize maybe it's better than I know.

04:06:46
<transcript>: Let's add these Missy client PMPM Add Smithy clients.

04:06:46
<transcript>: and

04:06:47
<transcript>: And let's add.

04:06:50
<transcript>: A SK.

04:06:52
<transcript>: skype

04:06:52
<transcript>: skypes

04:06:53
<transcript>: Skypes.

04:06:55
<transcript>: Just like that.

04:06:57
<transcript>: Okay.

04:07:01
<transcript>: Over here now. I can.

04:07:05
<transcript>: Api GraphQL API can actually import that now.

04:07:08
<transcript>: Let's be restart.

04:07:09
jamdotexe: Just type the code, open it in VS Code later and fix problems :)

04:07:15
<transcript>: Code later and fix problems.

04:07:19
<transcript>: Funny.

04:07:23
<transcript>: No, I cannot import that. I guess I have to.

04:07:23
<transcript>: do

04:07:25
<transcript>: Do this.

04:07:27
<transcript>: Like.

04:07:27
<transcript>: import

04:07:29
<transcript>: Import.

04:07:29
<transcript>: all

04:07:32
<transcript>: All as app sync.

04:07:32
<transcript>: from

04:07:33
<transcript>: From.

04:07:33
<transcript>: aw

04:07:37
<transcript>: Aws, yeah, app to golf.

04:07:42
<transcript>: I've got a graph field API named.

04:07:44
<transcript>: Yeah.

04:07:44
<transcript>: auth

04:07:47
<transcript>: Authorization thing. Lambda.

04:07:47
<transcript>: and then

04:07:57
<transcript>: And then Appsink Authorizer five minutes. Yeah, it's a cashier for five minutes. Cool. Schema is generated. Schema Graphico Cool, Cool, cool, cool, cool, cool, cool.

04:07:59
<transcript>: All right.

04:07:59
<transcript>: so i'm

04:08:09
<transcript>: So I'm just getting started here. It's a new repo altogether. It's turbo repo. It's the CDK. And next 13, I'm rebuilding.

04:08:09
<transcript>: rebuild

04:08:17
<transcript>: Rebuilding. Aw, guess because I'm tired of the runtime slowness, and I'm gonna work with fast stuff.

04:08:17
<transcript>: so

04:08:19
<transcript>: So that's what I'm doing.

04:08:19
<transcript>: but it's

04:08:23
<transcript>: But it's gonna be a slog? Could be a bit of a slog.

04:08:23
<transcript>: i'll probably get

04:08:25
jamdotexe: I like neovim and the idea of it, I just don't need to be spending a lot of time configuring my editor, when I work with quite a few languages / frameworks

04:08:28
<transcript>: I'll probably get some of this done offstream so that when I start back up, I'm working on actual features again.

04:08:35
gunslinger047: whats the gist of the project

04:08:38
<transcript>: Like nail vim and the idea of it. I just don't need to be spending a lot of time configuring my editor when I work with quite a few languages frameworks. It's been really fast actually to add new languages and frameworks except.

04:08:38
<transcript>: some things just

04:08:42
<transcript>: Some things just don't have support. Like I don't know if Astro Z is really.

04:08:42
<transcript>: where needs to be

04:08:45
<transcript>: Where needs to be to work with it in any of them.

04:08:45
<transcript>: what's the gist of this project

04:08:49
<transcript>: What's the gist of this project, Gunslinger? It's AWS, guessing game.

04:08:49
<transcript>: you can

04:08:54
<transcript>: You can you see like AWS Service images and you have to guess what the service is.

04:08:54
<transcript>: i'm gonna

04:09:01
<transcript>: I'm gonna build like a leaderboard and like all kinds of stuff. Eventually, I'm trying to do it before reinvent, which is the end of the month.

04:09:01
<transcript>: so

04:09:02
<transcript>: So.

04:09:07
<transcript>: That's the problem. That's the project. Thank you everybody, for coming today. It's been.

04:09:07
<transcript>: fun

04:09:08
maleero: It's not guessing if you know. Kappa

04:09:09
<transcript>: Fun as always.

04:09:13
<transcript>: Yeah. Maybe we could do it again sometime.

04:09:20
dota2dev: see ya

04:09:27
jamdotexe: Peace

04:09:29
daglee: Raid cancelled?! D:

04:09:32
benanna19: See ya

04:09:43
gunslinger047: peace

04:09:47
daglee: Cya

04:10:10
morded__: take care