

12:00:43
<transcript>: You.

12:02:03
<transcript>: Listen, I paid for Twitter Blue. Okay, calm down. Stop, stop. You're making fun of me. I can see it and see it behind the glass.

12:02:05
<transcript>: Stop.

12:02:05
<transcript>: don't

12:02:06
<transcript>: Don't judge me.

12:02:23
<transcript>: Listen, I paid for Twitter, blue. Okay.

12:02:24
<transcript>: Touch me.

12:02:28
<transcript>: I didn't do it for the check Mark. I don't want the check Mark.

12:02:40
<transcript>: I just pay for stuff that I use and I use Twitter and I like it a lot. And if I get extra things for paying them money, I will pay them money 100% of the time.

12:02:48
<transcript>: If I could turn off the check Mark, I turn off a check Mark. And I know like everybody, everybody is saying the same thing. Don't judge me.

12:02:50
<transcript>: What I'm paying for it.

12:02:50
<transcript>: it is

12:02:53
<transcript>: It is $20 month. I'd still pay for it.

12:02:57
<transcript>: I don't want to be.

12:03:04
<transcript>: A white guy with 100 followers that has a check Mark. I just don't.

12:03:07
<transcript>: I'm still paying for Twitter, blue.

12:03:07
<transcript>: stop

12:03:08
<transcript>: Stop judging.

12:04:45
<transcript>: Music? I'm paying for 20.

12:05:05
<transcript>: Listen, I'm paying for Twitter blue don't judge me.

12:05:13
<transcript>: I don't want the check Mark. The last thing in the world I want is to be a white guy with 100 followers in a checkmark.

12:05:13
<transcript>: it's like

12:05:18
<transcript>: It's like literally the last thing I would ever want to be. If I could turn off the checkmark, I would turn off the check Mark.

12:05:23
<transcript>: Why would I pay for Twitter Blue? Because if there's a thing I use a lot and I like a lot.

12:05:23
<transcript>: and i can

12:05:26
<transcript>: And I can pay money to get a better.

12:05:26
<transcript>: thing

12:05:32
<transcript>: Thing than I will always 100% of the time I would pay Twitter $50 a month.

12:05:32
<transcript>: because

12:05:37
<transcript>: Because it's basically the only place I hang out online except for Twitch. So Twitch.

12:05:37
<transcript>: if you start

12:05:41
<transcript>: If you start, I do pay for Twitch. Never mind.

12:06:03
<transcript>: Paying for Twitter Blue Don't judge me.

12:06:06
<transcript>: Don't want the check Mark. It's not. It's not about the check Mark.

12:06:14
<transcript>: The last thing the world I want to be is a white guy with 100 followers in a checkmark. I promise it's the last thing.

12:06:30
<transcript>: Why would I pay for Twitter Blue? Because when you use a thing a lot and you really like that thing and then they have a subscription where you can pay more to get a better version of that thing. I'm gonna pay for it 100% of the time.

12:06:30
<transcript>: don't touch me

12:06:31
<transcript>: Don't touch me.

00:02:49
j3sus_h: PowerUpL ending9Hype PowerUpR ending9Hax ending9Hax ending9Hax ending9Hax ending9Hax

00:08:48
fragaverage: catJAM catJAM catJAM

00:09:07
oetziofficial: hello :)

00:10:13
<transcript>: Check one to check, check, check.

00:10:56
<transcript>: Let's go, Jesus said.

00:10:56
<transcript>: frag

00:10:59
<transcript>: Frag oh, Etsy, Hello.

00:10:59
<transcript>: hello

00:11:01
<transcript>: Hello to you all.

00:11:07
assertionbit: Hi there

00:11:08
<transcript>: Good day. It's so good to see you frag early when I first start my stream. So I got used to.

00:11:12
<transcript>: Not gonna lie. I'm not if I'm not a little disappointed when it doesn't happen.

00:11:12
<transcript>: but

00:11:13
ghostyx101: hey

00:11:18
<transcript>: But feels really good when it does assertion bit what's going on? Ghosties here.

00:11:27
<transcript>: We're doing the serverless thing today. I made some progress yesterday. I did have some stuff. I had some dental work I did yesterday.

00:11:27
<transcript>: i didn't

00:11:31
<transcript>: I didn't do the work. The dentist did work on me.

00:11:33
papagebu: hello hello hello

00:11:35
<transcript>: Yeah. Picture your teeth. You know.

00:11:35
<transcript>: just take

00:11:39
tayloreddev: argh dentist

00:11:39
<transcript>: Just take care of him. Welcome to Chat, Papa, Papa, Gaboo.

00:11:41
<transcript>: Gaboo.

00:11:41
<transcript>: taylor's here

00:11:42
<transcript>: Taylor's here.

00:11:47
arcen___: hello

00:11:51
<transcript>: I do wonder if drinking these hot drinks is helping my dental situation. Sometimes I think that might be part of my problem. I don't know.

00:11:54
<transcript>: Welcome to Chat, Arson. Hello.

00:11:56
benanna19: ðŸ‘‹

00:12:03
<transcript>: So I made some progress. We've got the test harness running.

00:12:03
<transcript>: figured out

00:12:05
<transcript>: Figured out why I couldn't.

00:12:10
wannabezizou2: Hello

00:12:11
<transcript>: Why I couldn't replicate to my global tables. I couldn't create global replicas it's because.

00:12:11
<transcript>: in

00:12:14
papagebu: wow, you pronounce the name correctly

00:12:15
<transcript>: In DynamoDB in order to make a replica in another region.

00:12:15
<transcript>: they

00:12:18
<transcript>: They have to have the same.

00:12:28
<transcript>: Right throughput limit and read through it. They have the same quotas. If they don't have the same quotas, you can't create a replica and I got upgraded quotas in US East one.

00:12:28
<transcript>: and

00:12:29
<transcript>: And.

00:12:37
fragaverage: First time chatters everywhere HeyGuys

00:12:38
<transcript>: So I couldn't so I have to get those quotas added to the other regions and then I can make it multiregion. Banana. What's going on? Arson.

00:12:38
<transcript>: did i say

00:12:41
<transcript>: Did I say that I did.

00:12:46
<transcript>: Wanna bezazoo welcome to chat as well.

00:12:46
<transcript>: wow you pronounce

00:12:54
<transcript>: Wow. You pronounce the name correctly. Did I really Papa Gaboo the first time or the second? I think I tried it two different. I think I just. I tried two different versions.

00:12:57
<transcript>: Papa Gaboo. I think I'm saying it right.

00:12:57
<transcript>: that never

00:12:59
<transcript>: That never happens.

00:12:59
<transcript>: so

00:13:05
<transcript>: So consider yourself very fortunate that I did not bought your name horribly, because typically I do.

00:13:05
<transcript>: a lot

00:13:08
<transcript>: A lot of first time chatters frag I know.

00:13:08
<transcript>: it's pretty cool

00:13:10
<transcript>: It's pretty cool. The thing about Twitch.

00:13:13
<transcript>: There'll be like a hundred of you watching.

00:13:13
<transcript>: and like

00:13:14
<transcript>: And like.

00:13:14
<transcript>: throughout the

00:13:28
<transcript>: Throughout the day. When I look at the streams stuff afterward, it's like 1500 people came at some point and left. So I'm meeting all kinds of new people every day. You just come and go. It's pretty cool in The Fear. Thank you for the song. I appreciate that.

00:13:33
<transcript>: So we'll look at the diagram. I'll show over what I'm doing again, because.

00:13:33
<transcript>: probably

00:13:36
<transcript>: Probably again a lot of new people every day.

00:13:36
<transcript>: and you have no idea

00:13:38
<transcript>: And you have no idea what I'm doing.

00:13:38
<transcript>: and we're doing

00:13:41
<transcript>: And we're doing a weird thing, which makes it even harder.

00:13:45
<transcript>: At a high level.

00:13:45
<transcript>: we're just trying to

00:13:48
<transcript>: We're just trying to build a Twitter API.

00:13:51
<transcript>: With Serverless tech.

00:13:51
<transcript>: that

00:13:52
<transcript>: That.

00:13:52
<transcript>: can sustain

00:13:54
<transcript>: Can sustain Twitter.

00:13:54
<transcript>: sc

00:13:59
<transcript>: Scale Twitter Volume if you will so Twitter.

00:14:16
<transcript>: Best icon figure best I've found on the Internet is I do like there's 100 tweets per second on Twitter and they burst. That's an average they burst up to 1500 tweets per second. That's the record is like 160 something thousand. So can we with only serverless tech.

00:14:16
<transcript>: build

00:14:16
papagebu: yeah, it's malay. gebu means fluffly

00:14:26
<transcript>: Build a Twitter API clone that meets those requirements and then test it and actually sustain those levels. That's what we're gonna find out.

00:14:30
<transcript>: It means.

00:14:30
<transcript>: fluffy

00:14:31
<transcript>: Fluffy.

00:14:32
<transcript>: Interesting.

00:14:37
<transcript>: Fluffy and Fluffy, fluffy. Thank you for the follow.

00:14:40
sargath666: salut!

00:14:41
sumatras: Do you have access to the Firehose of Twitter?

00:14:45
papagebu: fluffy*

00:14:45
<transcript>: Pop a Fluffy thank you for your first time chats. Welcome to Chat. Sorry, guys, this year.

00:14:45
<transcript>: do i have access

00:14:48
<transcript>: Do I have access to the firehouse of Twitter.

00:14:48
<transcript>: so much as no

00:14:57
<transcript>: So much as no, we're just our test harness. Just fakes it. We're just making a bunch of fake data and pumping it into my API and seeing what levels we can sustain.

00:15:03
<transcript>: So now I'm not actually using real Twitter.

00:15:05
<transcript>: Fire hose data.

00:15:09
<transcript>: Just faking it.

00:15:14
<transcript>: Oh, fluffy. Oh, it means fluffy. That makes more sense. So fluffy and fluffy.

00:15:25
<transcript>: Anything talk about. I wanted to kind of finish my hot drink before I start typing because this mug won't keep it hot and.

00:15:25
<transcript>: once i start to

00:15:29
<transcript>: Once I start to start typing, it'll go cold, so I'm hanging out here until it's done.

00:15:39
<transcript>: Thursday, Thursday. I'm gonna make a video about this thing, so I gotta finish it today. We gotta finish the Twitter API thing.

00:15:39
<transcript>: today

00:15:40
<transcript>: Today.

00:15:40
<transcript>: so i can make

00:15:43
<transcript>: So I can make a video tomorrow.

00:15:43
<transcript>: i don't know why i'm saying

00:15:44
<transcript>: I don't know why I'm saying everything.

00:15:44
<transcript>: like this

00:15:46
<transcript>: Like this.

00:15:54
<transcript>: I had a dream.

00:15:57
<transcript>: I woke up.

00:16:01
<transcript>: Like 2 hours before my alarm and.

00:16:01
<transcript>: then like

00:16:03
<transcript>: Then like.

00:16:03
<transcript>: i didn't have

00:16:12
<transcript>: I didn't have to pee. I don't remember why I woke up, but I kind of settled back in and fell asleep and I had a dream in that last 2 hours of my sleep about starting my stream.

00:16:12
<transcript>: and

00:16:21
<transcript>: And what was it? It was like I came down here and I got everything set up, and I started the stream and something happened. Oh, yeah, Yeah.

00:16:21
<transcript>: i started

00:16:27
<transcript>: I started the stream. All of you showed up during the Loading that you lose.

00:16:43
<transcript>: On. Let's go for, like, 15 minutes, and I'm still trying to get something set up. It's like that dream where you can't go or you can't get your pants on to leave. It's like I couldn't get everything ready to start the stream.

00:16:43
<transcript>: and then

00:16:45
<transcript>: And then my my wife.

00:16:45
<transcript>: came in

00:16:49
<transcript>: Came in or she got home from something or something. And she was like.

00:16:49
<transcript>: you can't

00:16:51
<transcript>: You can't stream today. I need you to do this.

00:16:51
<transcript>: and i was like

00:16:54
<transcript>: And I was like, oh, man, this is. This is bad.

00:16:54
<transcript>: i just had

00:17:05
<transcript>: I just had to, like, send a message and chat like, Sorry, everybody, I can't dream by and I never came on so I made you all wait in my dream. I don't know what that means.

00:17:05
<transcript>: anybody

00:17:09
<transcript>: Anybody like Do Dream psychology when I tell me what that means.

00:17:14
shintaii84: I have that dream with never getting my software to run.. espcially when i have many many things to do. Funny how the brains work.

00:17:16
<transcript>: If it helps, it was kind of a nightmare.

00:17:18
<transcript>: I woke up like almost in a sweat.

00:17:25
<transcript>: Shintale. Welcome to Chat. Or sorry she didn't tally. Nope. Gentie.

00:17:25
<transcript>: i have that

00:17:33
<transcript>: I have that dream with never getting my software to run, especially when I have many, many things to do. Funny how the brains work. It is funny. Dreams are crazy.

00:17:33
papagebu: you know when you love streaming when even you stream in your dream

00:17:36
papagebu: hahaha

00:17:48
<transcript>: What's fun I've got. I've got kids. And I've got a three year old. And it's fun to listen to him. Now. He's old enough that he's starting to, like, describe that he had a dream, but he doesn't even know how to describe it. He'll just, like, say, last night.

00:17:48
<transcript>: we were doing

00:17:55
<transcript>: We were doing and he'll say some crazy thing we were doing that happened last night. And like that did not happen. That's called a dream.

00:18:02
<transcript>: But like when there are very little and they can't really comprehend what is happening at night.

00:18:02
<transcript>: why they're having

00:18:05
<transcript>: Why they're having these movies play in their brain.

00:18:05
<transcript>: you know

00:18:09
<transcript>: You know when you love streaming, when even you stream in your dream That's right, Papa.

00:18:15
<transcript>: I'm gonna call you Poppin. It's gonna be weird because I had a Papa.

00:18:15
<transcript>: he passed away

00:18:17
<transcript>: He passed away in the last couple years.

00:18:21
<transcript>: So every time I say it? I'm gonna think of my Papa.

00:18:21
shintaii84: DreamStream 2.0

00:18:25
<transcript>: And that's that's something. Dream. Stream 20.

00:18:30
<transcript>: Right. We're almost done.

00:18:30
<transcript>: i'm close

00:18:33
<transcript>: I'm close I'm not gonna try and tip it and show you.

00:18:36
<transcript>: But we're close.

00:18:39
sargath666: Recently I dreamed that I don't have hands, and I couldn't reach anything. That was creep as hell.

00:18:40
<transcript>: Almost finished. And then we'll actually start doing stuff.

00:18:48
<transcript>: I should turn that you don't have hands. Couldn't reach anything.

00:18:51
<transcript>: That sounds awful.

00:18:56
daglee: Do we still have any credits on AWS? Or is the project complete?

00:18:58
fragaverage: Christ LUL

00:19:12
<transcript>: Normally, I have a lot to talk about right now, and I feel like the days that I'm trying to drink my drink and it takes forever. I have nothing to say. We still have any credits on AWS, or is the project complete? Daglie, we are. We're just. We're just getting ready to turn on the thing. Yesterday, I got the test harness kind of working.

00:19:12
<transcript>: or the test

00:19:16
<transcript>: Or the test infrastructure that kind of peppers it from Lambda.

00:19:25
<transcript>: I've got a few things done I've got follow and unfollow and beat like, right a beat oh, yeah the thing is called bitter and you don't tweet you beat.

00:19:30
<transcript>: Bitter beats the vegetable, the root vegetable. They're bitter.

00:19:39
<transcript>: So I've got where you can ride a beat where you can follow an unfollow you can get a profile.

00:19:56
<transcript>: We got a few more API things to build out. I have to actually implement the API, and then we can start turning it on at high levels and see what falls over first. Like this is not a question of will it fall over it's, what will fall over? And will we be able to determine what is falling over at higher volume.

00:19:56
<transcript>: that's a question

00:19:58
<transcript>: That's a question. It's like an observative.

00:19:58
<transcript>: problem

00:20:00
<transcript>: Problem. It's a quote up.

00:20:00
<transcript>: a lot of those things

00:20:03
<transcript>: A lot of those things, but we'll figure it out.

00:20:07
<transcript>: Alright.

00:20:08
<transcript>: Good enough.

00:20:08
<transcript>: here we go

00:20:11
<transcript>: Here we go. Let's do it.

00:20:18
<transcript>: First thing first things first. We gotta have some music. Why am I looking at this screen? This is the one.

00:20:20
<transcript>: Alright.

00:20:23
<transcript>: Music.

00:20:27
<transcript>: Is gonna take me to a place I don't want to go.

00:20:31
<transcript>: Like this place. Let's put it over.

00:20:34
<transcript>: Here with Dino base.

00:20:36
<transcript>: Okay.

00:20:36
<transcript>: streaming

00:20:38
<transcript>: Streaming.

00:20:43
<transcript>: Here we go.

00:20:43
<transcript>: and

00:20:47
<transcript>: And where I'm shuffle first thing feeling crazy.

00:20:51
<transcript>: Let's see.

00:21:00
ghostyx101: sorry if its been overasked, wht is the cli font?

00:21:03
<transcript>: This is my event. Trip trigger. A Cron trigger. Which is dumb. I realized later that was dumb. I don't need to do that.

00:21:05
<transcript>: I just don't need to.

00:21:14
<transcript>: Sorry it's been over. Ask what's the CLI font? It is operator mono. And you're fine. I don't mind. It doesn't get asked that much anymore.

00:21:20
<transcript>: Okay. So here is our table. It's got a bunch of pro files and follows.

00:21:24
<transcript>: The Bitter table.

00:21:36
<transcript>: Oh, I said I'd show you the diagram. This is probably good for anybody who doesn't know what working on here is.

00:21:36
<transcript>: here

00:21:37
<transcript>: Here is the architecture.

00:21:37
<transcript>: we're gonna

00:21:41
<transcript>: We're gonna change this. It's not gonna be event. Bridge.

00:21:48
<transcript>: Maybe the CLI we're just gonna we're gonna pet for this thing from the CLI so that I can kind of control.

00:21:48
<transcript>: what

00:21:51
<transcript>: What regions? And how fast.

00:21:53
<transcript>: So okay.

00:21:58
<transcript>: We do have to do the Cloud Watch custom metrics today. That's not done.

00:22:06
<transcript>: Let's see. I can't move into the other regions. So we get the DynamoDB quotas increased. But here's how it works.

00:22:06
<transcript>: users

00:22:08
<transcript>: Users would be hitting.

00:22:08
<transcript>: this ap

00:22:10
<transcript>: This. Api. Bitter. Fy.

00:22:10
<transcript>: to graphql

00:22:13
<transcript>: To GraphQL. Api.

00:22:13
<transcript>: powered by

00:22:14
<transcript>: Powered by App. Sync.

00:22:19
<transcript>: They would hit it with a mutation like beat, and then they'd have some text in that beat.

00:22:27
<transcript>: They log in with a simple it's a jot token. It's just like a jot token that I'm faced right now. There's no off system.

00:22:27
<transcript>: just

00:22:29
<transcript>: Just. I generate an off token.

00:22:29
<transcript>: and that's

00:22:49
<transcript>: And that's how they interact with the API. Let's see. Usc Swan, this is multiregion. So Route 53 wrapped it to the right region closest to the user. It first hits an API gateway. That's just a proxy. It has to do with how AppSync works. Multiregion. And you have to have an API gateway proxy. So that sucks. We're probably going to hit quotas that are related to that proxy. And that's going to be a bummer.

00:22:49
<transcript>: and

00:23:09
<transcript>: And it adds a little bit of latency. Just it sucks. I wish that there was a way around it. Maybe there will be reinvents coming. So that hits appsink. There's a custom authorizer, which is Lambda function that hits Secrets Manager to get a shared secret with the thing that created the jot token. So we signed a jot token, and now we're verifying that job token here with Secrets manager.

00:23:09
<transcript>: well in the

00:23:17
<transcript>: Well in the Lambda function, but the secret is stored in secrets manager. So we have to worry about that limit which is 5000 /second.

00:23:20
<transcript>: And then what then we do a put item on the beats table.

00:23:27
<transcript>: We actually it's a transaction where we we put item in the Beats table. But we also.

00:23:29
<transcript>: Increment your beat count.

00:23:29
<transcript>: and then

00:23:42
<transcript>: And then that streams into a Lambda function stream handler that does put items into all of your followers timelines so that we can have fast reads at whatever scale. Okay. So that's that's what we're building.

00:23:48
<transcript>: That is it.

00:23:54
<transcript>: And then we're gonna test it at stupid levels, like we're gonna start with 100 tweets per second.

00:23:54
<transcript>: and we're gonna see how

00:23:56
<transcript>: And we're gonna see how high, how high can we go.

00:24:00
<transcript>: For the follow Shy Vests Shivas.

00:24:07
<transcript>: Alright. So first thing we need to do. Actually, I implemented. Let's see. I implemented the beat.

00:24:07
<transcript>: request

00:24:14
<transcript>: Request handler. Okay, so what thing you need to understand? All this is being built with VTL.

00:24:16
<transcript>: Vtl velocity.

00:24:16
<transcript>: template language

00:24:17
fragaverage: How can we do 10k per sec with only a 5k per sec quota on secrets manager? I am confuse

00:24:19
<transcript>: Template language. It's an Apache technology.

00:24:19
<transcript>: i think it's open source

00:24:25
<transcript>: I think it's open source. I don't know. It has long, weird history or like compete with JavaScript in the early web.

00:24:25
<transcript>: but

00:24:32
<transcript>: But today it's used by several of these AWS services like API, Gateway and AppSync.

00:24:32
<transcript>: for defining

00:24:40
<transcript>: For defining templates that like handle a request and interact with some other AWS service. Basically.

00:24:40
<transcript>: that's

00:24:49
<transcript>: That's very crude definition, but that's how you can think of it anyway. My editor has no concept of VTL files, so it's just a bunch of text.

00:24:49
<transcript>: looks awful

00:25:01
<transcript>: Looks awful sorry. Dev experience is bad. Performance is fantastic. And this is how we're probably going to be able to scale past 100 tweets a second. Well, I say that we're gonna hit the AppSync limit real fast.

00:25:06
<transcript>: We're gonna hit the absent limit, like immediately, because.

00:25:09
<transcript>: They haven't responded to my quota request.

00:25:09
<transcript>: let's look

00:25:10
<transcript>: Let's look.

00:25:16
<transcript>: Limit increase.

00:25:23
<transcript>: Or did they actually let's see what they did.

00:25:37
<transcript>: Usually for quoting increase of this type. Oh, man, I have to do something. I'll need to collaborate with servers name for approval, subscribe the application in use case what requests per second.

00:25:45
<transcript>: Oh, I miss this. I was trying to request a hundred thousand.

00:25:45
<transcript>: i also real

00:25:49
<transcript>: I also realized I need to do it in like five regions and not just shoots each one.

00:25:54
<transcript>: Maybe.

00:26:01
<transcript>: How can we do ten 0 /second with only a five 0% quote on Secrets manager.

00:26:01
<transcript>: because secrets are

00:26:11
<transcript>: Because secrets are manager. Frag is not hit every request it's cached for every jot token for every authorization header. It's cash for five minutes.

00:26:15
<transcript>: So when a user hits the API the first time.

00:26:15
<transcript>: like

00:26:21
<transcript>: Like if a bunch if a hundred thousand users were all hitting Earth, 60 users were all hitting.

00:26:21
<transcript>: the api

00:26:23
<transcript>: The API for the first time in that session.

00:26:23
<transcript>: then

00:26:31
<transcript>: Then yes, we would exceed the secret spans list, but it would fail to retrieve the secret and then.

00:26:31
<transcript>: no yeah

00:26:32
fragaverage: ooooh okay perfect

00:26:36
<transcript>: No. Yeah, it would just return in there. We need to handle that gracefully. We need to actually.

00:26:46
<transcript>: Handle back off and like, export retries and all that exponential. We need to do that. I haven't done that yet. So we'll have to do that.

00:26:46
<transcript>: but

00:26:59
<transcript>: But the point is that's just the first request that an authorization header makes, and then that result. The result. The Resolver context in AppSync is stored in cash for five minutes. Okay.

00:27:03
<transcript>: So that limit won't be a major problem. I don't think.

00:27:10
<transcript>: This one will we can only do 2000 requests a second on app sync, so we've got to we've got to get this increased. I'm gonna have to respond to this now.

00:27:17
<transcript>: And maybe I can get on chat. Oh, let's get on chat.

00:27:21
<transcript>: Oh, I have to actually, like, say something first.

00:27:25
<transcript>: Describe the application use case what new request.

00:27:25
<transcript>: per second

00:27:41
<transcript>: Per second are you requesting describe the anticipated weekly traffic pattern, for example, daily high and low points as this request for a temporary event. Yes. Which a Tobis account in regions should receive this quota in creep. Yep. Which API IDs will process this traffic.

00:27:41
<transcript>: currently

00:27:45
<transcript>: Currently traffic on the previously referenced APIs is not representative.

00:27:47
<transcript>: Next load test reps.

00:27:50
<transcript>: With the account if it what.

00:27:50
<transcript>: okay

00:27:53
<transcript>: Okay. We're just gonna say.

00:27:56
<transcript>: And.

00:27:58
daglee: What kind of application? Twitter 2.0

00:28:03
fragaverage: Hi, I'm trying to make a twitter clone, please increase. Thanks ADAM DOT DEV

00:28:05
<transcript>: Leave. I missed this. I should have done this days ago.

00:28:11
<transcript>: Twitter 20. That's right. I'm trying to make a Twitter clone. Please increase. Thanks.

00:28:16
<transcript>: Describe the application use case I'm testing.

00:28:19
<transcript>: The limit of serverless.

00:28:23
<transcript>: Architecture.

00:28:24
<transcript>: And.

00:28:24
<transcript>: by building

00:28:26
<transcript>: By building.

00:28:30
<transcript>: A Twitter API clone.

00:28:35
<transcript>: Let's see.

00:28:35
<transcript>: i'm

00:28:38
<transcript>: I'm also making a YouTube.

00:28:38
<transcript>: video

00:28:40
<transcript>: Video about it.

00:28:45
<transcript>: And streaming the process on Twitch.

00:28:45
<transcript>: right

00:28:47
<transcript>: Right now, literally.

00:28:47
<transcript>: no

00:28:48
<transcript>: No.

00:28:53
<transcript>: Okay what new request per second.

00:28:53
<transcript>: are you requesting

00:28:54
<transcript>: Are you requesting.

00:28:56
<transcript>: So I think.

00:28:58
<transcript>: I'm gonna actually up this to.

00:28:58
<transcript>: let's say

00:29:00
<transcript>: Let's say.

00:29:00
<transcript>: one hundred and fifty

00:29:02
<transcript>: 1500.

00:29:07
<transcript>: Request per second would be ideal.

00:29:11
<transcript>: Record tweet.

00:29:11
<transcript>: per

00:29:13
<transcript>: Per second on the Twitter.

00:29:19
<transcript>: Anticipate.

00:29:19
<transcript>: weekly

00:29:21
<transcript>: Weekly traffic path.

00:29:28
<transcript>: Daily high and low points for queries mutations and realtime subscriptions.

00:29:33
<transcript>: I won't be doing.

00:29:33
<transcript>: any subscription

00:29:35
<transcript>: Any subscription, stuff.

00:29:36
fragaverage: everything today, nothing ever again? LUL

00:29:36
<transcript>: In the test.

00:29:42
<transcript>: This is a temporary.

00:29:44
<transcript>: Event.

00:29:48
<transcript>: Yes, it is a temporary event.

00:29:51
<transcript>: Start an end date.

00:30:01
<transcript>: Okay.

00:30:03
<transcript>: Which accounts.

00:30:03
<transcript>: and regions should

00:30:06
<transcript>: And regions should have this quota increase.

00:30:08
<transcript>: It's this account.

00:30:16
<transcript>: In the following.

00:30:18
<transcript>: Regions.

00:30:20
<transcript>: US each one.

00:30:20
<transcript>: us

00:30:22
<transcript>: US West.

00:30:26
<transcript>: Central one.

00:30:32
<transcript>: US east, one.

00:30:36
<transcript>: Oh, Cookie. Now you have us East.

00:30:47
<transcript>: Central One AP Southeast Two AP Southeast.

00:30:52
<transcript>: Ap. South One. Okay.

00:30:54
<transcript>: The.

00:30:59
<transcript>: Everything today. Nothing ever again. Yeah. Basically, that's my traffic pattern.

00:30:59
<transcript>: what ap

00:31:02
<transcript>: What API's IDs.

00:31:02
<transcript>: i've only deployed

00:31:04
<transcript>: I've only deployed the US East one.

00:31:21
<transcript>: Let's see if I'm just get on chat with them. Let's get the API ID. I guess I'll fill it. Request.

00:31:23
<transcript>: Graphql.

00:31:29
<transcript>: Details.

00:31:29
<transcript>: detail

00:31:30
<transcript>: Details.

00:31:33
<transcript>: Where this one.

00:31:33
<transcript>: okay

00:31:35
<transcript>: Okay.

00:31:38
<transcript>: Man should have done this. I should have done this.

00:31:44
<transcript>: Should have done it. Okay. I'm just gonna do this.

00:31:44
<transcript>: and

00:31:48
<transcript>: And let's see what they say. Chat, submit.

00:31:51
<transcript>: This will be fun.

00:31:56
<transcript>: Talking to AWS, support.

00:31:56
<transcript>: on stream

00:31:57
<transcript>: On stream.

00:32:05
<transcript>: Don't include any PII in the chat. Really.

00:32:05
<transcript>: i mean

00:32:07
<transcript>: I mean, do you know who I am? Right.

00:32:11
<transcript>: My account says my name. I would think.

00:32:18
<transcript>: Not like I didn't mean that. Like, you know who I am, you know you know who I am. I did me like that.

00:32:20
<transcript>: I'm verified on Twitter.

00:32:23
<transcript>: Sorry that was too on the nose.

00:32:23
<transcript>: for how i

00:32:25
<transcript>: For how I feel right now.

00:32:41
<transcript>: Okay, so this is the immediate thing I knew I was gonna hit this quota. I don't know why. I don't know why I didn't pay more attention to my quota increases. Let's look at the rest of them and see what else is gonna fall over.

00:32:44
<transcript>: Let's see.

00:32:46
<transcript>: Did they.

00:32:46
<transcript>: quote a request did they

00:32:47
<transcript>: Quote a request. Did they.

00:32:47
<transcript>: re

00:32:48
<transcript>: Re.

00:32:51
<transcript>: I asked for another.

00:32:57
<transcript>: All right, Ro.

00:33:01
<transcript>: Okay. So.

00:33:07
<transcript>: Lambda. I got to 200, which is cool.

00:33:09
<transcript>: Appsync. I got nothing.

00:33:09
<transcript>: hi there

00:33:12
<transcript>: Hi, There, Ro.

00:33:22
<transcript>: Thanks for the follow Shintai. I don't know if I saw that.

00:33:26
<transcript>: And Shiva's. I don't think I saw either of those.

00:33:37
<transcript>: Dynamodb I did get the right level and read level throughputs increased but not in every region and I'm afraid that's gonna be a hangout as well.

00:33:51
<transcript>: Okay, let's see.

00:33:59
<transcript>: Yeah. Northern Virginia. I thought I reopened this case. Did I not.

00:34:02
<transcript>: Maybe was a different case.

00:34:02
<transcript>: i think

00:34:04
<transcript>: I think for the fall of berries.

00:34:11
<transcript>: Must have been a different case. I need to get the building here. I need some quota increases.

00:34:25
<transcript>: Need them increased. I wish I could be like, I'm a native biscuit. Can you just give me, like, God mode on AWS right now? And like, I'll take the risk that I'll rack up too big a bill.

00:34:28
<transcript>: Let me just take all the quotas off just like.

00:34:28
<transcript>: turn

00:34:30
<transcript>: Turn off the governor.

00:34:30
<transcript>: just give

00:34:34
<transcript>: Just give me all the Pat, all the power.

00:34:37
<transcript>: That'd be cool.

00:34:44
<transcript>: And then it feel real bad when I racked up like a $200,000 bill in, like five minutes.

00:34:51
<transcript>: This one. This is the one I reopened.

00:34:51
<transcript>: oh business

00:34:54
<transcript>: Oh, business and pairing. Uhoh, I didn't mean to say that.

00:35:05
<transcript>: Wait a minute. This isn't the one Where's the one where I reopened it.

00:35:08
<transcript>: Reopened.

00:35:16
<transcript>: Do we see a riot? Oh, no.

00:35:21
<transcript>: Did it disappear into the ether? Pending this one's pending.

00:35:24
<transcript>: Oh, Hey.

00:35:31
<transcript>: They did it. They did it. Okay. We've got a Global API now. I can. I can deploy into those regions. Perfect.

00:35:31
<transcript>: wait table

00:35:33
<transcript>: Wait table. Have a right? Yeah. Perfect. Okay.

00:35:37
<transcript>: I think that's it.

00:35:43
<transcript>: Cool.

00:35:45
<transcript>: Good news.

00:35:45
<transcript>: dynamodb

00:35:47
<transcript>: Dynamodb.

00:35:47
<transcript>: resolved

00:35:48
<transcript>: Resolved.

00:35:48
<transcript>: let's go ahead and

00:35:50
<transcript>: Let's go ahead and resolve that case.

00:35:53
<transcript>: Be a good citizen.

00:36:04
<transcript>: Okay. So we can we can go ahead and do this now let's test the flowing into us West.

00:36:11
schrew: Morning adam! Solved a really frustrating cloudfront/ALB/ACM issue yesterday at work, sending good vibes for your day as well!

00:36:18
<transcript>: And I'm gonna change before I do. I want to change some things. So here on the testing regions, we're actually going to test in every region that we're not deployed in. And the reason for that, I don't want my test stuff.

00:36:18
<transcript>: taking up

00:36:25
<transcript>: Taking up limits. I don't want it taking up quota. Like taking up infrastructure capacity. So if I'm hitting.

00:36:42
<transcript>: I'm hitting my API from Lambda functions if I were to hit if I were to spin up a thousand of those, that's taking up a thousand of my Lambda concurrent execution limit. And I don't want to do that. In the regions where I actually have the API deployed, I want them to be completely unfazed, so I'm gonna not run the test.

00:36:49
<transcript>: In the reasons where I'm actually deployed which are us each one US West.

00:36:51
<transcript>: Central one.

00:36:56
<transcript>: And let's see. Ap. What was the other one.

00:36:59
<transcript>: I remember the last ones.

00:36:59
<transcript>: okay

00:37:03
<transcript>: Okay, AP, Southeast Two, and AP south one.

00:37:06
<transcript>: If you south one.

00:37:06
<transcript>: and

00:37:09
<transcript>: And AP Southeast.

00:37:09
<transcript>: two

00:37:10
<transcript>: Two.

00:37:11
<transcript>: Sydney.

00:37:24
<transcript>: Okay, so those are our actual regions where we're deployed. We only want to do it in the test regions. And I want to change the test stack. Let's see.

00:37:24
papagebu: does having aws cert really help in interview?

00:37:26
<transcript>: Test stack.

00:37:36
<transcript>: Let's see, morning.

00:37:38
<transcript>: Shoes. Here. Good Morning, Adam.

00:37:38
<transcript>: solved a really

00:37:49
<transcript>: Solved a really frustrating cloud front ALB ACM issue yesterday at work sending good vibes for your day as well. Thank you so much. True. I need all the good AWS vibes you can muster because today.

00:37:52
<transcript>: We needed a tobis's help.

00:37:57
<transcript>: Just having it be a Cert really help in the interview. I don't know Papa.

00:38:02
zorblox69: hello goodeveningg goodluck to what youre doing <3

00:38:03
<transcript>: I don't know. I've never. I've never done an interview. I guess.

00:38:07
<transcript>: Have I ever been in an interview? I've never been interviewed.

00:38:07
<transcript>: could

00:38:25
<transcript>: Could somebody please interview me? I hear all the stories. I would love to know what it's actually like. Zorblox, first time chat. Welcome to Chat. Hello. Good evening. Good luck to what you're doing. Thank you for that. Zorblox. We need your luck. We need your goodbye. We need it all because we're doing something stupid and it's gonna be hard. And it might not work.

00:38:25
<transcript>: and

00:38:31
<transcript>: And I'm making a video about it. So if it doesn't work, it's gonna be a real bummer of a video. Thanks for the following zorblocks. I appreciate that.

00:38:35
<transcript>: It won't be a bummer of a video.

00:38:35
<transcript>: like

00:38:43
<transcript>: Like, I think the whole expectation from my end is that it won't scale to 1500 tweets per second. But I want to know why.

00:38:46
tayloreddev: will this rack up a big AWS bill?

00:38:47
<transcript>: What are the major? Like.

00:38:47
<transcript>: points

00:38:48
<transcript>: Points where.

00:38:52
daglee: First interview question: What is your favorite color? It's really important for our company.

00:38:53
<transcript>: A single developer in a week can't build a Twitter API that works.

00:38:53
<transcript>: thanks

00:38:57
fragaverage: yo Raul, get in the stream and follow along LUL

00:38:58
<transcript>: Thanks for providing the information. I already reached out our specialist team via internal ticket.

00:38:58
<transcript>: all right

00:39:02
<transcript>: All right, all right, that sounds promising.

00:39:03
<transcript>: Sounds good.

00:39:06
<transcript>: Okay. Here we go.

00:39:06
<transcript>: we

00:39:16
<transcript>: We need this information as well if current tracking on the above current traffic on a reference API is not represented and anticipated production traffic. Please connect a low test of representative tracket over the per.

00:39:17
<transcript>: perhaps

00:39:17
<transcript>: perhaps with the account

00:39:21
<transcript>: Perhaps with the account of DNA, where the test is connected and start and end times for the test.

00:39:25
<transcript>: Current traffic on the above referenced APIs.

00:39:25
<transcript>: is not

00:39:27
<transcript>: Is not representative.

00:39:31
<transcript>: Of an anticipated production traffic.

00:39:35
<transcript>: Okay. So.

00:39:37
<transcript>: On Number seven.

00:39:43
<transcript>: That's exactly what I'm going to be.

00:39:47
<transcript>: I can't see with my keycaster.

00:39:47
<transcript>: exactly

00:39:47
fragaverage: There is no current traffic, nor will there be production traffic LUL

00:39:49
<transcript>: Exactly what I'm going to be.

00:39:49
<transcript>: doing

00:39:51
<transcript>: Doing.

00:39:53
<transcript>: Test, but.

00:39:59
<transcript>: We'll need quotas increase.

00:39:59
<transcript>: or

00:40:01
<transcript>: Or will quickly.

00:40:06
<transcript>: Hit the 2000.

00:40:11
<transcript>: Please provide.

00:40:11
<transcript>: the request

00:40:15
zorblox69: holy that keyboard sounds nice

00:40:18
<transcript>: The request for a second sample operations, query mutation, subscription and start and end the time. Sensor your Load test.

00:40:23
<transcript>: For Number eight.

00:40:28
<transcript>: I can't do the load test until we've increased.

00:40:28
<transcript>: quotas

00:40:29
<transcript>: Quotas.

00:40:33
<transcript>: Does that make sense.

00:40:40
<transcript>: Nine is because customer using real time subscriptions if not, is because we're planning to use.

00:40:44
<transcript>: No users of real time.

00:40:46
<transcript>: On Number nine.

00:40:46
<transcript>: no

00:40:50
<transcript>: No, I won't be using real time Subscribe.

00:40:56
<transcript>: They're not actually trying to build Twitter. If I were, I would need subscription.

00:40:56
<transcript>: but

00:41:15
<transcript>: But we're just trying to test the core functionality of Tweeting and fetching your timeline. I don't know if I mentioned that I'm not interested in DMs and there's a lot of stuff that you can do on Twitter that I'm just not interested in reproducing. What I want to know is the core thing you can do, which is Tweet and fetch your timeline. Can those be performant at Twitter scale with serverless tech.

00:41:15
<transcript>: that's what i

00:41:17
<transcript>: That's what I want to know.

00:41:22
<transcript>: Getting the stream and follow along Yeah.

00:41:22
<transcript>: first

00:41:26
<transcript>: First interview question. What is your favorite color? It's really important for our company.

00:41:26
<transcript>: ta

00:41:38
<transcript>: Taylor, I don't know if I answered your question. Will it rack up a big A BISC bill? Yes. And part of this exercise as well is to learn how much would it cost to run Twitter on serverless architecture? Let's say I build something.

00:41:38
<transcript>: that

00:41:39
<transcript>: That.

00:41:39
<transcript>: can handle

00:41:44
<transcript>: Can handle 1500 Converse up to 1500 tweets per second, and handle that.

00:41:51
<transcript>: Then the next question is with serverless tech, how much does that cost? What is the cost implications, like monthly.

00:41:54
fragaverage: the sub part could be an interesting test too

00:41:58
<transcript>: And it's gonna be a lot. It's gonna be hundreds of thousands of dollars, maybe in the low seven digits.

00:41:58
<transcript>: but

00:42:00
<transcript>: But the question is.

00:42:02
fragaverage: If you sub to your timeline, and pull changes

00:42:09
<transcript>: How much less is that than what you do with Twitter.com today? Like internally, all the it stuff that's done at Twitter.

00:42:09
<transcript>: it's like

00:42:11
<transcript>: It's like Pennies, compared to that stuff, right.

00:42:11
<transcript>: they're capex

00:42:13
<transcript>: They're capex.

00:42:17
<transcript>: Tickets already created and filled with all the needed information.

00:42:20
<transcript>: Alright guys. Great.

00:42:25
<transcript>: I'm building.

00:42:29
<transcript>: This thing on Twitch.

00:42:29
<transcript>: right now

00:42:32
<transcript>: Right now if you want to follow along.

00:42:38
schrew: LUL

00:42:49
<transcript>: With that TV. Adam Dev I don't know. I might find out I'm doing things I can't. I shouldn't do like I shouldn't have this up on screen while I'm I don't know streaming. I don't have an estimate time religion, but I will be reaching out to the people owning the ticket in order to get a response soon.

00:42:49
<transcript>: thanks

00:42:51
<transcript>: Thanks so much.

00:42:57
fragaverage: Raul is the MVP here

00:43:02
<transcript>: Let's see the subpart. Could be an interesting test too if you sub to your timeline and pull changes.

00:43:02
<transcript>: yeah no

00:43:03
<transcript>: Yeah, no.

00:43:07
<transcript>: There's definitely whole layers to this experiment you can do.

00:43:10
<transcript>: We're really just interested in.

00:43:10
<transcript>: the

00:43:21
<transcript>: The core thing. I'm trying to do it in like a week. You know, I can't build all of the Twitter API service area and low test every possible thing. But I can say writing tweets fetching timeline.

00:43:21
<transcript>: can i do that

00:43:22
<transcript>: Can I do that.

00:43:25
<transcript>: Okay.

00:43:25
<transcript>: the keyboard

00:43:29
<transcript>: The keyboard says Last thanks. Door blocks. Thanks so much.

00:43:32
<transcript>: Okay. Here we go. Catrio. Thank you for the follow.

00:43:38
<transcript>: And I think we're done on that limit. So let's look at some of our other quotas.

00:43:38
<transcript>: there are gonna be

00:43:40
<transcript>: There are gonna be other issues.

00:43:44
<transcript>: Nope. That will do it.

00:43:47
<transcript>: Okay.

00:43:47
<transcript>: thank you so much

00:43:52
<transcript>: Thank you so much, Raul, the MVP, and we can close this now.

00:43:55
<transcript>: Let's see.

00:44:01
<transcript>: So that's okay. So DynamoDB check. We can go up to 1500.

00:44:01
<transcript>: right capacity

00:44:03
<transcript>: Right capacity units per second.

00:44:03
<transcript>: one hundred

00:44:14
mattmancodes: Raul ftw

00:44:14
<transcript>: 1500 reads as well. I guess we might need more reads. And as I say this, if we were actually cranking 1500 tweets per second into the database.

00:44:14
<transcript>: we're

00:44:28
<transcript>: We're gonna actually be writing we're gonna be consuming more than one right unit per Tweet because we also update your Tweet count in a transaction. So that's two right capacity units and our transactions different. Oh, no.

00:44:30
<transcript>: Let's see.

00:44:34
<transcript>: Transactions.

00:44:34
<transcript>: okay

00:44:42
<transcript>: Okay, so there's no difference. Well, let's see. Dynamodb Transaction WC's. Is there a separate.

00:44:42
<transcript>: i want to say there's a

00:44:44
<transcript>: I want to say there's a separate.

00:44:48
fragaverage: and writing to each timeline.. is that 1 write credit per timeline?

00:45:04
<transcript>: Here we go. Each item requires two right capacity units, one to prepare the transaction and one to commit the transaction. Therefore, you would need to provision six WC to the table. So suppose your replicas runs 100 and you try to do 3500 Byte items in your table. Okay, so the transaction does three put items each.

00:45:04
<transcript>: item requires

00:45:09
<transcript>: Item requires two capacity units. Bomber.

00:45:09
<transcript>: so

00:45:11
<transcript>: So every.

00:45:15
<transcript>: Ooh we gotta increase our Dynama limits.

00:45:24
<transcript>: Because we're riding. So for the Tweet operation, let's look at the Tweet operation.

00:45:28
<transcript>: No.

00:45:29
<transcript>: Mutation.

00:45:29
<transcript>: beat

00:45:32
<transcript>: Beat. They're called beats.

00:45:34
<transcript>: Almond beats.

00:45:34
<transcript>: it's bitter

00:45:35
<transcript>: It's bitter.

00:45:37
<transcript>: Because we're bitter about Twitter.

00:45:37
<transcript>: trans

00:45:39
<transcript>: Transact ride on So here we go.

00:45:39
<transcript>: we're doing

00:45:42
<transcript>: We're doing a put item. We're doing an update item.

00:45:42
<transcript>: that's it

00:45:58
<transcript>: That's it. So our beat operation does a single put and a single update that would be normally two right capacity units. But in a transaction they each take two such four. So we actually need to be able to do four times 150. 0 /second.

00:45:58
<transcript>: whoa

00:46:04
<transcript>: Whoa, that's a lot. Okay. Dynamodb Price and Calculator time. Dynamodb training.

00:46:08
<transcript>: Dynamodb Pricing calculator.

00:46:12
<transcript>: Now we got to figure out all my assumptions were wrong.

00:46:16
<transcript>: Let's see.

00:46:28
<transcript>: All of my pricing assumptions were wrong, so we might actually have to preprovision concurrency or capacity and not use on demand. This might be prohibitively expensive, even for just a few minutes.

00:46:28
<transcript>: how many

00:46:29
<transcript>: How many.

00:46:29
<transcript>: write units

00:46:31
<transcript>: Write units.

00:46:37
<transcript>: We have perform in a month. I don't want a month, I want.

00:46:37
<transcript>: i guess

00:46:46
<transcript>: I guess I can do the math. So 100 and 51500 times four for our transaction.

00:46:46
<transcript>: times

00:46:48
<transcript>: Times.

00:46:49
<transcript>: 60 seconds.

00:46:51
<transcript>: Times.

00:46:51
<transcript>: sixty

00:46:53
<transcript>: 60 minutes.

00:46:55
<transcript>: Times.

00:47:11
<transcript>: 20, 04:00 a.m.. I doing this right. That was per second. Times 60 gets us to minutes, times 60 gets us to an hour, times 24 gets us to a day. Times 30 gets us to a month. It's a big number of people. It's a big number. How do I see it in not scientific notation.

00:47:15
<transcript>: I don't know how to read scientific medication.

00:47:18
<transcript>: How do I see it in normal numbers.

00:47:18
<transcript>: oh no

00:47:19
<transcript>: Oh no.

00:47:19
<transcript>: someone tell me

00:47:21
<transcript>: Someone tell me.

00:47:24
<transcript>: If I just paste this in Google.

00:47:24
<transcript>: it

00:47:26
<transcript>: It.

00:47:26
<transcript>: and writing

00:47:30
<transcript>: And writing. Oh, and writing each timeline. Is that one, right? Oh, no.

00:47:32
liaze10: + 12 000000

00:47:36
<transcript>: Okay, weird not gonna be able to do 1500. There's just no way.

00:47:38
<transcript>: But.

00:47:38
<transcript>: because i

00:47:40
<transcript>: Because I.

00:47:44
<transcript>: Downstream. It may not be the same second, though frag.

00:47:51
<transcript>: So it's going to lag. Well, but that doesn't matter. It's just gonna be piling up for the next second.

00:47:51
<transcript>: but yeah

00:47:52
<transcript>: But yeah, every.

00:47:55
daglee: e^12 is just 10^12

00:47:58
<transcript>: Beat that you write is going to propagate to all your followers. So if you had a thousand followers.

00:47:58
<transcript>: that's

00:48:01
<transcript>: That's a thousand more rights.

00:48:05
<transcript>: Okay, I'm dumb.

00:48:08
daglee: So about 12 trillion

00:48:08
fragaverage: exponentially more

00:48:12
daglee: 1.2*

00:48:17
<transcript>: So can we do 100 a second? There's a new goal. Can we do ten 0 second? Which is what they average. Twitter averages 10,000 seconds sustained. I think we should drive the idea of bursting to record levels on twitter.com.

00:48:21
<transcript>: Exponentially more so about 12 trillion.

00:48:21
<transcript>: are you kidding me

00:48:22
<transcript>: Are you kidding me.

00:48:28
<transcript>: So you're telling me this number is like 12 trillion or 15 trillion trillion.

00:48:31
<transcript>: Geez.

00:48:34
<transcript>: Oh, Geez, this is per month. At least.

00:48:35
daglee: 1.5 trillion

00:48:36
<transcript>: Does that help.

00:48:36
<transcript>: fifteen

00:48:39
<transcript>: 15, followed by three, three.

00:48:43
<transcript>: The 15,015 trillion.

00:48:46
<transcript>: Is that right? Did I get it.

00:48:49
<transcript>: I wonder if I paste the.

00:48:49
<transcript>: if i

00:48:53
<transcript>: If I pay the scientific notation in here. Oh, maybe it works.

00:48:56
<transcript>: Did it work.

00:49:03
<transcript>: That is about two minutes a month than Dynamo spend.

00:49:08
<transcript>: That's on demand pricey, though obviously.

00:49:08
<transcript>: you

00:49:16
<transcript>: You would not do on demand if your Twitter. Comm so let's say you did provision capacity. I can't even get this as a limit.

00:49:18
mattmancodes: LUL

00:49:24
<transcript>: Rightcass. Units per hour. Are you serious? Now? It's. Oh, yeah. Because this is provision. Concurrency. So per hour.

00:49:26
<transcript>: It's.

00:49:29
<transcript>: 1500.

00:49:29
<transcript>: times

00:49:34
<transcript>: Times four times 60 is minutes times 60 is an hour.

00:49:34
<transcript>: the

00:49:36
<transcript>: The more manageable number. Right.

00:49:36
<transcript>: only

00:49:38
<transcript>: Only.

00:49:42
<transcript>: 2,160,000,000.

00:49:47
<transcript>: I don't need to put words to that number. I just need to copy and paste it.

00:49:47
<transcript>: okay

00:49:48
<transcript>: Okay.

00:49:54
<transcript>: Are you kidding me? Did I do the math wrong? Or is that.

00:49:54
<transcript>: one

00:49:57
<transcript>: One $4 million an hour.

00:50:03
<transcript>: No, I did that wrong. I did that wrong. There's no way.

00:50:07
<transcript>: There's no way, right.

00:50:09
<transcript>: I mess that up.

00:50:14
<transcript>: Now I'm starting to wonder if our Dynamo, if our 150.

00:50:15
<transcript>: Zero.

00:50:19
<transcript>: Right capacity unit like per second.

00:50:19
<transcript>: or that's what

00:50:27
<transcript>: Or that's what they are if that hundred and 500 limit is even good enough for 100 tweets or beats per second.

00:50:27
<transcript>: if you had

00:50:38
<transcript>: If you had a thousand followers, now everybody doesn't have a thousand followers. So you gotta think of like the curve, the distribution of profiles that have a lot of follows versus not a lot of follows.

00:50:44
<transcript>: But let's say you had ten followers. Every beat.

00:50:44
<transcript>: that's an additional

00:50:46
<transcript>: That's an additional ten rights.

00:50:49
<transcript>: We might have to use a different technology.

00:50:54
<transcript>: To handle the rights into the timeline.

00:50:58
<transcript>: I gotta think about this some more.

00:51:01
<transcript>: Okay, let's make some progress.

00:51:05
<transcript>: I'm gonna just go. It good on the quotas.

00:51:05
<transcript>: it's not good

00:51:10
<transcript>: It's not good, but I'm gonna call it good, and then we'll figure out what breaks, and then we'll reach out and improve.

00:51:10
<transcript>: and go from

00:51:12
<transcript>: And go from there.

00:51:14
<transcript>: Okay.

00:51:17
<transcript>: I'm gonna pull this up, though.

00:51:29
<transcript>: Event bridge. I don't think I actually need to increase the quotes on that. I shouldn't have reached out. Lambda. We got 200.

00:51:34
<transcript>: Appsync we're waiting on and then API gateway? Oh, API gateway? I've never gotten.

00:51:34
<transcript>: a fly on this

00:51:35
<transcript>: A fly on this.

00:51:40
<transcript>: I need to reply to this. They might as ask me something and I just didn't see it.

00:51:40
<transcript>: oh no

00:51:41
skylercodes: time to use planet scale

00:51:42
<transcript>: Oh, no, they did.

00:51:46
<transcript>: This one's. Awesome.

00:51:51
<transcript>: Hey, I wonder if I could.

00:51:53
<transcript>: Use planet skill.

00:51:53
<transcript>: i wonder if

00:51:56
<transcript>: I wonder if I could respond to.

00:52:00
<transcript>: Rahul again, and say.

00:52:00
<transcript>: hey

00:52:04
<transcript>: Hey, Rojo, could we let's see.

00:52:04
<transcript>: dynamo

00:52:07
<transcript>: Dynamodb AppSync I wonder if I could.

00:52:07
<transcript>: say could you

00:52:11
<transcript>: Say, could you also apply these same limits to API gateway.

00:52:20
<transcript>: Okay, I'm gonna respond to rules. Here.

00:52:27
<transcript>: Also.

00:52:31
<transcript>: Oh, not row with Raoul. I'm sorry.

00:52:31
<transcript>: sorry

00:52:34
<transcript>: Sorry, Ro. Could you also.

00:52:36
fragaverage: KEKW

00:52:38
<transcript>: Apply this same information.

00:52:38
<transcript>: to

00:52:41
<transcript>: To My API gateway.

00:52:44
<transcript>: Put it increase.

00:52:44
<transcript>: request

00:52:46
<transcript>: Request.

00:52:46
<transcript>: or

00:52:50
<transcript>: Or does that need to.

00:52:52
<transcript>: Separate.

00:52:54
<transcript>: Issue.

00:52:58
<transcript>: I'm just going to link the ticket.

00:53:01
<transcript>: This one's gonna bust us as well.

00:53:04
<transcript>: Because what is it? It's.

00:53:08
<transcript>: Resources, Routes, stages.

00:53:13
<transcript>: Next Page. Okay. Throttle. Burst rate 5000.

00:53:13
<transcript>: throttle rate

00:53:16
<transcript>: Throttle rate 10,000.

00:53:28
<transcript>: And that's what I'm looking for, right? Maximum request per second your APIs can receive in this account in the current region. I need that to be increased.

00:53:30
<transcript>: A lot.

00:53:35
<transcript>: Well, no, I guess 10,000 a second. That's.

00:53:38
<transcript>: That's actually okay on the front end.

00:53:48
<transcript>: Because our actual request per second, we could actually handle 100 requests per second with API gateway, we can't exceed it.

00:53:48
<transcript>: but if i

00:53:53
<transcript>: But if I could just get that bump to, like, a hundred thousand, I feel better about this test.

00:53:53
<transcript>: okay

00:53:55
<transcript>: Okay. What did I request.

00:54:04
<transcript>: Yeah, I requested a hundred thousand. So let's just reply to this ticket or no, let me let me link this.

00:54:07
<transcript>: Here we go.

00:54:13
<transcript>: Okay.

00:54:13
<transcript>: so

00:54:15
<transcript>: So.

00:54:15
<transcript>: we

00:54:18
<transcript>: We're trying to get ahead of the first things that are gonna fall over.

00:54:24
<transcript>: I'm on a link. This ticket in this one I'm gonna reply to this.

00:54:24
<transcript>: so many

00:54:30
<transcript>: So many questions directly to the API getaway from end users. Go through another proxy server, CDN.

00:54:33
<transcript>: Okay. I should try and answer all these.

00:54:33
<transcript>: here we

00:54:35
<transcript>: Here we go.

00:54:39
<transcript>: Let's copy them all.

00:54:53
<transcript>: It's a lot of information they need.

00:55:01
<transcript>: Having deploy. Should I deploy all the APIs? I should deploy them all. Let's do this. Let's do this.

00:55:01
<transcript>: then

00:55:04
<transcript>: Then I can actually give people what am I doing? Api stack.

00:55:06
<transcript>: Actually give no.

00:55:08
<transcript>: Api.

00:55:12
<transcript>: Let's do this.

00:55:18
<transcript>: Let's deploy all the API's so that we know.

00:55:26
<transcript>: So we have the API IDs for all this stuff. I want to have all the basic information.

00:55:26
<transcript>: deployed

00:55:29
<transcript>: Deployed, and then we can.

00:55:29
<transcript>: oh wait

00:55:31
<transcript>: Oh, wait, wait, wait.

00:55:37
<transcript>: Cancel. Cancel. No. Okay.

00:55:46
<transcript>: I wanted to turn off that event bridge. In the test standlier, that was done. I don't need an event bridge. This is the handler. I want to test.

00:55:51
<transcript>: So I'm not gonna have an event Ridge, trigger.

00:55:51
<transcript>: all that

00:55:52
<transcript>: All that was for nothing.

00:55:58
<transcript>: Here.

00:56:03
<transcript>: Okay.

00:56:09
<transcript>: Cool. Now we can deploy.

00:56:14
<transcript>: How we doing? Everybody's still hanging in.

00:56:14
<transcript>: every

00:56:20
<transcript>: Every following along with what I'm trying to do here. It's kind of weird and stupid and probably won't work, but.

00:56:31
vim_cerf: the all the big numbers are getting scary

00:56:33
<transcript>: Let me get the API IDs. Let's go to API gateway.

00:56:43
<transcript>: Yeah.

00:56:47
<transcript>: It's a terrible man.

00:56:49
<transcript>: Terrible name.

00:56:54
<transcript>: The API Gateway. Let's see.

00:56:57
<transcript>: Is it this one.

00:57:01
<transcript>: It's like somewhere here. It's gonna say My API ID.

00:57:07
<transcript>: Was it listed next to the yeah. Here it is. Okay. So we got this one.

00:57:11
<transcript>: Usb one.

00:57:15
<transcript>: We're currently deploying the others.

00:57:20
<transcript>: Hopefully, hopefully our Dynamo.

00:57:20
<transcript>: so if

00:57:29
<transcript>: So if we have 50 if we have 1500 right capacity units in Dynamo I think we can do 100 tweets or beats per second.

00:57:40
<transcript>: I think all the big numbers are getting scary. Yeah. Let's do a pricing calculator while we're waiting here. Aws, pricing calculator. I don't generally like this using this thing.

00:57:45
<transcript>: Just like hurts my brain, but it's probably good.

00:57:46
<transcript>: My estimate.

00:57:46
<transcript>: let's create

00:57:49
<transcript>: Let's create a new estimate.

00:58:00
<transcript>: Okay. So we want to let's start with.

00:58:00
<transcript>: dynamo

00:58:02
<transcript>: Dynamo.

00:58:08
<transcript>: And what we're really trying to do is figure out.

00:58:10
<transcript>: Costs per minute.

00:58:13
<transcript>: Because I'm not gonna run it for very many minutes.

00:58:13
<transcript>: because i don't

00:58:16
<transcript>: Because I don't have the bankroll to run it for very many minutes.

00:58:16
<transcript>: usc swan

00:58:17
<transcript>: Usc Swan.

00:58:17
<transcript>: provision

00:58:20
<transcript>: Provision. We're gonna go on demand.

00:58:20
<transcript>: ideally

00:58:21
<transcript>: Ideally.

00:58:24
<transcript>: Ideally, it's on demand.

00:58:29
<transcript>: In fact, I think a half to be on demand because I think provision capacity is a different quota and I don't have it.

00:58:32
<transcript>: Okay, streams. I should consider that.

00:58:42
<transcript>: So standard table class data storage size. I don't care. Let's say it's a terabyte. Who cares? That's not what I'm interested in. 1 KB. Sure.

00:58:49
<transcript>: Okay. On man. Right. Settings. Standard rights. Transactional rights. It's actually gonna be more like 100% transactional rights.

00:58:49
<transcript>: i don't think i'm doing

00:58:53
<transcript>: I don't think I'm doing any standard rights, which is a bummer.

00:58:56
<transcript>: But trying to be realistic.

00:58:59
<transcript>: Per second number of rights per second.

00:59:02
<transcript>: In thousand.

00:59:05
<transcript>: It's more like, let's say it's 500.

00:59:05
<transcript>: because

00:59:08
<transcript>: Because well, let's do the whole hundred and 50.

00:59:11
<transcript>: So what would that cost.

00:59:13
fredkisss: Donâ€™t know if anyone asked you this already and if it is too personal but : what is your day job ?

00:59:18
<transcript>: About a million dollars a month in Dynamo cost. Oh, yeah, on demand Reads so.

00:59:20
oaesthetic_: OMEGALUL THAT COST

00:59:25
<transcript>: Eventually consistent is 100%, not transactional reads. Number of reads per second.

00:59:25
<transcript>: we're gonna

00:59:30
<transcript>: We're gonna say it's also 1500.

00:59:30
<transcript>: okay

00:59:38
<transcript>: Okay, so that's not that expensive. The reads are not that expensive, but we are just around a million dollars a month in Dynamo cost.

00:59:39
rexase: LUL

00:59:43
<transcript>: Streams.

00:59:43
<transcript>: get record ap

00:59:45
<transcript>: Get Record API requests.

00:59:45
<transcript>: per second

00:59:48
<transcript>: Per second. This is going to be high too.

00:59:55
tsoutsou_proutsou: 1m not that much dude 1% is mine :D

01:00:06
<transcript>: Wait. Dynamodb does not charge for Git records API calls invoked by a debit Lambda as part of DynamoDB Triggers or forget eight right records API calls invoke by DynamoDB Global tables. These records do not need to be estimated. Oh, my word.

01:00:06
<transcript>: it just occurred

01:00:07
tsoutsou_proutsou: per month

01:00:11
<transcript>: It just occurred to me. Everything is multiplied by five.

01:00:16
daglee: An AWS calculator, where the output is: cheap, affordable, expensive, "you poor now".

01:00:16
fragaverage: 5?!

01:00:17
<transcript>: It's all multiple multiplied by five. Because we have five regions. That's the only way we're gonna be able to scale.

01:00:20
<transcript>: And to make a Twitter clone is for it to be global.

01:00:21
fragaverage: oh no LUL

01:00:26
schrew: monkaS

01:00:27
<transcript>: So we have global tables enabled. That means every right into the table, right.

01:00:27
<transcript>: to all of

01:00:32
<transcript>: To all of the replicas. What happened? Customer Resource manager. What.

01:00:32
<transcript>: because

01:00:37
<transcript>: Because it exceeds your current account limit and region USB it does. Are you sure.

01:00:40
<transcript>: You sure about that? Hang on.

01:00:43
<transcript>: Services.

01:00:43
<transcript>: dynamo

01:00:44
<transcript>: Dynamo.

01:00:44
<transcript>: i thought we just

01:00:46
<transcript>: I thought we just had this increase.

01:00:53
<transcript>: 150. Table level. Here we go. Tablevel read. What did they say.

01:01:02
<transcript>: Current account limit in recent US two. So let's look at tablelevel read it's applied 1500. If I switch this.

01:01:02
<transcript>: to us

01:01:05
<transcript>: To us. West. Two.

01:01:10
<transcript>: Also 1500. What's the problem.

01:01:13
<transcript>: What's the problem.

01:01:17
<transcript>: Wait.

01:01:27
<transcript>: Did I have a different quote of it was different. No. Those are same 100 and 5150 ha.

01:01:31
tsoutsou_proutsou: i think every click in aws looks like - 1m usd :P

01:01:40
<transcript>: Can I create a replica of Table Bitter Table in Region US Less to see your current account limit.

01:01:40
<transcript>: in region

01:01:46
<transcript>: In region. Oh, wait, wait. Do we already have a bitter table? Did I delete? Did these get hang on.

01:01:49
<transcript>: Hey.

01:01:54
<transcript>: First time Chat. Welcome to Chat aesthetic that cost.

01:01:56
<transcript>: Let's see.

01:01:56
<transcript>: don't know if anyone

01:02:03
<transcript>: Don't know if anyone asked you this already, and if it's too personal, but what is your day job? Yeah, I'm working. I'm back at Statmeues, my startups at news.

01:02:07
<transcript>: Haven't really talked about it too publicly yet because.

01:02:07
<transcript>: there's still

01:02:09
<transcript>: There's still some conversations that need to happen.

01:02:18
<transcript>: With people who should be made away of this before the whole world does. But the ad people on Twitch. You guys can know. I work at Staff news.

01:02:24
<transcript>: Welcome to Chat. Rick C. Rick SA.

01:02:24
<transcript>: sansu's here

01:02:26
<transcript>: Sansu's Here 1 million.

01:02:32
delinx_live: write it down write it down

01:02:34
<transcript>: Is mine per month. An Ado s? Calculator where the output is cheap, affordable, expensive. You pour. Now.

01:02:41
<transcript>: Yeah. So we're in five regions, frag. I think that's gonna make it harder. I think every click in a bus looks like.

01:02:41
<transcript>: one million

01:02:46
<transcript>: 1 million views. Write it down, write it down. What am I writing down? Look on the chat. Dylan.

01:02:49
<transcript>: Delink Slides. What am I right now.

01:02:53
thefailwail: How succesful was statmuse?

01:02:54
<transcript>: Okay. So this.

01:03:02
<transcript>: Exceed your current account limit. Let's see if I just didn't delete the table. Bitter table does not exist. Okay, let's good. That's what I was hoping.

01:03:05
<transcript>: Yeah, it's not there yet.

01:03:12
<transcript>: So then what's wrong if I quote us.

01:03:20
<transcript>: What's wrong with the quotas? Do I have a different quota value in one region versus the other.

01:03:20
<transcript>: those all look the

01:03:26
<transcript>: Those all look the same to me 100 and 5151 hundred and 50 under 50 if I go to us west two.

01:03:30
<transcript>: Maybe it just hasn't like registered yet.

01:03:30
<transcript>: see they've got the

01:03:32
<transcript>: See, they've got the 150 right there.

01:03:42
<transcript>: Let's check your U central one.

01:03:49
<transcript>: How.

01:03:53
<transcript>: Its promise.

01:04:01
<transcript>: Let's read this real slow.

01:04:01
<transcript>: stack name ap

01:04:08
<transcript>: Stack name API stack failed to deploy update Robot Complete received response status failed from custom resource.

01:04:19
<transcript>: Cannot create a replica of Table Bitter Table in Region US Two because it exceeds your current account limit in Region US West two.

01:04:19
<transcript>: exc

01:04:21
<transcript>: Exceeds your current account limit.

01:04:26
<transcript>: Because what? Because it succeeds.

01:04:26
<transcript>: what

01:04:29
<transcript>: What? Because it succeeds. Oh, no.

01:04:32
<transcript>: For grammar, even.

01:04:35
<transcript>: Okay.

01:04:35
<transcript>: so

01:04:39
<transcript>: So let's try this roll back, I guess.

01:04:39
<transcript>: command failed

01:04:41
<transcript>: Command failed? Oh, Geez.

01:04:41
<transcript>: it just didn't even

01:04:43
<transcript>: It just didn't even roll back.

01:04:43
<transcript>: let's

01:04:44
<transcript>: Let's go to our table.

01:04:49
<transcript>: Let's try and manually add a replica and see what it says.

01:04:49
<transcript>: bitter table

01:04:51
<transcript>: Bitter Table Global tables.

01:04:51
<transcript>: ooh this is gonna

01:04:56
<transcript>: Ooh, this is gonna be so expensive transactions on a global table? So expensive.

01:04:56
<transcript>: create

01:05:00
<transcript>: Create replica in us.

01:05:00
<transcript>: west

01:05:02
<transcript>: West to Oregon.

01:05:05
<transcript>: Create? Come on.

01:05:09
<transcript>: Because it's it succeeds. Your current account limit.

01:05:09
<transcript>: let's

01:05:15
<transcript>: Let's try U central. Let's just try Frankfurt and see if we can create any of these replicas.

01:05:18
<transcript>: Nope.

01:05:25
<transcript>: Feels Bad Feels bad because it succeeds your current account limit.

01:05:30
<transcript>: Write it down, write it down. How successful was that music? Well, that means it's still going.

01:05:30
<transcript>: we're still

01:05:34
<transcript>: We're still still kicking eight years in so that's successful at least.

01:05:38
<transcript>: I don't know if you can measure.

01:05:40
<transcript>: Success.

01:05:45
<transcript>: Until the story is fully written.

01:05:45
<transcript>: but

01:05:47
<transcript>: But I mean it's.

01:05:47
<transcript>: i don't know

01:05:48
<transcript>: I don't know.

01:05:48
<transcript>: sanis

01:05:50
<transcript>: Sanis is raised a lot of money.

01:05:53
<transcript>: From people like Disney and Google.

01:05:58
<transcript>: And a lot of people use it like.

01:05:58
<transcript>: we're

01:06:02
<transcript>: We're getting about a million searches a day now and statmese.com.

01:06:06
<transcript>: Which is a lot more than when.

01:06:06
<transcript>: when

01:06:09
<transcript>: When I was last asset Music I haven't been there for three years.

01:06:13
<transcript>: And now there's something like a million a day.

01:06:13
<transcript>: so

01:06:18
<transcript>: So I don't know what they look like. Falcon's last ten games. There you go.

01:06:18
<transcript>: so it's like

01:06:21
fragaverage: successful enough to be able to afford to bring you back

01:06:22
<transcript>: So it's like a search engine for sports and financial statistics.

01:06:25
<transcript>: As there's money search to yeah anyway.

01:06:25
<transcript>: does like a million

01:06:28
<transcript>: Does like a million searches a day.

01:06:30
<transcript>: Still working on the monetization.

01:06:30
<transcript>: stuff

01:06:32
<transcript>: Stuff.

01:06:40
<transcript>: Successful enough to be able to afford to bring you back. That's right, Frag. They pulled me out of retirement. Semiretirement.

01:06:40
<transcript>: so i

01:06:46
<transcript>: So I mean, doing pretty well, right. Okay. This is a bummer, because I feel like the quotas should be right.

01:06:46
<transcript>: this message

01:06:51
<transcript>: This message is also quite cryptic and has some grammar issues.

01:06:56
<transcript>: Or spelling issues exceeds your current account limit in region use Central one.

01:07:00
<transcript>: Joey's Bites. Thank you for the follow. I needed that. I needed some.

01:07:00
<transcript>: need a little

01:07:03
<transcript>: Need a little boost because this is a bummer.

01:07:03
<transcript>: we can

01:07:14
<transcript>: We can try Sydney, we can try these. I don't think it's gonna be any different. Oh, please don't tell me it works in one, okay? Yeah. Please contact A to be a support to request a limit increase.

01:07:19
<transcript>: Let's create a new.

01:07:19
<transcript>: just create

01:07:21
<transcript>: Just create a new ticket, I guess.

01:07:25
<transcript>: Okay. I can't deploy them into the and then.

01:07:35
<transcript>: US East One The ID is.

01:07:35
<transcript>: at

01:07:36
<transcript>: At.

01:07:41
<transcript>: But I'll also be the deploying.

01:07:44
<transcript>: Similar APIs.

01:07:48
<transcript>: In the following.

01:07:48
<transcript>: regions

01:07:49
<transcript>: Regions.

01:07:54
<transcript>: US West.

01:07:54
<transcript>: to

01:07:57
<transcript>: To EU Central one.

01:08:03
<transcript>: Ap thank you for the follows. Everybody. The fail whale wtfox. I appreciate that.

01:08:03
<transcript>: those little no

01:08:05
<transcript>: Those little noises are making me feel a little better.

01:08:05
<transcript>: the sweet sweet

01:08:09
<transcript>: The sweet sweet sounds of Brake Master cylinder.

01:08:09
<transcript>: eu central

01:08:10
<transcript>: Eu Central one.

01:08:13
<transcript>: Let's go back here.

01:08:13
<transcript>: kind of

01:08:16
<transcript>: Kind of find a nice medium. There we go.

01:08:20
<transcript>: US. East One, Virginia.

01:08:24
<transcript>: Organ. Central AP. Southeast. Two.

01:08:28
<transcript>: A. P. Ap. Southeast.

01:08:30
luckhcan: azure > aws

01:08:33
<transcript>: This is a quote unless worried about actually AP south one.

01:08:49
<transcript>: Well, the request is coming directly to a Bi gateway directly to API Gateway gateway.

01:08:49
<transcript>: from the

01:08:51
<transcript>: From the customers.

01:08:54
<transcript>: Web, regions.

01:08:58
<transcript>: This entire.

01:09:01
<transcript>: App is just.

01:09:01
<transcript>: a showcase

01:09:04
<transcript>: A showcase of serverless.

01:09:04
<transcript>: performance

01:09:07
<transcript>: Performance and scalability.

01:09:11
<transcript>: It will only exist.

01:09:14
<transcript>: To.

01:09:14
<transcript>: perform

01:09:17
<transcript>: Perform a load test.

01:09:20
<transcript>: With fake.

01:09:24
<transcript>: Users hitting the APIs.

01:09:28
<transcript>: From all over the globe.

01:09:37
<transcript>: Like I need to say that at some point here. Right. What other A Tobia services we plan to access from the API endpoint.

01:09:40
<transcript>: The API gateway.

01:09:40
<transcript>: api

01:09:43
<transcript>: Api's only act as a proxy.

01:09:43
<transcript>: into

01:09:45
<transcript>: Into.

01:09:47
<transcript>: App sync.

01:09:47
<transcript>: ap

01:09:51
<transcript>: Apis deployed into the same.

01:09:54
<transcript>: Same regions.

01:09:56
<transcript>: Sea ticket.

01:09:59
<transcript>: Here. That's it.

01:09:59
<transcript>: yeah

01:10:00
<transcript>: Yeah.

01:10:09
<transcript>: For more context. Okay. What is the expected latency of your integration.

01:10:16
<transcript>: Latency of my integration. So the App sync. Yeah, 500 milliseconds. That's fine.

01:10:21
<transcript>: All apps saying.

01:10:25
<transcript>: Vtl resolvers.

01:10:28
<transcript>: Interacting.

01:10:28
<transcript>: with

01:10:30
<transcript>: With Dynamo.

01:10:30
<transcript>: bb

01:10:31
<transcript>: Bb.

01:10:37
<transcript>: That's probably lower than 500. But that's fine selected average rate in request per second.

01:10:40
<transcript>: Ten.

01:10:43
<transcript>: Thousand to.

01:10:43
<transcript>: one hundred

01:10:45
<transcript>: 100.

01:10:45
<transcript>: thousand

01:10:46
<transcript>: Thousand.

01:10:46
<transcript>: rps

01:10:47
<transcript>: Rps.

01:10:50
<transcript>: Expected peak rate.

01:10:50
<transcript>: oh okay

01:10:53
<transcript>: Oh okay, so average rate 10,000.

01:10:57
<transcript>: Be great.

01:10:57
<transcript>: one

01:10:59
<transcript>: 100 that.

01:11:01
<transcript>: Expected rate ramp up.

01:11:07
<transcript>: As fast as possible.

01:11:11
<transcript>: I don't know.

01:11:14
<transcript>: Is the Ptraper particular event.

01:11:16
<transcript>: Yes, 40.

01:11:18
<transcript>: Only.

01:11:24
<transcript>: We'll increase the limit only after you have load test your API at the current maximum limit.

01:11:29
<transcript>: I can't perform.

01:11:29
<transcript>: the

01:11:34
<transcript>: The load test until the quotas are increased.

01:11:37
<transcript>: Right.

01:11:40
<transcript>: Do you plan to use Caching feature.

01:11:40
<transcript>: no

01:11:41
<transcript>: No.

01:11:48
<transcript>: Yes, please make sure that you monitor cloud with Merix emitted by API. Get way for cash hit miss choosing for every cash size.

01:11:53
<transcript>: In a.

01:11:53
<transcript>: few

01:11:56
<transcript>: Few plan to use the authentication feature. No.

01:12:02
<transcript>: Do you plan to use usage plans and API keys? No.

01:12:02
<transcript>: okay so this

01:12:09
<transcript>: Okay, so this one we go with no, these are ins. Okay, we're good. There's all the information. Submit.

01:12:09
<transcript>: az

01:12:13
<transcript>: Azure greater than AWS. I respectfully disagree.

01:12:20
<transcript>: But welcome to Chat, Luke, or Luck, Luke, Luck, look, luck, Luke.

01:12:27
<transcript>: Okay. We've done all the support stuff I need to do. Oh, I need to make another case here. For why can I not deploy.

01:12:28
fredkisss: What is it that you want to test with this project ?

01:12:31
<transcript>: Let's see new ticket create case.

01:12:33
<transcript>: Technical.

01:12:37
<transcript>: Service is DynamoDB.

01:12:41
<transcript>: Category is.

01:12:41
<transcript>: global

01:12:46
<transcript>: Global Tables I'm just going to contributor inside database as your future request.

01:12:49
<transcript>: Server server error. I don't know.

01:12:53
<transcript>: Server error error.

01:13:00
<transcript>: What's my severity? Here.

01:13:00
<transcript>: system

01:13:02
<transcript>: System impaired.

01:13:02
<transcript>: it

01:13:04
<transcript>: It is a production system.

01:13:06
shiftlessatol: @Fredkisss "...limits of serveless ( w/neovim" according to the title

01:13:07
<transcript>: I don't know.

01:13:11
<transcript>: Subject.

01:13:13
<transcript>: Can't create.

01:13:13
<transcript>: replicas

01:13:14
<transcript>: Replicas.

01:13:14
<transcript>: in

01:13:16
<transcript>: In regions.

01:13:19
<transcript>: With sympath.

01:13:20
<transcript>: sympathy

01:13:21
<transcript>: Sympathy.

01:13:25
<transcript>: Read, write, quotas.

01:13:26
shiftlessatol: @Fredkisss serverless*

01:13:34
<transcript>: Come on you buy.

01:13:34
<transcript>: do the

01:13:36
<transcript>: Do the you buy thing.

01:13:38
<transcript>: Okay.

01:13:41
<transcript>: This right here. Copy.

01:13:43
<transcript>: So.

01:13:43
<transcript>: i'm getting

01:13:46
<transcript>: I'm getting an error.

01:13:46
<transcript>: when

01:13:53
<transcript>: When attempting to create replicas for the Bitter table.

01:13:53
<transcript>: table

01:13:55
<transcript>: Table.

01:13:58
<transcript>: In US East one.

01:14:01
<transcript>: I'm trying to.

01:14:01
<transcript>: create

01:14:01
shiftlessatol: he;s most likely goiing to create something of a international slamm

01:14:02
<transcript>: Create.

01:14:02
<transcript>: replicas

01:14:03
<transcript>: Replicas.

01:14:03
<transcript>: in

01:14:06
<transcript>: In regions where I had.

01:14:08
<transcript>: Put it in.

01:14:13
<transcript>: Match US East one.

01:14:15
shiftlessatol: in order to determine what the system can handle and not handle

01:14:16
<transcript>: But I'm getting this.

01:14:16
<transcript>: error message

01:14:17
<transcript>: Error message.

01:14:22
<transcript>: And I create replica.

01:14:25
<transcript>: Okay.

01:14:29
<transcript>: Please Advice advise.

01:14:32
<transcript>: Table Name Bitter table.

01:14:35
<transcript>: Use one.

01:14:35
<transcript>: timeframe

01:14:36
<transcript>: Timeframe.

01:14:38
<transcript>: I don't know what that means.

01:14:38
<transcript>: operation

01:14:41
<transcript>: Operation. Are you currently facing this.

01:14:46
shiftlessatol: because scalability is important when choosing a framework

01:14:46
<transcript>: Is your issue? Intermittent? No.

01:14:52
<transcript>: I what feels recommend to help resolve your case faster.

01:14:52
<transcript>: select the

01:14:56
<transcript>: Select the opt out checkbox at the bottom of the form.

01:14:58
<transcript>: Yes.

01:14:58
<transcript>: okay

01:14:59
<transcript>: Okay.

01:15:02
<transcript>: Do we want to do chat again or just web.

01:15:02
<transcript>: maybe we'll just do web

01:15:03
<transcript>: Maybe we'll just do web.

01:15:04
shiftlessatol: ( just a guess )

01:15:06
<transcript>: Anal.

01:15:08
<transcript>: analys chat

01:15:09
<transcript>: Analys. Chat.

01:15:14
<transcript>: Let's see, what is it that you want to test with this project? Fred.

01:15:14
<transcript>: we're testing

01:15:15
<transcript>: We're testing.

01:15:21
<transcript>: Like so. Okay, everyone gets upset to, you know, Elon bought Twitter.

01:15:21
<transcript>: and the

01:15:41
<transcript>: And the amount of people throwing out, I could build a Twitter clone in a weekend on hacker news has reached a fever pitch. So there's a lot of talk. There's even a guy on Twitter who's very serious that he's building a Twitter. He's, like, made a deck. He's got, like, investors involved. And he's like, here's what it would take to build a new Twitter. And I just started thinking, like, all these people floating out, building a new Twitter do.

01:15:41
<transcript>: they think about

01:15:42
<transcript>: They think about.

01:15:42
<transcript>: what it would

01:15:49
<transcript>: What it would take to handle the Twitter type load if you built a company like Twitter today in 2022.

01:15:56
<transcript>: What technology choices do you make to handle 100 tweets per second, bursting up to 1500.

01:15:56
<transcript>: and then i

01:16:01
<transcript>: And then I started thinking, Could you build it with Serverless tech? Because I'm such an advocate for serverless.

01:16:19
<transcript>: Put it actually handle Twitter load. And what would that cost? And I just want to have that kind of conversation, at least with myself. I want to answer the questions, what would it take to build a serverless, Twitter API, and reach those levels of traffic? And how much would it cost to run it? And what is that? How does that compare to Twitter's internal.

01:16:35
<transcript>: Costs. They're capex when it comes to, like running all the infrastructure for Twitter.com and all the staff and all that stuff. It's just like a lot of things in my mind that I need to answers to. So we're trying to test this, like very high load test on a serverless, Twitter API.

01:16:35
<transcript>: and

01:16:36
shiftlessatol: his answer was much more precise

01:16:38
<transcript>: And then I'm gonna make a video about it. That's the idea.

01:16:44
<transcript>: Limits of serverless with NeoVM according to the title most likely going to create something.

01:16:44
<transcript>: of an

01:16:52
<transcript>: Of an international Slam in order to determine what the system can handle and not handle. Scalability is important when choosing framework. Just a guess. His answer was much more precise.

01:16:52
<transcript>: i should

01:17:02
<transcript>: I should have read all that. I should have read the last message first. I should always start from the bottom with Twitch chat and I should read up because sometimes I get the answer and I don't need to read all of it.

01:17:02
<transcript>: if i

01:17:04
<transcript>: If I just start the bottom, you know I'm saying.

01:17:08
<transcript>: The Fail whale followed me. Wait a minute.

01:17:08
<transcript>: the

01:17:10
<transcript>: The Fail Whale. That name.

01:17:15
<transcript>: There's the Twitter fail whale which is very pertinent to this conversation.

01:17:15
<transcript>: like back

01:17:18
<transcript>: Like back on Twitter didn't scale so well.

01:17:21
<transcript>: They show that little whale.

01:17:24
<transcript>: You know I'm talking about anybody.

01:17:29
<transcript>: Should I just leave with Hi, Mitchell before he even says anything.

01:17:29
<transcript>: hey

01:17:30
<transcript>: Hey, Mitchell.

01:17:36
mattmancodes: the all rails days

01:17:37
shiftlessatol: menitoning twitter dropped 10 ppl from chat?

01:17:38
<transcript>: I need something to entertain myself right now. So that's the thing that I just entertainment up with.

01:17:42
<transcript>: The All Rails, days.

01:17:47
<transcript>: Mentioning Twitter drops Ten people from chat.

01:17:55
joeysbytes: love the thought experiment with a Twitter clone, but you should consider that it would take a LONG time with marketing and convincing the world that your platform is the one to jump to.  And while you build it, the jumpers are looking at already existing solutions.

01:17:56
<transcript>: Music I don't like this layout. You by Can we change it.

01:17:58
<transcript>: Can we get a different one.

01:18:02
<transcript>: Can I get a different layout? More vertical.

01:18:07
<transcript>: More of a vertical layout, if you will.

01:18:10
<transcript>: I prefer it, but okay.

01:18:14
vim_cerf: haven't seen the fail whale in a long time. I think it's just a boring twitter bird these days, if the page loads at all.

01:18:31
<transcript>: First time chat. Welcome to Chat. Joey's. Love the thought experiment with the Twitter clone, but you should consider that it would take a long time with marketing and convincing the world that your platform is the one to jump to while you build it. The jumpers are looking to reexisting solutions. Joey, sorry, I should have clarified this is not a thing I'm going to launch. I'm literally building all this. Just.

01:18:31
<transcript>: to

01:18:32
shiftlessatol: didn't Trump already do this? and it just doesn't work

01:18:47
<transcript>: To make a video and just to test just for a load test. And then we're gonna just delete the whole thing. I mean it's on get out. You want to look at it, you can learn something from it. Maybe. But I'm not actually intending to bring on users onto this fake Twitter API. My billing front end. It's just an API. We're just testing.

01:18:47
<transcript>: what are the

01:18:51
<transcript>: What are the limits? What would we start falling over with first.

01:18:51
<transcript>: when it comes

01:18:53
shiftlessatol: ( commenting on the fact that people are like " I'm going to build a better ____ "

01:18:59
<transcript>: When it comes to serverless quota, limits and things like that, that's all not actually launching this thing and trying to build Twitter.

01:18:59
<transcript>: haven't seen the fail

01:19:07
<transcript>: Haven't seen the Fail whale in a long time. I think it's just a boring Twitter bird these days. It's a page. Looks like loads at all. Yeah, I've not seen the Fail well, in years and years.

01:19:07
<transcript>: didn't trump

01:19:14
<transcript>: Didn't Trump already do this? And it just doesn't work. Trump did what? Commenting on the fact that people are like, I'm going to build a better.

01:19:14
<transcript>: blank

01:19:16
<transcript>: Blank.

01:19:21
shiftlessatol: it gets a bunch of buzz for about 6 weeks and then gone

01:19:21
<transcript>: I don't know what Trump did.

01:19:29
<transcript>: See, you said made a different Twitter. It's a bunch of buzz for about six weeks and then gone. Yeah, yeah, I'm not again, everybody. I'm not trying to launch.

01:19:29
<transcript>: a fake twitter

01:19:30
<transcript>: A fake Twitter.

01:19:30
<transcript>: i am just

01:19:32
shiftlessatol: not twitter

01:19:34
<transcript>: I am just trying to build an API and test the limits of serverless.

01:19:39
shiftlessatol: I'm not saying you are - I'm just commenting on this idea

01:19:40
joeysbytes: right, I understand.  But youâ€™re pricing for millions of users, but youâ€™ll start with tens :)

01:19:41
<transcript>: May I ask your name? Yes, you May. Adam Elmore. I don't know why I get my last name if I didn't need the last name, but.

01:19:45
<transcript>: And I'm great.

01:19:54
<transcript>: I wish I wish I could just get like, AWS, people. They bought Twitch, right? I wish I could just be like, hey, hop on Twitch. It'd be a lot easier. You can just hang out with us.

01:20:01
shiftlessatol: LOL

01:20:05
<transcript>: Oh, you're not saying why? Oh, I see. Dave. Just comment me on the idea. Yeah, yeah, but your pricing for millions of users, you'll start with pins.

01:20:05
<transcript>: yeah yeah

01:20:08
tastefulelk: Hey Adam, you definitely need to get Munns on your pod and get a response from him!  I too spent the weekend confused and disappointed by his "serverless is dead" tweet ðŸ˜…

01:20:09
shiftlessatol: you should sent them your twitch link

01:20:16
shiftlessatol: https://www.twitch.tv/adamdotdev

01:20:25
<transcript>: Yeah. Yeah. No, I want to know, like, if Twitter was like, I heard Elon say they're like, rewriting it all because Elon's dumb. And he would say that. But if you do rewrite it all and you chose to write it all serverless, I don't know what's that bill look like. What would it cost to run Twitter on AWS with only serverless stuff? And could you cut an.

01:20:25
<transcript>: entire

01:20:27
<transcript>: Entire.

01:20:31
<transcript>: Section of your oh, that sounds bad right now in the light. Never mind.

01:20:35
<transcript>: Could you operate it with a lot less overhead.

01:20:35
<transcript>: and

01:20:36
<transcript>: And.

01:20:36
<transcript>: okay i'm done

01:20:37
<transcript>: Okay. I'm done.

01:20:39
<transcript>: Definitely.

01:20:39
<transcript>: need to get

01:20:40
<transcript>: Need to get.

01:20:43
joeysbytes: ahh I gotcha

01:20:46
<transcript>: Muns on your pod and get a response from him. I sent the weekend confused to display by his serverless dead tweet.

01:20:51
<transcript>: Yeah, that was a bummer of a tweet.

01:20:55
<transcript>: Sebastian. That's tasteful of great. Yeah, that's Sebastian.

01:20:55
<transcript>: yes

01:21:00
mattmancodes: the fail whale was from the all rails days. They moved away from all Rails and the whale disappeared. People now use this as the reason to say Rails is slow, it's not, it's just Twitter is a unique use case, as this stream is showing

01:21:04
schrew: elon elmore coming out of his shell a little Kappa

01:21:08
<transcript>: Yes, we do need to get him on. I kind of had the thought, as Zach's and I were talking like, we're like, reading into all this stuff, and we're doing all this surmising is what, like, what's in Chris's mind, and we could just be like, hey, Chris, could you clarify.

01:21:08
<transcript>: we could have done that

01:21:11
<transcript>: We could have done that, but it's a lot more fun to make a podcast about it.

01:21:17
<transcript>: Same to you. Okay, let's get to the issue, Mitchell. Let's get to it.

01:21:20
<transcript>: Roll. He was all business. Got straight to it.

01:21:20
<transcript>: we didn't

01:21:21
shiftlessatol: https://truthsocial.com/

01:21:27
<transcript>: We didn't mince. We didn't have any of the small talk. We just got into the issue and we resolved it. Mitchell, I need to do the same here.

01:21:34
<transcript>: Elon Elmore coming out of his shell a little, Uhoh, what did I say.

01:21:38
<transcript>: The Fail Whale was from the All Rails days.

01:21:38
<transcript>: they moved away from

01:21:47
tastefulelk: But it's so true what you said, random people say "serverless is dead" every day, but it's definitely different when it's from an AWS employee who was previously all in!

01:21:47
<transcript>: They moved away from all rails and the whale disappeared. People now use this as the reason to say rails is slow. It's not. It's just Twitter's unique use case. Yeah. No, I think.

01:21:47
<transcript>: when you're

01:21:53
<transcript>: When you're as big as Twitter, like you just have to build everything.

01:21:57
<transcript>: Very specifically. And those are the edge cases.

01:22:04
<transcript>: Someone I follow on Twitter. Simon. Wordley, who? I'm just a huge sermon. Wordly. Famous.

01:22:04
<transcript>: he's probably the only

01:22:13
daglee: "X is slow" and then you have 5 users. How does it matter?

01:22:24
<transcript>: He's probably the only person that if you were in the room with me, I would fangirl so hard that him and prime. Okay, so I've fangirled over prime being on my Twitch chat. But Simon is this brilliant thinker I don't know what his title is. He's retired now from Cloud, but he has a lot of thoughts on serverless and the trajectory of serverless.

01:22:30
<transcript>: And he likes to say that recently he's been saying.

01:22:39
cowfacedude99: bitter again? LUL

01:22:47
<transcript>: Serverless is should be the default. That should be every organization's default. The problem and there should be edge cases where serverless doesn't work for you. There are edge cases. He acknowledges that the problem is way too many people think they're the edge case. Twitter.com the edge case.

01:22:47
<transcript>: so i see

01:22:48
daglee: My website runs in shell script for lulz and it's fast enough.

01:22:54
shiftlessatol: it seems opposite

01:22:56
<transcript>: So I see you're having an issue with the creation of a global replica where you have an exception about reaching the calendar, even though the limits match between regions. That's exactly right.

01:23:02
<transcript>: Kathleen's. Bitter again. That's right, Bitter. We're doing the Bitter thing.

01:23:15
eddiethead1: My edge case is large video converting/processing

01:23:17
<transcript>: X is slow, and then you have five users. How does it matter? So I do have a take on this. And while we're while we're chatting with Mitchell, I'm gonna come over here and talk about it. I do have a take. Maybe I've even said this take here on Twitch. I don't know. I don't remember.

01:23:21
<transcript>: Or maybe I just said, It's a DAX when we were recording one of our episodes.

01:23:25
<transcript>: I have a problem in 2022 with.

01:23:25
<transcript>: the sentiment

01:23:31
<transcript>: The sentiment and I get where it comes from, but I have a problem with the sentiment that we should build.

01:23:31
<transcript>: just build

01:23:37
<transcript>: Just build it fast. Just get it up there. Like use whatever tech. Just get the thing up there. And then if you actually.

01:23:37
<transcript>: have

01:23:47
eddiethead1: just cant serverless this task

01:23:57
<transcript>: Have a good reason to change and to use more scalable stuff then. Okay, then you should start rewriting it and doing all this like I think it'd be in 2022. There are good technology choices where you don't have to sacrifice between those two things. You don't have to sacrifice going fast and working with technology that will handle whatever you throw at it.

01:23:57
<transcript>: like

01:24:11
<transcript>: Like I think it's it's just not the right move in my mind to be like, now, if you if you only know rails like you've built with Rails, that's all you've ever known, then I guess you have an argument that you can build it by yourself with Rails. And then if you need to hire a team because you have market fit or whatever.

01:24:21
<transcript>: Then you'll hire a team and you'll build it in whatever else. But wouldn't it be great if a startup didn't have to rewrite those thing every six months or every year because they just chose technology where they could move fast.

01:24:21
<transcript>: up

01:24:42
<transcript>: Upfront and build stuff, but actually works. You know, I'm saying, I think this, like indie hacker. I get it. We see the success story within the hackers where they just cobbled something together and it worked and what they'll solve the problems down the road. I see your point. But I think less and less five years from now, you definitely won't have to make that trade off. You can build this stuff.

01:24:44
cowfacedude99: I think you should make it modular. so you can switch out pieces as you need to

01:24:45
<transcript>: That's good technology. And you can build faster than you ever could.

01:24:45
<transcript>: that's the

01:24:49
shiftlessatol: choosing this technology comes with a guaranteed monthly cost with not the guranteed income - no?

01:24:50
theturde: would be great if management would give sufficient time to build correctly

01:24:51
<transcript>: That's the whole stick of serverless is like manage services. Make it easier for one developer to have a ton of levels.

01:24:51
<transcript>: to build stuff

01:24:54
<transcript>: To build stuff that could never have built ten years ago.

01:24:56
<transcript>: Does that make sense.

01:25:14
grasp5533: 100% agree Adam.  that was my success story with serverless

01:25:16
<transcript>: I think you should make it modular so you can switch out pieces as you need to. Yeah. I just I think like there's gonna be some success story. The startup that built the right way up front and then didn't have all these issues scaling and didn't have all these bumps on the road. Now maybe they end up in the same place as other startups that did have a rougher road. I just think some of.

01:25:16
<transcript>: it's unnecessary

01:25:24
<transcript>: It's unnecessary. We choose, like, really old technology these days. And we build applications like we did 15 years ago. And maybe we didn't have to.

01:25:30
<transcript>: Choosing this technology comes with a guaranteed monthly cost with not the guaranteed income. No.

01:25:30
<transcript>: choosing

01:25:40
<transcript>: Choosing what technology serverless no actually serverless is perfect when you have no users because it costs nothing when you have no users and it scales with usage.

01:25:49
<transcript>: I think Servers is so perfect for startups, and people have all these ideas about why it's not. But I think a lot of them are kind of flimsy.

01:25:49
mattmancodes: Spring Boot all the things!

01:25:54
grasp5533: We built an android app with a serverless backend for CVS, and launched in 9,000 stores.  We were able to iterate over the next few months, and made our business leaders dream come true lol

01:25:56
<transcript>: Welcome to Chat. The Terde would be great if management would give sufficient time to build correctly.

01:26:01
<transcript>: Yeah. I'm not even thinking about, like, organizations that are big enough to have something called management.

01:26:12
<transcript>: I'm talking about like small groups of people building products 100% degree grass. That was my success story with serverless fantastic. That is good to hear spring boot all the things.

01:26:12
<transcript>: we built

01:26:24
<transcript>: We built an Android app with a serverless backend for CVS and launched a nice 90 stores. We were able to iterate over the next few months and made our business leaders dream come true. Thank you. Grasp. We're gonna find out that there's been a lot of inefficiency in Silicon Valley.

01:26:24
<transcript>: and

01:26:27
<transcript>: And we could have done it a different way.

01:26:27
<transcript>: and

01:26:33
<transcript>: And that's what's coming. Over the next five years, we built an Android app with a serverless backend. Oh, I'd already read that.

01:26:33
<transcript>: okay

01:26:40
<transcript>: Okay, we're going back. Going back over here. Super, can you please confirm the account number for the tables in question.

01:26:40
<transcript>: please

01:26:42
<transcript>: Please. Yes, I can.

01:26:42
<transcript>: it's

01:26:44
<transcript>: It's right here.

01:26:55
cowfacedude99: One of the nicest examples is Theo. I have heard on his vods that he switched out pieces because he hit some roadblock with something.

01:26:59
<transcript>: All right, I guess we could start working while we're waiting on this chat with service.

01:27:01
<transcript>: The Service team.

01:27:01
<transcript>: let's

01:27:03
<transcript>: Let's.

01:27:03
<transcript>: see

01:27:04
<transcript>: See this.

01:27:08
cowfacedude99: for ping

01:27:10
<transcript>: Go back to us. Eas one.

01:27:10
<transcript>: we got that

01:27:15
<transcript>: We got that working. Okay, let's go to our test stack.

01:27:20
<transcript>: We got rid of the this thing.

01:27:26
<transcript>: We got rid of this thing. And now we need to.

01:27:26
<transcript>: let's see

01:27:37
<transcript>: Let's see. I want to set up the CLI commands for testing this for the CLI. I think that will what was this quoted. You had increased case ID for the request. I do.

01:27:39
<transcript>: I sure do.

01:27:47
<transcript>: I got to find it, and there's a lot of them. Okay. I need to, like, float this one. There we go.

01:27:47
<transcript>: let's see

01:27:49
<transcript>: Let's see sport, cases.

01:27:49
<transcript>: increased

01:27:51
<transcript>: Increased DynamoDB.

01:27:54
<transcript>: Believe it's this one.

01:27:57
<transcript>: Another.

01:28:00
<transcript>: Increase.

01:28:08
<transcript>: Created? I need to know.

01:28:10
<transcript>: Oh no.

01:28:10
<transcript>: oh no

01:28:11
<transcript>: Oh no.

01:28:11
<transcript>: login

01:28:12
<transcript>: Login.

01:28:19
<transcript>: Grabbing it now. One SEC.

01:28:36
<transcript>: One of the nice examples is Theo. I have I've heard on his VODs that he switched out peace is because he hit some roadblock for something or with something for Ping. Oh, I should I would love to hear more of that. More of the story.

01:28:37
fredkisss: One problem I had with serverless cost is when I tried to create a mock project on Google cloud with only a database running at all times, in one month I had a cost of ~$ 200 , even though the DB was not even queried regularly (it was a dev env project)

01:28:44
wolfhoundjesse: Wait, why are your browser tabs only icons? Is it just because you have the correct number of tabs open? lol

01:28:58
<transcript>: Okay.

01:29:00
<transcript>: Yes.

01:29:02
<transcript>: No.

01:29:02
<transcript>: this is

01:29:04
<transcript>: This is not it.

01:29:04
<transcript>: so many of these dynamo

01:29:06
<transcript>: So many of these DynamoDB cases.

01:29:07
<transcript>: This one.

01:29:13
<transcript>: That's it. This is the one.

01:29:13
<transcript>: this

01:29:15
<transcript>: This is the one.

01:29:19
<transcript>: Okay.

01:29:24
grasp5533: @Fredkisss Did you have $200 worth of data in your table?

01:29:27
<transcript>: I've looked at the quota's.

01:29:29
<transcript>: In the console.

01:29:33
<transcript>: And the all seem to match.

01:29:34
cowfacedude99: you use a yubikey as hardware auth key?

01:29:37
<transcript>: The various reasons.

01:29:41
<transcript>: Thank for the Follow T grip.

01:29:45
<transcript>: Let's see one problem I had with serverless cost.

01:29:45
<transcript>: is

01:29:45
fredkisss: @grasp5533 nope

01:29:55
aatishsai: @Fredkisss what database were you using

01:29:59
<transcript>: Is when I tried to create a mock project on Google Cloud with only a database running at all times. In one month I had a cost of $200, even though the DB was not even queried regularly. It was a Dev environment project. What database was it? Fred kiss.

01:30:00
shiftlessatol: my only experience with AWS is tryign to use their free product - only to have it not function at all  ( without paying ) and then getting a "f-you" notice when hackers spun up all kinds of services and racked up $4k worht of charges ( which is funny becuase I didn't allow chargable services to run )

01:30:03
<transcript>: Nata Ananta.

01:30:07
fredkisss: @aatishsai a MySQL DB

01:30:13
<transcript>: Weight. Why are your browser tabs only icons? Is it just because you have the correct number of tabs open? Yeah, it's just when you get that many tabs, they've become icons.

01:30:17
mattmancodes: They cost to spin

01:30:19
<transcript>: You use a UBI key as hardware. As key. That's right, cow face. I do.

01:30:19
<transcript>: fred

01:30:20
mattmancodes: up

01:30:24
<transcript>: Fred is now, let's see what database we're using. That was my question. Welcome to Chat Atish.

01:30:24
<transcript>: a mounting experience

01:30:25
shiftlessatol: is AWS actually usable without paying?

01:30:41
<transcript>: A mounting experience with AWS is trying to use their free product only have it not function at all without paying. And then getting an Fu notice when hacker spun up all kinds of service distracted. $4,000 worth of charges. Yeah, that happens. You gotta watch the security, Dave. You gotta watch out.

01:30:41
<transcript>: don't let people

01:30:44
<transcript>: Don't let people get a hold of your account. Generally a good idea.

01:30:44
<transcript>: my

01:30:47
<transcript>: My C will be cost spin up.

01:30:47
<transcript>: is aws

01:30:55
<transcript>: Is AWS actually usable without paying. Sure. The free Tier if you're building with serverless stuff you can build a lot with the free tier.

01:31:02
<transcript>: And then like if you're willing to pay $1020 a month, you can do a lot more.

01:31:08
schrew: usable without a credit card? no

01:31:11
aatishsai: @Fredkisss so you were using cloudSQL service?

01:31:12
<transcript>: Okay. We're kind of waiting on this guy. We're just gonna we're gonna.

01:31:14
schrew: usable without cost? yes

01:31:17
<transcript>: What am I gonna do? I'm gonna keep working while I wait for this stuff, you know.

01:31:19
shiftlessatol: I would like to explore that

01:31:20
ananta___: Are you using a tiling window manager?

01:31:27
<transcript>: Make some progress here because so far I've only been in support ticket land and I'd like to know.

01:31:30
<transcript>: Things.

01:31:32
<transcript>: Oh, come on.

01:31:32
<transcript>: so let's go ahead

01:31:35
<transcript>: So let's go ahead and write some CLI commands.

01:31:35
<transcript>: for invoking

01:31:40
<transcript>: For invoking these Lambda functions because I got to do it in multiple regions. Right. Here we go.

01:31:40
<transcript>: that's not that's

01:31:42
<transcript>: That's not that's not gonna do it.

01:31:44
<transcript>: There we go. That's better.

01:31:47
<transcript>: Okay. Mitchell is typing.

01:31:48
schrew: @ananta___ he uses yabai for window tiling

01:31:50
grasp5533: @Fredkisss I'm not sure the pricing of the MySql in GCP, but DynamoDb in AWS allows your write/read throughput pay-for-what you use which is typically what people mean with serverless pricing

01:31:53
<transcript>: So let's see. This is our test handler. We need to invoke it.

01:31:57
<transcript>: So I need to look at the output for the.

01:31:57
teej_dv: LUL "tiling" window managers

01:31:58
shiftlessatol: I have avoided AWS because I was waiting for projects to overrun more affordable server hosts that warranted scalable serverless later

01:31:58
fredkisss: @aatishsai uhâ€¦ yes ? The thing is Iâ€™m not really a pro juste a noob,

01:32:01
<transcript>: Let's deploy.

01:32:01
<transcript>: now that i've taken

01:32:04
<transcript>: Now that I've taken those regions out.

01:32:07
<transcript>: Teaches here. Teej.

01:32:07
<transcript>: teejilind

01:32:12
<transcript>: Teejilinda Manager? Yeah, I'm using you by sometimes I hate it sometimes I like it.

01:32:18
grasp5533: @Fredkisss I know a lot of SQL databases have a hard time scaling to 0 which isn't like pure serverless

01:32:20
teej_dv: yes, that's why i put it in quotes

01:32:21
<transcript>: I'm not sure the pricing of the MySQL GCP.

01:32:25
teej_dv: get a real tiling WM

01:32:31
<transcript>: So I put it in quotes.

01:32:37
<transcript>: Get a real tiling window manager what do you use Tiege. You're probably on some Linux thing, right.

01:32:41
<transcript>: I'm guessing you're not a Mac OS developer.

01:32:44
teej_dv: Awesome WM Kreygasm

01:32:45
<transcript>: It's just a guess.

01:32:53
<transcript>: Awesome Window Manager is it called awesome Window manager.

01:32:56
<transcript>: Is it work on Mac? Does it work on Mac.

01:32:57
teej_dv: you're correct, i believe in freedom

01:32:58
ananta___: gotcha, but turning off SIP is kinda weird

01:32:59
teej_dv: LUL

01:33:01
cowfacedude99: @teej_dv mac and windows are second class citizen in tiling wmland

01:33:05
<transcript>: Okay, so here's our Where's our function? I probably didn't output it. I did. Now put it like a rookie.

01:33:06
teej_dv: haha no, it's linux only as far as I know

01:33:08
<transcript>: Let's output it. How about it.

01:33:10
cowfacedude99: unfortunately no @adamdotdev

01:33:12
fragaverage: slander!

01:33:13
<transcript>: New CFN output.

01:33:14
aatishsai: @Fredkisss so the thing is even if your function is serverless, the database is still hosted service so you will be charged for all the uptime regardless of the number of queries. If you want to go fully serverless you can use firebase store for database

01:33:19
teej_dv: but it uses lua Kreygasm

01:33:19
<transcript>: This is going to be our ten.

01:33:21
<transcript>: Errand.

01:33:25
<transcript>: And then value is going to be.

01:33:29
<transcript>: Handler air in.

01:33:29
<transcript>: okay

01:33:30
<transcript>: Okay.

01:33:34
fredkisss: @grasp5533 I understand that the DB should be always hot for performance, but the pricing was very harsh

01:33:34
rekabik: I just use rectangle for wm on Mac ðŸ™‚

01:33:36
<transcript>: Description. It's be a good citizen. I will thank myself later.

01:33:39
<transcript>: Erin, of the Lambda.

01:33:39
<transcript>: function

01:33:43
<transcript>: Function that runs our test.

01:33:46
<transcript>: Oh.

01:33:53
fredkisss: @aatishsai No fire base for me, I wanted a SQL DB

01:33:56
<transcript>: This is still deploying. Thanks for that. Yes. At first glance, I'm climbing agree with you. The limits between two regions. See, I did.

01:33:56
<transcript>: whilst i

01:34:01
<transcript>: Whilst I read through the other case there, can you tell me a little bit about the request? Aws you're making.

01:34:04
<transcript>: What the request? That AWS, that I'm making.

01:34:04
<transcript>: i'm using

01:34:06
<transcript>: I'm using.

01:34:10
<transcript>: Cloud formation.

01:34:13
<transcript>: To.

01:34:15
<transcript>: Create a read.

01:34:15
<transcript>: or to

01:34:19
<transcript>: Or to create a global table, replica.

01:34:22
<transcript>: Through the CDK.

01:34:27
<transcript>: I should say that earlier. So CloudFormation.

01:34:27
<transcript>: via

01:34:29
<transcript>: Via the CDK.

01:34:29
<transcript>: to create a global

01:34:33
<transcript>: To create a global table record? Is that what you mean.

01:34:36
<transcript>: I also tried from the console.

01:34:54
<transcript>: This use rectangle. I did two rekabek. Welcome to Chat. I did the problem with rectangle is you can't do like a padding on just some.

01:34:54
<transcript>: i

01:35:01
<transcript>: I wanted to have, like, an 80 Pixel padding for my Twitch overlays to lay on top, and I couldn't do that.

01:35:01
<transcript>: with

01:35:04
<transcript>: With rectangle. I love rectangle.

01:35:04
<transcript>: i thought

01:35:06
<transcript>: I thought it was great.

01:35:10
<transcript>: It uses Liu, what uses a little.

01:35:10
<transcript>: lin

01:35:12
<transcript>: Linux only as far as I know.

01:35:12
<transcript>: so it's called

01:35:17
<transcript>: So it's called awesome VM, or awesome Window Manager. You're correct. I believe in freedom.

01:35:18
teej_dv: awesomeWM uses lua

01:35:21
<transcript>: Mac, and windows are set.

01:35:21
<transcript>: as

01:35:24
<transcript>: As an entiling Window Manager, land.

01:35:24
<transcript>: it's linux on

01:35:25
aatishsai: @Fredkisss oh ok, In AWS there is a relational serverless DB like Aurora Serverless. I dont know if there are any RDB serverless service in GCP.

01:35:25
<transcript>: It's Linux on.

01:35:25
<transcript>: fortunately no

01:35:28
<transcript>: Fortunately no Bomber bummer bummer.

01:35:32
<transcript>: Okay, you guys talk serverless who it uses Lua.

01:35:41
<transcript>: The awesome WM. Uses Louis.

01:35:44
<transcript>: Okay.

01:35:44
<transcript>: let's see

01:35:50
<transcript>: Let's see. What are we doing here? We're waiting on that. Okay, so now I can deploy this.

01:35:55
<transcript>: And deploy this again? What happens? What happens? There we go.

01:35:57
fredkisss: @aatishsai today for DB I found a cool service with fixed price on Digital Ocean with Postgres only for ~$ 28 / month

01:36:06
<transcript>: Kind of a light start here kind of not on track.

01:36:06
<transcript>: you got a lot to do

01:36:10
<transcript>: You got a lot to do, lot to do, not a lot of time. Let's go to our test handler.

01:36:15
<transcript>: And let's start fleshing this out. So I really need more space.

01:36:22
<transcript>: Let's do this. So here's what I've got. I've got.

01:36:29
<transcript>: Each handler spinning up, so I'm not handling this secret. So I'm calling a secret manager from this function, too.

01:36:29
<transcript>: that

01:36:33
<transcript>: That's gonna hurt our quota. Unless that is it per region.

01:36:33
<transcript>: is it

01:36:36
<transcript>: Is it a per region question quota. Let's see.

01:36:36
<transcript>: is that

01:36:38
<transcript>: Is that.

01:36:38
<transcript>: secret

01:36:40
<transcript>: Secrets Manager Reload Come on.

01:36:48
<transcript>: Race. There we go. Aws Services. We want Secrets manager.

01:36:48
<transcript>: is that

01:36:51
<transcript>: Is that a 50 global or 50.

01:36:59
<transcript>: Get secret value.

01:36:59
<transcript>: ten thousand

01:37:03
<transcript>: 10,000 /second Wait, what? I thought it was 5000.

01:37:06
<transcript>: Oh, oh, hey, that's good.

01:37:06
<transcript>: get secret values

01:37:11
<transcript>: Get secret values can be up to ten 0 /second is that goal or per region.

01:37:17
<transcript>: I feel like that might be.

01:37:17
<transcript>: glow and

01:37:19
<transcript>: Glow. And that's five per region.

01:37:19
<transcript>: we're fine

01:37:22
<transcript>: We're fine 100 a second. We're fine.

01:37:28
<transcript>: What do we see here? I would be interested. See if this is possible. I'll be interested to see this if possible.

01:37:28
<transcript>: like

01:37:31
<transcript>: Like I share my, oh, my screen.

01:37:31
<transcript>: or

01:37:33
<transcript>: Or better.

01:37:33
<transcript>: you

01:37:37
<transcript>: You come join us on Twitch.

01:37:41
<transcript>: Tv. Adam Dev.

01:37:42
fredkisss: Because of that Iâ€™m really scared to go serverless, I know how to spin up and configure a VPS with docker and Nginx, fixed price per month and can handle a big load, so Iâ€™m pretty against serverless these days

01:37:45
<transcript>: Let's see if if missiles shows up.

01:37:45
grasp5533: LOL

01:37:50
<transcript>: Let's see, let's see.

01:37:50
<transcript>: because of that

01:37:53
supremeffs: ðŸ¤£

01:37:55
grasp5533: the twitch stream to the support person

01:37:58
teej_dv: V I R A L - M A R K E T I N G - C A M P A I G N

01:38:00
<transcript>: Because of that I'm really scared to go serverless I know how to spin up and configure a VPs with Docker and NGINX fixed price per month and can handle a big load so I'm pretty against service these days.

01:38:00
eddiethead1: LUL

01:38:04
fragaverage: Mitchell needs a sub

01:38:04
<transcript>: Viral marketing campaign.

01:38:09
<transcript>: Welcome, Chat, welcome to Chat Supreme.

01:38:11
<transcript>: Ffs.

01:38:15
<transcript>: Welcome, you came in laughing.

01:38:20
tastefulelk: GET HIM

01:38:24
<transcript>: I'm serious. We need yeah. Mitchell needs a submitchel. Shows up. We give Mitchell us up. I'll gift it to him or someone else's. Eddie T. Head.

01:38:27
shiftlessatol: @FragAverage SeemsGood SeemsGood

01:38:30
laytanl_: Hallo

01:38:30
<transcript>: If you want to see it, there's a place you can see it right now. Mitchell, along with a hundred other people.

01:38:30
<transcript>: they're all seeing it

01:38:33
<transcript>: They're all seeing it. We're all seeing it.

01:38:36
aatishsai: I dont think support will use anything other than chime, they need to record their hours

01:38:38
<transcript>: Latent. Here. Hey, Laden, wait. Laten? Are you Mitchell.

01:38:38
<transcript>: do you work

01:38:43
<transcript>: Do you work at AWS Support latent? You don't get that joke, but everyone else does.

01:39:03
<transcript>: I don't think support will use anything other than Chine. They need to record their hours. Oh, I gotcha. May I ask, is this an action you foresee needing to repeat a lot? I wonder if a workaround would work instead creating the table with lesser values than increasing to your limit after creation. I'm not actually, I'm not specifying. I'd really rather say this on Twitch. I wish you could join.

01:39:03
<transcript>: i'm not

01:39:05
<transcript>: I'm not specifying.

01:39:05
<transcript>: the lim

01:39:07
<transcript>: The limit in the API request.

01:39:07
<transcript>: i'm just

01:39:09
<transcript>: I'm just making.

01:39:11
<transcript>: A request.

01:39:11
<transcript>: to

01:39:13
<transcript>: To create.

01:39:15
laytanl_: I am in fact not mitchell

01:39:17
<transcript>: A Global Table replica.

01:39:27
<transcript>: You are in fact, not Mitchell Bummer latent. Thought for a moment. That was just a cool moment where it turns out Late and works at AWS and.

01:39:32
<transcript>: You showed up right? When I asked Mitchell to come. I'm just saying it looked a little cuss.

01:39:38
<transcript>: I don't think support we use. Oh, you already said that. Yeah. Or you said it once. I read it twice. Okay.

01:39:43
shiftlessatol: and is suddenly a 3 mont sub?

01:39:46
<transcript>: Like I think Mitchell is on the impression that I'm making the API request and I'm specifying a quota. I'm not.

01:39:46
<transcript>: i am

01:39:54
<transcript>: I am just I'm just trying to make a global table table replica, and it's saying it can't. And I think it's wrong.

01:39:54
<transcript>: i think

01:39:56
<transcript>: I think it's wrong.

01:39:56
<transcript>: what do we think

01:40:00
<transcript>: What do we think? Did I give any PII throughout the chat? Like my Twitch handle.

01:40:11
<transcript>: Okay, let's get back to this. So secret manager not worried. Not worried about it. Here's what it does. First thing, we create a profile.

01:40:11
<transcript>: i actually

01:40:15
<transcript>: I actually want to sometimes just use an existing profile.

01:40:15
<transcript>: and

01:40:18
<transcript>: And not create a profile.

01:40:18
<transcript>: sometimes

01:40:19
<transcript>: Sometimes.

01:40:21
<transcript>: Let's minimize this actually.

01:40:23
<transcript>: Oh, that's no good.

01:40:23
<transcript>: that's

01:40:26
<transcript>: That's better. Here we go.

01:40:29
<transcript>: Okay.

01:40:34
<transcript>: So here we're creating a profile, but I'd actually like to sometimes.

01:40:34
<transcript>: randomly

01:40:38
<transcript>: Randomly just log in with an existing user.

01:40:47
<transcript>: A small percentage of the time because we do need to create and see the bunch of users for now we need to see them. We'll just keep it. So we're creating a new profile here.

01:40:47
<transcript>: and then i create

01:40:52
<transcript>: And then I create a jot token with a shared secret. The secret right here.

01:40:52
<transcript>: okay

01:40:55
<transcript>: Okay. So we create the job token.

01:40:55
<transcript>: and then

01:41:00
<transcript>: And then we request our own profile request takes in the token.

01:41:00
<transcript>: this request down here

01:41:01
<transcript>: This request down here.

01:41:01
<transcript>: ticked in

01:41:04
<transcript>: Ticked in the token as it's the authorization header.

01:41:04
<transcript>: and

01:41:08
<transcript>: And this is like a little wrapper for doing API calls.

01:41:08
<transcript>: we're

01:41:09
sydniv: what lib are you using?

01:41:11
<transcript>: We're gonna have some other stuff going on in there.

01:41:11
<transcript>: one moment

01:41:13
<transcript>: One moment, please.

01:41:15
<transcript>: Joining.

01:41:16
<transcript>: Which.

01:41:16
<transcript>: i'm not

01:41:18
<transcript>: I'm not gonna ask that.

01:41:30
<transcript>: I mean like Amazon's not gonna say you can't click on a Twitch link if somebody posts a Twitch link in chat or in your support message, I'm not gonna say you can't click on it. That can't be a rule.

01:41:30
<transcript>: i

01:41:34
laytanl_: +1 viewer LUL

01:41:37
<transcript>: I wouldn't think what Liber you're using? Sydniv. Welcome to Chat. What lived? For what.

01:41:39
<transcript>: For what am I using.

01:41:45
<transcript>: Can we can we see who's in, who's watching the stream? Can we look for any usernames that sound like A. Mitchell.

01:41:46
laytanl_: should talk to more support agents

01:41:47
tastefulelk: Hey cousin, it's me, your AWS Support rep

01:41:50
tastefulelk: wanna go bowlin'?

01:41:50
<transcript>: Trying to out you, Mitchell, if you're here, let's talk.

01:41:57
<transcript>: Hey, Cousin, it's me. Your Ads support Rep. Want to Go Bowland.

01:42:04
<transcript>: Okay.

01:42:11
<transcript>: So we have this little wrapper. So we request our profile.

01:42:13
<transcript>: Hit my profile.

01:42:13
<transcript>: we log

01:42:21
<transcript>: We log the profile. We're not gonna be able to do any of this logging once we start scaling up because it's gonna be so expensive. Well, it's this is a Lambda function.

01:42:21
<transcript>: yeah

01:42:22
sydniv: I just joined ... can i have brief what you doing?

01:42:27
<transcript>: Yeah, no, it would end up in Cod watch. This would be expensive. We're not gonna do that, but I'm gonna just have it in there while I'm ramping up.

01:42:36
<transcript>: Start key so then we're creating over getting random profiles. So it's a little trick in DynamoDB if you use just a random.

01:42:36
<transcript>: partition

01:42:39
<transcript>: Partition key that matches like your partition key structure.

01:42:39
<transcript>: i've got

01:42:42
<transcript>: I've got just a random view ID. Here.

01:42:42
<transcript>: and then i do

01:42:50
<transcript>: And then I do a scan with an exclusive start key. I can fetch kind of like a random point in the middle of the Dynamo table space.

01:42:50
<transcript>: does that make sense

01:42:56
<transcript>: Does that make sense? I botched that technical definition. But that's what I'm doing. I'm getting some random profiles. I get ten of them.

01:42:59
<transcript>: I go through all those profiles.

01:43:05
<transcript>: And let's see. I go through all those profiles. And I follow them.

01:43:05
<transcript>: so i

01:43:07
<transcript>: So I follow people.

01:43:07
<transcript>: okay

01:43:07
shiftlessatol: currently coercing AWS support to join twitch and going through his ramp up and process for slam testing

01:43:08
<transcript>: Okay.

01:43:20
<transcript>: We just follow ten random people, and then we make a beat request. We want to create a new beat, which is like a tweet. But it's a beat because it's bitter. It's not Twitter. We do a mutation.

01:43:23
<transcript>: And then we just random text.

01:43:33
<transcript>: So that's all that the thing does. Now we still need to do some rebating and liking some beats. So we need to fetch our timeline. It's the important thing.

01:43:33
<transcript>: let's

01:43:39
adamdotdev: !today

01:43:39
fossabot: Today Adam is working on bitter, a serverless twitter. Built to test the limits of concurrency within the serverless world.

01:43:40
<transcript>: Let's see. I just joined. Can I have a brief? What you're doing? I think it's in my command. Here.

01:43:40
<transcript>: today

01:43:41
<transcript>: Today.

01:43:47
<transcript>: Bitter a serverless. Twitter built a test the limits of concurrency within the service world.

01:43:47
<transcript>: not trying

01:43:49
aatishsai: what if your random point is at the end and you cant get any profiles

01:43:49
sydniv: okay got it

01:43:54
shiftlessatol: he simulating a twitter-esk ability using serverless tech

01:43:56
<transcript>: Not trying to launch a Twitter alternative, just trying to see what would it look like if you wanted to build serverless Twitter API and handle ten 0ft a second.

01:43:56
<transcript>: currently

01:44:02
<transcript>: Currently corresponding a to a sort to join Twitch and go through his wrapup process. Yes.

01:44:08
dejaime: may be a good time to launch one though LUL

01:44:17
<transcript>: What if your random point is at the end and you can't get any profiles? That's fine. They just wouldn't follow anybody. That's okay. Not everybody. Not every random user I make has to follow ten people. It doesn't really matter. I'm just trying to test, but I'm trying to load test it.

01:44:31
<transcript>: Twitter Escobility using Serverless tech. Welcome to Chat. Maybe a good time to launch one, though. Yeah. I mean, that's why I'm doing the test. It's just top of mind, but really, the thing I want to know is, how much does it cost to do this kind of stuff with serverless.

01:44:39
<transcript>: And how hard is it to get around some of the no, sorry Ruvus. How hard is it to work around some of the quotas.

01:44:39
<transcript>: some of the hard limits

01:44:41
<transcript>: Some of the hard limits, that kind of thing.

01:44:44
<transcript>: So okay after.

01:44:44
<transcript>: we beat

01:44:45
<transcript>: We beat.

01:44:57
<transcript>: We'll need to do some rebating. We'll probably want to randomize all this so that each individual session does like a random set of activities. It doesn't just do the exact same thing.

01:44:57
<transcript>: i want to

01:45:06
<transcript>: I want to create more of, like an actual what it looks like on Twitter.com, where they've got all this stuff happening, but we still haven't even built out all the API. We've got the Beat API.

01:45:06
<transcript>: it should be doing

01:45:10
<transcript>: It should be doing this transact. Right. Items here.

01:45:15
<transcript>: So it puts a beat into the table.

01:45:15
<transcript>: and

01:45:18
<transcript>: And then here.

01:45:20
<transcript>: We do a.

01:45:20
<transcript>: an update

01:45:23
<transcript>: An update to your Beat cap.

01:45:26
<transcript>: It's.

01:45:28
shiftlessatol: "re-beeting" which phonetically has a very different idea

01:45:28
<transcript>: Count.

01:45:32
<transcript>: counts count

01:45:32
<transcript>: counts count good

01:45:33
<transcript>: Counts, count, good.

01:45:38
<transcript>: Let's test this. I haven't tested the beat thing yet.

01:45:38
<transcript>: so

01:45:42
<transcript>: So I need to start working on these Seal I commands anyway. So the CLI command.

01:45:42
<transcript>: actually

01:45:46
<transcript>: Actually. Let's write a script. Let's write a script.

01:45:48
<transcript>: Here.

01:45:49
aatishsai: to add to the previous question if your random goes to end more often then not following will not invoke the write, right? so would that be a fair limit testing  Or am I missing something here

01:45:51
<transcript>: Let's create let's do.

01:45:55
<transcript>: S.

01:45:59
<transcript>: sri

01:45:59
<transcript>: sri so

01:46:03
<transcript>: Sri. So we'll just use the notice SDK instead of the CLI.

01:46:06
<transcript>: Rebating.

01:46:09
<transcript>: Phonetically has a very different idea.

01:46:09
<transcript>: to add

01:46:17
<transcript>: To add to the previous question if your random goes to end more often than not, following.

01:46:17
<transcript>: will oh if you're

01:46:23
<transcript>: Will oh, if you're random yeah goes to the end more often than not falling will not invoke the right.

01:46:23
<transcript>: so would that be

01:46:31
rekabik: What is a mjs file?

01:46:32
<transcript>: So would that be a fair limit testing, or am I missing something here? So the rights for likes. I'm not really for follows. I'm not really that concerned about.

01:46:36
<transcript>: The real critical one is beats per second. So when we do a beat.

01:46:36
<transcript>: we

01:46:38
<transcript>: We write a tweet. Basically.

01:46:38
<transcript>: that's

01:46:41
<transcript>: That's the one I care about the most.

01:46:56
<transcript>: Doing the follows was just to make sure people are getting followers randomly. And that'll just be distributed kind of randomly. But we want some people to have a lot of followers so that when they beat it has to propagate to all their timelines. And that's a whole bunch of rights. So it's just like.

01:46:56
<transcript>: it's

01:47:00
noctumsempra: @Rekabik JS module iirc

01:47:04
<transcript>: It's not important that everybody follows ten people. In fact, it should probably be random from zero to 100 people. Like throughout a session you follow.

01:47:04
<transcript>: some number of people

01:47:10
<transcript>: Some number of people, but doesn't matter how many. That's not really the main thing. I'm testing. It's just. It's kind of a necessary support thing.

01:47:10
<transcript>: in

01:47:13
<transcript>: In JS file is an ESM file.

01:47:17
<transcript>: It's ESM. Javascript module.

01:47:21
tastefulelk: Have you calculated how much the peak load "should" cost? Do you have a pull-the-plug budget?

01:47:23
<transcript>: So. Okay, we need to import. Let's see, what is this thing doing? It's just invoking a Lambda function.

01:47:23
<transcript>: that's all it's doing

01:47:26
shiftlessatol: use cases to push waves of data from a single entry

01:47:27
<transcript>: That's all it's doing. But we want to do different numbers.

01:47:27
<transcript>: like

01:47:30
<transcript>: Like invoke it in different regions.

01:47:32
<transcript>: At different speeds.

01:47:32
<transcript>: so

01:47:36
<transcript>: So let's see, I need my browser back.

01:47:43
<transcript>: In my browser, but I don't want to there. They did the vertical thing. That's what I wanted.

01:47:51
<transcript>: Okay no JS AWS SDK version three Lambda invoke just get some code here.

01:48:02
<transcript>: It is client land. I guess I need to install it to my Dev dependencies.

01:48:05
<transcript>: Yarn. Add.

01:48:05
<transcript>: dev

01:48:06
<transcript>: Dev.

01:48:06
<transcript>: at

01:48:07
<transcript>: At.

01:48:07
<transcript>: aw

01:48:10
<transcript>: Aws SDK client.

01:48:10
<transcript>: lambda

01:48:11
<transcript>: Lambda.

01:48:16
<transcript>: Cool.

01:48:19
<transcript>: So we're gonna import that.

01:48:23
<transcript>: And create a client like this.

01:48:32
<transcript>: Import all as AWS from client.

01:48:32
<transcript>: excuse me

01:48:33
<transcript>: Excuse me.

01:48:36
<transcript>: Maybe not though. Maybe.

01:48:45
<transcript>: We're going to just do Lambda.

01:48:56
<transcript>: Okay, so there's our read. Okay. So region, this is going to be us east one for now, but we're gonna call this.

01:48:59
<transcript>: We're gonna call it our.

01:49:01
<transcript>: Virginia.

01:49:04
<transcript>: Virginia client.

01:49:12
<transcript>: And then we can just do let's see.

01:49:12
<transcript>: the simplest

01:49:16
<transcript>: The simplest thing would be just Virginia client.

01:49:21
<transcript>: Send new invoke command.

01:49:21
grasp5533: VA!

01:49:28
<transcript>: Input is an invoke command. Input.

01:49:28
<transcript>: function

01:49:29
<transcript>: Function.

01:49:29
<transcript>: name

01:49:32
grasp5533: I'm in Richmond

01:49:32
<transcript>: Name, but it what do we need here.

01:49:32
<transcript>: invoke

01:49:34
<transcript>: Invoke.

01:49:34
<transcript>: okay

01:49:37
<transcript>: Okay. I'm gonna have to pee.

01:49:42
shiftlessatol: also, have you considered the price for when someone approaches you for this solution - after you have proven its effectiveness and built out the bulk of the foundation for a global beet-in'?

01:49:43
<transcript>: You're in Richmond, grass. Look at that USC. Swan. Not that far from you.

01:49:47
<transcript>: Calculate how much. Let's see, I'm missed a question here.

01:49:51
<transcript>: Have you calculated how much the peak load should cost.

01:49:51
<transcript>: do you have

01:50:08
<transcript>: Do you have a pull to plug budget? Yeah. So we started Sebastian doing another budget calculator because I had some bad assumptions. The first time I did it, first time I did it, I think it was something like 8000 a month or something. That was a terrible, terrible math, because I didn't factor in a whole lot of stuff with dining mode.

01:50:08
<transcript>: latest

01:50:09
<transcript>: Latest.

01:50:19
<transcript>: Assumptions look like I think a million a month for just DynamoDB. And then we got to figure out what all the other things would cost. What we're trying to do is figure out monthly costs.

01:50:19
<transcript>: with a budget

01:50:30
<transcript>: With a budget calculator and then figure out minute cost. So I know, like, can I run this thing for five minutes? And just like, burn through a bunch of credits, but not rack up a huge bill. That's the question.

01:50:30
<transcript>: have

01:50:36
01_pollux: dude what? 1M a month? how many users?

01:50:39
<transcript>: Have you considered the price for when someone approaches you for this solution after you've proven its effectiveness and building out the bulk of the foundation for Global Beat in.

01:50:41
<transcript>: So.

01:50:44
teej_dv: @01_pollux 17ish

01:51:01
<transcript>: Poly. To answer your question, how many users we're testing with actual Twitter load like Twitter averages 100 tweets per second, they burst up to 1500 tweets per second. We're trying to figure out, can we build in a little AWS account? Here a super dumb, naive Twitter API, just a small sliver of the service area. We're not doing DMs or.

01:51:01
<transcript>: a lot of the other

01:51:04
<transcript>: A lot of the other features that Twitter has, we're just focused on.

01:51:04
<transcript>: writing tweets

01:51:09
<transcript>: Writing tweets and fetching your timeline and doing those things both in a performant way.

01:51:09
<transcript>: in a global

01:51:18
shiftlessatol: "global text messages "

01:51:21
<transcript>: In a global way. So internationally having good latencies all over the place we're building is very crude API, and then we're trying to get a bunch of service limits increased so we can run a load test for like five minutes.

01:51:21
<transcript>: that's the goal

01:51:22
<transcript>: That's the goal.

01:51:22
<transcript>: but

01:51:26
<transcript>: But first I got a pee and I got some water, so I'll be right back.

01:51:30
01_pollux: awesome!

01:51:59
aatishsai: !nvim

01:56:15
<transcript>: So Mitchell saw me. Got Mac to me. Said one moment at one moment, please. Exactly.

01:56:17
<transcript>: 15 minutes ago.

01:56:17
<transcript>: it's been

01:56:23
<transcript>: It's been a moment. I hope he's joined Twitch? Are you here? Mitchell? Mitchell? Are you here.

01:56:27
<transcript>: Maybe not.

01:56:30
vagorge: he taking a coffee break lol

01:56:31
<transcript>: Okay. Oh, just sent a message. Let's see what he said.

01:56:41
<transcript>: I've reached out to my colleagues. Ooh, he just. I don't know. I think Mitchell's here. I honestly think he's here because he just sent this message after I just was kind of, like.

01:56:41
<transcript>: what's going

01:56:49
<transcript>: What's going on? Why would I heard from Mitchell, then suddenly, sorry to keep you waiting. I know you're here, Mitchell. Somebody find Mitchell.

01:56:54
<transcript>: Taking a copy break.

01:56:54
<transcript>: i've reached

01:57:13
<transcript>: I've reached out to my colleagues. Unfortunately, I'm going to have to close the chat. This is not the standard approach for troubleshooting issues with a to bitch premium story. Oh, no. If you're interested in a public facing workshop, something that can be arranged online with a fully consent of all parties involved. Oh, no. Am I doing something I shouldn't? If you're interested in a public publicfacing workshop, something that can be arranged offline.

01:57:13
<transcript>: oh

01:57:14
<transcript>: Oh.

01:57:17
levifig: ooof he got called out :(

01:57:18
<transcript>: So sorry if I'm.

01:57:18
<transcript>: doing

01:57:19
<transcript>: Doing.

01:57:19
<transcript>: something

01:57:20
<transcript>: Something.

01:57:22
<transcript>: Against.

01:57:24
<transcript>: Terms.

01:57:27
<transcript>: Was not my intent.

01:57:29
laytanl_: Twitch not allowed oof

01:57:32
<transcript>: Okay. Apparently, I should not be sharing my support chat.

01:57:35
<transcript>: On.

01:57:35
<transcript>: twitch

01:57:38
laytanl_: feeling watched

01:57:39
donald_boi: they watching you LUL

01:57:39
<transcript>: Twitch. I think that's what he's saying. I'm not really great at reading.

01:57:39
<transcript>: comprehension

01:57:41
<transcript>: Comprehension.

01:57:41
<transcript>: i think that's

01:57:43
<transcript>: I think that's what I think that's what he said.

01:57:43
<transcript>: so i closed this

01:57:44
daglee: Don't twitch and twitter!

01:57:48
<transcript>: So. I closed this. I'm sorry, Mitchell. I'm sorry, Mitchell. They're watching me. Oh, no.

01:57:54
<transcript>: Don't Twitch in Twitter at the same time. That's right.

01:57:54
<transcript>: don't wait

01:57:56
<transcript>: Don't wait, don't Twitch. In Twitter.

01:57:56
<transcript>: what did i do

01:57:59
donald_boi: I wonder how they even found out?

01:58:00
mattmancodes: LUL

01:58:00
<transcript>: What did I do on Twitter? Did I say something on Twitter about my support case.

01:58:06
<transcript>: I don't know. Are we doing a workshop? Is this a workshop? People? I guess it kind of is.

01:58:09
<transcript>: I guess it's like a workshop that's free.

01:58:09
<transcript>: it's free

01:58:15
<transcript>: It's free. So I feel like it's not a workshop. If I were charging you all money and then I feel like the workshop.

01:58:15
<transcript>: how

01:58:16
daglee: No, but you are inventing twitter! I mean bitter!

01:58:19
<transcript>: How they even found out oh, I've linked my Twitch.

01:58:23
<transcript>: And Vinning Twitter. I mean, bitter, Yeah.

01:58:23
<transcript>: no i

01:58:28
<transcript>: No, I definitely linked to my Tweets, my Twitch chat. I asked Mitchell to join that's. How.

01:58:28
<transcript>: unaware

01:58:28
donald_boi: hahahahaha LUL

01:58:30
<transcript>: Unaware of the terms or whatever.

01:58:30
<transcript>: is involved here

01:58:32
<transcript>: Is involved here.

01:58:39
<transcript>: Like I was so unaware of the rules that I actively tried to get Mitchell to come on to Twitch and help me solve this issue.

01:58:40
<transcript>: live on

01:58:41
donald_boi: hi mitchel sorry

01:58:51
<transcript>: Live on Twitch apparently can't do that. I thought since Amazon owned Twitch, maybe was like, I don't know, but apparently I shouldn't share. I think it's the sharing the Twitch chat is probably the problem.

01:58:51
<transcript>: or the

01:58:51
simonaut_: lol

01:58:57
levifig: "cross-promotion"

01:58:58
<transcript>: Or the AWS support chat. I probably shouldn't have that up on screen. I guess I'm not sure. I'm really not sure what the rule is.

01:58:58
<transcript>: but apparently

01:59:09
<transcript>: But apparently this is public workshop like and I hope they don't just Nix all of my support requests now because they don't want me to do this load test publicly in a workshop style event.

01:59:12
<transcript>: I don't know.

01:59:15
simonaut_: it allows them to fob you off with a bad reply in private Kappa

01:59:17
<transcript>: I don't know. Welcome to Chat. Simon. Appreciate that.

01:59:26
<transcript>: Hi, Mitchell. I'm sorry. Early. I'm sorry, Mitchell. If I did something that got you in trouble, I wouldn't have gotten into trouble. I don't think.

01:59:26
<transcript>: allows

01:59:30
<transcript>: Allows them to fob you off with a bad reply in private.

01:59:35
<transcript>: What's fob you off.

01:59:47
<transcript>: So I have to get permission.

01:59:49
simonaut_: its like a kinda "go away plz"

01:59:52
vim_cerf: would be such a stupid move from aws part if they just dropped all your tickets when you're an aws hero.

01:59:53
<transcript>: To do things with support staff on Twitch.

01:59:54
<transcript>: On.

01:59:54
<transcript>: in a public

01:59:57
<transcript>: In a public setting. That's what I'm gathering.

01:59:58
donald_boi: how is serverless treating you?

02:00:02
daglee: I think fob is just "f**k" but pg13

02:00:08
<transcript>: Kind of like go away, please gotcha.

02:00:10
simonaut_: what are you building?

02:00:20
mattmancodes: Raul didn't mind. Big up Raul the MVP

02:00:21
<transcript>: I don't think they'll drop all my tickets, but I do wonder if they're now looking at my my load test thing here with the more critical I and they don't want me to do this. I don't know. I don't know why they wouldn't, but.

02:00:25
<transcript>: Maybe they don't want me to do it.

02:00:25
<transcript>: with people

02:00:29
<transcript>: With people watching as I interact with support that makes sense.

02:00:29
<transcript>: but surely

02:00:31
<transcript>: But surely they're okay with me doing it.

02:00:39
<transcript>: Okay. What's required here? Function name? Is that it.

02:00:41
<transcript>: 's supposed to allow a function name.

02:00:45
<transcript>: Okay. Actually I can get the function name.

02:00:48
<transcript>: I can import it.

02:00:50
<transcript>: Import.

02:01:07
<transcript>: I think I can do this.

02:01:09
<transcript>: Output.

02:01:12
<transcript>: Yeah, I can.

02:01:17
<transcript>: This is awesome. Look at that.

02:01:25
<transcript>: So that's how I'm gonna invoke it.

02:01:30
<transcript>: Send this is going to be a promise.

02:01:37
<transcript>: I think we're the Follow Mitchell. I mean Pinty again.

02:01:42
<transcript>: Raw. Didn't mind Raoul. He was cool with it.

02:01:42
<transcript>: i mean he

02:01:48
<transcript>: I mean, he didn't like join Twitch. I don't think. But he didn't tell me I shouldn't be doing this.

02:01:53
<transcript>: How is Serverless treating me? It's treating me great. I think Bob is just.

02:01:57
<transcript>: Doing it. Gotcha what are we? Building? We are building.

02:01:59
adamdotdev: !today

02:01:59
fossabot: Today Adam is working on bitter, a serverless twitter. Built to test the limits of concurrency within the serverless world.

02:02:02
<transcript>: We're building a Twitter API clone.

02:02:07
<transcript>: Built only to test the limits of serverless technology.

02:02:14
<transcript>: Okay. So if I run this thing now got us EAS one I'll have so we'll also have like.

02:02:17
<transcript>: Not Virginia, but we'll have.

02:02:19
<transcript>: Like.

02:02:19
<transcript>: what's

02:02:21
<transcript>: What's, Oregon.

02:02:27
<transcript>: Oregon Organ Client. And this will be US West.

02:02:34
<transcript>: I feel bad about how I exited with Mitchell. I just felt like I should close the chat as quickly as possible.

02:02:34
<transcript>: because i

02:02:38
<transcript>: Because I felt like that was the thing. They were hung up. Like they didn't want me sharing.

02:02:40
<transcript>: Support.

02:02:40
<transcript>: live support

02:03:00
<transcript>: Live support over Twitch. I think I was doing it in line, and I just. I felt like I should close as quickly as possible, but I didn't really say goodbye. I didn't really have a good ending there. And I felt like I was a little abrupt, just like, oh, I didn't mean to. I'm sorry. And I closed it. Feel bad about it now. I don't know. Mitchell, if you're listening, I'm sorry. I'm sorry for the way I handle that. I was not trying to.

02:03:00
<transcript>: what i

02:03:16
<transcript>: What I'm not. I don't work at Amazon, so I don't know all the leadership principles, and I don't know all the terms of service when it comes to streaming. When I'm doing on Twitter, I mostly just stream and I don't think about what I'm doing or sharing. I'm sorry, Mitchell, and I'm sorry. Aws. And whoever else might be upset.

02:03:18
<transcript>: Okay.

02:03:22
<transcript>: Oregon client. We're gonna have a Frankfurt.

02:03:22
<transcript>: frank

02:03:24
<transcript>: Frankfurt client.

02:03:24
<transcript>: which is

02:03:26
<transcript>: Which is gonna be.

02:03:29
<transcript>: Eu Central one.

02:03:32
<transcript>: And then we're gonna have the two.

02:03:34
<transcript>: Asia.

02:03:34
<transcript>: regions

02:03:36
<transcript>: Regions that I can ever remember.

02:03:39
<transcript>: Sydney is.

02:03:39
<transcript>: let's see

02:03:41
<transcript>: Let's see, what am I doing.

02:03:43
uberrick: What have you done now Adam. Join to an apology :D

02:03:46
<transcript>: Sydney.

02:03:49
uberrick: How are you oding?

02:03:49
<transcript>: Is I want to say.

02:03:49
<transcript>: april

02:03:50
<transcript>: April.

02:03:52
uberrick: doing even

02:03:53
2dorkstv: morning, folks!

02:03:55
<transcript>: Two, I think that's actually right. And this is a.

02:03:58
<transcript>: South one.

02:03:58
<transcript>: maybe

02:03:59
<transcript>: Maybe.

02:04:04
<transcript>: This is going to be the Mumbai.

02:04:07
<transcript>: Okay.

02:04:07
<transcript>: two dorks

02:04:08
uberrick: Morning @2DorksTV or afternoon

02:04:12
<transcript>: Two Dorks is here. Good morning, Tutorik. Is here. What have you done now? Joined to an apology.

02:04:12
<transcript>: ham

02:04:14
<transcript>: Hamd, thanks so much for the fall.

02:04:14
<transcript>: we

02:04:29
2dorkstv: morning for me. chugging some coffee. Trying to get rolling :D

02:04:32
<transcript>: We root Rick. I was I was working with a Tobis support, and I was just streaming it because I stream whatever I do on the days that I stream, and apparently I shouldn't have. I think it was something they didn't want me to do. They said we could host a public workshop and arrange that offline. If I'd like, I would not like.

02:04:32
<transcript>: if this is

02:04:38
<transcript>: If this is workshops, and I guess I do love workshops, but I think of it as building stuff on Twitch.

02:04:38
<transcript>: and

02:04:39
<transcript>: And.

02:04:39
<transcript>: they cut

02:04:42
<transcript>: They cut like said they couldn't help me.

02:04:42
<transcript>: in this

02:04:46
<transcript>: In this setting or something like that. I forget what he even said. But I.

02:04:46
<transcript>: read into it

02:04:54
<transcript>: Read into it that this is bad. Stop doing this. Don't share your screen while you talk to chat or while you talk to support.

02:04:54
<transcript>: i'm apolog

02:04:55
<transcript>: I'm apologizing.

02:05:02
<transcript>: Good morning to DORCs checking some coffee. Trying to get rolling. Yep. That's how you start. How the morning starts.

02:05:05
<transcript>: Alright.

02:05:11
<transcript>: Virginia clock. So we're just gonna invoke it one time. Let's just invoke it one time. What do you say.

02:05:15
<transcript>: I deploy this recently. I think so. No, maybe not.

02:05:15
<transcript>: yeah

02:05:17
<transcript>: Yeah. I think I did.

02:05:21
<transcript>: Let's run this script. We say, let's just do.

02:05:23
<transcript>: Node.

02:05:29
<transcript>: Yo, what version is this? Node? 16 node? And then we're gonna do.

02:05:30
<transcript>: Scripts.

02:05:37
<transcript>: I'm in the API Direct. Yeah, that's right. Scripts test.

02:05:40
<transcript>: I just do that. It's gonna say something.

02:05:40
<transcript>: what's it say

02:05:43
<transcript>: What's it say import assertion of type JSON.

02:05:45
<transcript>: What.

02:05:48
<transcript>: Oh, it's it's a my, what.

02:05:51
fredkisss: Maybe they donâ€™t want you to disclose sensitive information?

02:05:52
<transcript>: Module.

02:05:57
<transcript>: Outputs you saw needs an import assertion of type JSON. Oh, it's like you have to import.

02:06:00
<transcript>: As JSON or something. Output.

02:06:00
<transcript>: as

02:06:02
<transcript>: As JSON.

02:06:02
<transcript>: no

02:06:04
<transcript>: No, How's dumb.

02:06:09
<transcript>: Mds. Import JSON. File.

02:06:16
<transcript>: They don't want you to disclose sensitive information. Oh, that's totally fair, Fred. I'm sure that's there's probably lots of reasons I should not be.

02:06:16
<transcript>: streaming what

02:06:18
<transcript>: Streaming? What I stream.

02:06:18
<transcript>: and

02:06:21
<transcript>: And I just don't always have someone to tell me that.

02:06:27
<transcript>: This time I had Mitchell, and he let me know. Probably not a good idea to stream this. It might be for my own sake.

02:06:30
<transcript>: Experimental JSON modules.

02:06:33
<transcript>: Is that all I need to do.

02:06:38
<transcript>: I do not. I do not fault Mitchell. In this instance.

02:06:38
<transcript>: this is my

02:06:41
<transcript>: This is my fault? This is all my fault.

02:06:46
<transcript>: Node experimental JSON modules.

02:06:50
<transcript>: Needs to import assertion of type JSON.

02:06:57
<transcript>: That's not what I want.

02:06:57
<transcript>: needs and

02:07:01
<transcript>: Needs and import assertion of type JSON.

02:07:07
<transcript>: Assert type JSON just like that.

02:07:13
<transcript>: Doesn't like it though.

02:07:16
<transcript>: Or JSON from Food. Json.

02:07:24
<transcript>: What's the problem here.

02:07:27
pogjar: add a semicolon

02:07:29
<transcript>: 's the problem is see.

02:07:31
<transcript>: seem

02:07:31
<transcript>: seem like

02:07:33
2dorkstv: Oh I would definitely accidentally show my secret keys at some point :P

02:07:33
<transcript>: Seem like I don't think I need the semicolons.

02:07:39
<transcript>: My prettier says I don't.

02:07:50
<transcript>: I don't understand.

02:07:54
<transcript>: I've done this a million times.

02:07:58
<transcript>: Should I import.

02:08:01
<transcript>: All as.

02:08:03
uberrick: what is the assert { stuff on the 2nd line

02:08:05
<transcript>: Doesn't like assert. Oh, wait, it really does say.

02:08:05
<transcript>: semicol

02:08:07
<transcript>: Semicolon expected. Where.

02:08:11
<transcript>: Okay. You tried to tell me I'm dumb, and I ignored you.

02:08:21
<transcript>: You can still import Require in an Es Six module for no disk. Oh, do I just need to use Require instead of import? Maybe.

02:08:23
<transcript>: Maybe we need to do require.

02:08:25
<transcript>: So.

02:08:27
<transcript>: Like this.

02:08:29
<transcript>: No request.

02:08:32
<transcript>: Outputs.

02:08:32
daedalusos_: Try it and see if it compiles, maybe just a linting error?

02:08:35
<transcript>: Equals require.

02:08:40
<transcript>: No, I don't need all this stuff. Probably.

02:08:45
<transcript>: Just like that maybe.

02:08:55
<transcript>: No requires not defined in Es module scope. You can use import instead. I know you can do this.

02:09:03
uberrick: usually can import from file path without assert?

02:09:04
<transcript>: I could just read the file. That's a good point.

02:09:04
<transcript>: but

02:09:09
<transcript>: But I'm just sure I can do this from NodeJS 16 and okay. Just like this.

02:09:09
<transcript>: import that

02:09:15
<transcript>: Import that from that assert. Type JSON. I'm doing exactly this right.

02:09:15
<transcript>: what

02:09:17
<transcript>: What am I doing differently.

02:09:20
pogjar: its a tsc issue

02:09:25
<transcript>: Cert type JSON. Maybe it's just my maybe it'll actually work. I don't know if I even try that.

02:09:25
<transcript>: it works

02:09:26
<transcript>: It works.

02:09:26
<transcript>: okay

02:09:28
<transcript>: Okay, it works.

02:09:31
<transcript>: Just seem to ignore.

02:09:31
<transcript>: type

02:09:32
<transcript>: Typescript or whatever.

02:09:32
<transcript>: is barking at me

02:09:34
<transcript>: Is barking at me.

02:09:38
<transcript>: Okay. So did it run. We'll see if it ran.

02:09:44
<transcript>: Oh, Geez, I don't want to show more case details. I feel like I shouldn't show that.

02:09:46
<transcript>: Okay.

02:09:46
<transcript>: lambda

02:09:48
<transcript>: Lambda function. Here we go.

02:09:50
<transcript>: Here we go.

02:09:54
<transcript>: Yeah. Good call. Dead.

02:09:56
<transcript>: deadloose try

02:09:56
<transcript>: deadloose try it and see if it comp

02:09:58
<transcript>: Deadloose. Try it and see if it compiles. Maybe just a little.

02:10:03
<transcript>: What is the assert stuff on the second line.

02:10:09
<transcript>: I think we saw about that usually can import from five passes out of Cert. Yeah, also.

02:10:09
<transcript>: it's a t

02:10:11
<transcript>: It's a TSC issue, so we're not worried about it.

02:10:14
<transcript>: Let's view logs.

02:10:14
<transcript>: let's see

02:10:20
<transcript>: Let's see. This is our Lambda function. We're gonna see if we just invoked it at 821. We did.

02:10:20
<transcript>: and

02:10:23
de_pannu: ur followers have increased since the last time I was here

02:10:28
<transcript>: And did it work? No. So what? We logged. Profile. That's my profile right there. Jim Guzman.

02:10:28
<transcript>: and

02:10:30
<transcript>: And then.

02:10:30
<transcript>: we

02:10:33
<transcript>: We found a bunch of random people.

02:10:38
<transcript>: Five of them. There may only be five users right now. I've just run it a couple times.

02:10:42
<transcript>: Beats count zero. Zero followers count nine.

02:10:42
<transcript>: okay

02:10:47
<transcript>: Okay. So the follows seems to be working. But then what is this.

02:10:47
<transcript>: cannot read

02:10:49
<transcript>: Cannot read property beat of null.

02:10:49
<transcript>: oh

02:10:50
uberrick: 3k giveaway soon right Adam? LUL

02:10:50
<transcript>: Oh.

02:10:52
<transcript>: Okay.

02:10:52
<transcript>: so

02:10:55
<transcript>: So our beat command.

02:11:02
<transcript>: Let's see. Actually, I want to see what is this TypeScript type script thinks there should be an.

02:11:02
<transcript>: semicolon

02:11:03
<transcript>: Semicolon.

02:11:07
<transcript>: That doesn't make TypeScript happy.

02:11:12
<transcript>: It thinks there shouldn't be an assert after. Yeah, yeah, okay, that's fine.

02:11:14
<transcript>: We could just do, like.

02:11:20
<transcript>: No, I guess is that gonna Am I gonna lose.

02:11:20
<transcript>: it didn't work anyway

02:11:21
<transcript>: It didn't work anyway.

02:11:26
vim_cerf: @UberRick Hopefully it's a LÃ„RABAR

02:11:27
<transcript>: Whatever. This is a TypeScript file. Wait. This is a TypeScript file.

02:11:31
<transcript>: Type script shouldn't be running in here. This is.

02:11:35
<transcript>: An ESM script.

02:11:38
<transcript>: Let's just say Tsk, exclude.

02:11:57
<transcript>: Okay. Does that work.

02:12:03
<transcript>: Hopefully, it's a Lar bar.

02:12:09
<transcript>: I do have a Lar bar. What? Oh, wait 30. Giveaway soon. Right.

02:12:09
<transcript>: your followers

02:12:14
<transcript>: Your followers have increased since the last time I was here. They do generally increase each stream.

02:12:14
<transcript>: i guess

02:12:20
fragaverage: a larabar box giveaway?!

02:12:24
<transcript>: I guess I don't know if that's just like the nature of Twitch or if I'm doing something right. They do seem to go up and not down. I guess some days they may go down and I don't know this.

02:12:24
<transcript>: but

02:12:28
<transcript>: But you're saying I should give away a Lara bar like this one.

02:12:32
<transcript>: That actually beyond.

02:12:37
<transcript>: You people that can't buy larbars about the Lar bars.

02:12:42
<transcript>: Okay so I didn't actually work is still doing TypeScript on this file.

02:12:49
<transcript>: I want to be bothered by that. But I'm also kind of like trying not to be.

02:12:51
uberrick: I think so, UK deprived of it

02:12:56
<transcript>: Whatever right? Who cares? Right? Well, I care.

02:12:56
<transcript>: but also

02:13:00
<transcript>: But also like, who cares? Let's just restart him.

02:13:12
<transcript>: The Runtype grip.

02:13:17
<transcript>: After language server Why are you running.

02:13:20
<transcript>: Oh, this is an Indian thing, I guess.

02:13:20
<transcript>: i guess

02:13:22
<transcript>: I guess my INM config.

02:13:31
<transcript>: Whatever I'm gonna move on, but I'm guessing I just have inventory to run TypeScript on all MJS files. I'd be dumb.

02:13:31
<transcript>: that would be really

02:13:33
<transcript>: That would be really dumb.

02:13:41
<transcript>: Okay yeah so 3000 followers will do a Lar bar box giveaway.

02:13:41
<transcript>: why not

02:13:50
<transcript>: Why not? That sounds fun. You get to pick the flavor. But if you pick anything other than peanut butter, chocolate chip or chocolate cookie dough, you're wrong. Just say no.

02:14:08
<transcript>: So got our test handler.

02:14:16
laytanl_: cost more to ship than the actual bar

02:14:19
<transcript>: This is where I hear we're trying to do a mutation.

02:14:32
<transcript>: Okay, so meat.

02:14:38
<transcript>: Wait. This is along the responder.

02:14:48
laytanl_: iew

02:14:50
<transcript>: Slogger response. We say.

02:15:05
<transcript>: Another Popa. Thank you for the followup Papa Pop. A. P. First.

02:15:11
<transcript>: More to ship than the actual bar.

02:15:11
<transcript>: that's

02:15:14
<transcript>: That's a cost I'm willing to incur later.

02:15:14
<transcript>: i

02:15:17
<transcript>: I will front that copy so that you can enjoy some wire bars.

02:15:25
<transcript>: Does anyone in Chat actually eat? Larabars? Am I the only human being in this very chat in this video.

02:15:25
<transcript>: that

02:15:27
<transcript>: That eats larbars.

02:15:32
pogjar: what is a larbar

02:15:37
<transcript>: What is the Lar bar.

02:15:41
<transcript>: It's only the greatest snack bar ever invented.

02:15:45
<transcript>: Laura herself invented the Lara bar.

02:15:48
2dorkstv: we need to get a you a larbar sponsorship with all this free promotion :D

02:15:48
<transcript>: 100% real Ingredients 100% delicious.

02:15:49
mattmancodes: Larabar Choc Chip Brownie box of 16 - 136 UK pounds to buy on Amazon

02:15:52
<transcript>: So they're made of, like, just a few things, right.

02:15:52
<transcript>: so the peanut

02:15:55
<transcript>: So the Peanut Bird trial Chip has a little more.

02:15:58
<transcript>: Some of them some of them there's. Laura.

02:16:02
<transcript>: Some of them only have like three ingredients. It's mostly like dates and nuts.

02:16:06
<transcript>: So here the one that I eat the most pinwich auto chip.

02:16:06
<transcript>: does it say

02:16:10
<transcript>: Does it say the ingredients on here? No, it's like dates, peanuts.

02:16:17
shiftlessatol: I do!

02:16:19
<transcript>: Okay. We'll blinking. I don't know. But they're mostly like dates and nuts. That's why we like them sometimes. Around here.

02:16:31
<transcript>: We eat a lot of dates in this household. We need to get you a Larvae sponsorship with all this free promotion. We really should. I don't know what the larvae people like, what they think about Twitch and specifically the programming.

02:16:34
<transcript>: Niche on Twitch.

02:16:34
<transcript>: it's

02:16:43
<transcript>: It's up and coming. I feel like we can. We can show some nice numbers. There's growth in the programming and software development or whatever. Software and game development Nish on Twitter.

02:16:49
2dorkstv: "something something brain fuel. Eat a Larabar"

02:16:51
<transcript>: Yeah, I would love to get a sponsorship. I'd love to never pay for Lara Bars again. I'd love to just get boxes of them. Build a giveaway. Boxes of them.

02:16:51
<transcript>: but it only will

02:16:53
<transcript>: But it only will.

02:16:53
<transcript>: actually buying

02:16:58
<transcript>: Actually buying Lara Bars? Does anyone buying Lara bars? Because they saw my stream. And they're like, that sounds delicious.

02:17:00
pogjar: im buying the cherry pie ones now

02:17:04
<transcript>: Then I can point to that. I can say, Listen, I'm increasing your sales globally.

02:17:06
laytanl_: does it ship to europe?

02:17:09
vim_cerf: Oh... the umluats in LÃ¤ra were just decoration? :( "LÃ¤ra" means to learn or teach in Swedish. So I thought it had a greater meaning.

02:17:10
laytanl_: probably not right

02:17:11
<transcript>: You're buying the cherry Pi ones right now. There you go. Someone quote, someone clipped that. I'll send it to Laura.

02:17:19
mattmancodes: Larabar: "if you'd like to do a workshop, we can arrange something"

02:17:21
<transcript>: Lara Barbara Chocolate Chip brownie box of 16, 136 UK pounds to buy on Amazon. I heard UK pounds aren't doing so great. How much is that? In dollars.

02:17:26
<transcript>: Oh, Dave, by slow bars? Something something brain fuel? Eat a larbar.

02:17:28
2dorkstv: lol @mattmancodes

02:17:29
<transcript>: Does it shift to Europe? I'm not actually sure.

02:17:36
<transcript>: The unlocked in Laura were just decoration. Lara. Means to learn or to teach in Swedish. Oh, interesting.

02:17:36
<transcript>: probably not

02:17:42
<transcript>: Probably not a greater meaning, though I think it's just her name. And they put some they put some dots over the a.

02:17:45
<transcript>: Lara, Barbara, if you'd like to do a workshop.

02:17:49
<transcript>: That was the best joke of the day. That was a good one, Matt.

02:17:57
<transcript>: I need to learn the rules of Corporate America. I don't know them.

02:18:02
uberrick: LUL "I've heard the GBP is worth nothing so sounds right"

02:18:03
<transcript>: Okay. So we just deployed this change. I just want to see this thing logged. So we're gonna do node.

02:18:03
<transcript>: like that

02:18:05
<transcript>: Like that.

02:18:05
<transcript>: save for the

02:18:08
<transcript>: Save for the follow devitrix be tricky.

02:18:08
<transcript>: i

02:18:10
<transcript>: I wanted to say Beatrix.

02:18:11
daglee: But I like E278 , it's my favorite ingredient. Who is to say what is a real ingredient... :(

02:18:22
mattmancodes: $158 = 136 GBP

02:18:30
<transcript>: A Hoo Boobie who Bowby. Thank you for the follow. A Hoo bow be and also God UDAs things as follows. I appreciate your follows. They make me feel good. I haven't said it in a while, but I love I love the follows for one reason. And that's because I know people that follow are probably gonna come back again like you follow me because you want to know if I stream again.

02:18:30
<transcript>: you would come back and

02:18:44
<transcript>: You would come back and watch. That means there will be more of you hanging out every time I come on here. I like to have people hanging out with me and so follows make me think I will continue to have people that come and hang out. That was a lot of words for not very much meaning. I just said.

02:18:51
<transcript>: Not the most efficient with the English language. Okay, here we go. Invoke error.

02:18:58
<transcript>: That's not the air. Where's the. Oh, these are the responses. Okay, so here should be my beat response.

02:19:07
<transcript>: No, maybe not. Is this the beat one? Oh, no. These are just. I can't make sense of these. Oh.

02:19:07
vim_cerf: @daglee is that a valid E-number?

02:19:09
<transcript>: Oh, bummer.

02:19:09
<transcript>: i'm gonna actually

02:19:11
<transcript>: I'm gonna actually do the JSON.

02:19:14
<transcript>: Yeah.

02:19:16
<transcript>: Okay.

02:19:16
<transcript>: so

02:19:17
laytanl_: I have used terraform before, is cdk significantly better in your opinion?

02:19:22
<transcript>: So we didn't get anywhere on that test. Man, I'm really bummed about my support situation. I'm worried.

02:19:22
<transcript>: i'm

02:19:24
<transcript>: I'm worried.

02:19:24
<transcript>: that this

02:19:27
<transcript>: That this test is gonna fall over really fast.

02:19:27
<transcript>: because

02:19:28
<transcript>: Because.

02:19:34
<transcript>: Oh, shoot, I can't do that twice.

02:19:36
<transcript>: Can't.

02:19:40
<transcript>: Wait.

02:19:40
<transcript>: j

02:19:52
<transcript>: Json. Yeah, I'm worried. I'm not gonna eat my limits increase, and then I can fix the global table issue. That's just an issue. It's just a straight up issue. It's not like I'm not trying to be mean, just.

02:19:52
<transcript>: an issue

02:19:53
<transcript>: An issue.

02:19:58
shiftlessatol: "I'm not the most efficient - with the English language "  That's why he built an NLG  He's really efficient at making computers be efficient with the English language

02:19:59
<transcript>: Raw. And then this will also be raw.

02:20:05
<transcript>: Raw I feel like we hit a bug on deploying global tables.

02:20:10
<transcript>: Now sign, are we taken seriously? Because I was dumb and I streamed it on Twitch.

02:20:14
<transcript>: Unfortunately.

02:20:19
<transcript>: I've heard the great bit of.

02:20:22
<transcript>: Is worth nothing so sounds right.

02:20:26
<transcript>: Let's see.

02:20:26
<transcript>: i

02:20:32
<transcript>: I like E 278. It's my favorite ingredient. What? Who's to say? What is a real ingredient.

02:20:37
<transcript>: $158 Equals 136 Great British pounds.

02:20:38
daglee: @vim_cerf No clue

02:20:43
<transcript>: Okay, wait. So great. British pounds are worth more than a dollar.

02:20:48
<transcript>: I don't understand. I'm lost. I've used TerraForm before.

02:20:48
<transcript>: is cdk

02:20:50
sargath666: yes

02:20:51
<transcript>: Is CDK significantly better in your opinion.

02:20:55
mattmancodes: yes

02:21:03
uberrick: always been worth more

02:21:08
<transcript>: I am not a Terraformer. I think I think it's because I'm a startup person, like, I like working on very tiny teams. And I feel like TerraForm mostly is like the thing you use if you're at a big company, it seems to skew that way. I'm not sure why.

02:21:08
<transcript>: big companies

02:21:11
<transcript>: Big companies used to reform small companies don't.

02:21:11
<transcript>: in my experience

02:21:15
<transcript>: In my experience, there's obviously edge cases. There's small companies using it. But like.

02:21:15
<transcript>: i think

02:21:17
uberrick: "back in my day you used to be able to get 2 dollars for a pound"

02:21:23
<transcript>: I think that's why I'm not really into TerraForm is I'm just part of that crowd. It's kind of like small company. The rebels.

02:21:23
<transcript>: so

02:21:26
grasp5533: I found terraform extremely verbose

02:21:37
effektivdev: TF is basically documentation, and a way to quickly replicate your environmentâ€¦ which you hope to never use :P

02:21:38
sargath666: 1GBP is 1,16$ now

02:21:43
<transcript>: So I don't have an objective opinion on the marriage. I think there's a lot of infrastructure as code tools. They all have pros and cons. Eventually, I'm gonna do, like, a full writeup. I'm gonna, like, play with all of them, build the same thing with all of them, and then compare them, make one big video that's, like, every infrastructure is code tool. Like, dozen of them. I'll do that eventually. But right now I would just say, I like.

02:21:43
<transcript>: working

02:21:49
<transcript>: Working with the CDK. I'm productive with it if you're my more productive with TerraForm, I don't think there's any reason not to use TerraForm.

02:21:51
<transcript>: I need to invoke this function.

02:21:55
<transcript>: I just like, I like it being in TypeScript.

02:21:55
<transcript>: i like to see

02:21:56
effektivdev: HCL is ugly af tho :X

02:22:01
<transcript>: I like to seek for that reason. The main reason I use the CDK is the grant functions.

02:22:05
<transcript>: So Grant read or something? Yeah.

02:22:05
<transcript>: like here

02:22:17
<transcript>: Like here to take a Dynamo table, and then to say, Grant, read, write data or Graph stream read on an actual Lambda function. That's just I love that because it's a way to do like.

02:22:20
laytanl_: Yeah thats a good reason, the editor integration when using typescript is just better

02:22:22
<transcript>: Appropriate permissions for your compute or for your whatever.

02:22:25
mattmancodes: HCL is ugly but still better than VTL

02:22:30
<transcript>: Without having to write. I am policies like I can just write grant stream read and I know I'm giving that function.

02:22:30
<transcript>: the min

02:22:33
laytanl_: Terraform has an lsp but its bad

02:22:37
<transcript>: The minimal necessary permissions to read the stream off the Dynamo table. I love this. This saves like I don't know 65 lines of you.

02:22:45
<transcript>: And I am declarations. That's why I use the CDK. Otherwise I'd probably just use straight copy confirmation because I'm kind of like that.

02:22:58
<transcript>: I'm not the most efficient with the English language builtin NLG. He's really efficient at making Peters be efficient with English language. Yeah, kind of.

02:23:01
<transcript>: Let's see.

02:23:01
<transcript>: back

02:23:06
<transcript>: Back in mind, the easiest you should be able to get $2 for a pound. Really.

02:23:14
<transcript>: Terraform is extremely verbose. Yeah, I just don't want to learn their DSL. I just don't want to learn a new thing.

02:23:14
<transcript>: they're

02:23:16
<transcript>: They're language.

02:23:16
<transcript>: turtle is basically

02:23:20
<transcript>: Turtle is basically documentation and a way to quickly replicate your environment, which you hope to never use.

02:23:25
<transcript>: Effective Div. Welcome to Chat. Also. Great take.

02:23:25
<transcript>: really all

02:23:27
laytanl_: I am going to look into cdk, the next time I need IAC

02:23:35
<transcript>: Really all of infrastructure as code in like you're using like ephemeral Dev environments. Like really like throwaway environments, which I do actually, but I'm like one person. I'm not a whole team.

02:23:43
<transcript>: But for the most part like people are putting stuff in infrastructure as code and hoping they never have to reproduce their production environment.

02:23:43
<transcript>: and yeah that's

02:23:46
dosembe: offt-topic: is it possible to access a cloud database (azure sql) from a react app?

02:23:47
<transcript>: And yeah, that's kind of a just general take on Infrastructure's code.

02:23:54
<transcript>: Hdl is ugly. Yeah, I've heard that's good reason the editor integration when using TypeScript is just better. I love it.

02:24:14
<transcript>: Hdl is ugly but still bad in VTL. There's an accurate take. Vtl is definitely the worst. Terraform has an LSP, but it's bad. I'm going to look in the CDK next time I need IAC. Yeah. Then you're just using a wonderful TypeScript language server, which is good. Deep. Welcome to Chat off topic. Is it possible to access the cloud database Azure SQL from a React app? Of course.

02:24:14
<transcript>: well

02:24:15
effektivdev: are we about to go back to XML? *hides*

02:24:18
grasp5533: VTL lets you do cool resolers though

02:24:24
<transcript>: Well wait. From a React app, I probably wouldn't expose the database directly to your React app, but like through some kind of thing in between them.

02:24:24
<transcript>: that's oh

02:24:29
<transcript>: That's. Oh, you're saying probably directly. Can you hit your database from your reaction.

02:24:29
<transcript>: probably not a good

02:24:29
uberrick: @dosembe likely will need a backend for frontend like the Next API

02:24:32
<transcript>: Probably not a good idea just generally to give like the browser.

02:24:35
<transcript>: Direct access to your database.

02:24:40
<transcript>: That's that's a pretty big surface area from a security standpoint that I wouldn't want.

02:24:40
<transcript>: to expose

02:24:42
<transcript>: To expose but.

02:24:42
<transcript>: i'm sure

02:24:44
<transcript>: I'm sure it's possible.

02:24:47
<transcript>: Are we able to go back to XML heights.

02:24:47
<transcript>: me too let

02:24:51
<transcript>: Me too. Lets you do cool resolvers, though that's right.

02:25:00
<transcript>: We'll need a back end for front end, like the next API. Yeah, that's what I would say. Okay, let's see. We've got the invite invoke it just invoked it. Let's look at our latest.

02:25:00
<transcript>: here we go

02:25:02
laytanl_: If you are going to do that, you would want something like supabase, firebase etc.

02:25:10
laytanl_: with permissions built around the database

02:25:13
<transcript>: Here we go. I should just run CDK watch so I can get these logs piped into my CLI. Here's. Last thing that went, validation error type subselection required. Oh, I'm so dumb. I'm so dumb.

02:25:13
<transcript>: guys

02:25:16
<transcript>: Guys? What? Why am I so dumb.

02:25:16
<transcript>: why

02:25:17
<transcript>: Why.

02:25:17
<transcript>: i ask

02:25:23
<transcript>: I ask, Am I so dumb? I didn't have a subsection on this, so of course it didn't work.

02:25:29
<transcript>: Beat. We want the ID. I don't know the text.

02:25:35
<transcript>: Created that. I don't know. I just need some. I need something here.

02:25:39
laytanl_: but that isn't sql

02:25:41
sticklemepickle: no subselection?

02:25:44
sticklemepickle: psht

02:25:47
<transcript>: Okay. We're on the basic stuff right now. We haven't gotten into the hard stuff and we're just I guess I can't really start scaling the load test yet because we don't have the right.

02:25:47
<transcript>: well we don't have

02:25:54
<transcript>: Well, we don't have the global API setup and that one, that one might be just dead. I don't know if that tickets gonna get any Trackion now I might have burnt my bridge.

02:26:04
<transcript>: Hope I didn't burn my bridge. I need that issue fixed. I can't deploy global tables. What's the deal.

02:26:07
<transcript>: Let's try and do it from the console again.

02:26:13
<transcript>: Create Replica US West to Oregon.

02:26:18
<transcript>: That's not. It's not true. I have the same.

02:26:20
<transcript>: Limits.

02:26:20
<transcript>: i

02:26:28
<transcript>: I tried contacting you to support, but that was done, and I did it on Twitch. I'm sorry. Please fix it. I need a global Global API.

02:26:34
<transcript>: Thank you for the follow Pepel and XD.

02:26:41
patelzz007: Hye Hyeee

02:26:46
<transcript>: With permissions built around the database, but that isn't sequel. Oh, if you're going to do that, you would want something like Superbased Fiberbased, etc. Yeah, if you just want like easy as possible backend use one of those.

02:26:46
<transcript>: amplify on

02:26:50
<transcript>: Amplify on the AWS side? Welcome to Chat Patel.

02:26:50
<transcript>: hi hi

02:26:51
<transcript>: Hi, Hi.

02:26:55
<transcript>: Okay. Now we should be able to.

02:26:55
<transcript>: invoke

02:26:57
<transcript>: Invoke our thing.

02:27:04
<transcript>: So while I'm waiting on it oh, did I already do it? It's already invoked.

02:27:04
<transcript>: just to

02:27:12
lhnng_aws: You need to contact Support and get a limit increase to add GT Replicas. This occurs when your account has already increased limits for WCU in that region.

02:27:15
laytanl_: SurrealDB is an sql-like database with permissions built in, so you can use that if you don't want a server between react and the database

02:27:24
<transcript>: Just to show you kind of I glossed over this, but I love this pattern. I love importing. Granted, TypeScript shouldn't be yelling at me, but I love importing the outputs from my CDK deploy into some script and then just using the ARN as it was exported so that ARN changes or when I start deploying them into multiple regions. This is literally.

02:27:24
<transcript>: in

02:27:38
grasp5533: Oh that is awesome

02:27:40
<transcript>: In this output file that I output when I create my when I plug my CDK, it outputs all of the CSN outputs the cloud formation outputs into this file and I can just import them so I don't have to like this test function. Air in is just in here now, right.

02:27:40
<transcript>: i just got it

02:27:41
<transcript>: I just got it.

02:27:44
<transcript>: Love that I love that pattern.

02:27:44
<transcript>: i don't have

02:27:48
sockthedev: nice

02:27:49
<transcript>: I don't have to like manually copy function they are in or going to the console or anything like that.

02:27:57
<transcript>: Okay, let's see what this looks like. Now. It should have beated. We should have had our first beat. Oh, we didn't. What happened.

02:27:57
<transcript>: can i return

02:27:59
grasp5533: I wish there was more content on testing with serverless

02:28:00
<transcript>: Can I return null for nonnambletop ID when the parent beat.

02:28:04
<transcript>: Okay beat text. These are all null.

02:28:04
<transcript>: so did

02:28:06
<transcript>: So did it write the beat.

02:28:06
<transcript>: to the table

02:28:07
sargath666: aws errors and documentation are so vague - I implemented the signed cookies/urls, to share secured content from CND - that was...

02:28:08
<transcript>: To the table.

02:28:10
<transcript>: Did it.

02:28:14
<transcript>: Oh.

02:28:14
<transcript>: is this someone

02:28:16
<transcript>: Is this someone from AWS.

02:28:16
<transcript>: l

02:28:20
<transcript>: L hang aid of ish you need to contact support and get a limit increase to add GT replicas.

02:28:20
<transcript>: this cruise

02:28:32
laytanl_: Mitchell???

02:28:40
<transcript>: This cruise when your account has already increased limits for WCU in that region. Yeah, no, I did. So you can help me long. You might be someone added with us. Maybe you know the answer to this. We do have the same limits in all the regions. I'm trying to deploy the replicas into. They were just approved this morning, but they show up in the console as the same quota limits. Now for.

02:28:40
<transcript>: read and write

02:28:50
sargath666: *CDN

02:28:53
<transcript>: Read and write across all the five regions I'm interested in, and I'm still getting that error. So that's my issue. That's my support issue. I botched the support request by streaming it on Twitch. I think.

02:29:00
<transcript>: We serve more content on testing with serverless so.

02:29:00
<transcript>: yintra

02:29:11
<transcript>: Yintra the Burning Monk. He's got a bunch of stuff. I would look at the Burning Monk grass. A toys, errors and documentation are so vague. I implemented the sign cookies URLs to shared.

02:29:11
<transcript>: secure content

02:29:14
<transcript>: Secure content from CND oh, I just had a thought.

02:29:14
<transcript>: i

02:29:16
<transcript>: I just had a thought. What if.

02:29:18
<transcript>: What if.

02:29:22
lhnng_aws: My name is Lee, but yes you need a different limit increase. Create another case with Support and share the exception and you will be up and running in no time.

02:29:23
<transcript>: What if you can only have so many global tables? Am I hitting that limit.

02:29:28
<transcript>: Are there a limited number of global tables per account.

02:29:33
<transcript>: That's global secondary nice. No, there's not.

02:29:35
sockthedev: https://twitter.com/theburningmonk?lang=en

02:29:37
<transcript>: Replica? Am I looking right past it? No.

02:29:38
lhnng_aws: You can have as many GT's as you like.

02:29:48
<transcript>: My name is Levi. Yes, you need a different limit increase. Create another case of support and share the exception and you will be up and running in no time. Wait a minute, wait, wait.

02:29:50
<transcript>: Mitchell.

02:29:51
<transcript>: Wait a minute.

02:29:51
<transcript>: so

02:29:53
<transcript>: So.

02:29:53
<transcript>: lee

02:29:55
<transcript>: Lee, let's talk.

02:29:59
<transcript>: First of all, Lee, I hope it's okay.

02:29:59
<transcript>: i

02:30:19
<transcript>: I have not set up a formal public workshop for this exercise. This is completely ad hoc and off the top of my head and on Twitch for funzies. So there's that I should just preface with that because that was a hang up with the previous support ticket. So my question is you're saying you need a different limit increase, create another case of support and share the exception.

02:30:32
<transcript>: A limit limit to number of global table replicas. It's not about my quotas. It's not about the right and read limits. Is that what you're saying? You can have as many global tech global tables as you like. Okay.

02:30:32
<transcript>: but you're saying

02:30:38
<transcript>: But you're saying I need a different limit increase? Could you say what I need increase? What limit I need increased? Or do you know.

02:30:52
<transcript>: Ideas.

02:30:58
<transcript>: I'm just I'm looking into the screen because I'm hoping Lee knows when I'm asking for.

02:30:58
<transcript>: thanks

02:30:58
lhnng_aws: What I am saying is if you increase your WCU limit beyond default, you will then need a second limit increase for adding replicas

02:31:07
fragaverage: woohoo an AWS guy!

02:31:09
<transcript>: Thanks Sock for linking the Burning Month. That's right. That's the Burning Muck. What I'm saying is if you increase your right passing units beyond default, you will then need a second limit increase for adding replicas.

02:31:10
<transcript>: So.

02:31:18
uberrick: Disclaimer, this is not a workshop :D

02:31:20
<transcript>: Lee, I guess what I'm saying is I did a separate I already did it, and they already fulfilled it. They first filled my request to increase my WC use, and my RC use.

02:31:20
<transcript>: in

02:31:34
<transcript>: In each of the each of the regions that I'm trying to create replicas for. So they all now have matching quotas for read and write. You're saying I still need to make another ticket for another increase. And I'm not understand.

02:31:34
<transcript>: increase

02:31:38
sockthedev: Stream: AWS support roleplay

02:31:41
<transcript>: Increase your WCU limit beyond default. You will need a second limit. Yeah. I think what you're describing is what I discovered yesterday.

02:31:41
<transcript>: which

02:31:48
<transcript>: Which is I had increased US East one quotas and I hadn't increased it for my replica regions.

02:31:48
<transcript>: and

02:31:59
<transcript>: And it failed to create it. I'd notice that that makes sense. I put in a ticket to increase limits in the other regions that was approved. They also show up in the console. Is the same limit now.

02:31:59
<transcript>: and yet

02:32:01
<transcript>: And yet I'm getting that error.

02:32:01
<transcript>: disclaimer

02:32:03
<transcript>: Disclaimer this is not a workshop.

02:32:03
<transcript>: but i

02:32:06
<transcript>: But I am gonna be on a workshop here in, like, an hour.

02:32:06
<transcript>: by the way

02:32:09
uberrick: @sockthedev LUL

02:32:14
<transcript>: By the way, I've only got another hour on the stream because I'm gonna be on it's an a cloud guru thing. It's like a workshop. It's a webinar.

02:32:14
<transcript>: what is a webinar

02:32:16
lhnng_aws: Yes, 1 issue is to be sure all regions are the same. But there is yet another limit for Global Table replicas when your WCU is beyond the default. This is an internal limit which does not show in your Quotas.

02:32:22
<transcript>: What is a webinar? I'm on a webinar, and I don't know what a webinar is. I honestly don't know if I belong on this webinar. I feel like.

02:32:22
<transcript>: i feel

02:32:28
mattmancodes: It's a Larabar workshop... Advertisement.

02:32:34
<transcript>: I feel a lot of place. We've had a call and talked about what it's gonna be about. It's all like, enterprisey stuff. And I'm like, you know, I've never worked at a company in my life, right? I've only ever worked at startups.

02:32:34
<transcript>: very tiny

02:32:36
<transcript>: Very tiny companies.

02:32:36
<transcript>: they

02:32:47
shiftlessatol: it's a seminar on the web thus web-seminar so it's like a webinar

02:32:53
<transcript>: They still want me on it. I don't know what I'm gonna be saying on this webinar you might want to join. Hey, what if all of you from Twitchett joined this webinar? It's like a B to be to be SAS leaders thing or something. It's like for enterprise stuff. Wouldn't it be hilarious if Twitch chat just showed up? We were all in the webinar together.

02:32:53
<transcript>: you all

02:32:54
uberrick: GTA V AWS support roleplay

02:33:01
<transcript>: You all could, like, hang out with me. I don't know if it's like a type, questions, type of situation, but that'd be fun.

02:33:01
<transcript>: actually now i

02:33:03
sockthedev: using our twitch aliases

02:33:04
<transcript>: Actually. Now I feel bad. Don't. Don't do that.

02:33:04
<transcript>: because i feel

02:33:05
<transcript>: Because I feel bad.

02:33:08
uberrick: send the link I'm down

02:33:12
blakegreendev: you mean Pluralsight right?

02:33:16
<transcript>: If we flood this webinar with a bunch of Twitch. Yeah, with your Twitch aliases. Send the link you're down. I mean, I'll tweet when I'm on it. It's. It's like it's in like an hour.

02:33:16
<transcript>: yeah

02:33:19
<transcript>: Yeah, Plural site. Sorry, a cloud guru is bought by Pluralsight.

02:33:24
<transcript>: Yeah. So Ryan croninberg.

02:33:24
stranger710: That is not it , you will need another limit to whitelist your account

02:33:28
<transcript>: If I'm being honest, I agreed to be on it just to meet Ryan because.

02:33:28
<transcript>: i hadn't met him

02:33:32
<transcript>: I hadn't met him, and I've always wanted to.

02:33:32
<transcript>: welcome to

02:33:37
<transcript>: Welcome to Chat, Stranger. That is not it. You'll need another list to whitelist your account.

02:33:42
<transcript>: Okay.

02:33:50
<transcript>: Okay, Mitchell, if you're still there. Mitchell, I'm so sorry for the way everything went down. But did you catch all this? Mitchell.

02:33:55
<transcript>: Could we am in my sort of my support ticket to just do the whitelist thing.

02:33:55
<transcript>: maybe

02:33:57
stranger710: paste the error on a new case with support

02:34:01
<transcript>: Maybe. Hey, I'm not sharing my screen right now. Let me go to the ticket and just see if he's said anything.

02:34:01
<transcript>: i feel so bad

02:34:10
<transcript>: I feel so bad. That was just. It was a real demove of mine. You know, I shouldn't have shared it on Twitch. Apparently, I didn't do it on purpose. I mean, I didn't know it was bad.

02:34:10
<transcript>: can't create

02:34:12
<transcript>: Can't create replicas. Here we go.

02:34:19
<transcript>: And it's so abruptly I said, so sorry if I'm doing something against terms was not my intent.

02:34:24
<transcript>: Okay.

02:34:28
<transcript>: So I'm gonna just reply to this ticket. I'm gonna say.

02:34:39
<transcript>: Someone is now telling me that I need my account Whitelisted to create global table replicas.

02:34:39
<transcript>: with

02:34:41
<transcript>: With increased.

02:34:41
<transcript>: w

02:34:48
<transcript>: Wcu and RCU quotas. Is that accurate? Okay, let's try that. Submit.

02:34:55
<transcript>: Paste the error on a new case with support. Okay. So I think this is new is stranger. I just opened it like an hour ago.

02:34:57
<transcript>: I did paste the error.

02:34:57
<transcript>: and

02:35:04
sockthedev: Do they ever revoke AWS Hero titles?

02:35:05
lhnng_aws: allow-listed**

02:35:07
<transcript>: And we'll see we'll see if they if they're able to fix that because I do need to build a launch global replicas or we're in trouble can't go very far on this experiment with that.

02:35:12
<transcript>: Ouch sock. Do they ever really.

02:35:12
<transcript>: serot

02:35:13
fragaverage: wait we broke ToS here?

02:35:19
<transcript>: Serotitles. What are you getting at? I think you're gonna strip my title because I stream this on Twitch. I hope not. That would be a bummer.

02:35:22
<transcript>: Don't need that anymore.

02:35:33
<transcript>: I don't know why I tried to delete tabs. It's pointless. Just. I'm never gonna delete them all. Okay, so there's something wrong here. Cannot return null for nonknowable type.

02:35:36
<transcript>: Id within parent so I don't think the beat was written.

02:35:40
<transcript>: I don't think we wrote a beat to the table let's check.

02:35:40
sockthedev: AWS Villians

02:35:43
<transcript>: Type equals.

02:35:44
<transcript>: B.

02:35:44
<transcript>: oh we

02:35:49
<transcript>: Oh, we did write the Beat, the beat, it was written.

02:35:49
<transcript>: ha

02:35:52
<transcript>: Ha. Okay, that's our first beat. Everybody.

02:35:56
<transcript>: Thanks for the follow cake.

02:35:56
<transcript>: cakele media

02:35:57
<transcript>: Cakele, media.

02:35:57
<transcript>: also

02:36:00
<transcript>: Also Jubo and Mr. Pickle.

02:36:00
<transcript>: how did i

02:36:02
<transcript>: How did I Miss Mr. Pickle's.

02:36:07
<transcript>: Allow listed.

02:36:07
<transcript>: oh

02:36:11
<transcript>: Oh. Allow listed. Not whitelisted.

02:36:14
<transcript>: Another limit to whitelist your account. Okay.

02:36:14
<transcript>: frag

02:36:17
<transcript>: Frag. I don't know if I actually broke.

02:36:17
<transcript>: tls

02:36:20
<transcript>: Tls. I don't know. I think it was just like.

02:36:30
pogjar: allow listed is the preferred term xd

02:36:40
<transcript>: This. Mitchell went to his colleagues and said, hey, this guy just pasted a Twitch link and our support case, and I went to it and it looks like he's just streaming our entire chat live on Twitch. Is that bad? And everybody's like, that's probably kind of bad. I don't think this is like you broke the rules or kicking me off. Aws, and taking your house, your hero title away. I don't think that's happening.

02:36:40
<transcript>: i don't think

02:36:42
<transcript>: I don't think.

02:36:42
<transcript>: allow listed

02:36:48
<transcript>: Allow listed is the preferred term. Okay, I'm gonna mention that. Then let's go. Fuzzy. Can I just go fuzzy.

02:36:48
<transcript>: my

02:36:55
<transcript>: My breaking any terms if I if I pull up chat with fuzzy up I feel like I'm mocking a lot. I'm really not trying to be a jerk.

02:36:55
<transcript>: it's just kind of funny

02:36:58
pogjar: fuzzy = fine

02:36:58
<transcript>: It's just kind of funny thing that happened on stream.

02:36:58
<transcript>: let's see

02:36:59
<transcript>: Let's see.

02:37:04
<transcript>: Allow listed.

02:37:04
<transcript>: okay

02:37:06
shiftlessatol: you'll still be my hereo even if AWS doesn't want AWE

02:37:07
<transcript>: Okay. Fuzzy. Fuzzy is fine. Pog jar. Thank you.

02:37:11
fragaverage: ah yeah, i doubt they care in reality. thats why the no PI policy exists

02:37:13
<transcript>: Wait. Who's POG jar do you work at AWS too fuzzy is fine. Allowless is a preferred term.

02:37:18
pogjar: no

02:37:18
<transcript>: I'll still be your hero, Dave. Okay, good.

02:37:21
<transcript>: At Abus isn't what awe.

02:37:26
fragaverage: and I REALLY doubt his name is Mitchell either

02:37:29
<transcript>: Got there. They care. In reality. That's why there's no Pi policy exists. You're not AWS. So I need to say allow listed.

02:37:32
<transcript>: Allow listed.

02:37:35
<transcript>: I'm just gonna say.

02:37:35
<transcript>: there someone

02:37:36
<transcript>: There someone.

02:37:40
<transcript>: That same thing. Someone.

02:37:40
<transcript>: is now

02:37:43
lhnng_aws: white/black list is not inclusive

02:37:44
<transcript>: Is now saying, I should say.

02:37:46
<transcript>: I should use.

02:37:50
<transcript>: A preferred term.

02:37:50
<transcript>: blow

02:37:52
<transcript>: Blow listed. Okay.

02:37:56
pogjar: white/black list is just racist

02:37:59
guillermorodas: Quality Twitch/AWS Gossip

02:38:00
<transcript>: Let's go back to our logs. Let's figure out why.

02:38:04
<transcript>: Display it's given a fuzzy.

02:38:04
<transcript>: so why

02:38:06
pogjar: allow list is the woke term

02:38:08
<transcript>: So why is this an issue? Can I return null.

02:38:13
<transcript>: This is when we did so there's some follows.

02:38:13
<transcript>: we beat it

02:38:18
<transcript>: We beat it, but it did not return the bead. Oh, okay. Well, let's just look at our.

02:38:21
<transcript>: Let's just look at our response.

02:38:21
<transcript>: respons

02:38:24
<transcript>: Response template if error.

02:38:30
<transcript>: Oh, I'm returning true? Oh, Geez, I'm dumb, I'm dumb, I'm dumb.

02:38:33
<transcript>: We want to actually return.

02:38:38
<transcript>: Context result.

02:38:41
<transcript>: Items.

02:38:45
<transcript>: Maybe items. Zero. Maybe.

02:38:45
<transcript>: i don't know

02:38:47
<transcript>: I don't know we're gonna see.

02:38:54
<transcript>: I'm getting rid of whiskey. I'm gonna do that soon. I don't ever use it. I've literally never used switch key.

02:38:54
<transcript>: there was another thing

02:38:57
daglee: Beet it, that's a MJ song?

02:38:58
<transcript>: There was another thing I needed to do in my dot file. What was it.

02:39:07
<transcript>: Big.

02:39:10
<transcript>: There's another thing.

02:39:10
<transcript>: needed to do

02:39:13
<transcript>: Needed to do? And I'm gonna do it now.

02:39:17
<transcript>: First thing I'm gonna do is I'm gonna get rid of.

02:39:29
<transcript>: Which key? Oh, which Yeah.

02:39:33
<transcript>: Gonna get rid of that. I don't want whiskey.

02:39:34
uberrick: infinite Adam's talking to all those different chats in a multi universe somewhere

02:39:41
<transcript>: I'm tired of which key. Now we just updated every plugin, which is a bummer. It's gonna break everything.

02:39:47
<transcript>: I really doubt his name is Mitchell, either. Oh, really.

02:39:47
<transcript>: white black

02:39:50
<transcript>: White. Blacklist is not inclusive.

02:39:55
<transcript>: That is just racist. I agree. Where did it say white and blacklist? Where did I say that.

02:39:55
<transcript>: did i

02:39:57
<transcript>: Did I say that.

02:40:00
<transcript>: Quality Twitch ALS gossip.

02:40:04
<transcript>: Allowless is the woke term Oh.

02:40:04
<transcript>: oh

02:40:09
<transcript>: Oh, you're I got you I got you now so you were telling me.

02:40:22
<transcript>: I need another limit to. I see what? That whole conversation. Oh, I just post. I just pasted that in the support ticket, so I should have understood what I was reading. And I didn't. I'm sorry. I apologize.

02:40:27
<transcript>: Beat it. That's an NJ song. What, what.

02:40:27
<transcript>: infinite ad

02:40:34
<transcript>: Infinite Adams talking to all those different chats in a multi universe somewhere. Why is this still? Why is this still updating.

02:40:36
<transcript>: Is it done? Okay.

02:40:36
<transcript>: we got

02:40:42
<transcript>: We got rid of which key. And then there's another thing that happened earlier, and I was like, Man, I gotta change that in Neovan. What was it.

02:40:44
<transcript>: What was it.

02:40:44
effektivdev: lord almighty, here we go Kappa

02:40:48
<transcript>: Remember something happened.

02:40:48
<transcript>: here we

02:40:49
<transcript>: Here we go.

02:40:49
<transcript>: something

02:40:53
<transcript>: Something happened. And I was like, you know what.

02:40:53
<transcript>: i need to get rid of

02:40:56
daglee: Beet it vs beat it.

02:40:56
laytanl_: hey I see my name

02:40:56
<transcript>: I need to get rid of or I need to do something to fix that.

02:40:56
<transcript>: man

02:40:57
<transcript>: Man.

02:41:04
<transcript>: You saw your name. Late Cloak. There it is. Leighton. This is the Late. And everybody.

02:41:09
<transcript>: This is the main the missile legend.

02:41:09
<transcript>: leighton

02:41:11
<transcript>: Leighton.

02:41:16
<transcript>: Okay. Well, this is good enough. Good enough.

02:41:18
<transcript>: Go back.

02:41:20
papagebu: ts lint?

02:41:21
<transcript>: Oh.

02:41:21
<transcript>: i didn't

02:41:24
<transcript>: I didn't save. Oh, no.

02:41:24
<transcript>: i

02:41:28
<transcript>: I hadn't even saved the file. I just redeployed a big Nothing burger.

02:41:34
<transcript>: Packages, API.

02:41:37
<transcript>: Okay.

02:41:37
<transcript>: did i

02:41:41
<transcript>: Did I reopen in vim? I don't feel like did I open it? Yeah, I opened it.

02:41:44
<transcript>: Okay.

02:41:47
<transcript>: Where was I.

02:41:47
<transcript>: test sandler

02:41:49
<transcript>: Test Sandler.

02:41:49
<transcript>: so i was trying

02:41:51
<transcript>: So I was trying to.

02:41:51
<transcript>: return

02:42:00
<transcript>: Return details of the beat, but I was only returning true from my response here I was just returning through and I need to return the actual thing.

02:42:06
<transcript>: At pulling. Let's test it again.

02:42:06
<transcript>: node

02:42:07
<transcript>: Node.

02:42:15
<transcript>: Ts? Lint. What was TSLint? Oh, yeah, yeah, TypeScript. Thank you, Papa.

02:42:15
<transcript>: thank you

02:42:16
<transcript>: Thank you, Papa.

02:42:20
<transcript>: I thought it was I wanted to.

02:42:25
<transcript>: I wanted to figure out why my TS language server was.

02:42:29
<transcript>: Running for MJS. Files.

02:42:34
<transcript>: Oh, yeah. What is this? Another error.

02:42:45
<transcript>: Unable to convert the to an object. I don't actually know the shape. Oh, let's see. Absent logs. Hang on.

02:42:47
<transcript>: Hang on.

02:42:47
<transcript>: i can share all

02:42:50
<transcript>: I can share all this, right? I can share cloud watch.

02:42:55
<transcript>: What's? Against the rules again? I don't know. What can I not share on Twitch.

02:42:55
<transcript>: with their aws

02:42:57
<transcript>: With their AWS policies that I'm breaking right now.

02:43:02
<transcript>: So here is our.

02:43:02
<transcript>: request

02:43:06
<transcript>: Request for a beat now we want to see the response.

02:43:17
<transcript>: Result. Okay. Context result. Keys. Oh, just give you the keys so transactions don't give you the real the full item. I just need to do the bullying thing.

02:43:21
<transcript>: Just do the boolean thing and.

02:43:26
<transcript>: No, we're just gonna do the bullying thing, and we're gonna change our schema to match.

02:43:31
laytanl_: this song sounds great

02:43:34
<transcript>: Beat now returns a boolean.

02:43:38
<transcript>: So you're not gonna get your beat back when you beat and that's fine.

02:43:40
<transcript>: That's fine.

02:43:47
<transcript>: Now I don't need Turns out don't need this.

02:43:50
<transcript>: Okay.

02:43:53
<transcript>: And it doesn't return.

02:43:54
lhnng_aws: https://aws.amazon.com/premiumsupport/knowledge-center/dynamodb-cannot-create-replica/

02:43:55
<transcript>: What does it return.

02:43:55
<transcript>: heat

02:43:58
<transcript>: Heat just returns a.

02:43:58
<transcript>: boolean

02:43:59
<transcript>: Boolean.

02:43:59
<transcript>: so that

02:44:02
<transcript>: So that should be fine.

02:44:02
<transcript>: i'm not doing

02:44:04
<transcript>: I'm not doing anything with it. Okay.

02:44:07
<transcript>: All right.

02:44:13
lhnng_aws: Here's a better explanation to your issue

02:44:14
<transcript>: Right in this song. Sounds great. What song was it was it was it like Got Rhodes Sessions or something.

02:44:20
<transcript>: Lee has premium support DynamoDB cannot create replica OOH OOH is there just like a thing.

02:44:23
<transcript>: Just an article about the issue.

02:44:27
<transcript>: I create Ralph Coast Table when I try to.

02:44:41
<transcript>: When the right throughput for the DynamoDB Global Table exceeds the default regional quota of 4000. In this case, you must request a service quota increase for Add replica what just banged in my Cup.

02:44:43
laytanl_: "Attaboy"

02:44:46
laytanl_: was the song

02:44:49
<transcript>: Wait. You must request a service quota increase for Add Replica quota.

02:45:00
<transcript>: Right capacity Units Global Tables implements checks when you add around replica to be sure that the table has sufficient capacity to replicate replicate rights, you can create a BS for okay.

02:45:00
<transcript>: i'm gonna go

02:45:03
<transcript>: I'm gonna go Fuzzy again, hang tight.

02:45:03
<transcript>: we're gonna add this

02:45:05
<transcript>: We're gonna add this to the chat.

02:45:09
<transcript>: That's not even chat. I'm just. I'm posting this message.

02:45:20
<transcript>: Okay. I think this is my issue. I'm posting that.

02:45:20
<transcript>: we're now

02:45:24
<transcript>: We're now getting real chatty on the A Tobis support line.

02:45:24
<transcript>: i hope that

02:45:26
<transcript>: I hope that's okay.

02:45:31
<transcript>: Hope that's okay. I'm sorry, Mitchell. I apologize. I really do.

02:45:31
<transcript>: let's go

02:45:33
<transcript>: Let's go unfuzzy.

02:45:42
<transcript>: Edible Attaboy Yeah, I love the Goat Radio Sessions. Chris Steeleyley. He's good at stuff.

02:45:42
<transcript>: thanks for follow

02:45:46
<transcript>: Thanks for follow the meat trove demetrov dimmetriff.

02:45:55
<transcript>: Thank you so much, Lee. I think that was the that was the thing I needed. And we'll see if this support ticket is able to get me there.

02:45:58
<transcript>: Okay, we're updating.

02:45:58
<transcript>: really

02:46:01
<transcript>: Really need to be able to create that global API.

02:46:17
lhnng_aws: Did you need to go beyond defaults for WCU?

02:46:17
<transcript>: Little ASMR Larab, our rapper for you. You're welcome.

02:46:28
<transcript>: To Simbie.

02:46:31
<transcript>: We've got an ASMR fan.

02:46:37
<transcript>: Lee Yeah.

02:46:39
<transcript>: So what we're doing.

02:46:39
<transcript>: lee is

02:46:42
<transcript>: Lee is we're testing it's like a big.

02:46:46
<transcript>: Serverless test. I'm trying to see.

02:46:46
<transcript>: can i

02:46:49
<transcript>: Can I create a small.

02:46:52
<transcript>: Sliver of the Twitter API.

02:46:52
<transcript>: with serverless

02:46:54
<transcript>: With Serverless tech.

02:46:54
<transcript>: and push it

02:46:59
<transcript>: And push it to do like Twitter like loads. So 100 tweets per second sustained.

02:47:11
<transcript>: Bursting up to 1500 tweets per second. That's what I'm trying to do. So that's why I'm increasing all these quotas, trying to load, test and see if I can build a Twitter clone.

02:47:14
<transcript>: That could handle Twitter scale if that makes sense.

02:47:17
<transcript>: Okay, Let's.

02:47:17
<transcript>: run the sc

02:47:19
<transcript>: Run the script now.

02:47:35
<transcript>: Be true we did it. Okay, so we're able to write beats now.

02:47:38
<transcript>: Let's.

02:47:48
lhnng_aws: OK, makes sense. Reach out to me on Twitter and I can help you with the DynamoDB side if needed: @leeroyhannigan

02:47:49
<transcript>: Start doing the instrumenting because that's gonna be very important. Piece of this is cloud Watch. We're gonna need to be able to send metrics. I need to be able to monitor Tweets per second. Sorry. Beats per second.

02:47:52
<transcript>: I need to be able to monitor.

02:47:56
<transcript>: Ooh, Leroy, thank you so much.

02:47:58
<transcript>: That's your Twitter handle.

02:48:03
<transcript>: Reach out to me on Twitter, and I can help you with the DynamoDB side. That's awesome.

02:48:06
<transcript>: Lee, do you mind if I pull you up right here.

02:48:10
<transcript>: Or do I need to go fuzzy? I can go fuzzy if you'd like.

02:48:10
<transcript>: beside

02:48:13
<transcript>: Besides pull you up in follow you forget.

02:48:20
lhnng_aws: I dont mind

02:48:20
teej_dv: D O X X E D

02:48:22
<transcript>: Fuzzy. I don't want to leak. Well, you just. You pasted it in chat, I guess.

02:48:22
<transcript>: you don't mind

02:48:28
<transcript>: You don't mind teach, Docs. All right, I'm gonna follow you. Oh.

02:48:28
<transcript>: what do i do

02:48:32
<transcript>: What do I do, Leroy? Handing it. Did we spell it wrong? Or did I mess it up.

02:48:34
<transcript>: Do I need the ad on it.

02:48:34
<transcript>: i don't think that

02:48:37
<transcript>: I don't think that's not Twitter. Urls, work.

02:48:44
<transcript>: Do you still exist.

02:48:47
lhnng_aws: sorry

02:48:47
<transcript>: Did Elon kick you Offly.

02:48:51
lhnng_aws: @leeroy_hannigan

02:48:51
<transcript>: It's no worries.

02:48:59
dizzyfly: @lhnng_aws work at aws?

02:49:00
<transcript>: I could start trying to guess what it actually is. I feel like this is a handle on some other site and then your Twitter handle is different.

02:49:08
<transcript>: First on Chat. Welcome to Chat. Dizzy Flyer. Yeah. Lee, work at AWS.

02:49:13
<transcript>: Let's just get what we think is his handle is Leroy.

02:49:15
<transcript>: The man.

02:49:19
<transcript>: 1975, now.

02:49:22
lhnng_aws: I pasted the correct one :P

02:49:25
teej_dv: LUL leeroy sent the updated one

02:49:27
<transcript>: I hope it's not an embarrassing handle that you don't want to share. Now you can DM if you want. Oh, you pasted the correct one.

02:49:27
<transcript>: wait what

02:49:28
<transcript>: Wait. What.

02:49:29
lhnng_aws: 1975 :O

02:49:31
<transcript>: Oh, there it is. Leroy. Underscore. Okay.

02:49:35
<transcript>: Leroy underscore.

02:49:35
<transcript>: here we go

02:49:36
<transcript>: Here we go.

02:49:44
<transcript>: There we go. Followed. Thank you so much, Lee. I will Ping you. Oh, you're a DynamoDB specialist. Cool.

02:49:44
<transcript>: well

02:49:48
<transcript>: Well, I can tell you this. Lee. We are.

02:49:48
<transcript>: we're

02:49:48
laytanl_: would be cool to, after this test, try to implement the same api with golang (like twitch?) or rust

02:49:50
shiftlessatol: he has AR glasses so he can't see very well

02:49:50
<transcript>: We're gonna be doing some stuff.

02:49:50
<transcript>: i

02:49:52
laytanl_: and compare

02:49:57
<transcript>: I started really, like figuring up what it's gonna be from, like a right capacity standpoint. It's a lot.

02:50:05
<transcript>: I requested 1500. It's not gonna be enough for what I wanted to do because I realized I'm actually using transactions.

02:50:05
<transcript>: which means

02:50:25
<transcript>: Which means double the right capacity units for all of the items being manipulated, which for writing a Tweet, which is called Beat that's two. We put we do a put item, and we do an update item to update a counter. So those two operations are four right pass units. But then we're using global tables across five of the regions. So.

02:50:30
aarrjaay: Forgot what 'Deal with it does' - not a fan of the smoking ;)

02:50:35
<transcript>: 20, right. Capacity units, I guess. And then I think mobile tables. Is there more involved? I don't know. It's a lot. It's a lot that's per tweet.

02:50:36
lhnng_aws: is your counter a single item?

02:50:44
<transcript>: We'd be cool too. After this test, try to implement the same API with Golang, like Twitch or Rust. Oh, that's interesting.

02:50:44
<transcript>: i

02:50:50
<transcript>: I would have to get someone like Teach to do the rest thing. I could do the Golang thing though. I've got some go experience.

02:50:57
<transcript>: Forgot what deal with it. Does not a fan of the smoking. Sorry, RJ. I'm not a fan of smoking either.

02:50:58
teej_dv: rust PogChamp

02:51:02
<transcript>: Is your counter. A single item.

02:51:08
<transcript>: The counter is on the profile. So I'm using some I'll show you.

02:51:13
<transcript>: Let's remove that filter. Let's just look at some sample of this.

02:51:15
laytanl_: you can then see what cost saving a faster language would give

02:51:16
<transcript>: Rust tea just freaking out.

02:51:16
<transcript>: so

02:51:19
<transcript>: So I've got a profile record like this.

02:51:26
<transcript>: And I have a beats count. So how many times is this profile? This person, beaded.

02:51:26
<transcript>: be

02:51:28
<transcript>: Beat it all right.

02:51:28
<transcript>: and that's

02:51:30
laytanl_: on massive scale

02:51:35
<transcript>: And that's the count. That's what I'm incrementing. But that's on the profile. And that's separate from the bead item.

02:51:35
<transcript>: obviously

02:51:36
<transcript>: Obviously.

02:51:36
<transcript>: so here's

02:51:43
<transcript>: So here's the beat item. This is what I put into the table. It's got likes, rebates and replies.

02:51:58
<transcript>: You can then see what cost savings a faster language will give. Yeah, Leighton. So I think the thing I'm doing latent to make this thing work at 1500 tweets per second is I'm not using any programming languages.

02:51:58
<transcript>: i don't

02:52:03
<transcript>: I don't think VTL qualifies as a programming language. I'm writing all this in VTL.

02:52:03
<transcript>: so here

02:52:05
itssupermatix: Friends, I need some help.  I'm trying to implement catchAsync with TS with express and I don't know that to tell TS that the executed function is async and will return a promise so it complains about chaining .catch on it. Code for reference https://imgur.com/a/dkCdOfa

02:52:15
<transcript>: So here is our Beat transaction. It's literally just like the lowest overhead possible way to write into Dynamo. And I know Dynamo can handle this. If we get the quota increases we need. I know Dynamo can handle.

02:52:15
<transcript>: however many million

02:52:27
laytanl_: oh you don't have an "actual" server

02:52:35
<transcript>: However many millions of tweets per second we want to throw at it from like a Dynamo standpoint. I mean, it handles Amazon.com stuff and like Black Friday, they always publish the numbers. It's some absurd number of transactions per second that Dynamo is handling for Amazon.com. So I know that underlying technologies can all support this. I just have to get the quotas increase enough to give me the headroom and then.

02:52:35
<transcript>: i have not

02:52:35
laytanl_: nvm wasn't here when you did this

02:52:42
<transcript>: I have not spend all of my money and go broke. That's what I have to do. I just got to run it for a few minutes, right.

02:52:48
<transcript>: There is no actual server. Yeah. No. If I were building this with like, TypeScript. Good luck.

02:52:48
<transcript>: like

02:52:53
<transcript>: Like some node JS process trying to do all this. I wouldn't feel good about it.

02:52:53
<transcript>: friends i

02:53:01
<transcript>: Friends I need some help. I'm trying to implement catch async with TS with express and I don't know that to tell TS the executed function is a single.

02:53:01
<transcript>: promise

02:53:04
teej_dv: plus could you ever feel good about writing something in typescript?

02:53:07
<transcript>: Promise so it complains about chaining catch on it code for reference. Anybody have any thoughts on that.

02:53:12
lhnng_aws: Black Friday 2022:- 105.2 million requests per second for Amazon alone.

02:53:13
<transcript>: Plus, could you ever feel good about writing something in TypeScript? Exactly. Teach only this entire.

02:53:26
<transcript>: Repo is pipe. I mean the VTL is what's run it runtime. But all of the Infrastructure's code I'm writing in TypeScript, so I wish I could laugh at your dope, but Unfortunately I am writing TypeScript right this very moment.

02:53:26
<transcript>: so that's a bummer

02:53:27
<transcript>: So that's a bummer.

02:53:33
teej_dv: php as devops when?

02:53:36
<transcript>: Okay. So we got our beats. Let's go back to our test handler. So now let's do some instrumentation. Let's create Cloud Watch metrics.

02:53:40
ayushsharma: how do you test scalability without lagging out ?

02:53:41
<transcript>: Custom Cloud Watch Metrics no death.

02:53:45
samjandwich: What's VTL? Haven't heard of that before

02:53:49
<transcript>: So we are using node for the test stuff. Like all the test stuff is running in a Lambda function in JavaScript.

02:54:01
guillermorodas: @ItsSuperMatix You need to write that it will return a Promise<>

02:54:07
<transcript>: Black Friday, 2000 and 2200 and five. 2 million requests per second for Amazon alone. That's not including all the other Dynamo customers. Amazon.com alone last Black Friday did 105,000,000 requests per second.

02:54:08
<transcript>: Oh, my word.

02:54:08
<transcript>: that's

02:54:12
<transcript>: That's insane. That's nuts.

02:54:12
<transcript>: absolutely bonkers

02:54:13
<transcript>: Absolutely bonkers.

02:54:13
<transcript>: the only

02:54:13
fragaverage: Black Friday 2022 hasn't been yet LUL

02:54:16
fragaverage: its the 25th November

02:54:19
lhnng_aws: Prime Day**

02:54:21
oskrm: for how many secs LUL

02:54:21
laytanl_: Damn

02:54:23
fragaverage: ah lol

02:54:30
laytanl_: That is unfathomable

02:54:32
<transcript>: The only thing that blows my mind more than that is when I see the total number of IAM API requests per second, like all the time is like some absurd number. I don't know if you know Lee off the top. Php is DevOps. Win. What is that? That what is that? Teach what is PHP is DevOps. Welcome to Chat, a YouTube.

02:54:33
itssupermatix: @GuillermoRodas I tried to cast it as a Promise<void> but it still complains

02:54:39
<transcript>: Or. I'm sorry, Aysh. Sharma, how do you test Scalability without lagging out? What do you mean, lagging out.

02:54:45
teej_dv: idk you're writing typescript as config, so i figured we were just smashing programming languages with buzzwords

02:54:46
dizzyfly: didn't prime day kinda suck this year

02:54:59
<transcript>: We are definitely gonna break some things. I'm sure there will be parts of this architecture that fall over, and then we'll have to figure out what fell over and then fix it so that we can scale it up more. I have to do all of this today, and I have to be on this stupid webinar. Sorry. That was awful. I have to be on this webinar. This is not stupid. I'm so sorry. That was a terrible thing to say. I feel like that came from the inner parts of my soul.

02:55:13
porsuko: xd

02:55:18
<transcript>: Apparently, I am not excited about being on this webinar. I don't know that I sit on the webinar is the problem, but it's a fine production that's being put on by the fine folks that are putting it on. And I'm sorry. I take it back. I should stop speaking of my mind so freely and sharing my screen so freely. I'm gonna get myself in trouble. And I don't want to do that.

02:55:18
<transcript>: more

02:55:24
oskrm: @teej_dv this is a typical of by one problem

02:55:30
<transcript>: More Planet. More importantly, I don't want to hurt anyone's feelings. This is a great production. I'm sure the webinar is gonna be great. I just don't know that I have much to say on it, and I question whether I should have ever been invited. Okay.

02:55:30
<transcript>: what's

02:55:36
<transcript>: What's? Vtl haven't heard of that before. It's Velocity Template language. It's an Apache technology.

02:55:39
<transcript>: Also think through the follow Sam Jan with.

02:55:45
<transcript>: Guamma. You need to write that it will return a promise.

02:55:49
<transcript>: Black Friday 2022 hasn't been yet.

02:55:49
<transcript>: good call

02:55:55
<transcript>: Good call, Frag. I think you probably meant 2021. Prime to O Prime Day 25, two.

02:55:55
<transcript>: and that was an even

02:55:59
<transcript>: And that was an even Black Friday, Philly. Black Friday's. Probably even bigger, right.

02:56:15
<transcript>: Unfathomable. Vulnerable. I can't say that word unfathomable. I want to throw an in in there somewhere. Try to cast as a promise. Okay. I don't know. You're writing TypeScript is big, so I figured we were just smashing programs together.

02:56:15
<transcript>: that's awesome

02:56:17
<transcript>: That's awesome. Teach.

02:56:17
<transcript>: php

02:56:20
<transcript>: Php. Devops. We'll make it, we'll make it happen.

02:56:23
<transcript>: Welcome to Chat porsuko.

02:56:23
<transcript>: this is a typical

02:56:25
<transcript>: This is a typical buy one problem.

02:56:25
<transcript>: all right

02:56:26
<transcript>: All right.

02:56:30
<transcript>: So Custom Cloud Watch Metrics we need to create.

02:56:30
<transcript>: here we

02:56:32
<transcript>: Here we go.

02:56:41
<transcript>: We need to create some cloud watch metrics for beats per second. I want latency on all these calls. I want failures.

02:56:53
<transcript>: I need to add the SDK.

02:56:59
<transcript>: Client cloud watch.

02:57:21
<transcript>: Ccb five.

02:57:26
<transcript>: I'm such an jerk. Like I said some terrible things today.

02:57:26
<transcript>: i've done

02:57:28
<transcript>: I've done some terrible things.

02:57:30
<transcript>: Why am I such a jerk.

02:57:38
<transcript>: I think for the follow Lee, I appreciate it.

02:57:43
<transcript>: Lee has been helping us out with some AWS stuff.

02:57:48
<transcript>: Okay.

02:57:52
<transcript>: So here's usage.

02:57:57
<transcript>: Put Metric Data command the metric name.

02:57:57
<transcript>: i need to create

02:58:01
<transcript>: I need to create some metrics. Let's just create them in the console. I don't care now.

02:58:01
<transcript>: no i do care

02:58:03
<transcript>: No, I do care.

02:58:05
<transcript>: Cdk.

02:58:09
<transcript>: Create Custom Cloud Watch metric.

02:58:12
<transcript>: Let's go into our.

02:58:13
samjandwich: Ahh ok, so for resolver mapping in appsync? (appsync is something else i haven't encountered before - there's too many aws services!)

02:58:15
<transcript>: Tests. It'll just be in our test stack.

02:58:23
<transcript>: This is stuff that's pertinent like it doesn't need to exist for the API itself to function. It's just for. Well, maybe it is actually.

02:58:23
<transcript>: think about this

02:58:32
<transcript>: Think about this. I guess these things, these metrics should exist in the actual API if you want to monitor your API, right. So we're gonna create them in here.

02:58:35
<transcript>: Let's see.

02:58:40
<transcript>: I this is getting this is getting crazy.

02:58:48
<transcript>: Yes. Sam Janwich. For Resolver, mapping, and Fsink. That's exactly right.

02:58:54
<transcript>: Too many AWS services. There's, like over 300. Now I think there's a bunch of them.

02:58:55
<transcript>: Okay.

02:58:55
<transcript>: we're going

02:59:02
<transcript>: We're going to only do this on the main right here. So I'm going to say.

02:59:06
<transcript>: Now.

02:59:11
<transcript>: I want to do the surround thing. Ysa.

02:59:14
<transcript>: What would I do here.

02:59:14
<transcript>: or y

02:59:16
<transcript>: Or YS two space.

02:59:20
<transcript>: Nope.

02:59:24
<transcript>: Okay. Whatever.

02:59:25
<transcript>: Whatever.

02:59:28
<transcript>: I'm just gonna do it this way.

02:59:31
<transcript>: Oh.

02:59:34
<transcript>: Okay. That's fine.

02:59:34
<transcript>: we're gonna

02:59:39
<transcript>: We're gonna create the stream listener, then we're gonna create custom metrics.

02:59:43
<transcript>: Okay. I bet it's gonna be something like.

02:59:46
<transcript>: Something like.

02:59:49
<transcript>: Bps metadata.

02:59:49
<transcript>: equals

02:59:50
lhnng_aws: VTL is useful for AppSync, APIGateway and Stepfuncitons. But its not the prettiest thing to type up.....

02:59:51
<transcript>: Equals new.

02:59:51
<transcript>: cloud

02:59:53
<transcript>: Cloud watch.

02:59:57
<transcript>: New Custom metric.

02:59:57
<transcript>: cfn

03:00:00
<transcript>: Cfn Custom Metric Oh.

03:00:03
<transcript>: Is there not.

03:00:08
<transcript>: Lee. Is this. You know, that was your name? Hannah. Sorry.

03:00:10
<transcript>: Where was that.

03:00:12
<transcript>: Oh.

03:00:12
<transcript>: my spot

03:00:14
<transcript>: My spot.

03:00:16
<transcript>: Where was that tab.

03:00:26
<transcript>: Will I ever find it again? What do we think.

03:00:26
<transcript>: i don't

03:00:28
<transcript>: I don't think so.

03:00:28
<transcript>: don't think

03:00:33
<transcript>: Don't think I'll ever find that tab again. Oh, wait. It's here. Ha ha. No, it's not.

03:00:35
<transcript>: Bomber.

03:00:40
teej_dv: use ctrl-shift-a in your browser

03:00:46
<transcript>: Bummer. Bummer Details useful for absent API, Gateway and Step functions. It's not the prettiest thing to type up. It is definitely not the prettiest. We do not use it for its aesthetics.

03:00:46
<transcript>: or

03:00:50
<transcript>: Or the Dev experience. Dev experience pretty bad.

03:00:50
<transcript>: okay so

03:00:50
teej_dv: or maybe cmd for apple plebs

03:00:57
<transcript>: Okay, so I have to create a dashboard. No, I don't. Single value widget. What? How do I create the actual metric.

03:01:01
samjandwich: i mean, i'm used to VCL so it doesn't seem too bad compared to that :D

03:01:02
<transcript>: Cloud watch.

03:01:08
<transcript>: Let's just go to the CDK, Docs. Let me do.

03:01:12
<transcript>: docs

03:01:12
<transcript>: docs cloud

03:01:13
<transcript>: Docs Cloud watch.

03:01:16
<transcript>: Here we go.

03:01:21
<transcript>: We will never default to the version two Willy.

03:01:24
binariogm: With Alfred you can use a package to find in tabs of the browser

03:01:30
<transcript>: Metric. Metric. Metric. Those are widgets. I don't want to create a dashboard. I want to create a metric.

03:01:37
<transcript>: Ow is a new map object. Here we go, then. Metric Math Perfect Cloud Watch. It's just called metric.

03:01:40
<transcript>: Come on.

03:01:43
<transcript>: Metric.

03:01:46
<transcript>: Yes.

03:01:49
<transcript>: Bps.

03:01:52
<transcript>: Beats per second. Metric.

03:01:56
<transcript>: Okay, namespace.

03:01:58
<transcript>: What.

03:01:59
grasp5533: Adam your hotswap resolver feature got into CDK right?

03:02:00
<transcript>: In space.

03:02:04
<transcript>: Oh, there's no what? Wait, what.

03:02:08
gohaku__: what happened to Prime LUL

03:02:17
<transcript>: Do you want to reference a metric does not get exposed by an existing construct. You can instantiate a metric object. Oh, so they're not actually created until you use them. Maybe like until you do a put data.

03:02:19
<transcript>: So I even need to do this.

03:02:23
<transcript>: I guess I need to if I want to do metric map, but what.

03:02:23
<transcript>: any new

03:02:26
<transcript>: Any new ones that I send data for.

03:02:32
prhsdidy: AWS CDK is just so much struggle man.

03:02:34
<transcript>: I think it will.

03:02:36
<transcript>: Okay. We'll come back to this.

03:02:42
<transcript>: Back. I think we can just start sending data and not think about it.

03:02:45
<transcript>: Test handler.

03:02:48
prhsdidy: The worse thing comes when it quietly errors out ;-;

03:02:49
<transcript>: Okay. So when we want to do this, we're do it right down here.

03:02:49
<transcript>: we're

03:02:51
<transcript>: We're gonna calculate the timing.

03:02:55
<transcript>: So we're gonna start a timer.

03:03:00
<transcript>: Which would just be like.

03:03:04
<transcript>: Start equals date. Now.

03:03:09
<transcript>: We're gonna calculate when the response came back.

03:03:10
<transcript>: Here.

03:03:13
<transcript>: And.

03:03:14
teej_dv: @adamdotdev did you see my thing about searching browser tabs?

03:03:18
<transcript>: Minus.

03:03:22
<transcript>: Start. So we'll do this is the duration.

03:03:27
<transcript>: Is date now minus start that's number of milliseconds. Right.

03:03:30
<transcript>: Okay.

03:03:32
<transcript>: So let's see.

03:03:39
<transcript>: Then we're gonna parse the thing. None of that matters. So I want to now send a metric.

03:03:43
<transcript>: We're gonna do the SDK. Let's see.

03:03:50
<transcript>: And you go back to here put Metric Data command. So I need to.

03:03:54
<transcript>: Let's see.

03:03:54
<transcript>: import

03:03:55
<transcript>: Import.

03:03:59
<transcript>: What is it? Cloud Watch client. Where's the client.

03:04:02
<transcript>: Cloud watch client.

03:04:02
<transcript>: cloud

03:04:05
<transcript>: Cloud watch client.

03:04:07
<transcript>: From.

03:04:07
<transcript>: aws

03:04:09
<transcript>: Aws SDK.

03:04:13
binariogm: You can use console.time instead of date

03:04:13
<transcript>: Client Cloud Watch cool.

03:04:16
<transcript>: So let's go back down here.

03:04:22
<transcript>: We're gonna say, client.

03:04:22
<transcript>: oh wait

03:04:26
<transcript>: Oh, wait. Did I call it client? No, I didn't actually create a client yet, did I.

03:04:26
<transcript>: just get

03:04:28
<transcript>: Just get client once.

03:04:28
<transcript>: yeah

03:04:29
<transcript>: Yeah.

03:04:35
<transcript>: What am I doing.

03:04:38
<transcript>: Redo.

03:04:38
<transcript>: let's

03:04:41
<transcript>: Let's go back to the top. And let's say.

03:04:46
<transcript>: Like here we're gonna say, comps cloud watch.

03:04:49
<transcript>: New Cloud Watch client.

03:04:52
<transcript>: And do I need to pass a region.

03:05:04
<transcript>: It's actually important that I'm gonna send all these cloud watch metrics to the same region. All of them are gonna go into us east one. So actually.

03:05:08
<transcript>: Actually, we're just gonna say.

03:05:10
<transcript>: We're gonna say.

03:05:16
<transcript>: Region is US East one.

03:05:20
<transcript>: Okay. Right. Yeah. I want to send all the metrics into the same.

03:05:20
<transcript>: region

03:05:23
<transcript>: Region. I don't want to have to track them down across regions.

03:05:28
<transcript>: Where are we at here. I'm catching them on chat.

03:05:32
<transcript>: Why are you guys are talking all of a sudden.

03:05:39
<transcript>: Control shift a in your browser and maybe command for Apple plebs.

03:05:41
<transcript>: Thanks for the follow line.

03:05:48
<transcript>: And PRHS Didy. I don't know if I saw that or Pursuito. I don't think I saw any of those. Thank you for the follows. Everybody.

03:05:48
<transcript>: maybe

03:05:51
nexxeln: hi adam

03:05:56
<transcript>: Maybe command for Apple puts what is command shift a do tie use to VCL so it doesn't seem too bad compared to compared to that.

03:05:56
<transcript>: welcome

03:06:01
teej_dv: TRY IT

03:06:04
<transcript>: Welcome to Chat Venerio with Alfred. You can use a package to find in tabs of the browser. Thank you for the follow Dev. Dylan.

03:06:08
<transcript>: Find a package to find enthusia.

03:06:28
<transcript>: Oh, you're saying I could have searched? Oh, you guys are trying to help me search. That was back when I was trying to find the tab. I got you, Adam, your Hopspop Resolver feature got into CDK, right? That's right. Grasp it did so you can do VTL hotswap in the CDK with CDK watch. I contributed that. It's been several months ago. What happened to prime? Welcome to Chat. Go Haku. What do you mean? Did I have a mustache.

03:06:28
<transcript>: and then it went away

03:06:29
<transcript>: And then it went away.

03:06:41
<transcript>: First time chat. Welcome to Chat PRHS Didibs CDK is so much struggle.

03:06:41
<transcript>: it can be

03:06:43
<transcript>: It can be.

03:06:43
<transcript>: the worst thing

03:06:46
<transcript>: The worst thing comes when it quietly errors out.

03:06:46
<transcript>: did you see my

03:06:51
<transcript>: Did you see my thing about searching browsets? Oh, yeah, Teach. I did. Let's try it. Control.

03:06:51
<transcript>: or command

03:06:53
<transcript>: Or command shift. A.

03:06:56
<transcript>: Control Shift a.

03:06:56
<transcript>: i could search the test

03:06:59
<transcript>: I could search the test so I could have said Cloud watch.

03:06:59
<transcript>: okay

03:07:12
<transcript>: Okay. That's awesome. I had no idea that was a thing. How did I. I've used computers every day for 15 years. Somehow didn't know that was a thing. You guys can't let me miss my webinar. I gotta be on a webinar.

03:07:12
<transcript>: soon

03:07:15
<transcript>: Soon and let me go fuzzy so I can see what time.

03:07:17
teej_dv: i'll take several gifted subs for that tip btw

03:07:19
vim_cerf: Anyone know if there's a thing like that in Firefox?

03:07:21
teej_dv: consulting PogChamp

03:07:22
<transcript>: Calendar? Nope. That's Calculator. Calendar.

03:07:28
<transcript>: I'm 45. I've got to join this webinar at 945. I'm guessing it starts at ten.

03:07:31
<transcript>: Okay. So don't let me forget.

03:07:31
<transcript>: nine forty

03:07:33
<transcript>: 945.

03:07:33
<transcript>: i have to go

03:07:34
<transcript>: I have to go.

03:07:40
<transcript>: I wonder if I could wear the minion glasses to the webinar.

03:07:45
<transcript>: Would they take me seriously? Would all of the enterprise.

03:07:45
<transcript>: folks

03:07:46
<transcript>: Folks.

03:07:46
<transcript>: all

03:07:50
<transcript>: All the B to B use cases folks.

03:07:50
<transcript>: listen to

03:07:54
<transcript>: Listen to the Webinar. Would they appreciate my minion glasses.

03:07:54
<transcript>: mike

03:07:57
<transcript>: Mike, Actually, I think what you should do.

03:08:00
limeph: Oh absolutely

03:08:00
<transcript>: Should hire more people.

03:08:02
<transcript>: Enterprise.

03:08:02
<transcript>: the menu

03:08:04
nexxeln: do it!!

03:08:05
<transcript>: The menu. Glasses. I think that would be a nice touch.

03:08:10
<transcript>: You can also instantiate metric. Okay. I don't need that. I need this.

03:08:13
<transcript>: So we're gonna do a new Put Metric Data command.

03:08:21
<transcript>: Let's go back down to the bottom here. Okay. We're finally ready to do it. Ready.

03:08:25
<transcript>: Cloud watch.

03:08:32
<transcript>: New Put Metric Data command.

03:08:35
<transcript>: And what do we have to pass it.

03:08:35
<transcript>: metric

03:08:36
<transcript>: Metric data.

03:08:39
<transcript>: Is an array.

03:08:39
<transcript>: has

03:08:43
<transcript>: Has some things in it like this metric name.

03:08:49
<transcript>: This metric of Nope notebook. This is where I'm going to name the thing we're gonna call this one.

03:08:51
<transcript>: Bps.

03:08:52
<transcript>: Now just beats.

03:08:56
<transcript>: Beats? I'm just gonna keep it count on all the beats.

03:08:59
<transcript>: Dimensions.

03:09:04
<transcript>: This is a lot environment, no name.

03:09:08
<transcript>: Oh, oh, this is important.

03:09:08
<transcript>: i

03:09:12
<transcript>: I do need to keep track. I want to keep track of the region. No.

03:09:20
<transcript>: Yes, I want to keep track of the region that this was beaded into. How am I gonna know that, though.

03:09:23
<transcript>: How am I gonna know that.

03:09:26
<transcript>: Console time instead of date.

03:09:26
<transcript>: oh

03:09:29
<transcript>: Oh, interesting.

03:09:34
<transcript>: Next is here. Next. I'll take several gifted sub for that tip.

03:09:40
<transcript>: Consulting. Exactly. Welcome to Chat. Lime.

03:09:43
<transcript>: Do it, do what? Do what.

03:09:43
<transcript>: are we

03:09:46
<transcript>: Are we saying, do it.

03:09:46
<transcript>: what am i

03:09:48
<transcript>: What am I doing? I actually have to pee.

03:09:51
<transcript>: Well, thanks for the follow.

03:09:51
<transcript>: u

03:09:53
<transcript>: Uasn the bike.

03:09:56
<transcript>: I'm gonna take quick break. I'll be right back.

03:09:59
<transcript>: And we're gonna We're gonna do some cloud watch stuff.

03:13:16
thdxr: I have arrived

03:15:56
vim_cerf: in Firefox you can put: % [space] into the url/search thing and that will put you into tab search. only seem to work from the "new tab" page in my version :/

03:18:17
<transcript>: Hidex.

03:18:17
<transcript>: you

03:18:21
<transcript>: You arrive just in time for me to leave here in, like, ten minutes.

03:18:28
<transcript>: But I'm gonna go? I'm gonna still be that all this stuff is gonna still be on? I'm still gonna be streaming my video, my family.

03:18:33
<transcript>: It'll be on a webinar and if you show up be kind.

03:18:33
<transcript>: if

03:18:36
<transcript>: If you all somehow find the webinar and you attend.

03:18:36
<transcript>: i don't know

03:18:46
<transcript>: I don't know if it's public. I have no, I have no idea. I missed a rehearsal, so I know very little about what's about to happen, but I'm joining a webinar by Pluralsight, a clog guru.

03:18:46
<transcript>: and

03:18:49
<transcript>: And that'll be here in like.

03:18:49
<transcript>: ten minutes

03:18:50
<transcript>: Ten minutes.

03:18:54
<transcript>: I would love to have you all maybe.

03:18:54
<transcript>: just

03:18:56
<transcript>: Just if you have questions.

03:18:56
<transcript>: keep them

03:18:59
<transcript>: Keep them on topic, whatever the topic may be.

03:19:01
<transcript>: No Twitch questions, please.

03:19:20
<transcript>: Okay anyway, that's the webinar. Let's do some more cloud watch. I realized I was headed to break. I gave like the worst make sure to stick around ever. When I was like when I get back, we'll do some more cloud watch stuff like that's the reason I would leave if I were you, I would have taken off at that moment.

03:19:23
<transcript>: No thanks.

03:19:29
<transcript>: All right.

03:19:32
developmentrobot: cloudwatch... naah i'm out

03:19:34
<transcript>: So we're gonna send put metric data, oh, oh, I'm dumb.

03:19:37
<transcript>: The metric name.

03:19:41
<transcript>: Is not always beats. This is a generic. This function.

03:19:47
<transcript>: Like this function is used.

03:19:52
<transcript>: It's going to be the operation.

03:19:52
<transcript>: for up here

03:19:53
<transcript>: For up here.

03:19:53
<transcript>: i follow

03:19:55
<transcript>: I follow.

03:19:55
<transcript>: beat

03:19:56
<transcript>: Beat.

03:19:58
<transcript>: We're gonna have these as metrics.

03:20:02
<transcript>: There's gonna be a value.

03:20:05
<transcript>: Shawn One. I'm missing.

03:20:05
<transcript>: namespace

03:20:05
standardrobot: o/ adam

03:20:06
<transcript>: Namespace.

03:20:13
<transcript>: Okay.

03:20:17
<transcript>: So.

03:20:17
<transcript>: the name

03:20:20
<transcript>: The namespace will call.

03:20:24
<transcript>: Better.

03:20:31
<transcript>: Have some dimensions like.

03:20:31
<transcript>: region

03:20:32
<transcript>: Region.

03:20:36
<transcript>: Rather somehow figure out.

03:20:43
<transcript>: I want to know what region.

03:20:43
<transcript>: respond

03:20:48
<transcript>: Responded, I think the way I could do that is let's look at these.

03:20:54
<transcript>: Standard row out here.

03:20:54
<transcript>: hey standard robot

03:20:55
<transcript>: Hey standard robot.

03:21:00
<transcript>: Let's see cloud watch. Now. I'm out. Yeah, exactly.

03:21:06
<transcript>: Wait development robot and standard robotter here and they just chat at the same time. What's going on.

03:21:06
<transcript>: the robots are

03:21:08
<transcript>: The robots are taking over people.

03:21:08
<transcript>: have you seen

03:21:10
<transcript>: Have you seen some of this AI stuff.

03:21:10
<transcript>: i think

03:21:18
<transcript>: I think for the follow Angele and age 94 sand and Binary oh and Young flux.

03:21:18
<transcript>: but i missed anything about

03:21:20
<transcript>: But I missed anything about me.

03:21:23
<transcript>: Thanks you all for those follows.

03:21:26
<transcript>: Okay. So.

03:21:26
<transcript>: i need to get the

03:21:28
<transcript>: I need to get the region.

03:21:28
<transcript>: from the

03:21:30
<transcript>: From the response.

03:21:30
nullchefo: MrDestructoid

03:21:32
<transcript>: And I think.

03:21:34
<transcript>: I might be able to do that.

03:21:37
<transcript>: I might be able to.

03:21:40
<transcript>: Might not, but I might.

03:21:42
<transcript>: Oh.

03:21:42
<transcript>: no chef oh turn

03:21:45
<transcript>: No Chef oh turned into a robot, too.

03:21:48
<transcript>: It's happening. The takeover.

03:21:54
<transcript>: I'm looking for a response and logs. Here.

03:21:59
<transcript>: Like the whole http response. I feel like it might have something in the headers.

03:21:59
<transcript>: you know i'm

03:22:01
<transcript>: You know, I'm saying.

03:22:01
<transcript>: oh it looks like the

03:22:04
<transcript>: Oh, it looks like the App sync logs. Here we go.

03:22:07
<transcript>: Response, headers.

03:22:12
<transcript>: headerspots

03:22:13
<transcript>: Headerspots.

03:22:16
<transcript>: Headers. Here.

03:22:17
dapperedking: !dotfiles

03:22:18
fossabot: Adam's dotfiles live here: https://github.com/adamelmore/dotfiles The repository for bitter is here: https://github.com/adamelmore/bitter

03:22:19
<transcript>: That's not helpful. Nope.

03:22:19
<transcript>: definitely not help

03:22:21
<transcript>: Definitely not helpful.

03:22:24
<transcript>: I need to know.

03:22:27
<transcript>: What response.

03:22:27
<transcript>: i'm sorry

03:22:29
<transcript>: I'm sorry? What region.

03:22:33
<transcript>: Oh, well I guess.

03:22:37
<transcript>: The function, the function.

03:22:37
<transcript>: is

03:22:43
<transcript>: Is executing in a region so that I need that's what I need to know. I don't need to know what reason.

03:22:43
<transcript>: the apps and ap

03:22:46
<transcript>: The apps and API is then I need to know what region.

03:22:53
<transcript>: It's this it's process M. A. Tobis region. I'm so dumb. So dumb.

03:22:53
<transcript>: it's so simple

03:22:54
<transcript>: It's so simple.

03:22:55
<transcript>: Process.

03:22:55
<transcript>: oh

03:22:56
<transcript>: Oh.

03:22:58
<transcript>: Process.

03:22:58
<transcript>: ends

03:22:59
<transcript>: Ends.

03:22:59
<transcript>: aws

03:23:01
<transcript>: Aws region.

03:23:03
<transcript>: Just like that.

03:23:08
<transcript>: Just like that. Except I deleted a very important curly brace.

03:23:12
<transcript>: Okay, so we can send the region. What else do we need to send.

03:23:18
<transcript>: Any other dimensions that I want to be able to look across. I don't think so. I think just just a region.

03:23:22
<transcript>: Okay, so then the metric names, the operation. I didn't do the value.

03:23:25
<transcript>: Then do the actual value.

03:23:27
<transcript>: What am I doing here.

03:23:29
<transcript>: I have too many tasks.

03:23:29
<transcript>: i officially

03:23:32
<transcript>: I officially have too many tabs.

03:23:35
<transcript>: Here we go. Unit none.

03:23:35
<transcript>: timestamp

03:23:36
<transcript>: Timestamp.

03:23:40
<transcript>: Okay. So that's dimension. Then we want to go.

03:23:43
<transcript>: Unit.

03:23:47
<transcript>: What would it be.

03:23:51
<transcript>: Timestamp Is New date.

03:23:55
<transcript>: And value.

03:23:57
<transcript>: Is just one, right.

03:23:57
<transcript>: just add

03:24:02
<transcript>: Just added, we did one of these things. I'm just trying to track API calls.

03:24:05
<transcript>: Oh in the duration.

03:24:11
<transcript>: The duration so I want to do.

03:24:16
<transcript>: This, but I also want to.

03:24:16
<transcript>: so

03:24:18
<transcript>: So there'll just be another one of these. Right.

03:24:20
<transcript>: Like if I do.

03:24:22
<transcript>: You.

03:24:24
<transcript>: Like that.

03:24:28
<transcript>: And then I say.

03:24:32
<transcript>: Now I can say this metric is.

03:24:38
<transcript>: Let's call this.

03:24:41
<transcript>: Latency.

03:24:43
<transcript>: Oh, sorry.

03:24:43
<transcript>: latent

03:24:44
<transcript>: Latent.

03:24:49
<transcript>: And then the dimension will have.

03:24:54
<transcript>: Unit is going to be what.

03:24:56
<transcript>: Milliseconds.

03:25:00
<transcript>: Does it do like that.

03:25:10
<transcript>: Value is going to be the duration in milliseconds. And then up here we're going to add a metric.

03:25:11
<transcript>: Name.

03:25:11
<transcript>: namench

03:25:13
<transcript>: Namenchan called.

03:25:13
<transcript>: operation

03:25:15
<transcript>: Operation.

03:25:21
<transcript>: Value is operation. Okay, so we're going to crack latency. We're going to track.

03:25:31
<transcript>: The operation itself. Like count the number of operations we're doing. So we can do like per seconds. We can calculate how many Tweets per second or beats per second we're doing.

03:25:36
<transcript>: Is that it those all the cloud watch things.

03:25:40
<transcript>: Got to watch the clock here.

03:25:45
<transcript>: That might be it. So we did.

03:25:47
<transcript>: Start.

03:25:51
<transcript>: And then duration is the now minus start.

03:25:58
<transcript>: We log a metric that is the name of the operation. We have a region dimension.

03:26:05
<transcript>: And then unit none timestamp value one. Okay. Anything else? I need to track? Oh, errors.

03:26:09
<transcript>: Errors if there's an error.

03:26:14
<transcript>: Think about this.

03:26:20
<transcript>: Show. I just make it a dimension.

03:26:28
<transcript>: Like it shouldn't count. This shouldn't happen. We shouldn't do this. Operation. Metric.

03:26:28
<transcript>: if there's an

03:26:30
<transcript>: If there's an error.

03:26:30
<transcript>: right

03:26:31
<transcript>: Right.

03:26:31
<transcript>: okay

03:26:34
<transcript>: Okay. What if I said.

03:26:44
<transcript>: I want to do.

03:26:48
<transcript>: Yeah.

03:26:51
<transcript>: Oh, what I do.

03:26:51
<transcript>: what do i do

03:26:52
<transcript>: What do I do.

03:26:59
<transcript>: Like.

03:27:01
<transcript>: This.

03:27:08
<transcript>: And I'm gonna yank it over here. So I need to know if there's an error.

03:27:10
<transcript>: In the past. Right here.

03:27:18
<transcript>: Do we still want to log around that's fine.

03:27:18
<transcript>: what's with

03:27:23
<transcript>: What's with this put metric data command how that happens.

03:27:27
<transcript>: Bitter? What.

03:27:30
<transcript>: Did I break something? Metric, data.

03:27:30
<transcript>: why's everything

03:27:32
<transcript>: Why's everything lowercase.

03:27:35
<transcript>: What happened.

03:27:44
<transcript>: What do I do.

03:27:50
<transcript>: That's bad.

03:27:55
<transcript>: That's a lot of waste of time.

03:28:15
<transcript>: This is painful. Okay? It's only those, though. And that one too.

03:28:15
<transcript>: oh

03:28:18
<transcript>: Oh, that was rough.

03:28:26
<transcript>: I don't know what I did to lower kits. All that. Okay, so there's an error.

03:28:28
<transcript>: Let's see.

03:28:29
laytanl_: Did you gu a visual selection

03:28:30
<transcript>: Const error.

03:28:30
<transcript>: is

03:28:32
<transcript>: Is JSON.

03:28:36
<transcript>: So there's data in then there's also errors.

03:28:37
laytanl_: that lowercases everything

03:28:42
<transcript>: Like right here. Errors.

03:28:47
<transcript>: Think it's like that? No. What's wrong with that.

03:28:53
<transcript>: Oh.

03:28:53
<transcript>: that's

03:28:56
<transcript>: That's what.

03:28:56
<transcript>: oper

03:28:58
<transcript>: Operation T. O. I missed.

03:28:58
<transcript>: i did

03:29:00
<transcript>: I did this too soon.

03:29:06
<transcript>: It should be like.

03:29:09
<transcript>: That. Yeah. Okay.

03:29:09
<transcript>: json

03:29:11
<transcript>: Json.

03:29:20
<transcript>: Errors and JSON errors link.

03:29:26
<transcript>: That means there's an error. If there's an error, we don't want to.

03:29:29
<transcript>: Let's see.

03:29:33
<transcript>: I want to do this. This operation. So.

03:29:35
<transcript>: Error.

03:29:40
<transcript>: We'll do that. If there's not an error, if there is an error, we're gonna say metric name.

03:29:44
<transcript>: Error? I don't know.

03:29:46
<transcript>: And do it as a dimension.

03:29:52
<transcript>: Name region. I'll copy that one.

03:29:55
<transcript>: And then we have.

03:29:55
<transcript>: name

03:29:57
<transcript>: Name.

03:30:00
<transcript>: Operation.

03:30:02
<transcript>: Value operation.

03:30:08
<transcript>: Value.

03:30:08
<transcript>: process

03:30:13
<transcript>: Process in I said I'd copy it. Aws region as string.

03:30:19
<transcript>: Okay, this one down here got messed up.

03:30:27
<transcript>: How I did that what I what combination of keys I did say for the follow.

03:30:30
<transcript>: Oxdamp.

03:30:34
im4souza: do u use windows ?

03:30:43
<transcript>: See? Did you get a visual selection that lowercase everything? Oh, I did, I must have. I must have smashed Vu on accident. Do I use Windows? Welcome to Chat. I'm for Susa. No, I use a Mac.

03:30:43
<transcript>: i'm one

03:30:45
<transcript>: I'm one of those soy developers.

03:30:48
<transcript>: Value operation okay.

03:30:56
laytanl_: 'gu' is lowercase everything selected/motion

03:30:57
<transcript>: As we have error. If there's an error, we just we put the error in with an operation so we increase the error account. Like I guess I have to say.

03:31:00
<transcript>: A unit.

03:31:00
<transcript>: none

03:31:01
<transcript>: None.

03:31:05
laytanl_: 'gU' uppercase

03:31:06
<transcript>: Sorry, what time stamp.

03:31:08
<transcript>: New date.

03:31:18
<transcript>: And then value one. Okay. So we're just increasing the error counts for that operation. Otherwise we log that operation as a metric.

03:31:18
<transcript>: okay i think

03:31:19
<transcript>: Okay. I think this is pretty good.

03:31:21
thesirfry: I ssh into my mac from windows primeagenSexy

03:31:23
<transcript>: It's pretty good.

03:31:28
<transcript>: Deploy it. I'm gonna have to go here. Oh, wait, wait.

03:31:32
<transcript>: Test stack.

03:31:38
<transcript>: I heard, you gotta hurry, Gotta hurry.

03:31:38
<transcript>: here

03:31:40
<transcript>: Here. It needs.

03:31:42
<transcript>: Aws SDK.

03:31:45
<transcript>: Client.

03:31:45
<transcript>: cloud watch

03:31:46
<transcript>: Cloud watch.

03:31:52
<transcript>: Thanks for the follow the KRZ.

03:32:00
<transcript>: Gu is lowercase. Everything selected. Motion. G. Uppercase is upper. Okay, G uppercase. You got it.

03:32:00
<transcript>: issh into my

03:32:02
<transcript>: Issh into my Mac from windows.

03:32:06
<transcript>: All Right, everybody.

03:32:11
<transcript>: It's been fun. I don't know if I'll stream after my webinar, but I'm joining a webinar.

03:32:11
<transcript>: and

03:32:13
<transcript>: And.

03:32:18
<transcript>: Unfortunately, I have to go. I would have probably streamed Lauren today, but.

03:32:18
<transcript>: i

03:32:19
<transcript>: I.

03:32:20
laytanl_: Bye!

03:32:21
<transcript>: It's been fun as always.

03:32:25
<transcript>: I'll stop music. Maybe we could do it again. Sometimes.

03:32:26
thesirfry: have a good one

03:32:30
papagebu: good luck on the  webinar

03:32:31
vim_cerf: thanks for the stream!

15:48:00
<transcript>: Can you hear me.

15:48:07
<transcript>: I don't know if I've got the right mic set up here. Yeah, I was. I mean, I'm fully vaccinated. My whole family is from my three year old, obviously.

15:48:07
<transcript>: so it wasn't too bad

15:48:11
<transcript>: So it wasn't too bad, but it had to help a lot around the house.

15:48:33
<transcript>: Yeah. No, I get that a lot. I actually just got off Twitch. So I've been streaming.

15:48:39
<transcript>: I just left Twitch to come here, but, yeah, I've got quite a setup. It's like a little studio I've got going in here.

15:48:41
<transcript>: Yeah.

15:50:27
<transcript>: I need to pull that up.

15:50:30
<transcript>: Perfect.

15:51:01
<transcript>: Oh, I think I'm in. I don't know. It did ask me if I want to change my account.

15:51:01
<transcript>: gotcha

15:51:03
<transcript>: Gotcha.

00:00:55
<transcript>: Subscribe.

00:02:00
cowfacedude99: just in time

00:02:51
kylliangamer: hey

00:04:30
fragaverage: Woohoo we're back catJAM

00:07:37
tayloreddev: we back again

00:08:09
natenorberg: that's a pretty great pre-roll

00:10:44
fragaverage: blobDance  blobDance  blobDance

00:11:21
<transcript>: Hey.

00:11:21
<transcript>: i'm back

00:11:24
<transcript>: I'm back. I did the webinar.

00:11:25
<transcript>: And I'm back.

00:11:30
<transcript>: Before I get back into it, I'm just gonna pick up where I left off. I haven't touched it yet.

00:11:33
<transcript>: And we're gonna keep going.

00:11:33
<transcript>: but

00:11:37
<transcript>: But I have to tell you that I got a response from Mitch.

00:11:37
<transcript>: on

00:11:44
<transcript>: On aid of this support. If you weren't in the first stream this morning, this is gonna make no sense to you. But Mitch was here. He was listening.

00:11:44
<transcript>: through

00:11:50
<transcript>: Through the whole thing. He sent this long message. That was fantastic. It made my day.

00:11:50
<transcript>: basically

00:12:05
<transcript>: Basically he didn't know what to do. He would hidden. This was unprecedented for him, hadn't ever had a support case that was actively being screened on Twitch. Spoke with some colleagues, felt very unsure about situation said he felt like you should close chat. No hard feelings continue to listen. And he said it gave him.

00:12:05
<transcript>: an utterly

00:12:08
<transcript>: An utterly unique way to diagnose.

00:12:08
<transcript>: support

00:12:12
<transcript>: Support ticket in real time watching me work through it on Twitch.

00:12:21
<transcript>: Lee is a colleague of his who came into chat and as we saw, helped me figure out what is this issue? Why can't I deploy Global table.

00:12:24
<transcript>: Yeah. Such a cool experience.

00:12:24
<transcript>: i'm so glad

00:12:32
fragaverage: Awesome

00:12:34
<transcript>: I'm so glad I streamed it, even though maybe I shouldn't have, because it led to a great story and a great indie. Okay. Thanks, Mitch. If you're still here.

00:12:42
fragaverage: Twitch is an expensive support system huh

00:12:47
<transcript>: Thanks for that. Okay, let's just get back to it. I'm not gonna like, I don't know what the Stream's gonna be. I'm just trying to pick up like I never left. I don't know if that works in the afternoon. Twitch is an expensive support system.

00:12:52
<transcript>: Hate everybody that's here. Who's here.

00:12:52
<transcript>: frag

00:12:57
<transcript>: Frag is here. Killians. Here. Cow faces. Here. Taylor's, here.

00:12:57
<transcript>: nate

00:13:04
<transcript>: Nate, Nathan, Her, Nate Norberg. Welcome to Chat. Pretty great preroll. Thanks so much.

00:13:05
kylliangamer: o/

00:13:07
<transcript>: All Right. Here we go.

00:13:07
<transcript>: let's

00:13:10
natenorberg: hi, thanks

00:13:15
<transcript>: Let's let's pick it up where we left off. So actually I lied. I didn't just while I was on the Webinar. Actually, I tried invoking after doing the.

00:13:24
<transcript>: Cloud Watch Metrics we're trying to invoke some capture some cloud Watch metrics. I can calculate Tweets per second or Beats per second if you're following along.

00:13:24
<transcript>: and turn

00:13:28
<transcript>: And turns out this Lambda function can't write.

00:13:28
<transcript>: to cloud watch

00:13:29
<transcript>: To cloud watch.

00:13:29
<transcript>: which makes

00:13:31
<transcript>: Which makes sense.

00:13:31
<transcript>: so i

00:13:35
<transcript>: So I could just grant it like.

00:13:38
<transcript>: Manually here, which is probably what I'll do.

00:13:38
<transcript>: this is

00:13:41
<transcript>: This is my function, right? Test handler. Yeah.

00:13:44
<transcript>: I'll just do a new policy statement.

00:13:48
<transcript>: Just yank all that.

00:13:50
<transcript>: And paste it.

00:13:50
<transcript>: and we're gonna

00:13:55
<transcript>: And we're gonna do add actions. It's gonna be cloud.

00:13:59
<transcript>: We're gonna do cloud watch.

00:13:59
<transcript>: put

00:14:01
<transcript>: Put.

00:14:01
<transcript>: metric

00:14:02
<transcript>: Metric.

00:14:02
<transcript>: data

00:14:04
<transcript>: Data.

00:14:08
<transcript>: And the resources are gonna just be.

00:14:08
<transcript>: all of them

00:14:09
<transcript>: All of them.

00:14:11
<transcript>: Okay.

00:14:15
<transcript>: Yeah.

00:14:16
<transcript>: Just give it.

00:14:19
<transcript>: Free rain.

00:14:19
<transcript>: to

00:14:22
<transcript>: To push any and all.

00:14:26
<transcript>: Metrics into Cloud watch.

00:14:35
<transcript>: This is so weird to be streaming at 1115. I guess I did. Oh, what command? Starting off end.

00:14:43
<transcript>: What did I do? I guess I did. Stream the oh, yarn Start. No yarn build and yarn deploy.

00:14:43
<transcript>: i

00:14:47
<transcript>: I streamed that next Jazz. Comp. That was.

00:14:47
<transcript>: that was

00:14:58
<transcript>: That was in the afternoon. Otherwise, I don't really stream in the afternoon. So I don't know. I don't know who's here. Who is this crowd that is awake? Most of my crowd is an early morning crowd for me.

00:14:58
<transcript>: and

00:15:04
kylliangamer: #EU gang

00:15:05
<transcript>: And it's like nighttime for you wherever you live. And this is probably after you've gone to sleep. Sock is here.

00:15:05
<transcript>: suck

00:15:06
<transcript>: Suck the Dev.

00:15:08
oetziofficial: the european

00:15:09
<transcript>: What's going on? Stock.

00:15:13
<transcript>: Eu gang.

00:15:13
<transcript>: yeah so

00:15:18
<transcript>: Yeah. So I guess I guess if you're in Europe right now, it's like evening.

00:15:18
<transcript>: so you'd still be able

00:15:19
<transcript>: So you'd still be able.

00:15:19
<transcript>: i guess the australian

00:15:19
prhsdidy: Too bad, you got a competitor now: ThePrimeagen

00:15:19
sockthedev: it's 1:20am for me

00:15:20
mdsubuntu: eu

00:15:24
cowfacedude99: I am about to go to sleep literally LUL

00:15:25
<transcript>: I guess the Australian crowd. We've lost the Southeast Asia crowd. They're probably asleep at this point.

00:15:25
<transcript>: i think

00:15:26
fragaverage: 5:20pm

00:15:26
<transcript>: I think.

00:15:30
sockthedev: i need to sleep ðŸ˜…

00:15:33
oetziofficial: I'm trying to make my own nextjs thing KEKW

00:15:34
<transcript>: Likely calf face is about to go to sleep. Cafe India. Yeah so Asia, anyone.

00:15:34
<transcript>: like that

00:15:38
standardrobot: o/ adam

00:15:38
mdsubuntu: 6:18pm

00:15:40
<transcript>: Like that side of the EU. Probably going to sleep now. Sock needs to sleep.

00:15:41
sockthedev: i'm in bali

00:15:43
<transcript>: It's 520 Frag. Where you're at? In the EU.

00:15:46
<transcript>: Wait, frag, are you in Britain.

00:15:49
<transcript>: I can't remember.

00:15:53
<transcript>: 120 Am for you oh, go to sleep.

00:15:55
<transcript>: Go to sleep.

00:15:56
fragaverage: I am :D

00:15:59
<transcript>: Prime streaming, then. Yeah, this is gonna be an intimate session. Here.

00:16:08
<transcript>: 100 and 20:00 A.m.. Oof. I don't I don't stay awake that late. Standard robot.

00:16:08
<transcript>: what's going on

00:16:10
<transcript>: What's going on? Standard.

00:16:19
<transcript>: In Bali, 100 and 20:00 a.m. Germany it is 06:19 p.m. If I'm reading that military time correctly, alright this worked.

00:16:19
<transcript>: let

00:16:21
<transcript>: Let's do this.

00:16:22
oetziofficial: yes

00:16:23
<transcript>: Run the thing.

00:16:28
<transcript>: We're gonna see if we can push some metrics.

00:16:28
<transcript>: to cloud

00:16:29
<transcript>: To cloud watch.

00:16:36
<transcript>: I'm thinking this might not be tomorrow's video. I'm gonna record a video tomorrow. I just don't know if it's gonna be about this. It might be.

00:16:36
<transcript>: something else

00:16:41
<transcript>: Something else entirely. And this might be next week's, because I might not get this done.

00:16:43
<transcript>: It's very possible.

00:16:56
<transcript>: Let's see parameter metric number one unit must be a value in the set megabits. Oh, okay. So none is not a valid.

00:16:59
<transcript>: Metro, or it is, I bet I lowercase it.

00:17:02
<transcript>: Because I'm done.

00:17:02
<transcript>: i bet

00:17:06
<transcript>: I bet I lowercase it. Test handler.

00:17:06
<transcript>: handler

00:17:08
<transcript>: Handler.

00:17:10
<transcript>: Let's see.

00:17:12
<transcript>: Yeah, there it is.

00:17:15
kylliangamer: Damn that's a lot of tabs

00:17:15
<transcript>: That needs to be that.

00:17:15
<transcript>: so

00:17:17
<transcript>: So does that.

00:17:22
<transcript>: Okay, and what's the error here? Cloud Watch. Can I find module.

00:17:26
<transcript>: Corresponding type declaration.

00:17:26
<transcript>: really

00:17:28
<transcript>: Really.

00:17:32
<transcript>: Lc restart I feel like.

00:17:32
<transcript>: i've not

00:17:34
cowfacedude99: Apparently my nix stuff has decided to not play nicely with treesitter. I am hopping around on my system for about a week/or till saturday so that I can get it to fix.

00:17:36
<transcript>: I've not had to add any like types for the other clients.

00:17:39
<transcript>: Interesting.

00:17:39
<transcript>: think with the

00:17:42
<transcript>: Think with the follow old bearded tech.

00:17:51
<transcript>: It is a lot of tab skillian. It's an issue. Apparently my Nick stuff was decided to not play nicely with tree sitter hopping around on my system for about a week.

00:17:51
<transcript>: till saturday

00:17:59
<transcript>: Till Saturday so I can get it fixed. Oof. I feel that I can feel the pain of that cow face after a month of setting up my Neil them.

00:17:59
<transcript>: rick rick

00:18:02
<transcript>: Rick, Rick, Master Flex. Thank you so much for the follow.

00:18:02
<transcript>: so what i want to do

00:18:09
<transcript>: So what I want to do here? Do I want to look at the package? You know, what? Did I install that one.

00:18:12
<transcript>: Install that.

00:18:12
<transcript>: to

00:18:13
<transcript>: To.

00:18:16
<transcript>: Wrong.

00:18:16
<transcript>: here

00:18:19
<transcript>: Here. No, that's right. That would be.

00:18:19
<transcript>: this

00:18:24
<transcript>: This is the Packages API package JSON. Yeah, Client Cloud watch.

00:18:24
<transcript>: interest

00:18:26
<transcript>: Interest.

00:18:28
<transcript>: How many types for it.

00:18:33
<transcript>: And it's. So why didn't I need types for any of the others.

00:18:35
<transcript>: I mean we can.

00:18:35
<transcript>: try

00:18:36
<transcript>: Try.

00:18:38
cowfacedude99: Or it is about time I extract my neovim config into a flake.

00:18:39
misguidedblade: which technology is trending now as a fresher is good to learn

00:18:45
<transcript>: To add types a Tobs SDK Client Cloud watch. Just make sure I'm typing that right. Aws. Sdk client.

00:18:48
<transcript>: Oh, see, it's not listed there. Cloud watch.

00:18:53
<transcript>: This file that I'm in it's. Api Lib functions test handler.

00:18:53
<transcript>: weird

00:18:55
<transcript>: Weird.

00:18:57
<transcript>: What do we think of this.

00:18:59
<transcript>: Did it.

00:19:06
cowfacedude99: @misguidedblade Typescript. You can do litrerally anything in it

00:19:07
<transcript>: Or is. It is about time. I extract my neovim config into a Flake. I don't know what a Flake is. Cafes. I feel so out of touch.

00:19:13
<transcript>: Welcome to Chat Misguided Blade, which technology is trending now as a fresher is good to learn.

00:19:20
<transcript>: Typescript. Yeah, I would say TypeScript. I mean if you want to go real trendy, then rest.

00:19:24
w3barsi: @misguidedblade Rust. You can do literally anything in it

00:19:25
<transcript>: But I think that's probably a little more of an investment. You could probably pick up TypeScript real fast.

00:19:33
<transcript>: Okay, I'm gonna try adding. I don't think this is gonna work, but I'm gonna try yarn. Add.

00:19:33
<transcript>: dev

00:19:38
<transcript>: Dev AWS SDK client Cloud watch.

00:19:38
<transcript>: cloud

00:19:39
<transcript>: Cloud.

00:19:39
<transcript>: watch

00:19:41
<transcript>: Watch. Oh, wait, wait, wait.

00:19:43
cowfacedude99: @misguidedblade we don't want to scare him away LUL

00:19:47
<transcript>: I want to say types, this isn't gonna work.

00:19:47
<transcript>: types there's no

00:19:50
<transcript>: Types. There's no way there's a package for this, right.

00:19:57
misguidedblade: ðŸ˜¶

00:19:58
<transcript>: Now. I don't know something's wrong here. I'm just gonna ignore it because I feel like.

00:20:00
robcil: Didnt eventbridge replace cloudwatch?

00:20:03
<transcript>: There. It works, right.

00:20:06
<transcript>: Whoa.

00:20:10
<transcript>: Doing.

00:20:12
<transcript>: Am I even doing.

00:20:15
w3barsi: i honestly just go by the saying

00:20:15
<transcript>: Oh, I want to do that. It's an innie. Okay.

00:20:15
<transcript>: that's not good

00:20:17
<transcript>: That's not good.

00:20:20
<transcript>: But that worked, I guess.

00:20:20
<transcript>: send

00:20:26
w3barsi: "if it can be written in javascript, it will be written in javascript"

00:20:28
<transcript>: Send it just isn't complaining about that part. I don't know. I don't know. Actually, I'm gonna try quitting the event because I did see.

00:20:28
<transcript>: a weird

00:20:36
<transcript>: A weird issue the other day with high script and Quitting seemed to fix it. Let's go to our test handler.

00:20:36
<transcript>: play some

00:20:38
<transcript>: Play some music.

00:20:40
<transcript>: Oh, still an issue.

00:20:43
<transcript>: What.

00:20:50
<transcript>: 's Gonna do.

00:20:50
<transcript>: okay

00:20:55
<transcript>: Okay. I'm I don't care. I just don't care. Did I ever deploy my saying.

00:21:02
<transcript>: Build. Did I do it? I might already done it.

00:21:02
<transcript>: twitch

00:21:10
cowfacedude99: try and reinstall client-cloudwatch.

00:21:13
<transcript>: Twitch is telling me remind my followers or sorry, remind my viewers to follow this could be a good time to remind viewers to follow hey, it'd be nice if you followed if you want to come hang out in.

00:21:13
<transcript>: maybe

00:21:14
<transcript>: Maybe give me a follow.

00:21:19
<transcript>: Switch. That I should do that. I'm really bad at this.

00:21:23
<transcript>: We don't want to scare him away? Oh, yeah, yeah, no.

00:21:23
<transcript>: it's probably

00:21:27
<transcript>: It's probably a little intense if you're new. Wait, did you say you're new.

00:21:27
<transcript>: as a

00:21:30
<transcript>: As a fresher is good to learn.

00:21:33
<transcript>: Are you new to programming? Misguided.

00:21:42
<transcript>: First time chat. Welcome to Chat. Rob. Phil. Didn't EventBridge replace Cloud watch? No EventBridge replacement.

00:21:48
<transcript>: So cloud watch events are basically event bridge now with a bunch more features of it Ridge has.

00:21:48
<transcript>: but cloud

00:21:54
<transcript>: But Cloud Watch Metrics Logs there's still a lot of Cloud Watch Insights. Cloud watch.

00:21:54
<transcript>: synt

00:21:57
<transcript>: Synthetics there's so many cloud watch services.

00:21:57
<transcript>: they just

00:22:01
<transcript>: They just replaced the VM Bridge, replaced Cloud Watch events.

00:22:08
<transcript>: If it can be written in JavaScript, it will be written in JavaScript. That's right. Try and reinstall client Cloud Watch. Oh, that's a good idea.

00:22:08
<transcript>: that's good

00:22:10
<transcript>: That's good idea.

00:22:13
misguidedblade: yes new , but i  know java , python some concepts DSA

00:22:14
<transcript>: What's going on.

00:22:16
<transcript>: There we go.

00:22:21
<transcript>: See yarn. Add, not Div. Just. Yeah.

00:22:21
<transcript>: let's try

00:22:23
<transcript>: Let's try this. Why not.

00:22:27
<transcript>: I really wish I could use pnpm.

00:22:29
<transcript>: Really wish I could.

00:22:29
<transcript>: but i can't

00:22:30
<transcript>: But I can't.

00:22:30
<transcript>: with the cd

00:22:40
<transcript>: With the CDK and the way it bundles JavaScript functions. Okay, it's just a bummer, but it's just reality. And that's okay. I'm gonna deploy it again, even if I already did.

00:22:42
<transcript>: Because I don't know if I did.

00:22:48
<transcript>: Here's, me eat something other than a Lar bar. We got Apple snacks.

00:23:07
w3barsi: @misguidedblade try webdev

00:23:07
<transcript>: Thank you for the follows. Rob still.

00:23:08
<transcript>: Enjoy.

00:23:15
<transcript>: And Misguided Blade and Rick, Master Flex, an old bearded tech. I don't know if I saw those.

00:23:19
<transcript>: If you know Java. Just start with TypeScript.

00:23:22
<transcript>: I feel like that's probably the best.

00:23:28
<transcript>: Surface area of easy for you to learn and things you can get employed with.

00:23:39
<transcript>: I mentioned I did a webinar.

00:23:39
<transcript>: good

00:23:40
<transcript>: Good times.

00:23:43
<transcript>: Only had to say a couple things.

00:23:47
standardrobot: been learning some typescript / getting back up to speed with some web dev basics recently

00:23:48
<transcript>: I probably sounded dumb. I don't care.

00:23:53
<transcript>: Oh, I didn't invoke it.

00:23:58
standardrobot: I'm usually writing in Python / C++ for my job and in my free time.

00:24:02
<transcript>: The best part is the audience for this webinar was like.

00:24:05
misguidedblade: Thank you â™¥

00:24:07
<transcript>: Business leaders.

00:24:12
<transcript>: And I come on with this whole Twitch background. It's like Adam Dev Neon sign in the back.

00:24:13
cowfacedude99: nixconf just dropped a bunch of videos from the nix conf. This weekend is gonna be a busy one LUL

00:24:16
<transcript>: I don't know. I didn't fit in very well.

00:24:22
<transcript>: Okay still failed.

00:24:22
<transcript>: what did it fail

00:24:24
<transcript>: What did it fail this time.

00:24:26
standardrobot: but you're the biggest business leader

00:24:27
<transcript>: Unit must be a value in the set.

00:24:27
<transcript>: oh

00:24:29
<transcript>: Oh, because I didn't know what the unit was.

00:24:29
<transcript>: and i did something

00:24:31
<transcript>: And I did something dumb.

00:24:33
<transcript>: None.

00:24:35
standardrobot: CEO of Corporation Inc.

00:24:37
jbasisbasovs: Hi. So you are using purely AWS packages and never Amplify?

00:24:41
<transcript>: Ms. Yeah. I didn't know what that supposed to be, so there is actually a right answer here. It can be milliseconds.

00:24:43
<transcript>: All right.

00:24:44
<transcript>: Let's do it again.

00:24:44
<transcript>: we do it again

00:24:46
<transcript>: We do it again.

00:24:54
<transcript>: Let's see. Nick's. Comp just dropped a bunch of videos from the NYX. Comp this weekend is gonna be a busy one. Cafes, you gotta go to sleep or you're never gonna get to watch any of those videos.

00:25:00
<transcript>: Been learning some TypeScript getting back to speed with some web Dev basics recently.

00:25:00
<transcript>: usually writing

00:25:04
<transcript>: Usually writing Python sequel slows for my day job or for my job and in my free time.

00:25:11
<transcript>: You're the business biggest big business leader. Ceo of Corporation Inc.

00:25:13
<transcript>: income

00:25:13
<transcript>: income so

00:25:17
standardrobot: are you using kitty?

00:25:22
<transcript>: Income so you are using purely a Tobis packages and never amplify so J basis I don't really use the amplify packages all that often.

00:25:32
<transcript>: I've used them in the past for something like I used to use them for awesome. Nope, Nope, Nope, Nope, Nope, no. Oh, my. What? Oh, I forgot. This was even a thing. Cafes.

00:25:37
cowfacedude99: gotta do once before I go to sleep LUL

00:25:42
<transcript>: What this tells me. This tells me that Cafes doesn't ever want to meet with me 101 oneonone because he doesn't save at this point so he just Rick rolls me, which is fine.

00:25:46
<transcript>: I'd like to see your face cafes. Unless I'd like to talk like to have a chat.

00:25:50
<transcript>: Okay, you got to do one before I go to sleep.

00:25:50
<transcript>: standard row

00:25:53
<transcript>: Standard row. I am not using Kitty.

00:25:53
<transcript>: i'm using

00:25:56
<transcript>: I'm using alacrity.

00:25:56
<transcript>: which kind of sounds

00:25:58
<transcript>: Which kind of sounds almost like Kitty.

00:25:58
<transcript>: all right

00:26:00
standardrobot: oh nice

00:26:04
<transcript>: All right. I've been Rick rolled cafes. Have a good night. You get some sleep.

00:26:10
<transcript>: Now I gotta reopen Chrome you remember how many tabs I had open? Do I restore them.

00:26:13
<transcript>: Where do we start? Over. I think we start over.

00:26:17
<transcript>: And it's gonna open up all my email and docs, every single thing about me.

00:26:17
<transcript>: oh my

00:26:19
<transcript>: Oh, my word.

00:26:19
<transcript>: okay

00:26:20
<transcript>: Okay.

00:26:22
<transcript>: Let's go.

00:26:25
cowfacedude99: enjoy your stream

00:26:28
<transcript>: Aws console, I'm just starting over, you know, sometimes you you just gotta declare tab bankruptcy.

00:26:28
<transcript>: that's

00:26:30
<transcript>: That's what that was.

00:26:33
<transcript>: Yeah. Enjoy your sleep. Cafe. See ya.

00:26:33
<transcript>: i think

00:26:37
<transcript>: I think for the follow PCY KQ.

00:26:40
<transcript>: I messed that up pretty bad.

00:26:45
<transcript>: Let's reinvent the thing.

00:26:51
<transcript>: Let's find our.

00:26:56
<transcript>: Test handler. Let's go to the logs.

00:27:10
<transcript>: Okay. 1130. That's this one right here. Oh, progress. Maybe.

00:27:10
<transcript>: maybe progress

00:27:11
<transcript>: Maybe progress.

00:27:14
<transcript>: Yeah, I don't see any failures, you know.

00:27:19
<transcript>: If it didn't fail, then that means we should have some cloud watch.

00:27:19
<transcript>: metrics

00:27:20
<transcript>: Metrics.

00:27:25
<transcript>: Let's see. So we have some new metrics.

00:27:25
<transcript>: some new

00:27:28
<transcript>: Some new fun. Mitchell, look at this bitter namespace. There it is.

00:27:31
<transcript>: Region Operation region.

00:27:31
<transcript>: so we

00:27:33
<transcript>: So we can look at.

00:27:38
<transcript>: I want to see all of the.

00:27:41
<transcript>: Get my profile. See? What is this.

00:27:41
<transcript>: metric

00:27:45
<transcript>: Metric Name. So can I look at these.

00:27:54
<transcript>: Follows and beats they are not registering they're so low there's one followup one get my profile.

00:27:54
<transcript>: and

00:27:57
<transcript>: And no beats did not do a beat.

00:27:59
<transcript>: I think it did a beat.

00:28:04
<transcript>: Let's look at this operation.

00:28:09
<transcript>: Latency. Okay. Go see these tracked.

00:28:09
<transcript>: how

00:28:11
<transcript>: How is that a one.

00:28:13
<transcript>: I'm sorry. What.

00:28:18
<transcript>: Oh, it's it's match it's. I've got multiple metrics here, so let's get rid of.

00:28:21
<transcript>: Beets, let's get rid of these.

00:28:21
<transcript>: okay

00:28:23
<transcript>: Okay.

00:28:39
maleero: Rick Roll is too cheap LUL

00:28:39
<transcript>: So here's our latency get my profile took 356 milliseconds follow took 154 why did we not get a beat? I think we beat it here's the beat.

00:28:43
<transcript>: Why no beat though.

00:28:48
<transcript>: Why no B Wick roll is too cheap. People have been doing it as much. I don't know.

00:28:53
<transcript>: It used to be 10,000, and then I dropped it. Make it more fun.

00:28:54
rickmaster_flex: where dat beat go

00:28:57
<transcript>: It doesn't happen all that often now.

00:29:29
<transcript>: Like the only thing I figured is why didn't it.

00:29:31
<transcript>: Track the beat.

00:29:39
<transcript>: Raw.

00:29:49
<transcript>: There.

00:29:53
<transcript>: We await it right here.

00:29:59
<transcript>: It just needs a SEC.

00:29:59
<transcript>: maybe i need to

00:30:03
<transcript>: Maybe I need to just, like, get all the data. Maybe it hasn't got it all yet.

00:30:05
<transcript>: Nope.

00:30:13
<transcript>: No beats.

00:30:15
<transcript>: Where'd that be? Go.

00:30:21
<transcript>: Okay.

00:30:21
<transcript>: okay

00:30:22
<transcript>: Okay.

00:30:25
<transcript>: So for some reason.

00:30:28
<transcript>: Let's just let's hit it a few more times, I say.

00:30:30
<transcript>: Let's change our script.

00:30:33
<transcript>: To.

00:30:40
<transcript>: This.

00:30:40
<transcript>: promises

00:30:42
<transcript>: Promises, equals.

00:30:51
<transcript>: Like that.

00:30:54
<transcript>: And then.

00:31:00
<transcript>: Something like that.

00:31:00
<transcript>: now we can do a better

00:31:01
<transcript>: Now we can do a better.

00:31:05
<transcript>: Hit the same.

00:31:21
<transcript>: Do it like.

00:31:28
<transcript>: Send, wait.

00:31:30
<transcript>: Wait.

00:31:30
<transcript>: no

00:31:33
<transcript>: No. Why did you let me do this.

00:31:36
<transcript>: Oakland, Sin. Send multiple.

00:31:41
<transcript>: And I do as many as I want.

00:31:44
<transcript>: Command command server, send.

00:31:47
<transcript>: No, it's not an array. Right.

00:31:47
<transcript>: those options

00:31:51
<transcript>: Those options I was passing into, so I need to copy this whole thing.

00:31:53
<transcript>: Like this.

00:31:59
<transcript>: Okay.

00:32:05
<transcript>: So there we go.

00:32:05
<transcript>: we're just sending

00:32:09
<transcript>: We're just sending it like four times. Why not.

00:32:17
<transcript>: We'll just see if this comes in.

00:32:17
<transcript>: quickly

00:32:20
<transcript>: Quickly. I need to turn on. I think there's like.

00:32:20
<transcript>: advanced

00:32:27
<transcript>: Advanced metrics or something way you can do it like per second. You can get like very fine grained. How do I do that.

00:32:30
<transcript>: How do I do that.

00:32:30
<transcript>: options

00:32:32
<transcript>: Options.

00:32:37
<transcript>: Most recent data point even when not fully aggregated.

00:32:37
<transcript>: yeah

00:32:38
<transcript>: Yeah.

00:32:41
<transcript>: That's not what I'm looking for, though.

00:32:45
<transcript>: Cloud watch.

00:32:45
<transcript>: one second

00:32:47
<transcript>: 1 second metric.

00:32:51
<transcript>: There's a name for this.

00:32:57
rickmaster_flex: since i'm new, really quickly what are you trying to do?

00:33:10
<transcript>: Since I'm new really quickly. Oh, yeah. Welcome to Chat Rick Master. Really quickly. What are you trying to do? We are testing.

00:33:10
<transcript>: we're trying to build

00:33:11
<transcript>: We're trying to build.

00:33:11
<transcript>: here

00:33:12
adamdotdev: !today

00:33:12
fossabot: Today Adam is working on bitter, a serverless twitter. Built to test the limits of concurrency within the serverless world.

00:33:12
<transcript>: Here.

00:33:12
<transcript>: i think

00:33:16
<transcript>: I think we're building like a Twitter API clone.

00:33:16
<transcript>: but trying

00:33:24
<transcript>: But trying to test it with Twitter volume and just see, like, what are the limits of serverless? Can we build a serverless API that can handle.

00:33:24
<transcript>: new

00:33:32
<transcript>: New Tweets at 100 tweets a second, bursting up to 1500 tweets a second and reading your timeline those two aspects of the Twitter.

00:33:32
<transcript>: ap

00:33:36
rickmaster_flex: damn thats sick

00:33:50
<transcript>: Api. So just a sliver of the Twitter API. But can we create a service with all serverless stuff on AWS that handles that kind of volume, like it's just kind of an insane exercise. Actually, the is a lot, and I don't know if we're gonna be able to do it, but that's what I'm showing you. I'm gonna make a video about it.

00:33:56
<transcript>: Basic monitoring and detail monitoring. I think this is where the.

00:33:58
<transcript>: 1 second.

00:34:02
standardrobot: this is a coll project

00:34:04
<transcript>: Detailed.

00:34:05
standardrobot: cool*

00:34:12
<transcript>: Where's the talking about detailed monitoring, detailed.

00:34:13
oetziofficial: and also, this is not being launched as a twitter replacement

00:34:16
<transcript>: Ec Two, that's an easy two, specific thing.

00:34:20
<transcript>: Metrics Cloud watch.

00:34:20
oetziofficial: just for testing purposes :D

00:34:23
<transcript>: Metrics 1 second.

00:34:23
<transcript>: accuracy

00:34:24
<transcript>: Accuracy.

00:34:29
<transcript>: We're gonna need this because I'm gonna have to kill this thing real fast if it starts getting.

00:34:31
<transcript>: Really expensive.

00:34:37
parkour_peter: Hello everyone!

00:34:47
<transcript>: 1 second. Okay. When you publish a high resolution metric, cloud Watch stores it with a resolution 1 second. You can read and retrieve it with a period of 1 second. Five cent. Okay, so I need to make a high resolution metric.

00:34:56
<transcript>: So calling potential day for more or more often on a high resolution metric can lead to higher charges.

00:35:00
<transcript>: Yeah. This cloud watch is gonna be a big part of our costs. Really.

00:35:06
<transcript>: Okay, let's see what this look like? Did we get any beats.

00:35:06
<transcript>: we got one

00:35:08
<transcript>: We got one beat.

00:35:08
<transcript>: i should have

00:35:10
<transcript>: I should have gotten four.

00:35:10
<transcript>: and we got

00:35:13
<transcript>: And we got one. Is that right.

00:35:17
<transcript>: So right.

00:35:19
<transcript>: What.

00:35:19
<transcript>: only

00:35:21
<transcript>: Only one follow.

00:35:21
<transcript>: what's going

00:35:23
<transcript>: What's going on.

00:35:23
<transcript>: something's not

00:35:24
<transcript>: Something's not working.

00:35:29
<transcript>: In Volcare. Here we go.

00:35:29
<transcript>: property

00:35:32
<transcript>: Property follow of NOL.

00:35:34
<transcript>: nolan

00:35:34
<transcript>: nolan so here

00:35:37
<transcript>: Nolan. So here there's an error on follow.

00:35:40
<transcript>: Transaction error.

00:35:43
<transcript>: What happened here.

00:35:48
<transcript>: We had an air DynamoDB. Transaction, error.

00:35:54
<transcript>: No other information. That means that I swallowed it in AppSync. That's a bummer.

00:36:01
<transcript>: That's a bummer, but I can find it in app sync.

00:36:04
<transcript>: I think, I think.

00:36:10
<transcript>: Hello, parkour.

00:36:25
<transcript>: Yeah. No, it's not. Being launched as a Twitter replacement is just for the test, like we're just making this to throw it away. It'll be open source if you want to learn something from it. Cool. If you want to deploy it, it might cost something like $3 million a month to run. So maybe don't do that.

00:36:53
<transcript>: Okay.

00:37:04
<transcript>: Follow.

00:37:09
<transcript>: Is that right now? No.

00:37:09
<transcript>: let's just look at

00:37:12
<transcript>: Let's just look at the look at the most recent.

00:37:19
<transcript>: This is in the.

00:37:21
<transcript>: A sending order.

00:37:23
<transcript>: I need descending order.

00:37:34
<transcript>: Okay. This last minute. That's not long enough.

00:37:39
<transcript>: Why would it be following? Why would it be failing to follow.

00:37:42
<transcript>: Let's just find the reset here.

00:37:45
<transcript>: This is such a nightmare to search.

00:37:47
<transcript>: Beat.

00:37:49
<transcript>: This one didn't fail.

00:37:52
<transcript>: It's gonna just be follow.

00:37:52
<transcript>: here we got

00:37:54
yeltrah_: No way..AWS has dark mode !?!?!

00:37:54
<transcript>: Here we gotta follow.

00:38:00
<transcript>: Transaction Cancel. Please refer Cancellation Reasons for super reason.

00:38:00
<transcript>: none

00:38:02
<transcript>: None Transaction costs.

00:38:02
<transcript>: transactions

00:38:04
<transcript>: Transactions ongoing for the item.

00:38:04
<transcript>: oh

00:38:08
<transcript>: Oh two people can't follow the same person at the same time.

00:38:08
<transcript>: what

00:38:09
<transcript>: What.

00:38:15
<transcript>: That's. That's not good. I gotta think about this. What did I do here.

00:38:26
<transcript>: So we got a retry.

00:38:31
<transcript>: At the service level.

00:38:47
<transcript>: Is that that's not across different transactions. That's actually within the same transaction. Maybe.

00:38:47
<transcript>: yeah that's what

00:38:49
<transcript>: Yeah, that's what it is. I know it is.

00:38:52
yeltrah_: Nice, just updated

00:38:58
<transcript>: Actually. Look at it. The mapping. Here we go.

00:39:04
<transcript>: User.

00:39:04
<transcript>: id

00:39:05
<transcript>: Id.

00:39:08
<transcript>: So we're trying to create a follow.

00:39:18
<transcript>: Other user ID. Let's look at the key. Just the key.

00:39:18
<transcript>: put item

00:39:20
<transcript>: Put item that.

00:39:23
<transcript>: This is hard to read.

00:39:27
<transcript>: Bitter table. Okay.

00:39:27
<transcript>: bitter

00:39:29
<transcript>: Bitter Cable. There we go.

00:39:34
<transcript>: So this one bitter table is updating.

00:39:36
<transcript>: Profile.

00:39:38
<transcript>: Two set.

00:39:41
<transcript>: And this one is a different profile.

00:39:47
<transcript>: Okay. So it really is just it was unable to.

00:39:47
<transcript>: update

00:39:49
<transcript>: Update the same record.

00:39:49
<transcript>: while

00:39:53
<transcript>: While another transactions going on that's that's a bummer.

00:39:57
<transcript>: Anyways does have dark mode hard green.

00:39:57
<transcript>: yeah

00:40:00
<transcript>: Yeah, just updated. It's awesome.

00:40:15
<transcript>: So DynamoDB.

00:40:20
<transcript>: Transaction. What did I. What was the error message.

00:40:25
<transcript>: I just saw it. Where was that.

00:40:27
<transcript>: Oh, here we go.

00:40:27
<transcript>: trans

00:40:30
<transcript>: Transaction is ongoing for the item.

00:40:30
<transcript>: so

00:40:33
<transcript>: So you can have two transactions.

00:40:37
<transcript>: Operate on the same item at the same time.

00:40:40
<transcript>: I did not know this.

00:40:51
<transcript>: More than one action. No, it's not the same item.

00:40:55
<transcript>: Table in the way.

00:40:59
<transcript>: Is it the same item? Let's look at it.

00:41:05
<transcript>: A mutation follow.

00:41:05
<transcript>: here

00:41:09
<transcript>: Here. So this one is doing a put.

00:41:10
<transcript>: Follow record.

00:41:20
<transcript>: This one is updated a profile to add following count and this one's updating to add followers count. Those are not the same records, so it's not that.

00:41:23
<transcript>: A condition when the condition is not Matt. Nope.

00:41:28
<transcript>: A table in the Transact Ride Items request is in a different counter region. Nope.

00:41:28
<transcript>: more than one

00:41:34
<transcript>: More than one action. The transaction? Nope. Insufficient provision capacity. No item size becomes too large.

00:41:34
<transcript>: no

00:41:39
<transcript>: No there's a user error such as invalidation format.

00:41:59
<transcript>: It's actually part of the feature, and it was mentioned in Launch Mounts. Items Items are not locked during a transaction. Dynamodb transactions provide Serializable isolation. If an item is modified outside of a transaction while the transaction is in progress, the transaction is canceled in an exception thrown with details about which item or items caused.

00:41:59
<transcript>: the exception

00:42:06
<transcript>: The exception. Okay, so it is it's by design, instead of locking down, whether you use something called optimistic concurrency control.

00:42:09
<transcript>: If you're interested in learning about that.

00:42:21
<transcript>: Abstractation for transaction says multiple transactions updating the same item simultaneously can cause conflicts that cancel the transactions. We are recommend following DynamoDB best practices for data modeling to minimize such conflicts.

00:42:34
<transcript>: Right. Transactions don't seed under the following circumstances when ongoing Transact ride items operation conflicts. We confirm concurrent transactriven requests one or more items in the transactrive items operation. Okay.

00:42:36
<transcript>: So.

00:42:40
<transcript>: I think I just need to do retries.

00:42:41
aatishsai: since you ran 5 instance of test at a same time would there be conflict between those where all test is updating the same record

00:42:42
<transcript>: I think.

00:42:42
<transcript>: i'm trying

00:42:44
<transcript>: I'm trying to think how I would.

00:42:51
<transcript>: How else? Would I.

00:42:55
<transcript>: Exponential back off.

00:43:15
<transcript>: Since you ran five instances of test at the same time, would there be a conflict between those where all test is updated? Same record? Yeah. Not all of them were, but two of them tried to follow the same person at the exact same moment within that shared. Like, I'm doing all the promises at once. So two people tried to update. They tried.

00:43:15
<transcript>: to follow the same

00:43:24
<transcript>: To follow the same person, same exact moment. And that caused this cancellation, which we just need to handle. I mean, it's just it's as simple as. Like.

00:43:24
<transcript>: retries

00:43:28
<transcript>: Retries I do wonder could I do this in my.

00:43:28
<transcript>: now

00:43:31
<transcript>: Now. I couldn't do this. Here.

00:43:37
<transcript>: I guess I have to handle it in the client, which is a bummer.

00:43:40
<transcript>: I don't know how to do this with VTL.

00:43:44
<transcript>: Right like.

00:43:49
<transcript>: I think VTL Resolver.

00:43:49
<transcript>: ret

00:43:51
<transcript>: Retries and back off.

00:44:09
<transcript>: There's gonna be a way to do this in VTL.

00:44:09
<transcript>: i think

00:44:12
<transcript>: I think I just have the client just has to retry.

00:44:12
<transcript>: which

00:44:16
<transcript>: Which is a bummer again I'd rather that be behind the API.

00:44:16
<transcript>: worried about that

00:44:18
<transcript>: Worried about that. But.

00:44:41
<transcript>: Give you the pipe line Resolver.

00:44:41
<transcript>: but then

00:44:42
<transcript>: But then.

00:44:42
<transcript>: we're having

00:44:42
maleero: Seems like a task queue might be better than retrying

00:44:44
<transcript>: We're having to try.

00:44:46
<transcript>: Fixed number of times.

00:44:49
<transcript>: And just bail out early if it.

00:44:51
<transcript>: Succeeds.

00:44:57
<transcript>: Since like a task queue might be better than retrying Oh.

00:45:00
<transcript>: Of course.

00:45:00
<transcript>: maliro

00:45:02
<transcript>: Maliro. Of course.

00:45:07
<transcript>: So we're not updating our Dynamo.

00:45:07
<transcript>: record

00:45:08
<transcript>: Record.

00:45:12
<transcript>: The API is just putting it on to SQS.

00:45:16
<transcript>: And then we're putting it into Dynamo.

00:45:16
<transcript>: and

00:45:18
<transcript>: And an asynchronous process.

00:45:20
<transcript>: The only problem.

00:45:23
<transcript>: Now we got thing about Lambda functions.

00:45:25
<transcript>: And.

00:45:25
<transcript>: concurrent

00:45:27
<transcript>: Concurrent execution.

00:45:27
<transcript>: it's another

00:45:29
<transcript>: It's another thing we have to use lame to for.

00:45:40
<transcript>: The math in my head like.

00:45:45
<transcript>: We just have to think about 150. 0 /second.

00:45:55
<transcript>: This will be an it'll be some of them now every one of them would have to be would have to use Lambda function if I'm gonna use a Lambda function, though, should I just.

00:46:01
aatishsai: what is the cost usage till now?

00:46:02
<transcript>: Could I not just do the retries the back off in the Lambda function.

00:46:06
<transcript>: Not as resilient as an SQS Cube, but.

00:46:25
<transcript>: So I think.

00:46:32
delvoid: Hello hello

00:46:33
<transcript>: For one thing, I think I should return the error here.

00:46:41
<transcript>: What is the cost usage till now.

00:46:49
<transcript>: Well, we haven't run it at the scale yet, so we haven't really started ramping up, and there's even a couple of support tickets I need to resolve before I can.

00:46:56
<transcript>: But we figured up doing some rough math. I think it's gonna be something like a million a month in Spin just on DynamoDB.

00:47:02
<transcript>: So that's not even factoring in all the other stuff. Cloud Watch will be a big part of it.

00:47:20
<transcript>: But the Cloud Watch piece you could argue in a real production API system, like in a real trip. If you swear real Twitter product, you wouldn't have to have all these specific metrics. This is really about the load test, so you'd still probably want to be logging your late in stuff. I guess so.

00:47:25
<transcript>: I thought I could check these.

00:47:25
<transcript>: there we go

00:47:26
<transcript>: There we go.

00:47:26
<transcript>: multiple at once

00:47:28
<transcript>: Multiple at once. Okay.

00:47:31
<transcript>: So we did.

00:47:37
<transcript>: We successfully did one follow one beat, one get my profile.

00:47:44
<transcript>: We need to make these.

00:47:51
<transcript>: We need to make them the cloud watch. What are they called.

00:47:51
<transcript>: high resolution

00:47:53
<transcript>: High Resolution metrics.

00:47:59
<transcript>: So how do I do that? Can I just do that in here.

00:48:04
<transcript>: Metrics.

00:48:09
<transcript>: Browse.

00:48:12
<transcript>: I guess I've.

00:48:12
<transcript>: define

00:48:14
<transcript>: Define.

00:48:23
<transcript>: Let's see let's do CDK.

00:48:25
<transcript>: Cloud watch.

00:48:27
<transcript>: High resolution.

00:48:36
<transcript>: Metric data query property.

00:49:04
<transcript>: Resolution. Okay period. The granularity in seconds is a return data points for metrics was regular resolution appear you can be short as 1 minute so we have multiple 60 for high resolution metrics that are collected intervals of less than 1 minute period can be 1510 360. Any multiple of 60.

00:49:04
<transcript>: high

00:49:11
<transcript>: High resolution metrics is those stored by a put metric data operation that includes a storage resolution of 1 second. Okay, so it's in my.

00:49:14
<transcript>: It's in here.

00:49:14
<transcript>: we

00:49:18
<transcript>: We need to say, each of these needs to have.

00:49:18
<transcript>: storage

00:49:19
<transcript>: Storage.

00:49:19
<transcript>: is it

00:49:21
<transcript>: Is it on the.

00:49:25
<transcript>: Click right here. Maybe.

00:49:25
<transcript>: storage

00:49:32
<transcript>: Storage? No. Oh, is this all type dumb? Like we don't have tight safety here.

00:49:34
<transcript>: What is this.

00:49:41
<transcript>: I wish I could get TypeScript work. What's going on here.

00:49:51
<transcript>: Let's see.

00:49:54
<transcript>: seek client

00:49:55
<transcript>: Seek client.

00:49:57
<transcript>: Client.

00:49:57
<transcript>: cloud

00:49:59
<transcript>: Cloud watch.

00:50:04
<transcript>: Look up the docs.

00:50:06
<transcript>: Client cloud watch.

00:50:15
<transcript>: This is biting me. Now.

00:50:22
<transcript>: Javascript.

00:50:30
<transcript>: Okay.

00:50:33
<transcript>: Not what I want.

00:50:33
<transcript>: aw

00:50:39
<transcript>: Awsdk JavaScript Client Cloud Watch storage.

00:50:39
<transcript>: resolution

00:50:40
<transcript>: Resolution.

00:50:48
<transcript>: Is this the that is not what I want.

00:50:48
<transcript>: here we go

00:50:49
<transcript>: Here we go.

00:50:49
<transcript>: here we go

00:50:51
<transcript>: Here we go.

00:50:54
<transcript>: We want put metric, that.

00:50:54
<transcript>: can't believe

00:50:57
<transcript>: Can't believe I'm having to go to the docs.

00:50:57
<transcript>: go to

00:51:00
<transcript>: Go to the docs because type scripts broken.

00:51:00
<transcript>: metric data

00:51:03
<transcript>: Metric data and namespace. Okay. Is it in here.

00:51:10
<transcript>: Yes. Storage resolution. So it's inside this.

00:51:10
<transcript>: okay

00:51:11
<transcript>: Okay.

00:51:18
<transcript>: Metric name, error, dimension.

00:51:21
<transcript>: So here.

00:51:25
<transcript>: Value and then storage.

00:51:27
<transcript>: Resolution.

00:51:35
<transcript>: Is a number so we can say one.

00:51:37
<transcript>: Yeah.

00:51:39
<transcript>: Oh.

00:51:40
<transcript>: One.

00:51:47
<transcript>: That goes right here.

00:51:52
<transcript>: That's all three of them, right.

00:51:52
<transcript>: let's build

00:51:55
<transcript>: Let's build that and deploy.

00:51:55
<transcript>: and then we

00:52:03
<transcript>: And then we got to figure out the back off. Do I want to just retry from the client for now? Is that is that terrible? That means okay. So the difference.

00:52:03
<transcript>: in performance wise

00:52:04
<transcript>: In performance wise.

00:52:04
<transcript>: and i don't want to

00:52:13
<transcript>: And I don't want to gain this like the Twitter API should. If it's supposed to mimic the Twitter API, it should handle the back off the retry itself.

00:52:13
<transcript>: behind the

00:52:18
<transcript>: Behind the API. The difference would be if we did it client side were incurring.

00:52:18
<transcript>: more

00:52:23
<transcript>: More API Gateway requests and App sync requests per second.

00:52:29
<transcript>: Then if we do the Q system, we're doing more Lambda function invocations.

00:52:29
<transcript>: interesting

00:52:30
<transcript>: Interesting.

00:52:30
<transcript>: thank you for the

00:52:32
<transcript>: Thank you for the follow.

00:52:35
<transcript>: following

00:52:36
<transcript>: Following.

00:52:50
<transcript>: Music. Okay. So now we're doing 1 second.

00:53:01
<transcript>: I really wanted to avoid.

00:53:01
<transcript>: lambda

00:53:03
<transcript>: Lambda function invocations for every tweet.

00:53:06
<transcript>: I guess it wouldn't be for every tweet.

00:53:06
<transcript>: if we

00:53:08
<transcript>: If we cue them.

00:53:17
<transcript>: Yeah, if we queued follows.

00:53:17
<transcript>: so

00:53:20
<transcript>: So beats we don't have to worry about right.

00:53:31
<transcript>: New beats are putting an item and they're updating, well, they're updating the profile. So I guess if you got followed at the same moment you did a beat, those would also conflict.

00:53:31
<transcript>: oof

00:53:32
<transcript>: Oof.

00:53:32
<transcript>: we're learning

00:53:35
<transcript>: We're learning lessons very early in this process.

00:53:57
<transcript>: So.

00:54:11
<transcript>: It looks like to put the SQS. I've never done this.

00:54:11
<transcript>: i don't think i've

00:54:13
<transcript>: I don't think I've ever.

00:54:13
<transcript>: put a message

00:54:17
<transcript>: Put a message to SQS from an app sync.

00:54:18
<transcript>: Resolver.

00:54:23
<transcript>: Can I.

00:54:26
<transcript>: Guess I'll just have to use the.

00:54:28
<transcript>: Api.

00:54:31
maleero: Managing client state is harder with SQS too since there would be a delay

00:54:31
<transcript>: Directly.

00:54:43
<transcript>: Like I'd have to just post the message straight to.

00:54:43
<transcript>: sqs

00:54:44
<transcript>: Sqs.

00:54:44
<transcript>: using an

00:54:47
<transcript>: Using an http call.

00:54:50
<transcript>: Then the question is.

00:54:50
<transcript>: like

00:54:52
<transcript>: Like SIG for signing.

00:55:01
<transcript>: Interesting. Thank you for the follow guest.

00:55:01
<transcript>: oil

00:55:02
<transcript>: Oil.

00:55:08
<transcript>: Managing class aid is harder with this just since there would be a delay.

00:55:08
<transcript>: yeah

00:55:21
<transcript>: Yeah. The client state would just have to be optimistic. We just have to say, Yep. We follow them and then just assume that goes through and then, well, actually, I don't know. This is what you're saying. It would be harder. Because if it fails, we won't know.

00:55:24
<transcript>: Yeah, I.

00:55:33
<transcript>: Retry from the client. It just means.

00:55:38
<transcript>: Let's just code. Let's code the solution if we retry from the client.

00:55:38
<transcript>: it's not great

00:55:39
<transcript>: It's not great.

00:55:42
maleero: I was thinking more about a refresh

00:55:43
<transcript>: And I feel like it's kind of like not.

00:55:51
<transcript>: Apples to Apples now with the Twitter API because we're kind of like taking a cheat.

00:55:54
<transcript>: But let's just say, what would it look like.

00:56:00
<transcript>: So here. I think we need to try around this.

00:56:02
delvoid: apples to oranges

00:56:03
<transcript>: This does throw an error.

00:56:08
<transcript>: Try, catch.

00:56:18
<transcript>: Let's say.

00:56:20
<transcript>: Something.

00:56:26
<transcript>: Let's do that.

00:56:32
<transcript>: And then the response. See, the response. I guess all this stuff has to happen.

00:56:42
<transcript>: Well.

00:57:01
<transcript>: That's sure.

00:57:08
<transcript>: And then down here it's used before it's assigned so it doesn't always have.

00:57:12
<transcript>: Well, we're gonna return here we're gonna say.

00:57:24
<transcript>: Do we just retry with in this request function? Do we just retry everything from here.

00:57:31
<transcript>: I was thinking more about a refresh. Yeah. Maliro. I think that's that would be the move.

00:57:35
<transcript>: If you went the queue route.

00:57:40
<transcript>: So if it fails, do we just retry.

00:57:48
<transcript>: Do we let's see. Like if we had a function.

00:57:56
<transcript>: I did all this.

00:58:03
<transcript>: Like this.

00:58:07
<transcript>: If this were the function.

00:58:13
<transcript>: Then we could just try that function.

00:58:13
<transcript>: wait

00:58:14
<transcript>: Wait.

00:58:19
<transcript>: Constant do oh, that's a keyword.

00:58:26
<transcript>: Make request.

00:58:29
<transcript>: It's an async.

00:58:32
<transcript>: Think of the file.

00:58:32
<transcript>: dna

00:58:33
<transcript>: Dna.

00:58:37
<transcript>: So if we did the Maker Quest like this.

00:58:40
<transcript>: And then.

00:58:43
<transcript>: When that fail. So here.

00:58:49
<transcript>: Make request.

00:58:54
<transcript>: And it fails. We could just retry right.

00:59:10
<transcript>: Now we would log the error. And then just if.

00:59:10
<transcript>: or

00:59:14
<transcript>: Or while I never do while Loops? What is it while.

00:59:14
<transcript>: not

00:59:16
<transcript>: Not response.

00:59:21
<transcript>: This whole thing. Can I do this.

00:59:21
<transcript>: who knows

00:59:24
<transcript>: Who knows how to program better than me.

00:59:27
<transcript>: Tell me this is dumb.

00:59:29
<transcript>: While not response.

00:59:33
<transcript>: Used before being a signed yeah, it is.

00:59:33
<transcript>: let's

00:59:36
<transcript>: Let's see. We're trying to sign it. Here.

00:59:42
<transcript>: I guess we could.

00:59:53
<transcript>: Make request and then this would be comps or no the response equals.

00:59:55
<transcript>: At.

01:00:00
<transcript>: Should this be a due.

01:00:04
foobfoob: o/

01:00:17
<transcript>: While oh, man, I don't make wild requests? I don't do wild Loops very often, but I definitely don't do do while very often.

01:00:17
<transcript>: do while not

01:00:19
<transcript>: Do while not respond.

01:00:23
<transcript>: Yeah, it's used before. So let's just come up here and say.

01:00:24
foobfoob: I watched the whole 5h VOD from last time, phew

01:00:28
<transcript>: Like that.

01:00:29
foobfoob: but learned a lot, thanks

01:00:33
<transcript>: Oh no.

01:00:39
<transcript>: Or undo bind that was hard.

01:00:39
<transcript>: okay

01:00:41
<transcript>: Okay.

01:00:43
<transcript>: In response here's our make request.

01:00:48
<transcript>: I response. It was make requests.

01:00:54
<transcript>: And just keep doing it now we're not doing back offs. I guess we should EXP initially. Back off here.

01:01:02
<transcript>: Watch the whole five hour VOD from last time food. That is impressive.

01:01:05
<transcript>: I'm glad you learned something.

01:01:14
<transcript>: Okay.

01:01:17
<transcript>: This doesn't. This is dumb.

01:01:17
<transcript>: there's no back

01:01:19
<transcript>: There's no back off here.

01:01:25
<transcript>: Oh.

01:01:31
<transcript>: Is there like an app sync SDK.

01:01:33
<transcript>: Probably.

01:01:36
<transcript>: Present just like amplify.

01:01:44
<transcript>: Are these are like control plane operations.

01:01:46
<transcript>: Let's see.

01:01:49
<transcript>: I just wonder if it would have.

01:01:55
<transcript>: Value it mapping whatever it would have like back off built in.

01:01:59
<transcript>: List.

01:02:07
<transcript>: Is there like a perform.

01:02:11
<transcript>: Probably not right.

01:02:23
<transcript>: Okay.

01:02:27
<transcript>: Feel bad to like.

01:02:30
<transcript>: Do back off.

01:02:30
<transcript>: man

01:02:31
<transcript>: Manually.

01:02:34
<transcript>: Well, just do a very simple.

01:02:37
<transcript>: Like sleep.

01:02:43
<transcript>: It's not actually sleep. It's we got like have a delay function.

01:02:50
<transcript>: Javascript.

01:02:52
<transcript>: Delay.

01:02:52
<transcript>: i've written

01:02:54
<transcript>: I've written this so many times.

01:02:59
<transcript>: Utility function. Here we go.

01:03:05
<transcript>: Oh wait. Node 16 provides a builtin version of Set timeout.

01:03:08
<transcript>: Await. Set. Time out. Just like this.

01:03:08
<transcript>: oh

01:03:10
<transcript>: Oh.

01:03:10
<transcript>: you just

01:03:13
<transcript>: You just do that. Wait. This is running in node 14.

01:03:19
<transcript>: So can't do that. We're just gonna write this little delay function.

01:03:23
<transcript>: Promise if I.

01:03:27
<transcript>: Okay. We're just gonna put a ride here.

01:03:30
<transcript>: Like that.

01:03:35
<transcript>: Number.

01:03:35
meranofox: Node 14 NotLikeThis

01:03:38
<transcript>: Delay. And then here, I can say.

01:03:40
<transcript>: Delay away.

01:03:40
<transcript>: delay

01:03:42
<transcript>: Delay.

01:03:42
meranofox: boomer

01:03:44
<transcript>: Wait 100 milliseconds I don't know.

01:03:44
<transcript>: that

01:03:49
<transcript>: That number should grow over time. That would be exponential. Back off, I guess.

01:03:52
<transcript>: It's like.

01:03:55
<transcript>: Let.

01:03:57
<transcript>: Count equals zero.

01:04:02
foobfoob: btw do you plan to archive your streams on yt?

01:04:03
<transcript>: We're just logging errors, mostly ignoring them.

01:04:05
<transcript>: And then.

01:04:12
<transcript>: This is like.

01:04:15
<transcript>: Times gown. That's probably dumb, but.

01:04:15
<transcript>: basically

01:04:16
<transcript>: Basically.

01:04:16
<transcript>: what it would look like

01:04:18
<transcript>: What it would look like, right.

01:04:18
<transcript>: okay

01:04:20
<transcript>: Okay.

01:04:22
<transcript>: We log raw.

01:04:22
foobfoob: I think they disappear here on twitch after some time, right?

01:04:27
<transcript>: Now, if it fails, we retry this just gets around our transaction issues.

01:04:30
<transcript>: I don't love it, though.

01:04:33
<transcript>: Note for Teen Boomer.

01:04:33
<transcript>: yeah

01:04:35
<transcript>: Yeah.

01:04:35
<transcript>: i

01:04:38
<transcript>: I could be using those things I just haven't tested.

01:04:38
<transcript>: async away

01:04:39
<transcript>: Async away.

01:04:39
<transcript>: sorry

01:04:41
<transcript>: Sorry. Top level await.

01:04:41
<transcript>: in node

01:04:45
<transcript>: In node 16 on Lambda functions. I hadn't tested it yet.

01:04:53
<transcript>: Do you plan to archive your screens on YouTube? A great question for food. They do disappear after some time. I here's what I do.

01:04:54
<transcript>: I.

01:05:05
<transcript>: Store them all on my machine and on my local Knoss. I have an eventually probably will put them on YouTube. It's just like a big trancho work I haven't done yet. Like I haven't wanted to upload them all.

01:05:05
<transcript>: but then should i think

01:05:07
<transcript>: But then should I think I will.

01:05:07
<transcript>: i don't know if people will

01:05:12
<transcript>: I don't know if people will want to go back and watch VODs from months ago, but I guess maybe.

01:05:24
<transcript>: Okay.

01:05:30
<transcript>: Now I do something really dumb. Here.

01:05:32
<transcript>: Where's my timing.

01:05:38
<transcript>: So we've response.

01:05:39
<transcript>: We have.

01:05:47
<transcript>: Duration after all the loops. So if it fails, it's gonna have a worst latency, which is fine.

01:05:49
<transcript>: I what it should do.

01:05:52
<transcript>: Invoke it.

01:05:55
<transcript>: See what happens.

01:06:06
<transcript>: Oh yeah let's see what you should now be resolution of 1 second.

01:06:14
<transcript>: Scroll off this. You guys. Here we go.

01:06:17
<transcript>: Nothing, no. Metrics.

01:06:21
<transcript>: We'll see what happened here.

01:06:21
<transcript>: twelve nine

01:06:22
<transcript>: Twelve, nine.

01:06:33
<transcript>: There should be some metrics here.

01:06:38
<transcript>: Should be.

01:06:48
<transcript>: What am I missing? Oh, are they new metrics? Are they? Let's see. Brad. Browse.

01:06:50
<transcript>: Bitter.

01:06:56
<transcript>: So this one error.

01:07:00
<transcript>: We had some errors oh, here we go. Follow latency.

01:07:05
<transcript>: Do I have to do something over here to turn on, like 1 second.

01:07:09
<transcript>: Maybe not.

01:07:09
foobfoob: question I had when I watched your last stream: you said that you will abort/stop the load test if its eating up too many credits too fast

01:07:11
<transcript>: Oh peer.

01:07:11
<transcript>: one

01:07:13
<transcript>: 1 second.

01:07:21
<transcript>: 1 second. I want 1 second on all of them. Do I have to do this.

01:07:21
foobfoob: isnt there a big delay until the costs are shown to you, like a day?

01:07:25
<transcript>: There we go. 1 second perfect.

01:07:29
<transcript>: So here.

01:07:29
<transcript>: we had

01:07:33
<transcript>: We had follow latency, beat, latency, follow beat.

01:07:33
<transcript>: and no error

01:07:35
<transcript>: And no errors.

01:07:39
<transcript>: Okay.

01:07:46
<transcript>: Get my profile. Okay. All those should be. Yeah, they're all shown up here, but I don't for some reason.

01:07:52
<transcript>: We didn't have a get my profile log. I feel like some of the cloud watch stuff is not coming over.

01:07:54
<transcript>: I don't know what to think about that.

01:08:01
<transcript>: Let's just start pumping like some real let's just make this thing.

01:08:05
<transcript>: Oh wow so many.

01:08:05
<transcript>: errors

01:08:06
<transcript>: Errors.

01:08:06
<transcript>: simply

01:08:10
<transcript>: Simply oh yeah? That's a TypeScript there I gotta fix my type script.

01:08:13
<transcript>: So let's do this instead of.

01:08:17
<transcript>: Just like.

01:08:17
<transcript>: how about

01:08:19
<transcript>: How about this? What if we just did wild.

01:08:19
<transcript>: true

01:08:20
<transcript>: True.

01:08:30
<transcript>: Am I done? What am I forget? What am I not thinking of here.

01:08:42
<transcript>: What am I not thinking of.

01:08:52
<transcript>: If we just did this repeatedly.

01:08:56
<transcript>: Matches.

01:08:56
<transcript>: of four

01:08:57
<transcript>: Of four.

01:09:04
<transcript>: Hive. I don't know. Let's see.

01:09:10
<transcript>: Now until I stop it, it's just gonna be cranking out these right.

01:09:10
<transcript>: it's gonna

01:09:13
<transcript>: It's gonna be pumping data in.

01:09:33
<transcript>: Question I had when I watched your last stream. You said that you will abort stoploadest if it's eating up too many credits. Too fast. Isn't there a big delay until the costs are shown to you like a day? Yeah. Food poop. I meant to get further faster. And I meant to do like a test with a thousand tweets per second one day and get some data there and then know the next morning.

01:09:33
<transcript>: like here

01:09:37
<transcript>: Like here's. How much that cost. I'm in to do that. I did not.

01:09:37
<transcript>: so

01:09:38
<transcript>: So.

01:09:38
<transcript>: i'm not sure

01:09:43
<transcript>: I'm not sure I'm not sure what the answer is yet. So you go. We've got.

01:09:47
<transcript>: Presumably some data. Now let's get rid of the latencies.

01:09:47
<transcript>: let's just look at

01:09:48
<transcript>: Let's just look at beets.

01:09:52
<transcript>: Beat one.

01:09:55
<transcript>: Should be a lot more than one.

01:10:00
<transcript>: Okay. So there's like one a second right now.

01:10:04
<transcript>: We can grab let's see, we can add math.

01:10:06
<transcript>: Right we can do.

01:10:08
<transcript>: A rate.

01:10:19
<transcript>: What did I do? I just did that for all of them.

01:10:29
<transcript>: Should be pumping.

01:10:29
<transcript>: data

01:10:30
<transcript>: Data.

01:10:30
<transcript>: in like

01:10:33
<transcript>: In like crazy now, right.

01:10:33
<transcript>: we

01:10:35
<transcript>: We just want to look at beats.

01:10:38
<transcript>: But did we add the.

01:10:38
<transcript>: mass how

01:10:42
<transcript>: Mass. How does that work? When I add this? Where does it add it.

01:10:46
<transcript>: Metrics.

01:10:46
<transcript>: so i don't want

01:10:48
<transcript>: So I don't want that I want.

01:10:50
<transcript>: This.

01:10:59
<transcript>: I like, I don't want it for all metrics. Right.

01:11:04
<transcript>: Oh, expression, one beat, latency expression, one beat, so it's just named, terribly.

01:11:10
<transcript>: So rate beat.

01:11:16
<transcript>: It should be our beats per second? Is it, dude? Nothing.

01:11:22
<transcript>: Is that per second by default.

01:11:22
<transcript>: who knows

01:11:23
<transcript>: Who knows.

01:11:23
ayushsharma: are you 37 ?

01:11:38
<transcript>: Metric math enables you to query multiple cloud watch metrics. Mathematician create new time series based on these metrics. Visualize the resulting time series using indivis Lambda Metrics. As an example, you could divide the errors metric by the Invocations metric to get an error rate.

01:11:38
<transcript>: then add

01:11:41
<transcript>: Then add the resulting time series. Okay.

01:11:44
<transcript>: Are you 37? I'm 36.

01:11:44
<transcript>: that's an odd

01:11:48
<transcript>: That's an oddly specific guess. Where did that come from.

01:11:50
fullstacking: I always server side render my vim config

01:11:57
<transcript>: You always serverside render your vim config.

01:12:02
<transcript>: So we're getting no rate now.

01:12:05
<transcript>: A rate of zero.

01:12:09
<transcript>: Is it based? Is the rate not based on seconds.

01:12:14
<transcript>: What's going on here.

01:12:19
<transcript>: What is going on here.

01:12:19
<transcript>: let's open

01:12:21
<transcript>: Let's open up Dynamo.

01:12:33
<transcript>: Oh, you know, it's gonna be expensive. I probably already burned through some credits because Cloud Watch is fully enabled on my app sync. Oh, Geez, that's gonna be so, so bad.

01:12:37
<transcript>: Let's see if we're getting hit here.

01:12:41
<transcript>: Read usage average.

01:12:43
<transcript>: What about? Right.

01:12:45
<transcript>: Average.

01:12:47
<transcript>: What is that.

01:12:50
<transcript>: Units a second.

01:12:50
<transcript>: so we're

01:12:54
<transcript>: So we're using 75 right units right now.

01:13:00
<transcript>: Get laid and see put latency.

01:13:10
<transcript>: I'm not doing anything with the stream yet. We need to do that. So much to do. This is definitely gonna be next week's video. I don't think there's any way I'm getting this.

01:13:13
<transcript>: Done for tomorrow.

01:13:16
<transcript>: Here. We should have a bunch of beats.

01:13:16
<transcript>: what's the live

01:13:18
<transcript>: What's the live item count.

01:13:23
<transcript>: 4600.

01:13:26
anitrogen: what are you trying to achieve here exactly

01:13:28
<transcript>: So I'm not sure why my cloud watch.

01:13:35
<transcript>: 28 metrics oh, what.

01:13:40
<transcript>: I what are you trying to achieve here? Exactly.

01:13:40
<transcript>: a nitrogen we're

01:13:48
<transcript>: A nitrogen. We're trying to build a Twitter API clone that handles Twitter like volume with all serverless tech.

01:13:56
<transcript>: So kind of an impossible task, but we're trying. Let's just go to cloud watch again. This is broken.

01:13:59
<transcript>: So we're trying to simulate 100 tweets per second.

01:14:02
<transcript>: Seeing what that looks like.

01:14:02
<transcript>: and then

01:14:04
<transcript>: And then oh estimated charges.

01:14:12
<transcript>: Billing alarm. Let's see what this is.

01:14:16
thesaltsea: is there a repo for this project

01:14:16
<transcript>: Yeah.

01:14:19
<transcript>: Dashboards let's see all metrics.

01:14:21
<transcript>: Bitter.

01:14:24
<transcript>: So we want to see.

01:14:24
<transcript>: errors

01:14:27
<transcript>: Errors. Now we want to see.

01:14:27
<transcript>: region

01:14:28
anitrogen: oh interesting

01:14:28
<transcript>: Region.

01:14:31
<transcript>: US. These one beats.

01:14:35
<transcript>: Are we just doing like one beat a second? What is this.

01:14:37
<transcript>: Feel like.

01:14:48
<transcript>: Zero. I feel like this is not accurate.

01:14:48
<transcript>: or our

01:14:50
<transcript>: Or our function is not actually.

01:14:53
<transcript>: Let's look at some logs. Here.

01:14:53
<transcript>: is it not

01:14:58
<transcript>: Is it not sending the Cloud Watch metrics? Or we just doing something fundamentally stupid.

01:14:58
<transcript>: and not

01:15:00
<transcript>: And not sending them.

01:15:04
<transcript>: I don't see any errors.

01:15:06
foobfoob: @TheSaltSea yes at https://github.com/adamelmore/bitter

01:15:15
<transcript>: Don't see any errors. Yeah. The salt seed there is. Thank you for food. I haven't pushed today, so I've added a bunch of stuff, but.

01:15:15
<transcript>: yeah

01:15:17
<transcript>: Yeah.

01:15:17
<transcript>: i'll bug

01:15:18
thesaltsea: @foobfoob thanks

01:15:19
<transcript>: I'll bug it pushed up soon.

01:15:26
<transcript>: Okay, I feel like our test function is not actually logging cloud Watch metrics, which is a problem.

01:15:32
<transcript>: And how can I ensure let's just look at the response from Cloud watch.

01:15:39
<transcript>: Response.

01:15:43
<transcript>: Log.

01:15:53
<transcript>: To.

01:15:53
<transcript>: the

01:15:56
<transcript>: The I'll just unlock the whole response.

01:16:00
<transcript>: Okay, we're gonna kill that. Wonder how much that cost.

01:16:03
<transcript>: Don't know because I have no visibility.

01:16:06
<transcript>: I do know I created.

01:16:11
<transcript>: Some items. Let's see what we made it up to 7500 items.

01:16:16
<transcript>: Okay. Not terrible. Not a lot of activity, but some active.

01:16:22
<transcript>: I just can't figure out what's going on with my cloud Watch metrics.

01:16:29
<transcript>: Oh, five minutes again, I thought I said 1 second.

01:16:34
<transcript>: I guess it lost that state. So we're doing like one a second here. That's not very many.

01:16:37
<transcript>: But this should actually.

01:16:40
maleero: The response times are close to one second

01:16:43
<transcript>: This expression. I don't understand if I was just my not to use it.

01:16:52
<transcript>: Details Rate Metrics I need to learn more about.

01:16:52
<transcript>: metric

01:16:54
<transcript>: Metric, math.

01:16:58
<transcript>: Rate.

01:17:02
<transcript>: And one so I can I can choose the metric.

01:17:02
maleero: I saw a few from 800ms to 1100ms

01:17:07
<transcript>: Like I can say.

01:17:07
<transcript>: i can just

01:17:12
<transcript>: I can just let's go back here I could just say I want not metrics, but I want to say.

01:17:15
<transcript>: Metric.

01:17:16
<transcript>: What's it called.

01:17:18
<transcript>: M. One.

01:17:21
<transcript>: Yeah.

01:17:24
<transcript>: Does that work.

01:17:24
<transcript>: function metric

01:17:26
<transcript>: Function metric, not sound.

01:17:30
<transcript>: It isn't. Is it still metrics.

01:17:42
<transcript>: Error. Unsporting opera antiques. What does it say? I should do rate? Oh, just rate and one. I don't say metrics. I just say rate.

01:17:44
<transcript>: M. One.

01:17:53
<transcript>: Still.

01:17:53
<transcript>: a rate

01:17:55
<transcript>: A rate of zero.

01:17:57
<transcript>: I don't understand.

01:18:01
<transcript>: The only thing I can think is Cloud Watch is not.

01:18:10
<transcript>: I'm not actually putting those metrics to Cloud watch.

01:18:14
<transcript>: Wait. Can I send.

01:18:14
<transcript>: way

01:18:14
<transcript>: Way.

01:18:25
<transcript>: My sending multiple commands. Wait. What did I do? No. Symmetric data.

01:18:32
<transcript>: Yeah, I'm just sending multiple metrics. Maybe you can't send. I thought you could send multiple metrics here, but maybe not.

01:18:39
<transcript>: Wait a minute.

01:18:44
<transcript>: So error.

01:18:49
<transcript>: I don't know. Let's put the responses.

01:18:53
<transcript>: So get these responses here.

01:18:57
<transcript>: 's the response.

01:19:02
<transcript>: 200.

01:19:05
<transcript>: Oh, those are response weight.

01:19:10
<transcript>: Yeah, those are the responses from Cloud watch.

01:19:10
<transcript>: timps

01:19:11
<transcript>: Timps, one.

01:19:18
<transcript>: Let's try something else. I don't think we're actually writing them correctly.

01:19:22
<transcript>: We should see actual data.

01:19:26
<transcript>: Like one beat a second doesn't make any sense.

01:19:30
<transcript>: Or do I need to say that these are like a cumulative.

01:19:30
<transcript>: statistic these

01:19:31
<transcript>: Statistic. These are not.

01:19:31
<transcript>: their count

01:19:33
<transcript>: Their count.

01:19:33
<transcript>: they're not

01:19:35
<transcript>: They're not average.

01:19:37
<transcript>: Some.

01:19:37
<transcript>: there we go

01:19:40
<transcript>: There we go. That was my mistake.

01:19:43
<transcript>: Okay. Is that right then.

01:19:47
<transcript>: Is that right? Sum.

01:19:50
<transcript>: Yeah.

01:19:50
<transcript>: yeah

01:19:51
<transcript>: Yeah.

01:19:56
<transcript>: So beats is a sum. Let's turn on the rate.

01:20:03
<transcript>: But wait.

01:20:07
<transcript>: Should be the sum over. Oh, just over a second.

01:20:18
<transcript>: Times are close to 1 second.

01:20:23
<transcript>: So per 10 seconds we're seeing.

01:20:29
<transcript>: 40. Okay, so if I just do 1 second, I don't need the rate.

01:20:31
<transcript>: The rate is just a rate of change.

01:20:31
<transcript>: so we're doing

01:20:36
<transcript>: So we're doing, like not even, like, eight beats a second. Okay, let's up this, then.

01:20:42
<transcript>: Let's see.

01:20:47
<transcript>: Is there a way I could say that these are some.

01:20:47
<transcript>: not

01:20:51
<transcript>: Not over here. Or do I just have to do it over here? Probably just have to do it over here. That's fine.

01:20:59
<transcript>: So we're summing them up per second, and then we're gonna have this nice chart showing us how many beats per second we're getting.

01:21:02
<transcript>: Okay. That's fine.

01:21:04
<transcript>: I'm learning cloud watch.

01:21:04
<transcript>: so now we're

01:21:05
<transcript>: So now we're.

01:21:16
<transcript>: Gonna crank up my script.

01:21:28
<transcript>: This is all very dumb. How I'm doing this. I'm just doing a bunch of sins.

01:21:28
<transcript>: invoke

01:21:30
<transcript>: Invoke the function.

01:21:34
<transcript>: Eventually this will do all the different regions once I can deploy globally.

01:21:43
<transcript>: But these are batches of five. So do I want to.

01:21:53
<transcript>: I could upload the number of that the number in a batch.

01:21:53
<transcript>: we're

01:21:59
<transcript>: We're just running through this, but it's taking a second. So we need to do more concurrent. Yeah.

01:22:06
<transcript>: Okay, we need to do this way smarter. I'm doing this a very dumb way. So, yank.

01:22:09
maleero: You may want to reduce the backoff time since lambda charges for execution duration

01:22:11
<transcript>: Vote.

01:22:17
<transcript>: Return.

01:22:27
<transcript>: That so invoke is an async.

01:22:29
<transcript>: Function.

01:22:29
<transcript>: and

01:22:33
<transcript>: And here we're going to have promises. We could just say, like.

01:22:36
<transcript>: Something like.

01:22:38
<transcript>: For.

01:22:45
<transcript>: How you do just a normal for loop I don't even know anymore index zero okay.

01:22:49
<transcript>: Next is less than.

01:22:53
<transcript>: Ten index plus less. Okay.

01:22:55
<transcript>: We're gonna say.

01:23:00
<transcript>: Cops, promises.

01:23:04
<transcript>: Promises that push.

01:23:06
<transcript>: Invoke.

01:23:08
<transcript>: Right.

01:23:13
<transcript>: Now we can just delete all that.

01:23:13
<transcript>: well now we'll

01:23:15
<transcript>: Well, now we'll add ten.

01:23:18
<transcript>: Ten and vocations per.

01:23:18
<transcript>: what do you think

01:23:20
<transcript>: What do you think? Sure.

01:23:20
<transcript>: now we should

01:23:23
<transcript>: Now we should be hitting a little faster.

01:23:31
<transcript>: This is the basis for the test. I mean, I'm just trying to get this kind of set up.

01:23:40
<transcript>: Response times close to a second. Yeah. I guess I need to not be waiting. I need to kind of like stagger the request and not be waiting on all of them to finish before I hit them with another.

01:23:44
<transcript>: I also think about how the regional side of this is gonna go.

01:23:49
<transcript>: Yeah.

01:23:51
<transcript>: Let's see what this looks like now.

01:24:13
<transcript>: Reduce the backup time since let's Lambda charges for execution duration. Yeah, that's a good call.

01:24:15
<transcript>: Maero.

01:24:19
<transcript>: So we not started hitting it yet.

01:24:21
<transcript>: There's this much of a delay.

01:24:31
<transcript>: Okay. Here we go.

01:24:35
<transcript>: It should be increasing, should be doing more than.

01:24:39
<transcript>: We were doing before, right? This chart represents.

01:24:44
<transcript>: Something like eight beats a second at peak.

01:24:49
<transcript>: Here we go, there we go, we doubled it.

01:24:54
<transcript>: Okay. So we're doing, like ten beats a second here.

01:24:59
<transcript>: If they're taking a second. Yeah. This is this. It's not a good like.

01:24:59
<transcript>: wait a machine

01:25:01
<transcript>: Wait. A machine gun. This thing.

01:25:01
<transcript>: we are gonna have

01:25:03
<transcript>: We are gonna have the multiple regions aspect.

01:25:03
<transcript>: as

01:25:05
<transcript>: As well.

01:25:08
<transcript>: Let's see how fast this table is growing.

01:25:12
<transcript>: 12,000.

01:25:18
<transcript>: Yeah. I wish I had an accurate picture into the billing situation. It's gonna be kind of like.

01:25:21
<transcript>: Not accurate.

01:25:28
<transcript>: But this is working. I mean, that we're doing something. So now we need to flesh out more of the API. I want to make it more realistic.

01:25:32
<transcript>: While we're waiting on Global tables.

01:25:37
<transcript>: So no throttles.

01:25:37
<transcript>: got

01:25:41
<transcript>: Got right unit and read unit.

01:25:43
<transcript>: Our usage.

01:25:46
<transcript>: Okay.

01:25:59
<transcript>: So even still, it's not like a consistent ten second. What would be the way to really machine gun this thing where we're not waiting on promises.

01:26:10
<transcript>: Like where we're doing.

01:26:14
<transcript>: More than one batch of these.

01:26:20
<transcript>: These are just how many are simultaneously hitting. But then we're waiting on all of them before we hit it with another.

01:26:22
<transcript>: Is this a function.

01:26:30
<transcript>: Or.

01:26:39
<transcript>: I'm trying to think of how this is gonna look when we've got the.

01:26:42
<transcript>: Multiple client situation too.

01:26:47
<transcript>: Like hitting from multiple regions. So we'll just have, like, a separate.

01:26:50
<transcript>: A separate runner.

01:26:53
<transcript>: For each.

01:26:57
<transcript>: Region, right.

01:27:01
<transcript>: Yeah.

01:27:11
<transcript>: Somewhere we need to be waiting on the promises to make sure we don't just exit.

01:27:16
<transcript>: Where.

01:27:33
<transcript>: This. We're a runner.

01:27:43
<transcript>: And then we did like.

01:27:55
<transcript>: Am I done one of my runner.

01:27:59
<transcript>: And then like delay.

01:28:07
<transcript>: Right.

01:28:10
<transcript>: What's this unreachable code detected.

01:28:10
<transcript>: what

01:28:12
<transcript>: What.

01:28:14
<transcript>: Actually something up here.

01:28:19
<transcript>: While true what do I do here.

01:28:23
<transcript>: I do that.

01:28:28
<transcript>: Okay so runner while true.

01:28:28
<transcript>: and then we're gonna

01:28:32
<transcript>: And then we're gonna have, like a delay. We don't have the delay file function.

01:28:43
natedunn: hey man. do you stream right off your mac, or pull in your mac as a video source on PC?

01:28:56
<transcript>: It's a lay like 100 milliseconds.

01:28:58
<transcript>: What is it doing.

01:29:01
<transcript>: What.

01:29:06
<transcript>: Is that Keystroke doing.

01:29:11
<transcript>: Why are we copying this up here.

01:29:16
<transcript>: In the world.

01:29:24
<transcript>: Okay. I'm yanking that.

01:29:33
<transcript>: Here. I'm pasting it.

01:29:38
<transcript>: Right.

01:29:46
<transcript>: What is the second? Where is this coming from.

01:29:48
<transcript>: So weird.

01:29:51
<transcript>: Okay.

01:29:53
<transcript>: So 100.

01:29:53
<transcript>: what

01:29:57
<transcript>: What the actual what in the world.

01:29:57
<transcript>: do you guys see

01:29:58
<transcript>: Do you guys see this.

01:30:01
<transcript>: Anyone seeing this? This is bananas.

01:30:01
<transcript>: i don't there's

01:30:05
<transcript>: I don't there's a Neoven bug or something.

01:30:09
<transcript>: Like what is going on.

01:30:14
<transcript>: Okay.

01:30:25
<transcript>: And you stream right off your Mac or put it in your Mac as a video source and PC Nate I stream straight off my Mac. I use them Mac Studio and.

01:30:25
<transcript>: it has hand

01:30:27
<transcript>: It has handled it pretty well.

01:30:27
<transcript>: i don't have any

01:30:29
<transcript>: I don't have any complaints.

01:30:33
<transcript>: Okay, let's go to our test.

01:30:49
<transcript>: That runner is dead now shouldn't be pumping anymore these in.

01:30:54
natedunn: cool, cool.

01:30:57
<transcript>: Now we're going to I'm gonna just like do this a few more times.

01:30:59
estrangedhd: Did you extra lube your mode eighty?

01:31:12
<transcript>: We're just trying to, like, really pepper this thing, you know.

01:31:22
<transcript>: Thank you so much for the subs standard robot. I appreciate that.

01:31:22
<transcript>: did you

01:31:23
standardrobot: o/

01:31:25
standardrobot: :D

01:31:28
<transcript>: Did you extra lube your mode 80 strange. No, I didn't do the looping mode actually did it for me.

01:31:35
<transcript>: They were kind enough to introduce me to this hobby. And I didn't know how to lube. And so they built it for me.

01:31:35
<transcript>: and

01:31:39
<transcript>: And I love it. They did it. They did a great job. I would probably do a terrible job.

01:31:39
<transcript>: thanks

01:31:43
<transcript>: Thanks so much for this up. I really appreciate that standard robot.

01:31:46
estrangedhd: wait, they can do that D:

01:31:47
<transcript>: You're the standard among robots in my opinion.

01:31:54
<transcript>: Let's go here and let's say node. Okay. Now we're gonna be peppering it with a lot more.

01:31:56
<transcript>: Like.

01:32:00
<transcript>: Well, wait a minute. No, it's just gonna exit.

01:32:00
<transcript>: because we're

01:32:03
<transcript>: Because we're not awaiting all those.

01:32:03
<transcript>: promises

01:32:04
<transcript>: Promises.

01:32:08
<transcript>: Right oh no while true? Yeah Oh.

01:32:11
<transcript>: Oh.

01:32:11
<transcript>: i need

01:32:14
<transcript>: I need to stop this. This is a gonna be too much, right.

01:32:17
<transcript>: I'm wild truing.

01:32:17
<transcript>: and then i'm

01:32:18
<transcript>: And then I'm.

01:32:18
<transcript>: peppering it

01:32:20
<transcript>: Peppering. It.

01:32:25
<transcript>: So I'm sending new infinite batches.

01:32:28
<transcript>: This is too much, isn't it.

01:32:32
<transcript>: Is this too much? Is it even working.

01:32:39
<transcript>: Slide just like fill up all the sockets on my machine and crash my machine.

01:32:42
<transcript>: Okay. I'm gonna stop it.

01:32:47
<transcript>: I think that was too much. I think I didn't think.

01:32:47
<transcript>: that through

01:32:48
<transcript>: That through.

01:32:50
<transcript>: It actually.

01:32:56
<transcript>: Oh, 30,000. That was fast.

01:32:56
<transcript>: yeah

01:32:58
natedunn: wait and find out

01:33:01
<transcript>: Yeah, I did. I didn't think that through. I'm curious what that was okay. Here we go. Now. We jumped up.

01:33:01
<transcript>: that's only

01:33:05
natedunn: lol

01:33:06
<transcript>: That's only 57. That was only 55 beats per second.

01:33:11
<transcript>: That's not very many beats per second.

01:33:15
<transcript>: That's not very many.

01:33:22
<transcript>: Okay.

01:33:27
<transcript>: We got to come up with a better.

01:33:33
<transcript>: Better high level approach to test the test Tarnas.

01:33:39
<transcript>: So that was sustaining something like 55.

01:33:39
<transcript>: beats per second

01:33:40
<transcript>: Beats per second.

01:33:44
<transcript>: Thank you for the follow. Oh, Hi.

01:33:46
<transcript>: Oh hell.

01:33:54
<transcript>: Okay.

01:33:57
ohayokai: Just call me Kai. Hi!

01:33:58
<transcript>: If we're gonna do 100 a second, this is gonna be bananas.

01:34:02
<transcript>: Like it's gonna be ludicrous.

01:34:04
<transcript>: We're probably gonna rack up a huge bill.

01:34:08
standardrobot: gonna be absolutely oranges

01:34:15
<transcript>: Gonna be Absolutely oranges.

01:34:15
<transcript>: welcome to chat

01:34:16
<transcript>: Welcome to chat.

01:34:16
<transcript>: kai just call

01:34:19
<transcript>: Kai. Just call you Kai. You got it.

01:34:19
<transcript>: hi there

01:34:20
<transcript>: Hi, there.

01:34:25
<transcript>: Okay.

01:34:28
<transcript>: So what I want to do here.

01:34:28
<transcript>: what i want

01:34:32
<transcript>: What I want to do. I don't want to do this. This was a bad call.

01:34:32
<transcript>: bad call by me

01:34:34
<transcript>: Bad call by me.

01:34:34
<transcript>: what i want

01:34:39
<transcript>: What I want to do is spin up a finite number of these runners and await all that promises which will never.

01:34:45
<transcript>: It'll never exit, right? So this shouldn't be a while loop.

01:34:48
<transcript>: This should be.

01:34:54
<transcript>: Hidden, hidden? That's a cool username.

01:34:54
<transcript>: how'd you get

01:34:56
<transcript>: How'd you get the username hidden.

01:35:00
<transcript>: How did you do that.

01:35:07
<transcript>: Because you you create an account in 2007 that's a long time ago that'll do it.

01:35:07
<transcript>: it's a pretty great

01:35:08
<transcript>: It's a pretty great username.

01:35:10
ohayokai: I hope you don't mind me lurking on your stream. I'm a freshmen and I'm still learning how to code. I wanna hang out in chat to learn something.

01:35:12
dota2dev: what are you building @adamdotdev ?

01:35:14
hidden: its a new twitch feature , you can hide your username

01:35:14
<transcript>: Oh lurk away.

01:35:18
<transcript>: What am I building donor to Dev? I'm building.

01:35:21
<transcript>: Oh, for Real. That's a new Twitch feature.

01:35:21
<transcript>: are you just messing

01:35:25
<transcript>: Are you just messing with me? You can actually hide your username.

01:35:28
<transcript>: Is that a joke.

01:35:30
natedunn: he trolling

01:35:32
hidden: check your settings

01:35:34
<transcript>: What are we doing? We are building a Twitter API clone.

01:35:40
natedunn: they*

01:35:45
hidden: natedunn okay lol

01:35:54
<transcript>: But now just for the sake of like, can we be future complete? Of course, anybody can do that. And they do it all time. We're trying to see what would it take with serverless tech only to build a Twitter API that handles Twitter load 100 tweets per second, bursting up to 1500 tweets per second. I don't think we can increasely think it's going to be just a.

01:35:54
<transcript>: giant mess

01:35:56
<transcript>: Giant mess, but we're trying.

01:36:03
<transcript>: He's trolling asshot. I thought you were Charlie.

01:36:06
<transcript>: Or maybe you're not check your settings.

01:36:06
<transcript>: i don't know

01:36:06
dota2dev: hmm, how would you test that ?

01:36:09
<transcript>: I don't know. Somebody check that for me. I don't want to. I don't want to do it.

01:36:13
hidden: GabeN

01:36:19
<transcript>: How would I test that Dota by cranking lots and lots of data at this API from all kinds of regions all over the world.

01:36:21
<transcript>: That's how we're gonna do it.

01:36:27
<transcript>: Let's see. I should probably look at some of the other metrics real quick and just see, did we have any errors.

01:36:32
<transcript>: Browse all the bitter metrics.

01:36:39
<transcript>: It's gotten very hot in my office.

01:36:39
<transcript>: because

01:36:40
<transcript>: Because.

01:36:45
<transcript>: So here we go. Beat errors, follow errors.

01:36:50
<transcript>: I need to create rates out of those.

01:36:51
<transcript>: Latency.

01:36:58
<transcript>: So, what is this.

01:37:00
<transcript>: What's that data point.

01:37:00
<transcript>: beat latency

01:37:02
<transcript>: Beat latency.

01:37:13
<transcript>: Some. Some of these won't be sums, right? Yeah, they will. Airs.

01:37:24
<transcript>: So during that peak.

01:37:30
<transcript>: We had a five latency. That's not a sum. That would be an average.

01:37:36
<transcript>: Where's the Latencys? Here we go. These would be like P 99s.

01:37:42
<transcript>: P. 99.

01:37:46
<transcript>: Okay.

01:37:50
<transcript>: So the beat latency.

01:37:50
<transcript>: one hundred and ninety

01:37:52
<transcript>: 197.

01:37:52
<transcript>: follow laten

01:37:57
<transcript>: Follow latency is also very big still y did I miss a latency.

01:37:59
<transcript>: No. P. 99.

01:38:03
<transcript>: Rate I don't need to rate anymore.

01:38:10
<transcript>: Still hardly enough data even work with this chart.

01:38:22
<transcript>: So follow latency.

01:38:22
<transcript>: very very

01:38:24
<transcript>: Very, very high.

01:38:35
<transcript>: No Beat errors.

01:38:39
<transcript>: We had three beats.

01:38:41
<transcript>: What do I lookin at.

01:38:45
<transcript>: Guess we need over time. Right.

01:38:45
<transcript>: twenty six

01:38:48
<transcript>: 2676 beats.

01:38:48
<transcript>: out a minute

01:38:51
<transcript>: Out a minute we want per second.

01:38:53
<transcript>: Okay.

01:39:05
<transcript>: This is so hard to work with. There we go.

01:39:11
<transcript>: Okay. Let's let's say if we did it like this? Let's say if we did.

01:39:13
<transcript>: Comps.

01:39:23
<transcript>: No, let's do this.

01:39:27
<transcript>: Promise.

01:39:32
<transcript>: Promises that push.

01:39:40
<transcript>: But let's do that in a loop, right.

01:39:40
<transcript>: these

01:39:45
<transcript>: These runners. They do concurrent execution. Like simultaneous executions.

01:39:45
<transcript>: what we

01:39:47
<transcript>: What we want.

01:39:50
<transcript>: Is.

01:40:03
<transcript>: Multiple runners.

01:40:08
<transcript>: We'll have ten runners. And after each one, we await delay.

01:40:08
<transcript>: one hundred milliseconds

01:40:11
<transcript>: 100 milliseconds I don't know.

01:40:15
<transcript>: It's an inexact science. And then we.

01:40:15
<transcript>: await

01:40:16
<transcript>: Await promise.

01:40:19
<transcript>: All.

01:40:29
<transcript>: Okay, let's do, like a hundred of these runners. Is that terrible idea they're doing.

01:40:29
<transcript>: ten

01:40:29
natedunn: don't smoke kids

01:40:30
<transcript>: Ten.

01:40:30
<transcript>: so

01:40:32
<transcript>: So we'll be like.

01:40:33
teassh: yes

01:40:35
<transcript>: Okay, let's try this.

01:40:36
teassh: terrible

01:40:39
<transcript>: Let's do this.

01:40:44
<transcript>: Don't smoke. No, this is true. I don't condone smoking.

01:40:44
<transcript>: this fil

01:40:47
teassh: just go with for of

01:40:47
<transcript>: This filter is just it's bad.

01:41:00
teassh: you delay between pushing into array

01:41:07
<transcript>: Wait.

01:41:09
<transcript>: Am I dumb.

01:41:15
<transcript>: Why is that a wild, true loop.

01:41:22
<transcript>: No, I'm done, I'm done, I just did something dumb.

01:41:24
<transcript>: Maybe really dumb.

01:41:30
<transcript>: We don't need any loops.

01:41:33
<transcript>: Right.

01:41:35
<transcript>: Or do we.

01:41:37
natedunn: its all relative. we are all dumb about something

01:41:40
<transcript>: Know that was fine.

01:41:43
<transcript>: Because I loop waits for.

01:41:47
<transcript>: All the promises to finish and then just run some more.

01:41:47
<transcript>: we're gonna have

01:41:51
<transcript>: We're gonna have a hundred of those. So that was fine.

01:41:54
<transcript>: This scary stuff.

01:41:59
<transcript>: I don't want to invite this like 2 million times.

01:42:06
<transcript>: Four. I have you delayed between pushing into array.

01:42:11
<transcript>: Do a four of where.

01:42:22
teassh: you don't

01:42:30
<transcript>: We are all dumb about something. That's right. So what did that actually get to it was the same as last time.

01:42:34
<transcript>: 60 beats per second.

01:42:36
teassh: but if you want to run promises in sequesnce, and not in pralel

01:42:36
<transcript>: I think I should have let it keep going.

01:42:41
<transcript>: It's actually okay. Like it is.

01:42:41
<transcript>: what's it doing

01:42:42
teassh: you can use for of

01:42:45
<transcript>: What's it doing. So like this is.

01:42:48
<transcript>: We're creating.

01:42:48
<transcript>: hundred run

01:42:49
natedunn: that's a lot of beets

01:42:50
<transcript>: Hundred runners.

01:42:55
<transcript>: Spaced out. They're starting 200 milliseconds apart. Okay.

01:42:55
<transcript>: and then waiting on

01:42:57
<transcript>: And then waiting on them all. Each runner.

01:42:57
<transcript>: just

01:42:59
<transcript>: Just continuously.

01:43:04
<transcript>: Continuously creates ten requests.

01:43:04
<transcript>: and push

01:43:07
<transcript>: And pushes them, waits for the response and starts over.

01:43:07
<transcript>: so these should

01:43:11
<transcript>: So these should be like should have a hundred.

01:43:11
<transcript>: batches

01:43:15
<transcript>: Batches of ten running all the time.

01:43:17
<transcript>: Right.

01:43:22
<transcript>: Or a 202nd, 200 millisecond delay, so.

01:43:26
<transcript>: Five of those in a second. So we should have 500.

01:43:30
<transcript>: 500 times ten a second.

01:43:37
<transcript>: 5000. Should this be 5000? Is that half of our goal.

01:43:44
<transcript>: It shouldn't work. There's gonna be quotas. That the cripple under this. I think that's a lot of beats.

01:43:47
<transcript>: There's a lot of beats, Nate.

01:43:51
<transcript>: Let's see.

01:43:55
<transcript>: Are we actually gonna it doesn't look like it's growing past the.

01:44:04
<transcript>: 50 beats a second. I wonder if it's because of throttling something's getting something's breaking and we're not able to clips that.

01:44:12
<transcript>: Let's look at our Dynamo table. I don't think we're gonna see any issues here.

01:44:19
<transcript>: No, no. Throttles on Dynamos in. We have pretty large clearancer. Oh, but app sync, on the other hand.

01:44:22
<transcript>: App Sync We could be seeing errors.

01:44:30
<transcript>: Although I'm not seeing no, I'm not seeing app sync errors, total requests.

01:44:34
<transcript>: See you can see that climb.

01:44:43
<transcript>: Let's look at.

01:44:43
<transcript>: what it be ap

01:44:47
<transcript>: What it be? Api gateway. Like what would be what would be preventing us.

01:44:51
<transcript>: From Clip from Eclipsing 50 beats a second.

01:44:57
<transcript>: Is it just the code is the way the code's written. Am I not reading this right.

01:45:00
<transcript>: Oh, cuz runner, never.

01:45:03
<transcript>: We're not waiting on it. Right here.

01:45:09
<transcript>: Let's look at the database.

01:45:13
<transcript>: So we went from 300 to what.

01:45:16
dota2dev: do you work at aws ?

01:45:16
<transcript>: 76,000. That was fast.

01:45:20
<transcript>: That was fast. I feel like it should be doing more than this.

01:45:23
<transcript>: More Beats per second.

01:45:23
<transcript>: do i work at

01:45:27
<transcript>: Do I work at AWS, no. Just like working with AWS.

01:45:32
<transcript>: If you want. Let's see.

01:45:32
<transcript>: if you want

01:45:36
<transcript>: If you want to run promises in sequence and not in parallel.

01:45:36
<transcript>: you

01:45:38
<transcript>: You can use four of.

01:45:43
<transcript>: So I want to I want to have both. I want to have a bunch hitting in parallel.

01:45:43
<transcript>: at the same time

01:45:48
<transcript>: At the same time. And I want that happening all the time. Does that make sense.

01:45:51
<transcript>: Okay. This is not.

01:45:55
<transcript>: We're not getting very far.

01:45:58
xdpxdxpxd: Do you know how to create like virtual users, like to measure website overload?

01:46:00
<transcript>: Why let's look at some errors. Maybe the Lambda function.

01:46:02
<transcript>: Ah, air count.

01:46:02
<transcript>: oh

01:46:04
<transcript>: Oh air account.

01:46:08
<transcript>: That's not a big Eric count. What is it.

01:46:11
xdpxdxpxd: Is this like the same?

01:46:20
<transcript>: Concurrent executions. We're getting up to 50. Oh, so we're only getting 50 concurrent executions.

01:46:33
<transcript>: Do you not.

01:46:33
<transcript>: virtual users

01:46:37
<transcript>: Virtual users like to measure website overload that's what? Yeah, that's what we're doing, basically.

01:46:44
<transcript>: Yeah, we're just making fake data and hitting our API really hard error count and success.

01:46:47
<transcript>: 99% Success rate.

01:46:59
<transcript>: This is our test stack Lambda function. I guess I should look at the actual app. Maybe there's issues with.

01:47:02
xdpxdxpxd: Ah cool i was just thinking about it the other day for a new ecommerce that is on a poop server

01:47:04
<transcript>: Stream listener app sync Authorizer this is the only other Lambda function involved.

01:47:08
<transcript>: Monitoring it's hard people, it's hard.

01:47:08
<transcript>: hard to even know

01:47:10
<transcript>: Hard to even know what's going on in your application.

01:47:14
<transcript>: Invocations 3000.

01:47:17
<transcript>: Errors.

01:47:19
<transcript>: None.

01:47:21
<transcript>: So that's working fine.

01:47:24
<transcript>: App Sync that I look at AppSync.

01:47:26
<transcript>: Yeah.

01:47:26
<transcript>: we don't see any

01:47:29
<transcript>: We don't see any errors on the Appside.

01:47:29
maleero: You have it maxed out at 50/second with how you have it set up. 10 requests every 200ms

01:47:37
<transcript>: Am I just not hitting it hard enough? It seems unlikely.

01:47:39
<transcript>: 76.

01:47:46
<transcript>: Oh, 111. Okay, I'm gonna kill it for now so we can kind of lay look at the data now.

01:47:46
<transcript>: i don't

01:47:52
<transcript>: I don't want to find out that I was doing a lot more than I thought because I just didn't dumb.

01:47:52
<transcript>: cloud

01:47:53
<transcript>: Cloud watch.

01:47:57
<transcript>: So this shows we were sustaining.

01:47:57
<transcript>: fifty

01:48:01
<transcript>: 56 beats a second. That is not very many beats a second.

01:48:05
<transcript>: Hot beat, errors.

01:48:09
<transcript>: Now no Beat errors.

01:48:19
<transcript>: We're not even propagating beats to timelines yet that's gonna make it go.

01:48:19
<transcript>: you

01:48:25
<transcript>: You have it Max out at 50 a second. With how you have it. Set up ten requests every 200 milliseconds.

01:48:25
<transcript>: is that right

01:48:27
<transcript>: Is that right? Hang on.

01:48:29
<transcript>: So.

01:48:29
<transcript>: but we're

01:48:33
<transcript>: But we're making a hundred of these runners, right.

01:48:40
<transcript>: So I save this file. We're making a hundred runners.

01:48:48
<transcript>: It's not pin requests every 200 milliseconds because a runner is just a thing that's running indefinitely.

01:48:54
maleero: But the awaiting the delay stops the loops

01:48:55
<transcript>: Creating batches of Pin requests waiting till they finish doing another batch doing another batch. You know, I'm saying those.

01:48:55
<transcript>: takes a whole

01:48:59
<transcript>: Takes a whole second to finish those. So it's only doing okay. So each one is only doing.

01:48:59
<transcript>: ten

01:49:02
<transcript>: Ten requests a second.

01:49:08
<transcript>: I'm sorry. No. Each one's doing ten requests. Yeah, roughly ten requests a second.

01:49:11
<transcript>: But if we have a hundred runners.

01:49:17
<transcript>: Shouldn't that be no, no. Oh, you're right. The 200 millisecond delay.

01:49:19
<transcript>: Thank you. Lol. You're right.

01:49:19
<transcript>: you're absolutely

01:49:24
<transcript>: You're absolutely correct. Okay. So if we just change this to be like ten milliseconds.

01:49:31
<transcript>: Let's just start slowly, so 100 should jump us up to 100 tweets per second. Right.

01:49:36
<transcript>: This should this should be a hundred tweets per second 100 beats per second if you will.

01:49:41
<transcript>: I just want beats.

01:49:48
<transcript>: So this should double it to a hundred beads. A second.

01:49:56
<transcript>: That's good to know that we didn't have errors already at 50 beats a second, that would have felt depressing, like we're already hitting some kind of throttle.

01:49:56
<transcript>: i would have been surprised

01:49:58
<transcript>: I would have been surprised.

01:49:59
maleero: Err, no, I'm wrong I think. haha It just slowly builds. I didn't see the other loop

01:50:07
<transcript>: You're wrong. It just slowly builds. I didn't see the other loop. Oh.

01:50:07
<transcript>: well now i

01:50:13
<transcript>: Well, now I think I think you're right because if we're waiting tune a milliseconds before we create each runner.

01:50:18
<transcript>: No. There's a hundred of them.

01:50:27
<transcript>: Wait. What? I think I just wrote a really poorly construction load tester. Should we just use something like an actual tool Vegeta or something.

01:50:31
<transcript>: Now I'm getting no beats.

01:50:44
<transcript>: I'm not sure what to think.

01:51:04
<transcript>: That's not right anymore.

01:51:16
<transcript>: So what's it doing now? It's back up to it's still just capped at 50 a second.

01:51:25
<transcript>: And this is beat per second.

01:51:29
nolset: just dropped in, whatcha making? :)

01:51:35
<transcript>: So there's another layer to this, because what we're doing is creating Lambda and invocations here. But each invocation.

01:51:42
<transcript>: Does that do more than one beat? No. Each indication is just one beat. Okay.

01:51:49
<transcript>: Well, we should pack more in the each invocation for one thing.

01:51:56
<transcript>: We should say, because there might be like a control plane operation issue here. Maybe you can only call Lambda functions 50 a second.

01:52:00
<transcript>: You know what I'm saying.

01:52:05
<transcript>: Just dropped in what you're making? We're making a Twitter.

01:52:05
<transcript>: api

01:52:07
<transcript>: Api clone sort of.

01:52:08
adamdotdev: !today

01:52:08
fossabot: Today Adam is working on bitter, a serverless twitter. Built to test the limits of concurrency within the serverless world.

01:52:10
<transcript>: Today we're just trying to test.

01:52:10
<transcript>: actual twitter

01:52:12
<transcript>: Actual Twitter load.

01:52:20
<transcript>: And it's so hot in my office I'm gonna have to be done pretty soon just because how hot it is it's so hot. Studio Light's been running all day. I don't normally stream all day like this.

01:52:25
<transcript>: I'm gonna need to call it your brief in.

01:52:30
<transcript>: But welcome to Chat null set. I appreciate you.

01:52:30
<transcript>: coming

01:52:32
<transcript>: Coming in the chat.

01:52:37
<transcript>: Can you see the sweat dripping off my face? Like I'm sweating? Sweating so bad.

01:52:44
<transcript>: Okay. So each invocation should really do this multiple times.

01:52:47
<transcript>: Each invitation should simulate like.

01:52:47
<transcript>: a number of

01:52:49
nolset: gleaming of a day's hard work!

01:52:49
<transcript>: A number of people doing these steps.

01:52:53
<transcript>: So let's say, let's say, let's see.

01:52:56
<transcript>: Fort.

01:52:58
<transcript>: Comp session.

01:53:05
<transcript>: So all this code is really going to.

01:53:14
<transcript>: All gonna do this stuff.

01:53:19
<transcript>: Okay.

01:53:19
<transcript>: so

01:53:21
<transcript>: So.

01:53:30
<transcript>: That's where we beat.

01:53:35
<transcript>: Yeah, each Lambda function, each indication should be more.

01:53:39
<transcript>: Should be doing more right.

01:53:46
<transcript>: Okay. So here instead of.

01:53:46
<transcript>: doing that we're gonna

01:53:48
<transcript>: Doing that. We're gonna say.

01:53:48
<transcript>: sess

01:53:50
<transcript>: Session.

01:53:56
<transcript>: Session, session, session. I guess this thing should return.

01:53:57
<transcript>: Promises.

01:54:00
<transcript>: Should return.

01:54:02
<transcript>: Now just return.

01:54:05
<transcript>: But we want to do simultaneous. Right.

01:54:10
<transcript>: So it's this whole pattern again, promises.

01:54:15
<transcript>: For.

01:54:20
<transcript>: What.

01:54:29
<transcript>: Say a hundred niche.

01:54:29
<transcript>: indic

01:54:31
<transcript>: Indication.

01:54:33
<transcript>: Element.

01:54:36
<transcript>: Index. We're just gonna say.

01:54:40
<transcript>: Promises that push session.

01:54:44
<transcript>: We can make these like do random things, whether or not all uniform.

01:54:48
<transcript>: But for now they just there's just sessions.

01:54:52
<transcript>: And then we await.

01:54:52
<transcript>: await

01:54:54
<transcript>: Await promise.

01:54:54
<transcript>: that all

01:54:55
<transcript>: That all.

01:54:55
<transcript>: promises

01:54:56
<transcript>: Promises.

01:55:02
<transcript>: So now our Lambda function. What.

01:55:08
<transcript>: What is that.

01:55:14
<transcript>: There's something so wrong with my new of them right now.

01:55:17
<transcript>: What did it just do to my buffer.

01:55:22
<transcript>: Like right here. Here we are.

01:55:25
<transcript>: We got some real issues today.

01:55:27
<transcript>: With our new them.

01:55:28
oscarmlage: Wow, that rounded window for the autocompletion is really awesome!!

01:55:32
<transcript>: Okay.

01:55:32
<transcript>: promise

01:55:37
<transcript>: Promise all I'm actually gonna quit me of M.

01:55:42
<transcript>: mlr

01:55:43
<transcript>: Mlr.

01:55:45
<transcript>: Okay. So right here.

01:55:48
<transcript>: I'm gonna say promise.

01:55:51
<transcript>: Okay.

01:55:51
<transcript>: didn't scrap my

01:55:53
<transcript>: Didn't scrap my butt for now. Okay.

01:55:53
<transcript>: let's deploy that

01:55:55
<transcript>: Let's deploy that.

01:55:58
standardrobot: if your time in neovim isn't 1% coding, 99% ricing, configuring, and fixing issues with plugins, idk what you're doing /s

01:56:03
thdxr: wow adam writing lambda functions

01:56:04
<transcript>: Gleaming.

01:56:04
<transcript>: of days

01:56:10
<transcript>: Of days. Hard work. That's right. Welcome to Chat, OscarMan. Wow. That rounded window for the auto completion is really awesome.

01:56:20
<transcript>: Welcome to Chat Sand Robot. If your time in Neil Them isn't 1% coding 99% rights and confusing and fixing issues with plugins. I don't know what you're doing. That's right.

01:56:20
<transcript>: that's why

01:56:26
<transcript>: That's why Adam running Lambda functions. That's right. Next, we had to write a Lambda function to test my VTL templates.

01:56:33
<transcript>: Who? I'm sweaty.

01:56:42
<transcript>: Sweaty people. Okay, four minutes now be 2 hours. I'm gonna call it for the stream. I've just got thrown off my studio lights. It's way too hot in here.

01:56:45
<transcript>: Can't turns out can't stream all day.

01:56:48
<transcript>: Turns out.

01:56:48
<transcript>: so

01:56:50
<transcript>: So now.

01:56:56
<transcript>: I still think my test harness is dumb. Oh, DAX, if you're actually like around and paying attention.

01:57:00
<transcript>: Tell me what's wrong with this.

01:57:00
<transcript>: i'm dumb

01:57:04
<transcript>: I'm dumb, and I can't figure it out. So we have this invoke.

01:57:09
<transcript>: This is a function that just returns a promise.

01:57:12
<transcript>: That's doing a Lambda vacation, right.

01:57:12
<transcript>: okay

01:57:17
thdxr: yeah

01:57:18
thdxr: following

01:57:19
<transcript>: Okay. So in every time you call invoke, it just gives you a promise for this Lambda invocation which is just going to do this test stuff.

01:57:19
<transcript>: a runner

01:57:23
<transcript>: A runner. There's a loop. An infinite loop.

01:57:23
<transcript>: where it

01:57:27
<transcript>: Where it batches up ten Lambda invocations.

01:57:33
<transcript>: And then awaits all of them. And it starts over. So it's just like sending batches a tin every second. Okay.

01:57:33
<transcript>: and then down

01:57:42
<transcript>: And then down here, I want to say, I want a hundred runners, but space them out, like weight, 100 milliseconds. Before you create a new runner.

01:57:42
<transcript>: that should be

01:57:45
<transcript>: That should be a lot of requests for a second, right.

01:57:51
thdxr: yes

01:57:52
<transcript>: Like that should ramp up to a hundred times tent. Actually a thousand.

01:57:52
<transcript>: request

01:57:54
<transcript>: Requests per.

01:57:58
<transcript>: Second if it takes us a second for the request to come back.

01:57:58
<transcript>: shock a thousand

01:58:02
<transcript>: Shock. A thousand requests per second, not 50. Right.

01:58:06
<transcript>: So why is it capping out at 50.

01:58:10
<transcript>: Why could we not clear the 50 beats per second.

01:58:10
thdxr: wait hang on

01:58:16
<transcript>: I checked the Dynamo table. Wait, hang on. Oh, did I mess something up.

01:58:16
<transcript>: my miss

01:58:17
<transcript>: My missing something here.

01:58:28
<transcript>: Now we're gonna be doing a hundred.

01:58:28
<transcript>: be

01:58:34
<transcript>: Beats per invocation so that's gonna help up it up, like increase the volume.

01:58:37
<transcript>: But there's something wrong with this. Isn't there? Dax.

01:58:37
<transcript>: i knew

01:58:39
<transcript>: I knew it.

01:58:45
thdxr: idk I'm confused lol

01:58:53
<transcript>: I don't know I'm confused yeah, me too.

01:59:00
<transcript>: Me too. Thanks for the follow. Rahul. Rahul. Oh, not Raoul. Rahul.

01:59:10
thdxr: is this script running locally?

01:59:19
<transcript>: Yeah, this is a local Script Act.

01:59:21
rahulmysore23: yup with an 'H' thanks xD

01:59:21
<transcript>: I'm running it now.

01:59:23
<transcript>: Voting it now.

01:59:29
<transcript>: This is gonna be a lot worse because it's a hundred beats per invocation. This is probably a terrible idea.

01:59:32
raimono: yo, im trynna get into programming and i'd like to ask that is java a good start

01:59:36
<transcript>: That was a bad idea.

01:59:38
<transcript>: That was too many.

01:59:39
thdxr: the answer is nodejs is slow

01:59:42
<transcript>: Welcome to Chat Ruho.

01:59:47
<transcript>: And Ramono, I'm trying to unite a program. I like to ask, that is Java. Good start.

01:59:51
<transcript>: The answer is no. Js is slow. Is it really that DAX.

01:59:54
<transcript>: Holy Cow? Is that the issue.

02:00:01
thdxr: how many reqs per second did you get to?

02:00:02
<transcript>: We should have just blitzed.

02:00:09
<transcript>: With a whole lot of data just now, but I don't see it.

02:00:17
<transcript>: 150.

02:00:24
<transcript>: Did we just Spike? Did we just hit it really hard.

02:00:24
<transcript>: oh fifty

02:00:26
<transcript>: Oh, 500 requests.

02:00:26
<transcript>: ooh

02:00:27
<transcript>: Ooh.

02:00:32
nolset: @raimono python is a great starting language imo. Easy to understand and very forgiving

02:00:32
<transcript>: What's? That.

02:00:40
<transcript>: How many requests per second did you get to just 55.

02:00:40
<transcript>: unless

02:00:42
<transcript>: Unless my cloud watch metrics are wrong.

02:00:45
<transcript>: It's possible. I wrote these wrong.

02:00:52
<transcript>: But I don't know. I don't think so.

02:00:54
portierr: Hey @adamdotdev Do You perhaps have any code snippets on Traveling Salesman Problem? I'm mianly looking for heuristic approaches such as genetic algorithms. I've managed to cope with dtermistic ones however heuristic ones seem more tricky :/

02:00:57
<transcript>: I was just getting to 50, 57, 55 a second.

02:01:10
mrkappa27: are you already poor? jk :)

02:01:12
<transcript>: 40 year. Welcome to Chat. Do you perhaps have any code snippets on Traveling salesman problem? I mainly looking for heuristic approaches such as generic genetic algorithms. I've managed to cope with deterministic ones. However, here's one thing more tricky.

02:01:12
<transcript>: i don't know what any of that is

02:01:13
<transcript>: I don't know what any of that is.

02:01:13
<transcript>: i'm gonna be honest

02:01:14
<transcript>: I'm gonna be honest.

02:01:18
<transcript>: What is the traveling Salesman problem.

02:01:22
<transcript>: Is that a thing that I would only know if I've, like worked at companies.

02:01:27
<transcript>: I get the sense maybe.

02:01:33
<transcript>: Are you already poor? Oh, maybe we maybe just blasted this thing way too hard.

02:01:35
schrew: you'd know if you studied for interviews LUL

02:01:38
vox_gpt4: pretty much

02:01:38
<transcript>: But I don't know I'm not seeing a lot of beats.

02:01:42
<transcript>: Acorn.

02:01:49
<transcript>: Anthorn. I'm never raiding at a time to get rated. I mean, I've never streaming. Thank you for the raid.

02:01:50
thdxr: if you have x places to go what order do you go them so minimize distance travelled

02:01:52
thdxr: traveling salesman!

02:01:53
acorn1010: Howdy!

02:01:55
<transcript>: How you doing? Acorn Acorn. I'm not gonna ask you how you're streaming because I hate when people ask or not.

02:01:55
<transcript>: i don't mind it when you

02:02:03
acorn1010: Doing great

02:02:05
<transcript>: I don't mind it when you ask me it's great when you ask but it seems like there's, like this code of conduct and every streamer has decided, like when you get rated, you ask, how was your dream? I'm not gonna do it.

02:02:10
<transcript>: Not gonna do it, but it's good to see you. I'm glad you're doing great.

02:02:10
thdxr: generalizes to a lot of businesses like taxis

02:02:15
<transcript>: Generalizes A lot of businesses like taxis.

02:02:23
<transcript>: If you have X places to go, what order do you go? Then to minimize distance traveled. Oh, I see.

02:02:28
<transcript>: That's the traveling salesman problem, okay. Yeah. I don't know anything about that.

02:02:33
<transcript>: And I've never studied for interviews because I've never done an interview. So.

02:02:37
<transcript>: I guess that's why I don't understand what you guys are about.

02:02:37
<transcript>: okay

02:02:38
<transcript>: Okay.

02:02:38
<transcript>: so this

02:02:43
<transcript>: So this didn't work, but we did pump a lot of stuff into our database, right.

02:02:47
<transcript>: We've got 1500 records in the database. Now.

02:02:53
<transcript>: Let's see? I'm just gonna kind of glance oh, no oh, no, no.

02:02:56
<transcript>: This is a problem.

02:02:56
<transcript>: dax might

02:03:07
<transcript>: Dax might know what I'm talking about. I had AppSync highresolution logs on, like the full logs. I probably just spent all my credits on cloud watch logs. Probably.

02:03:07
thdxr: ooooo nooo

02:03:09
<transcript>: Oh, that's not good.

02:03:09
<transcript>: that's

02:03:11
<transcript>: That's not good.

02:03:13
thdxr: cloudwatch logs is the killer

02:03:21
<transcript>: Let's turn that off now and see if I still have any money left.

02:03:23
thdxr: experiment over

02:03:26
<transcript>: Let's see. Enable logs. No logs.

02:03:28
<transcript>: Uhoh experiment over.

02:03:28
<transcript>: cloud watch

02:03:32
alderingames: RIP budget. :(

02:03:33
<transcript>: Cloud watch logs. Yeah, I might have just killed this entire experiment.

02:03:39
<transcript>: Let's see. Could I don't think I can go into cough. I'm gonna go to the building. Dashboard.

02:03:43
<transcript>: Yeah I gotta log in is another thing.

02:03:48
<transcript>: Well, that's not good.

02:03:51
<transcript>: That was probably very expensive.

02:03:51
<transcript>: how many how many

02:03:55
<transcript>: How many? How many did I say I did it's? 500 requests.

02:03:58
<transcript>: With the full detailed logs on, oh, my word.

02:04:03
thdxr: 50K can't be that much can it

02:04:03
<transcript>: That's not good people.

02:04:03
<transcript>: not good

02:04:04
<transcript>: Not good.

02:04:08
<transcript>: Can't be that much I don't know.

02:04:08
<transcript>: maybe

02:04:09
<transcript>: Maybe.

02:04:13
<transcript>: We'll see. We'll find out. I guess I'll go ahead and log in.

02:04:20
<transcript>: And let's just I'm gonna go fuzzy I said I was gonna be done with the stream here soon, but I just got rated and I feel bad just like bounce.

02:04:22
nolset: about three cups of coffee

02:04:25
<transcript>: Let's let's do this. I'm gonna just check my login. Here.

02:04:28
<transcript>: To sign out.

02:04:32
<transcript>: Log back in.

02:04:32
<transcript>: we're gonna

02:04:35
<transcript>: We're gonna learn some hard lessons here real fast, I think.

02:04:38
<transcript>: Like don't turn on logging.

02:04:38
<transcript>: and that

02:04:41
<transcript>: And that make an entertaining video, I guess.

02:04:46
<transcript>: Just don't enable the advance.

02:04:46
<transcript>: or full log

02:04:47
maleero: How are the response times now with the test running?

02:04:52
<transcript>: Or full logs on your apps and KPIs or you will burn all of your money immediately.

02:04:54
<transcript>: At this scale.

02:05:00
<transcript>: Let's see. I'm gonna go to the billing. Billing.

02:05:00
<transcript>: cost explorer

02:05:01
<transcript>: Cost Explorer.

02:05:05
<transcript>: I don't know if anything's gonna be in here yet.

02:05:05
<transcript>: oh

02:05:07
<transcript>: Oh, well, not too bad.

02:05:07
<transcript>: i mean since

02:05:10
<transcript>: I mean since I've spent a $100 let's see.

02:05:13
<transcript>: Oh, that was even on the 7th.

02:05:15
<transcript>: What.

02:05:17
<transcript>: What service.

02:05:24
thdxr: is the bill instant?

02:05:24
<transcript>: What service did I spend a $100 on on the 7th.

02:05:30
thdxr: thought it takes some time

02:05:34
<transcript>: Oh, support. Oh, we're good. Well, that's probably a big delay, so I don't know, we might not be good, but so far, so far.

02:05:34
<transcript>: we're not spending anything

02:05:35
<transcript>: We're not spending anything.

02:05:39
<transcript>: So far.

02:05:39
<transcript>: unless

02:05:39
nolset: three VERY expensive cups of coffee

02:05:42
<transcript>: Unless it just hasn't been reported yet. No, no.

02:05:42
<transcript>: three very

02:05:44
<transcript>: Three very expensive cups of coffee.

02:05:49
<transcript>: Not the Bills on instant. It's probably still terrible. We'll find out.

02:05:51
<transcript>: Okay.

02:05:51
<transcript>: let's

02:05:53
<transcript>: Let's see.

02:06:00
<transcript>: All Right, Queen.

02:06:00
<transcript>: maybe

02:06:02
<transcript>: Maybe not. Maybe not. On the Queen.

02:06:11
<transcript>: How are the response times now, with the test running, I mean, the response time has been fine.

02:06:13
<transcript>: That's not been the problem.

02:06:24
<transcript>: The problem is we can't seem to make it go higher, we can't, like seem to push it hard enough. I want to push it harder.

02:06:26
thdxr: write it in Go

02:06:27
<transcript>: Let's see.

02:06:30
<transcript>: That's latency.

02:06:32
<transcript>: I just want beats.

02:06:32
<transcript>: just the beat

02:06:34
<transcript>: Just the beat.

02:06:38
<transcript>: So the most we've gotten it to do is 50, 60 beats a second.

02:06:42
<transcript>: I feel like there's something.

02:06:42
<transcript>: fundament

02:06:43
<transcript>: Fundamentally wrong.

02:06:43
<transcript>: with my brain right now

02:06:48
<transcript>: With my brain right now. Right in go. Are you saying right the test runner.

02:06:51
<transcript>: Dax, and go.

02:06:51
<transcript>: is that what you're saying

02:06:53
<transcript>: Is that what you're saying? Probably.

02:06:53
<transcript>: because like

02:06:53
thdxr: yeah

02:06:59
<transcript>: Because like the actual API is all VTL. It's it's fast, but right the test runner. So.

02:06:59
<transcript>: i just

02:07:00
<transcript>: I just don't understand.

02:07:05
<transcript>: Like if I let's just.

02:07:05
<transcript>: humor me here

02:07:09
<transcript>: Humor me here. Because I could I just. I'd rather not.

02:07:11
thdxr: if I understand the code right it looks like you're spawning 10 requests every 100ms right

02:07:18
<transcript>: If I just drop that down and I make it a little safer to run this. I want to see now each Lambda function should be doing a hundred.

02:07:25
<transcript>: Beats within the Lambda function. It should create a hundred new users do 100 beats follow some people.

02:07:29
<transcript>: So I guess.

02:07:29
<transcript>: i want to just

02:07:29
maleero: I was just curious if the response time went up which would limit how many requests are going out

02:07:32
<transcript>: I want to just make sure it's not an issue with.

02:07:32
<transcript>: is there a

02:07:36
<transcript>: Is there a Lambda implication or let's see this Lambda.

02:07:36
<transcript>: lamb

02:07:43
<transcript>: Lambda quotas. Is there like a Lambda control plane? Quota is invoke like control plane. Maybe not.

02:07:48
<transcript>: Probably not.

02:07:56
<transcript>: You know what I'm getting at? Like, can I not do just the SDK invoke.

02:08:00
<transcript>: It looks like you're spawning Tin requests every height.

02:08:03
<transcript>: Is that all.

02:08:03
thdxr: you should log how long it takes for that await Promise.all(promises)

02:08:08
<transcript>: Well, now I just don't. I dropped it down to ten from 100 every 100 milliseconds.

02:08:08
<transcript>: i

02:08:10
<transcript>: I'm creating a rock.

02:08:20
<transcript>: I'm creating up to ten runners that indefinitely put out ten requests every second. Yeah, that's not very many. That's only 100 requests a second, some more than 50, though.

02:08:25
<transcript>: Let's see what's this does. And then I really am gonna go.

02:08:25
<transcript>: soon

02:08:26
<transcript>: Soon.

02:08:30
<transcript>: We're gonna give this some minute.

02:08:37
<transcript>: I was just curious. In the response time went up, which would limit how many requests are going out.

02:08:37
<transcript>: oh

02:08:39
<transcript>: Oh, I see.

02:08:39
<transcript>: i see

02:08:43
<transcript>: I see your point. Let's look at the latency I've got our right here.

02:08:46
<transcript>: Beat beat latency.

02:08:49
<transcript>: What.

02:08:54
<transcript>: Beat error beat Latency It's a P. 99.

02:08:54
<transcript>: let's

02:08:57
<transcript>: Let's just do an average.

02:09:04
<transcript>: So average latency.

02:09:05
<transcript>: That's not right.

02:09:11
<transcript>: Or is that millisecond? What? 460? What.

02:09:19
<transcript>: 's Going To Have To Run this Thing Long Enough, just be able to work with the chart beat latency 6 seconds.

02:09:21
<transcript>: What.

02:09:27
<transcript>: Oh, are there just so many collisions that it's having to retry repeatedly.

02:09:28
thdxr: there u go

02:09:33
<transcript>: I'm definitely gonna be surprised by something at some point here.

02:09:36
<transcript>: What are those high points.

02:09:39
<transcript>: Because they're muddling my data up.

02:09:45
thdxr: serverless is dead

02:09:50
<transcript>: Serverless is different.

02:09:55
<transcript>: Log how long it takes for that await promise? I'll promises.

02:09:58
<transcript>: The One online.

02:10:02
<transcript>: Six with Browser blind numbers. There, inside the runner.

02:10:04
thdxr: 6

02:10:09
<transcript>: Yeah, that's a good point. I can just log it in my console so I can see how long they're taking without having to mess with this. Yeah, let's do this.

02:10:11
<transcript>: I do want to see.

02:10:11
<transcript>: if this is cra

02:10:13
nolset: does the await in runner not cause issues?

02:10:17
<transcript>: If this is cranked up yet so here's beats that's per minute. Let's do per second.

02:10:21
<transcript>: Oh, what.

02:10:21
thdxr: `console.time` and `console.timeEnd` if you didn't know about that

02:10:25
<transcript>: Oh no, latencies again. I just want beets.

02:10:31
<transcript>: Like I want to just do beats? Can't I just say only beat? There we go.

02:10:31
<transcript>: oh

02:10:33
<transcript>: Oh, here we go.

02:10:39
<transcript>: 100, would we picked it like 100 and 3165 a second. Okay.

02:10:41
<transcript>: Now we're talking.

02:10:44
<transcript>: Hundred and 80 a second.

02:10:54
<transcript>: We did something different. Comfortable time and console time end if you did know about that, thank you. Does the await and run or not cause issues.

02:10:59
<transcript>: Maybe, Maybe. Thanks for the follow Aldrin games.

02:11:03
<transcript>: Now we should have some big numbers. Right.

02:11:03
<transcript>: this

02:11:05
<transcript>: This live count should be huge.

02:11:09
<transcript>: Should be giant.

02:11:19
<transcript>: Oh, it's doing numbers. Oh, oh, 300,000. Okay.

02:11:25
<transcript>: Okay, I'm gonna stop it now. We're gonna do some timing logs.

02:11:28
<transcript>: So here.

02:11:35
<transcript>: We're going to do it before and after. So just console that time. You're saying.

02:11:35
<transcript>: i put

02:11:37
<transcript>: I put a label in here.

02:11:45
<transcript>: Console.

02:11:45
<transcript>: time

02:11:47
<transcript>: Time end.

02:11:49
<transcript>: All right.

02:11:54
<transcript>: Is the await and runner not cause issues.

02:12:00
<transcript>: I mean that means each runner is only hitting it like ten a second or something.

02:12:02
<transcript>: Right.

02:12:12
<transcript>: So nothing is. Oh, throttled events. Oh, we've actually had some throttled. Uhoh, I have 1500.

02:12:12
<transcript>: wait what

02:12:13
<transcript>: Wait. What.

02:12:23
<transcript>: How do we have throttles.

02:12:25
<transcript>: Provisioned.

02:12:31
<transcript>: Right throttle events. I don't know how we would have right throttles.

02:12:33
nolset: from the 100 one you ran earlier maybe?

02:12:36
<transcript>: Oh.

02:12:40
<transcript>: Let's just update this page and see how bad it may have gotten.

02:12:40
<transcript>: nope

02:12:44
<transcript>: Nope. Still nothing. It's probably a pretty bad delay, I guess.

02:12:48
<transcript>: Okay.

02:12:57
<transcript>: So this ended up it was doing pretty consistently, like 150.

02:12:57
thdxr: the bill is so high aws is still computing it

02:12:59
<transcript>: Beats per second.

02:13:03
<transcript>: So long ways from 100, aren't we.

02:13:09
<transcript>: And just forget about one hundred and fifty zero a second. That's just. That's not happening.

02:13:12
<transcript>: The bill is so high, it'd be so computing it. Yeah.

02:13:18
<transcript>: From the 101 you ran earlier. Maybe. Maybe.

02:13:21
<transcript>: Let's let's try.

02:13:23
<transcript>: Let's try with the timeings now.

02:13:29
<transcript>: Oh runner already exists for console time, so I'm doing.

02:13:29
<transcript>: what should i be doing here

02:13:32
<transcript>: What should I be doing here? Because these are all in parallel.

02:13:35
maleero: They're going to charge you compute time for calculating your bill Kappa

02:13:39
<transcript>: It's not showing any timings.

02:13:39
<transcript>: did i do something wrong

02:13:40
<transcript>: Did I do something wrong.

02:13:46
<transcript>: Someone tell me Did I do something terribly wrong.

02:13:47
thdxr: show the code again

02:13:54
thdxr: yeah need to give it a unique name

02:13:54
<transcript>: There we go. 26 seconds. I'm sorry. What.

02:13:59
<transcript>: Oh because.

02:14:07
<transcript>: I gotta think about this.

02:14:10
<transcript>: It's because.

02:14:14
<transcript>: Some of them are taking a lot less time.

02:14:14
<transcript>: you need to give a unique

02:14:15
thdxr: the timer code is wrong

02:14:16
<transcript>: You need to give a unique name? Yeah, Yeah.

02:14:22
<transcript>: Gonna charge me compute time for calculating the bill yeah so.

02:14:23
<transcript>: The.

02:14:23
<transcript>: lambda function

02:14:31
<transcript>: Lambda function takes longer and longer depending on how many I'm so like one invocation now is doing 100 beats.

02:14:31
<transcript>: okay

02:14:33
<transcript>: Okay.

02:14:33
<transcript>: so that is

02:14:35
<transcript>: So that is gonna take.

02:14:35
<transcript>: a lot

02:14:54
<transcript>: A lot longer. The timer code is wrong. Oh, yeah, the unique name. Otherwise, I just screwed up that. Yeah, yeah. So the timer just ignore it. But I do think the first one took 26 seconds before anything returned. Right or no, it's just wrong. I should just throw it all out. But I guess the real observation here is each Lambda function.

02:14:54
<transcript>: and you can't

02:14:56
<transcript>: And you can't see my screen. I'm just checking something.

02:15:00
<transcript>: Each Lambda function.

02:15:03
<transcript>: Creates a hundred.

02:15:03
<transcript>: sessions

02:15:04
<transcript>: Sessions.

02:15:04
<transcript>: each

02:15:08
thdxr: oh I thought the lambda was just doing 1 request

02:15:11
<transcript>: Each session, creates a new user, follows ten users, and wraps a beat.

02:15:15
<transcript>: So if there's a hundred be threatened.

02:15:15
<transcript>: session is that

02:15:18
<transcript>: Session? Is that all in parallel? Yeah, they're all in parallel.

02:15:23
<transcript>: No, they're not. They're not. I'm so dumb. I'm so dumb.

02:15:26
<transcript>: They're not because it's a series of things that happened.

02:15:29
<transcript>: So they're not all in parallel.

02:15:30
<transcript>: The.

02:15:30
<transcript>: session

02:15:32
<transcript>: Session itself.

02:15:38
thdxr: something something step functions

02:15:39
<transcript>: I gotta go back to drawing board. I'm just messed up some of my assumptions here.

02:15:39
<transcript>: okay

02:15:41
<transcript>: Okay.

02:15:41
<transcript>: the good news is i probably

02:15:46
<transcript>: The good news is I probably didn't rack up a giant bill. I mean, it wasn't small, but hopefully my credits are fine.

02:15:46
<transcript>: no

02:15:47
nolset: rubber duck it with us :) no dumbs here

02:15:51
<transcript>: No, yeah. Each link now is doing something. Step functions.

02:15:55
<transcript>: Rubber Ducket with you. So. Yeah. Let me just explain then. I do have to go.

02:15:59
<transcript>: The.

02:16:01
<transcript>: The Lambda function.

02:16:04
<transcript>: It's a waiting.

02:16:04
<transcript>: let me

02:16:08
<transcript>: Let me I'll just I'm gonna have to show you actually let me just show you this.

02:16:08
<transcript>: so

02:16:10
<transcript>: So each session.

02:16:13
dyalicode: hello

02:16:17
<transcript>: Here's our handler. We just. We create a hundred of these sessions. And we await.

02:16:17
<transcript>: all of them

02:16:21
<transcript>: All of them finishing right. So these sessions.

02:16:21
<transcript>: i

02:16:25
<transcript>: I thought, like, oh, we're doing 100 in parallel, but we're not not at all.

02:16:27
<transcript>: Each session.

02:16:27
<transcript>: goes

02:16:34
<transcript>: Goes through in like a weight, like, see, here. We're waiting. This put command. So we're creating their profile. We wait until that operation's done.

02:16:34
<transcript>: and then

02:16:36
<transcript>: And then.

02:16:42
<transcript>: Now we have this. Should all be running a parallel. Shouldn't it dialy? What's going on.

02:16:53
<transcript>: Wait. This would be in parallel because we create the promise this async function, but it's not waiting on that promise. So we are Loading up 100 promises and running them all at once. Right.

02:16:53
<transcript>: each of these

02:16:55
<transcript>: Each of these promises.

02:16:58
<transcript>: Go through this series of steps. Create a profile.

02:16:58
<transcript>: sign a

02:17:00
<transcript>: Sign a jot token.

02:17:01
dyalicode: how are u man ?

02:17:02
<transcript>: Retrieve your profile.

02:17:08
<transcript>: Here we do a we get some random profiles with a scan.

02:17:08
<transcript>: and then

02:17:14
<transcript>: And then we follow those profiles. And then we ride a beat. So if that's one session.

02:17:14
<transcript>: in that loop that

02:17:16
<transcript>: In that loop that we had.

02:17:16
<transcript>: this loop

02:17:24
<transcript>: This loop should be doing those all in parallel. Right creates all hundred sessions. Runs them at once. Right.

02:17:24
<transcript>: i'm not

02:17:26
<transcript>: I'm not off. I'm good. The ally. How are you.

02:17:30
<transcript>: Right.

02:17:34
<transcript>: Everybody tracking. I'm gonna push all this code.

02:17:38
nolset: that tracks with me

02:17:44
<transcript>: Progress.

02:17:49
dyalicode: fine so aws / lambda ?

02:17:54
<transcript>: That should be each invocation hundred sessions going on simultaneously.

02:18:03
<transcript>: But each session does take a while to complete, because it has to go through all those steps, right.

02:18:06
<transcript>: That tracks with you.

02:18:12
<transcript>: So that should be like a hundred beats happening simultaneously, roughly.

02:18:12
<transcript>: from

02:18:14
<transcript>: From each session.

02:18:14
<transcript>: or from each

02:18:16
<transcript>: Or from each invocation.

02:18:16
<transcript>: but

02:18:24
nolset: the first session may take a while because it has to wait for other profiles to be created?

02:18:31
<transcript>: But not per second. It's like that whole process takes a while before we actually write the beat. So that's the thing that's important to remember, I think, is when I'm looking at beats per second. Beach is the thing that happens a very end of the session and a lot of other heavy stuff has to happen.

02:18:31
<transcript>: before a be

02:18:33
<transcript>: Before a beat is sent.

02:18:41
<transcript>: First session may take a while because it has to wait for other profiles to be created. No null set. We've got tons of data in there now, so.

02:18:41
<transcript>: it's just it

02:18:45
<transcript>: It's just it should be fetching should be fetching them just fine.

02:18:59
<transcript>: But I do think like I'm tracking one little tail end of the thing. That's a much larger thing happening in that session. We follow ten people. That's ten DynamoDB transactions.

02:18:59
<transcript>: that

02:19:13
dyalicode: amazon service is greate but a looooooot of configs

02:19:13
<transcript>: That are eating up a lot of right capacity units as well. We're not hitting any throttle. Well, I don't know. I'm gonna have to dig more into the data. I have to see the cost stuff show up and make sure I'm not already just like wrecking my credits.

02:19:14
nate_codes: HEY ITS ADAM

02:19:16
<transcript>: Caps. Gry. Thank you for the follow.

02:19:18
nate_codes: HAPPY THURSDAY t3ggWave

02:19:20
<transcript>: Hey, it's Nate. Amazon services.

02:19:20
<transcript>: great

02:19:23
<transcript>: Great, but a lot of configs. Yeah.

02:19:29
<transcript>: Happy Thursday tonight. Happy Thursday. Actually. Getting out of here. Nate.

02:19:32
<transcript>: It's been fun there's.

02:19:36
delvoid: Happy Monday nate_codes

02:19:38
<transcript>: Still a lot to do. I think this will be my video. Next week. I think this week I'm just gonna record something totally unrelated tomorrow.

02:19:44
nate_codes: Hey Adam quick question: what do you use for AR overlays/props? Is it doable w/ just AE?

02:19:46
oscarmlage: Do you have the vim config files published somewhere?

02:19:47
<transcript>: I'm learning some things. Like, it's hard. It's hard just to create. Like.

02:19:50
<transcript>: Thousand 10,000.

02:19:59
<transcript>: Requests per second. Reliably. Hey, Adam, quick question. What do you use for AR overlays props? Is it doable with just after effect.

02:19:59
<transcript>: ar

02:20:02
<transcript>: Ar overlays.

02:20:07
nate_codes: glasses, cigarette

02:20:09
<transcript>: You mean like, what am I doing? Like when people put these.

02:20:09
<transcript>: like the

02:20:11
thdxr: augmented reality

02:20:13
thdxr: snapcam

02:20:18
nate_codes: perfect tysm

02:20:19
<transcript>: Like the glasses in the cigarette. Yeah. Yeah. Oh, this is a it's actually the I'm not doing it with after effects. It's doing it with. I can't seem to do my own reward.

02:20:19
<transcript>: actually

02:20:21
<transcript>: Actually redeem them.

02:20:21
<transcript>: yeah

02:20:23
<transcript>: Yeah. Snap in. Thanks.

02:20:27
nolset: maybe a tweet at the start could help?

02:20:27
<transcript>: I think I redeem my own rewards.

02:20:30
<transcript>: Something seems broken.

02:20:33
<transcript>: Oh, what did I just click on? Oops.

02:20:35
<transcript>: Yeah.

02:20:42
dyalicode: need start server

02:20:48
<transcript>: Just keep clicking on things. Maybe a tweet at the start could help. Yeah, we could tweet first. They have to have a profile first. We have to create their user first. We could just like fed an existing user and start that way.

02:20:48
<transcript>: and

02:20:51
<transcript>: And we should for some users probably.

02:20:56
<transcript>: Yeah.

02:20:56
<transcript>: got to

02:21:02
<transcript>: Got to put more thought into it, but I think this will be like, unfortunately, gonna be working on this slime next week, too.

02:21:02
<transcript>: i thought i'd just

02:21:08
<transcript>: I thought I'd just do it all this week, but it's taking more time. Of course everything does. All right? It's been good.

02:21:08
<transcript>: had a

02:21:09
<transcript>: Had a good time.

02:21:09
<transcript>: maybe

02:21:11
nolset: excited to check in next week for it :)

02:21:12
<transcript>: Maybe we could do it again sometime.

02:21:15
nate_codes: take it easy!

02:21:46
delvoid: See ya later buddy