

12:25:05
<transcript>: Subscribe.

00:03:10
fragaverage: ooooh we got a dance mix version of intro!

00:03:22
fragaverage: Hi chat  catJAM  catJAM  catJAM  catJAM

00:06:32
stroopwafel26: hey Frag

00:06:40
stroopwafel26: stroop's here!

00:06:43
stroopwafel26: or something like that

00:06:52
fragaverage: something something hello

00:07:02
fragaverage: catJAM

00:07:08
fragaverage: Jamming over here

00:07:21
stroopwafel26: what flavour?

00:07:28
fragaverage: Stawb

00:07:39
fragaverage: That reminds me, need to finish my assembly square lego

00:07:54
<transcript>: Check one to check, check.

00:08:04
<transcript>: Alright. Check. One to check. Check. Check. Two minutes.

00:08:50
stroopwafel26: strawberry catjam is my fav

00:09:29
fragaverage: blobDance  blobDance  blobDance  blobDance

00:09:38
vim_cerf: the notifications were so late today, happy I made it anyway :D

00:09:38
daglee: 3h50min stream! \o/

00:10:18
vim_cerf: blobDance

00:10:30
fragaverage: pepeD  pepeD

00:10:53
<transcript>: Not even gonna wait for it.

00:10:53
<transcript>: not even waiting

00:10:54
<transcript>: Not even waiting.

00:10:54
<transcript>: it wasn't even done yet

00:10:55
<transcript>: It wasn't even done yet.

00:11:02
<transcript>: Good day to you all. Good morning. Good afternoon, good. Whatever.

00:11:11
<transcript>: Frag is here. Frag. It warms. My, my little streamer. Heart. Frag. To see you. First message in the chat.

00:11:16
<transcript>: Stroop. Is here.

00:11:18
manuelramsaier: hey hey

00:11:19
<transcript>: Street here or something like that.

00:11:20
caasidev: heyup there

00:11:21
<transcript>: Let's see.

00:11:26
<transcript>: Is stab? Is that the gin Z way of saying strawberry.

00:11:26
<transcript>: stop

00:11:27
<transcript>: Stop.

00:11:35
<transcript>: Assembly Square? Oh, you gotta finish it, frag? If you just let that linger on? We don't my boy and I we don't let.

00:11:35
<transcript>: a lego set

00:11:38
<transcript>: A Lego set. Just sit. Like we start it.

00:11:38
<transcript>: and we finish it

00:11:48
<transcript>: And we finish it. I mean, the big, big sets, like assembly square, will give it a few days, but like every moment we have where we're able to get time on it. We're working on it.

00:11:48
fragaverage: nah, my fingers are too slow. And yeah its lingered half finished for weeks LUL

00:11:51
<transcript>: Notifications are so late. Oh, no.

00:11:51
<transcript>: welcome bin

00:11:56
<transcript>: Welcome Bin Surf. I'm glad you made it anyway. Dagley 3 hours and 50 minutes stream is that. Does it say that.

00:11:56
<transcript>: in my intro

00:12:01
<transcript>: In my intro. I don't remember. It will be. I mean, it will be a four hour stream today. So.

00:12:06
<transcript>: Them surf with the dancing frag is dancing.

00:12:06
<transcript>: so

00:12:08
<transcript>: So exciting.

00:12:08
<transcript>: manual

00:12:10
daglee: Yes, your intro says that.

00:12:12
<transcript>: Manual. Hey, hey, Cassie. Dev is here.

00:12:17
<transcript>: Fingers are too slow. It's lingered half finish for a week's. Oof.

00:12:20
stroopwafel26: nice to have the inventor of the internet in chat again

00:12:23
<transcript>: Thank you so much for the follow upono.

00:12:27
<transcript>: Nice to have the inner of the internet and chat again.

00:12:31
<transcript>: Wait. Who invented the Internet? Al Gore.

00:12:37
<transcript>: I missed that route.

00:12:39
stroopwafel26: vint cerf did

00:12:41
<transcript>: So.

00:12:43
stroopwafel26: or @vim_cerf

00:12:44
<transcript>: Ovim serf. Did. I didn't know this.

00:12:47
<transcript>: Good work Van Sir.

00:12:47
<transcript>: intern

00:12:49
<transcript>: Internet's, great.

00:12:51
<transcript>: Big fan.

00:12:58
vim_cerf: thank you! I'm sorry about all the trolls Kappa

00:12:59
<transcript>: Today as if I didn't have enough things going on. I have too many things going on. I have so many things going on.

00:13:01
<transcript>: Like way too many.

00:13:02
stroopwafel26: internet turned out pretty well, some bugs here and there

00:13:05
<transcript>: But I decided I wanted to do a YouTube video.

00:13:05
<transcript>: that's just dumb

00:13:09
<transcript>: That's just dumb. I mean, it's dumb in the amount of effort that it'll take.

00:13:09
<transcript>: and it's like

00:13:11
<transcript>: And it's like.

00:13:11
<transcript>: i

00:13:14
uberrick: It's all about web5

00:13:17
<transcript>: I should just back out and make some dumb video that's five minutes long and whatever.

00:13:17
<transcript>: it's all about

00:13:20
<transcript>: It's all about Web Five. Uber. Rick is here.

00:13:25
<transcript>: Sorry about all the trolls.

00:13:28
<transcript>: So what I want to do.

00:13:28
<transcript>: as

00:13:28
vim_cerf: how are you doing @stroopwafel26? still busy at work?

00:13:31
<transcript>: As you may have heard Elon Musk bot twist.

00:13:31
<transcript>: and

00:13:32
<transcript>: And.

00:13:36
<transcript>: There's been mixed reviews. Mostly people upset.

00:13:37
stroopwafel26: super duper busy yeah

00:13:40
daglee: What happend to web4?

00:13:46
<transcript>: So all of that talk has spurred, like, a million. I'm building a new Twitter messages. I just saw a new one this morning. Thank you for the follow the GZ on.

00:13:46
<transcript>: and

00:13:48
uberrick: are you keeping your tick? :D

00:13:52
stroopwafel26: hey @adamdotdev join my mastdon server i set up with a friend!

00:13:52
<transcript>: And everyone knows, like, Hacker News is on his quick to be like, I could build that in a weekend.

00:13:52
<transcript>: so

00:13:55
fragaverage: @UberRick 5?! I've missed something here

00:14:09
jameelfalooda: damn im new here and the video quality is pretty good

00:14:12
<transcript>: So I was just thinking about the serverless has been very like on my mind in terms of adoption rates, in terms of where we're headed. Like, well, DAX and I just recorded episode yesterday about Serverless for our podcast Tomorrow FM. By the way, I realized we record that whole episode on Twitch, never mentioned what the podcast is tomorrow. Sm.

00:14:16
<transcript>: So.

00:14:16
<transcript>: jameel

00:14:17
<transcript>: Jameel.

00:14:17
<transcript>: welcome to chat

00:14:19
<transcript>: Welcome to chat.

00:14:25
<transcript>: The video call is pretty good. Yeah. I've heard that. I do put a lot into the production quality on this screen.

00:14:25
<transcript>: i have to make up

00:14:28
daglee: Well, the linux kernel just rolled out their own twitter yesterday. Dunno if it's serious.

00:14:28
<transcript>: I have to make up for the lack of content, quality.

00:14:32
<transcript>: So serverless like as a concept.

00:14:32
<transcript>: you've got

00:14:44
<transcript>: You've got the DHH Pose Base camp, all them. They're moving away from from the cloud in general. And then more broadly like Question is serverless and pure serverless a thing.

00:14:44
<transcript>: is like

00:14:46
uberrick: @UberRick it's next level, it's so decentralised that no one can access it. it just a box that doesn't connect to anything

00:14:50
manuelramsaier: what lens is that ? the 35 mm 1.8 ?

00:15:04
<transcript>: Is like the future, just this hybrid mixed mash of like, you're using containers and some serverless things. Anyway, you got me thinking, like, what are the limits of serverless like, can't I always build things with serverless that are very small and they like, grow to like very small ish still like they don't like, have a ton of load.

00:15:04
<transcript>: and a lot of the crit

00:15:06
<transcript>: And a lot of the criticisms of service.

00:15:06
<transcript>: are that basically

00:15:13
<transcript>: Are that basically it can't handle, you know, cold starts are bad. It can't handle a lot of concurrent users or whatever.

00:15:15
<transcript>: So I thought.

00:15:15
<transcript>: what if

00:15:19
<transcript>: What if we tried to build a Twitter API.

00:15:19
<transcript>: with serverless

00:15:22
<transcript>: With serverless tech only Serverless services.

00:15:24
<transcript>: That can.

00:15:24
<transcript>: meet

00:15:28
thegzon: Can you explain how would a serverless stack look like? In terms of technologies used.

00:15:34
<transcript>: Meet the current levels of traffic of Twitter.com, so I had to find it's very hard to find statistics on number of tweets per second.

00:15:36
<transcript>: The record.

00:15:36
<transcript>: for tw

00:15:47
<transcript>: For tweets per second was set back in like 2013 and they haven't published anything since then but back then it was like 1500 tweets per second. They peaked during some soccer match I think.

00:15:54
<transcript>: But the best reports I found are that it averages like a sustained 10,000 tweets per second.

00:15:57
<transcript>: Today in 2022.

00:15:58
<transcript>: So.

00:16:05
<transcript>: What I'm wondering is, can we build with just serverless stuff? Can we build an API that's like.

00:16:09
<transcript>: Api Parody with Twitter.com right.

00:16:09
<transcript>: so you

00:16:16
<transcript>: So you can tweet you can get your timeline, you can follow people you can retweet and all that stuff. Can we build that.

00:16:16
<transcript>: and

00:16:18
<transcript>: And sustain ten times tweets per second.

00:16:38
<transcript>: What point do we hit quotas that are immovable like at what point? So for instance, Secrets Manager if you're storing API secrets stuff that you need for interact with a database or whatever in Secrets Manager, there is a hard cap in an account at 50. Get secret value requests a second so you can't request.

00:16:40
<transcript>: Secret values.

00:16:40
<transcript>: at a greater cl

00:16:44
<transcript>: At a greater clip than 50 a second. So it's just an example.

00:16:44
<transcript>: there are quotas

00:16:47
<transcript>: There are quotas all over the sac though if you're using.

00:16:47
<transcript>: eight to ten

00:16:49
<transcript>: Eight to ten services. In this case we will be.

00:16:54
<transcript>: You could be bumping in the quotas all over the place and you have to think about latency. So.

00:16:54
<transcript>: it's not

00:16:57
fragaverage: Why would you need to get so many secrets?!

00:17:01
<transcript>: It's not enough to just build it where it can handle 100 tweets per second, but what is the fetching your timeline.

00:17:14
<transcript>: Like, what is that latency look like? Does it degrade all those questions? I just want to know what can be done with serverless. I've never built anything of that scale. So we have to manufacture this, like, artificial load tester.

00:17:14
<transcript>: and that

00:17:22
fragaverage: oh serverless

00:17:25
<transcript>: And that has its own issues because of the same limits, the same quotas. How do you pump 100 tweets per second into this API? All of these are very interesting questions.

00:17:29
foobfoob: sounds like a cool project to stream

00:17:31
<transcript>: Why would you need to get so many secrets? Oh, no, it's just like even if you just had one or two secrets, if you have.

00:17:31
<transcript>: i don't know

00:17:34
<transcript>: I don't know. A hundred thousand concurrent users.

00:17:34
<transcript>: tweeting

00:17:37
manuelramsaier: api calls with access tokens is my guess

00:17:39
<transcript>: Tweeting at an ad hoc rate and that leads to 100 tweets per second.

00:17:44
<transcript>: All of those requests are being handled by your compute.

00:17:44
<transcript>: on a global

00:17:58
<transcript>: On a global scale like you've got regions handle you've got API's per region handling these requests and they're all accessing Secrets and Secrets manager to verify requests. So it's basically to verify the Jot token to make sure the user is who they are.

00:18:09
<transcript>: That's where you're getting secret values in your landfunctions. Lambda functions being part of this like there are limits on how many Lambda functions can be running concurrently.

00:18:11
<transcript>: Anyway.

00:18:11
<transcript>: yeah

00:18:18
<transcript>: Yeah. There's just it's a lot of fun, interesting problems. I think it was probably too much to try and take on in a week. I guess we'll find out.

00:18:18
<transcript>: thank you for

00:18:20
stroopwafel26: Good luck with paying for secrets manager at that concurrency level

00:18:23
<transcript>: Thank you for the follow get or post so I started yetterday.

00:18:26
<transcript>: Oh in paying so.

00:18:37
<transcript>: My math like napkin mass of all the different services of all that did some pricing estimates and I think to sustain 100 tweets per second.

00:18:37
<transcript>: you're talking

00:18:40
<transcript>: You're talking about like I don't know.

00:18:51
<transcript>: It was like seven or $800,000 a month in AWS costs. So not a thing I'm gonna run for very long at all. We're talking about running it like at those levels for a minute.

00:19:02
<transcript>: And still maybe racking up a pretty significant bill. But I've got like, thousands of dollars in credits on this AWS account. Some of them expire at the end of the year. So it's kind of a perfect.

00:19:06
<transcript>: The stars aligning where it's like if I need to burn $5,000 in credit.

00:19:06
<transcript>: building

00:19:09
<transcript>: Building this dumb YouTube video.

00:19:09
<transcript>: then i'm gonna do it

00:19:11
<transcript>: Then I'm gonna do it.

00:19:18
<transcript>: Sounds like a cool project to stream. Thanks Foo Foo. We're gonna find out. We'll see if it's fun at all.

00:19:18
<transcript>: manual

00:19:23
daglee: $70,000/month? Still cheaper than what Elon paid.

00:19:26
<transcript>: Manual. What is the lens? It is a 35,000,035 millimeter Gmaster. One, four.

00:19:35
<transcript>: The focus. Breathing is a little annoying. When I make YouTube videos. I do manual focus and I just stay in one spot. But on Twitch.

00:19:40
<transcript>: If I want to do something like that, I mean, obviously, we have to offer autofocus.

00:19:41
stroopwafel26: you could also give me 5k in aws secrets and i will move my mastodon k8s cluster into aws

00:19:44
<transcript>: And there is quite a bit of folks breathing with the one four. But you know what.

00:19:47
<transcript>: I live with it.

00:19:48
manuelramsaier: 1.4 ... man someone is upping his game

00:19:52
<transcript>: The Linux kernel just rolled out their own Twitter yesterday. What.

00:19:59
<transcript>: 's on my Web, five.

00:19:59
<transcript>: can you explain

00:20:01
<transcript>: Can you explain how a search.

00:20:01
<transcript>: stack

00:20:09
<transcript>: Stack. Looks like in terms of technology used. You betcha the Gzon welcome to Chat. We will be talking about that in links on this video.

00:20:09
<transcript>: because

00:20:10
<transcript>: Because.

00:20:13
<transcript>: That's what we're building.

00:20:16
<transcript>: Let's see.

00:20:16
<transcript>: seventy

00:20:17
fragaverage: Twitters burn rate was apparently $4m per day, so I'm sure you'll be fine at $70k/month lmao

00:20:24
<transcript>: 70,000. No. $700,000 a month. Dagli. Still cheaper than what I Elon paid. Yeah, they're paying, like a ton of information. That's another thing.

00:20:29
<transcript>: Like small teams building with a lot of leverage.

00:20:29
<transcript>: and

00:20:33
<transcript>: And building with many managed services means lower operational burden.

00:20:33
<transcript>: the whole

00:20:36
<transcript>: The whole thesis around Serverless is that.

00:20:50
<transcript>: In my opinion, like my thesis around Serverless is that you can build with the same technologies when you're one person as you are when you're a thousand people which I don't know, should there ever be software teams or a thousand people I don't know, but when you're 30, 5100 people.

00:20:50
<transcript>: you

00:20:56
<transcript>: You can use the same stack and you can grow as your user base goes. Is your usage and all that stuff.

00:20:58
<transcript>: Like it's elastic.

00:20:58
<transcript>: by

00:21:00
<transcript>: By nature.

00:21:00
<transcript>: but i've never

00:21:05
<transcript>: But I've never tested the upper limits of that. Like, what does it look like? What does serverless actually look like.

00:21:05
<transcript>: at twitter

00:21:10
<transcript>: At Twitter Scale. That's a question. Can we even reach those levels? We'll find out.

00:21:18
<transcript>: You could also give me 5000 A to be a secret credit, I think and I will move my Mastodon cage cluster in AWS.

00:21:23
thdxr: I'm tired of saying the word serverless it's too many syllables

00:21:24
<transcript>: Twitter's burn rate was apparently 4 million per day.

00:21:26
<transcript>: What.

00:21:28
daglee: https://social.kernel.org/main/public , dunno how related it is to the kernel. But it's hosted on the same host.

00:21:33
<transcript>: Yeah, DAX, I'm I agree. Serverless is too much. What's shorter than serverless.

00:21:36
stroopwafel26: 4m a day on trolls and bots? wow

00:21:39
<transcript>: Social kernel.org.

00:21:44
vim_cerf: @daglee it's just a another mastodone instance. but a few devs are using it, so you can follow them in the fediverse.

00:21:47
<transcript>: Okay. Let's let's get into it.

00:21:50
<transcript>: I don't know.

00:21:59
<transcript>: What this is gonna look like, honestly, some that he just said that they thought this would be a good project to stream Foo.

00:21:59
<transcript>: i don't know

00:22:04
<transcript>: I don't know. We'll find out because some of it's gonna be kind of weird. Just gonna I'm gonna warn you.

00:22:08
<transcript>: This is gonna be a little weird.

00:22:11
<transcript>: Like first thing I need to do.

00:22:15
<transcript>: Is I need to go over here.

00:22:20
<transcript>: And let's see.

00:22:22
<transcript>: Got a new.

00:22:27
<transcript>: Oh, yeah, the repo the API is.

00:22:27
<transcript>: the

00:22:29
fragaverage: @daglee and yet, they managed to make it ugly af  PepeHands

00:22:32
<transcript>: The thing is called Bitter, not Twitter, but bitter.

00:22:36
<transcript>: And you don't? Tweet you beat.

00:22:40
daglee: @vim_cerf It's not even mastodon, it's pleroma.

00:22:42
<transcript>: Beats the vegetable, the root vegetable, they're bitter. You get it bitter, beats.

00:22:44
<transcript>: That's right.

00:22:44
<transcript>: i've got a

00:22:47
<transcript>: I've got a fix this I gotta set up some secrets.

00:22:50
jfweitz: xD

00:22:51
<transcript>: Let's see. They're not really secret. They're not sensitive.

00:22:55
<transcript>: So I don't even care that I'm showing you them.

00:23:00
fragaverage: I thought it was bitter because you're bitter about twitter

00:23:01
<transcript>: Environment secrets. We want to repository secret. Aws.

00:23:01
<transcript>: roll

00:23:03
<transcript>: Roll.

00:23:03
<transcript>: to assume

00:23:04
<transcript>: To assume.

00:23:04
<transcript>: this

00:23:06
<transcript>: This thing.

00:23:08
<transcript>: And secret.

00:23:15
<transcript>: Bitter because you're bitter about Twitter. Maybe that's one way to think of it.

00:23:19
stroopwafel26: We set up a mastodon server and it gained over 15k people in 2 days so we had to stop letting people in because of the insane server costs lmao

00:23:23
stroopwafel26: interesting project for sure

00:23:25
<transcript>: I'm done. I had an idea for a YouTube video, and the first thing I did was bought domains. So I own like bitter dot, everything.

00:23:31
<transcript>: I'm just so dumb. I don't know why I do things like that. You east. US east. One.

00:23:34
<transcript>: Yeah.

00:23:37
<transcript>: I think I did this one in Virginia.

00:23:49
<transcript>: You set up a Mastodon server gain over 150 people in two days. We had to stop letting people in because of the insane server costs. Oof.

00:23:49
<transcript>: well maybe this is

00:23:54
<transcript>: Well, maybe this is a solution. Maybe we can do it and do it with serverless. We'll see.

00:23:54
<transcript>: okay

00:23:57
<transcript>: Okay, so I've already got a repository.

00:23:57
<transcript>: where

00:23:58
fragaverage: Also switched to mac for my daily driver now, transition has been good!

00:23:59
<transcript>: Where there's some.

00:23:59
<transcript>: stuff

00:24:01
<transcript>: Stuff.

00:24:03
<transcript>: There's some code.

00:24:03
<transcript>: it's mostly just

00:24:04
thdxr: last I used mastadon years ago it felt like a piece of crap

00:24:06
<transcript>: It's mostly just like a scaffold with.

00:24:06
<transcript>: a cdk

00:24:07
stroopwafel26: Adam "do it with serverless" Elmore

00:24:07
<transcript>: A CDK project.

00:24:15
<transcript>: And I just got kind of my basic stack in place. This is how I generally build things.

00:24:19
<transcript>: It's got some schema merging from AppSync schema.

00:24:19
<transcript>: it's

00:24:23
stroopwafel26: @FragAverage welcome to the light side

00:24:23
<transcript>: It's got some fake templates in there from something else.

00:24:28
<transcript>: And then it's got the app sync authorizer, which we've got to change that's. The first thing I want to do is I want to work out.

00:24:31
<transcript>: Author.

00:24:31
<transcript>: i build

00:24:41
<transcript>: I build typically with next on the front end. But since I'm just building an API here, I don't want to assume anything on the front end, so I want to just have a simple jot.

00:24:41
<transcript>: function

00:24:42
<transcript>: Function.

00:24:42
<transcript>: that'll

00:24:44
<transcript>: That'll create a jot token.

00:24:51
fragaverage: Im gunna clone this repo this evening and poke around. Never touched FRESH aws stuff

00:24:55
<transcript>: And then I consume the Jot token ID crypt or I whatever verify them in my app sync authorized.

00:24:55
<transcript>: i guess

00:25:02
<transcript>: I guess I need to make a diagram. This is gonna be too weird to not have a diagram. Diagram. Right.

00:25:07
vim_cerf: @daglee my bad, it's still a fediverse server you can follow from mastodon.

00:25:09
<transcript>: Last I use MAS on years ago. It felt like a piece of crap. So Macedons been around a while.

00:25:27
<transcript>: That. So I'm gonna clone this repo this evening in poke round. Never touch fresh, fresh. Aws stuff. Well, this stuff is fresh now. I will warn anyone that downloads this repo and tries to, like, install it in our database account.

00:25:34
<transcript>: After today. Maybe after tomorrow. At some point this week, it's going to cost a lot of money to run it. So maybe.

00:25:34
<transcript>: don't

00:25:36
<transcript>: Don't.

00:25:36
<transcript>: or if you

00:25:38
<transcript>: Or if you do just make sure you know the levers.

00:25:47
<transcript>: To like, turn off the thing if it's doing the load tests, because we're gonna build all the stuff in here. I'm just gonna make a separate stack for the load test. I think.

00:25:55
<transcript>: I might want to deploy that into separate A Tobs accounts to get around the concurrency limits I've set. I've done some quota in Crest. Sorry. Quota.

00:26:05
<transcript>: Increase requests. Say that five times fast quota increase requests. Quote Increase quota increase request. Oh, I can't do it.

00:26:05
<transcript>: quota

00:26:08
<transcript>: Quota Increase requests.

00:26:12
<transcript>: Quota increase, request, request.

00:26:18
<transcript>: So I've made some requests. I had a couple of them met some DynamoDB.

00:26:18
<transcript>: table level

00:26:31
<transcript>: Table level right throughput they bumped at request to 150 read and 150 right 150K. That is that's probably still not enough, because if we were doing 100 tweets per second.

00:26:32
stroopwafel26: quota increase requests are my fav part of my job!!!11

00:26:34
stroopwafel26: wait, no

00:26:35
<transcript>: 10,000 Tweets per second. Each tweet.

00:26:37
<transcript>: Right to the table.

00:26:41
<transcript>: So one right capacity unit.

00:26:41
<transcript>: but then

00:26:46
<transcript>: But then the Dynamo stream is then going to pick up that right.

00:26:46
<transcript>: and distribute

00:26:48
<transcript>: And distribute that tweet.

00:26:51
<transcript>: To all of your followers.

00:26:51
<transcript>: because

00:27:02
<transcript>: Because so to make this actually scale to Twitter scale and be performing fetching your timeline and all that you have to denormalize the data. This is not like a SQL database where you just have this perfectly.

00:27:10
<transcript>: Like three ends. Normalized database. And like you write a tweet to the database. And then everybody has a foreign key that points it. No.

00:27:10
<transcript>: you take

00:27:12
thdxr: have fun handling unfollows!

00:27:19
<transcript>: You take the Tweet and you literally write it into every followers timeline. So just assume there is no algorithmic timeline in this API. There is only chronological.

00:27:19
<transcript>: you

00:27:21
<transcript>: You can only fetch.

00:27:21
<transcript>: the people

00:27:26
<transcript>: The people you follow tweets in the sending order, right.

00:27:31
jaystation3x: Oh snap. good point

00:27:34
<transcript>: Yeah, same thing follows and unfollows you're doing you're doing it all as well. So when you follow someone.

00:27:34
<transcript>: we write

00:27:42
<transcript>: We write all of their Twitter into your timeline. Maybe we could do it up to a certain date. Maybe we don't do it indefinitely. I don't know.

00:27:42
<transcript>: when you

00:27:43
thdxr: Jk can just filter it out and leave the feed dirty

00:27:46
<transcript>: When you unfollow someone, you delete all of those tweets.

00:27:51
<transcript>: You could just. Yeah, you could just like.

00:27:51
<transcript>: write

00:27:53
<transcript>: Write.

00:27:53
<transcript>: deleted

00:27:59
<transcript>: Deleted a soft delete on and I guess that's probably how Twitter does delete right, because they show this Tweet was deleted.

00:28:04
<transcript>: Is there something I'm missing about deletes? That makes it more hard? Dax.

00:28:07
foobfoob: but if someone with 2m followers tweets, it will result in 2m writes then?

00:28:11
jaystation3x: How many likes per second?

00:28:11
<transcript>: Have fun handling unfollows. You made it sound like this Dragons in there.

00:28:11
<transcript>: thanks for the follow

00:28:13
<transcript>: Thanks for the follow Silven.

00:28:23
<transcript>: Great question food boob. So the way you handle like people with lots of followers.

00:28:33
<transcript>: Is you use a different data store. So I think like a SQL database makes a ton of sense for, like, celebrities who would have millions of followers.

00:28:33
<transcript>: when they tw

00:28:42
<transcript>: When they tweet that should be normalized. So it's a separate case for like the average Twitter person and people with large amounts of followers.

00:28:42
<transcript>: we're probably

00:28:48
<transcript>: We're probably not gonna handle that. I can just control the load testing to make sure there are no celebrities.

00:28:48
<transcript>: in our

00:28:49
<transcript>: In our.

00:28:49
<transcript>: three hundred

00:28:51
<transcript>: 300 million fake users.

00:28:51
<transcript>: they're all

00:28:53
<transcript>: They're all sort of distributed.

00:28:53
<transcript>: on a more

00:28:56
<transcript>: On a more normal curve like.

00:29:02
thdxr: if I have 1000 tweets in my timeline and I unfollow someone you can proactively strip their tweets from my timeline or just filter those out on every read since it's probably simple

00:29:04
<transcript>: Still having people with more followers than others, but not having the extreme cases. I think we can just ignore that part.

00:29:11
<transcript>: If I have 1000 tweets.

00:29:13
<transcript>: Jay is here.

00:29:15
thdxr: depends whether you want to pay write cost or read cost

00:29:22
<transcript>: Five 1000 tweets of my timeline and I unfollow someone you can proactively strip their Tweets from my timeline.

00:29:22
<transcript>: or just

00:29:25
<transcript>: Or just filter those out on every read, since it's probably simple.

00:29:25
<transcript>: so

00:29:27
<transcript>: So.

00:29:34
<transcript>: Yeah, I think we'd rather pay read cost, right? It's cheaper to read.

00:29:38
<transcript>: So you're saying filter those out, like with filter expressions. And then the Dynamo.

00:29:38
<transcript>: query

00:29:40
<transcript>: Query.

00:29:45
<transcript>: How does that mess with Paging and stuff.

00:29:49
<transcript>: I don't know. I haven't thought about it, but that's a good point. You wouldn't have to actually.

00:29:51
<transcript>: Delete all the tweets.

00:29:54
<transcript>: Because that's using.

00:29:56
<transcript>: Rights.

00:30:05
<transcript>: Anyway. Okay, we'll get there. Well, I don't know where we'll get today. I don't know if this is doable in a week. I don't know. We've got some schema.

00:30:10
<transcript>: We got some schema. We have.

00:30:10
<transcript>: there's so much to do

00:30:18
<transcript>: There's so much to do. Okay, first thing I'm gonna do is solve the off thing. So let's draw. We need to draw. I need to slow down, because.

00:30:20
<transcript>: I need to draw.

00:30:24
<transcript>: Let's make oh, I think I started one.

00:30:24
<transcript>: okay

00:30:25
<transcript>: Okay.

00:30:33
<transcript>: Bitter.

00:30:39
<transcript>: Is that as big as it gets. Is this just really zoomed out.

00:30:46
<transcript>: So this is we got a we got a kind of architect out the.

00:30:46
<transcript>: how do i get rid

00:30:49
<transcript>: How do I get rid of this thing? There we go.

00:30:52
<transcript>: The actual API architecture, but also.

00:31:04
<transcript>: The load testing architecture, which might be more complicated, actually, I think it's harder. I think the load tester's gonna be the hard part. If there's an office showing tester that I can use, that would be better.

00:31:12
<transcript>: I looked into.

00:31:13
<transcript>: Artillery.

00:31:27
<transcript>: The problem with artillery is I'd have to pay a month if I want to do it in multiple regions. I do want to test this for multiple regions could be as part of and we'll get into this part of my solution.

00:31:27
<transcript>: to

00:31:32
<transcript>: To building something that can sustainably handle 100 tweets per second.

00:31:35
<transcript>: Beats per second. I'm sorry.

00:31:35
<transcript>: part of my

00:31:42
<transcript>: Part of my solution is distributed global Egypt use DynamoDB Global Tables. It's more expensive.

00:31:52
<transcript>: But again, if your Twitter you don't like all of this is gonna be a drop in the bucket compared to their actual it costs running everything on frame and everything that they're doing.

00:31:56
<transcript>: So I think Global Tables, DynamoDB.

00:32:00
fragaverage: !topic drawing out the architecture  for bitter, a serverless twitter

00:32:04
<transcript>: Multiple regions so like if you have let's say you have five regions with your App Sync API deployed.

00:32:04
<transcript>: then

00:32:15
<transcript>: Then now we have quotas per region, the help it helps get us over the Hunt. Like the AppSync quote is the first thing we're gonna hit because it's 2000.

00:32:21
<transcript>: It's not 2000 requests per second. It's 2000 like they have some unit like fruit Bucks.

00:32:34
<transcript>: It's like some unit that they a lot based on how complex your query mutation is. It's a crackfield service. So if your mutations really complicated or your query is really complicated, it's basically trying to calculate how much compute did you use.

00:32:39
<transcript>: But it's 2000 of those things per second, so at most.

00:32:47
<transcript>: Mutations or 2000 queries and probably less.

00:32:53
daglee: How much does a blue beets icon cost?

00:33:03
<transcript>: That's first thing we're gonna hit, but that's per region. So if we had five of them, that gets us up to 100, but you can't count on it being distributed that evenly. Like you happen to have 20 tweets happening per region per second. You can't count on that.

00:33:03
<transcript>: how much does

00:33:05
<transcript>: How much does a blue Beats icon.

00:33:05
<transcript>: cost

00:33:11
<transcript>: Cost. That's a great question. And what I would say is I don't know, but.

00:33:13
<transcript>: Hang on.

00:33:13
<transcript>: hang on

00:33:18
<transcript>: Hang on. I'm not sure how much it'll cost, but what.

00:33:19
<transcript>: But.

00:33:19
<transcript>: try

00:33:21
<transcript>: Try again.

00:33:21
<transcript>: but i have to

00:33:23
<transcript>: But I have to show you something.

00:33:24
jaystation3x: That is hilarious.

00:33:29
<transcript>: I do own.

00:33:29
schrew: oh lawd here adam goes again

00:33:32
<transcript>: Bitter. How do I filter bitter.

00:33:32
<transcript>: i

00:33:36
<transcript>: I do own bitters blue. Where is it? There it is.

00:33:43
<transcript>: Just in case just in case we want a bitter blue I own it.

00:33:43
<transcript>: you know

00:33:46
<transcript>: You know, in case I want to have a separate domain for that.

00:33:46
<transcript>: okay

00:33:46
vim_cerf: KEKW

00:33:49
<transcript>: Okay. Someone stopped me. Please. Someone.

00:33:52
<transcript>: True it's true.

00:33:52
<transcript>: let's see

00:34:03
<transcript>: Let's see. So we're going to we're gonna architect. Let's do the actual API first. So the way this is gonna work, this is like a stack I've used and I think.

00:34:03
<transcript>: it

00:34:05
bowdy: hey adam!

00:34:05
<transcript>: It has.

00:34:05
<transcript>: the right

00:34:08
<transcript>: The right characteristics.

00:34:08
<transcript>: the main thing

00:34:10
<transcript>: The main thing we have to do is.

00:34:10
<transcript>: we have to think

00:34:21
stroopwafel26: bitter is a good name because people on twitter are bitter

00:34:22
<transcript>: We have to think about how many lambdas, how many concurrent lambdas are being executed. I did get my quota increased to 200 concurrent in US East One. It's important here.

00:34:25
<transcript>: Thinking about regions.

00:34:25
<transcript>: i'll

00:34:27
jaystation3x: If Twitter is 99% idle accounts, it is hard to justify the proactive timeline writes. Noture what to do about that though. I have to think they are updating my timeline when I look at it for roughly 5 minutes per week.

00:34:28
<transcript>: I'll have a thousand concurrent lambdas.

00:34:28
<transcript>: in

00:34:28
thdxr: wait you're using lambdas? thought this was all vtl

00:34:35
<transcript>: In the other region's. I think that's right. I think it's just in. Let's see Lambda concurrent execution.

00:34:35
mergin: im just a noob. may i ask what is grapql for better explanation? i saw its better than normal rest api with request but i couldnt understand the reasons. is there any better simple explanation for noobs to understand graphql

00:34:43
<transcript>: I think it's only in US East one that I have 200 in the way it scales up is weird. This is something I didn't know, but I learned.

00:34:43
<transcript>: let's see

00:34:45
<transcript>: Let's see.

00:34:45
<transcript>: three zero

00:34:46
thdxr: oh is it for subscribing to the dynamo stream

00:34:50
<transcript>: 30 concurrently so they have burst of 3000 but the the limit is really a thousand.

00:34:52
jaystation3x: *have to think

00:34:54
<transcript>: I thought it would say in USC Swamp. Yeah.

00:34:58
jaystation3x: *hate

00:34:59
<transcript>: So I've got 200 concurrent Lambda functions in US East one.

00:34:59
<transcript>: that's

00:35:06
<transcript>: That's where the most Lambda invocations are going to be happening, because even though I have my API distributed in multiple regions.

00:35:06
<transcript>: i'm only

00:35:20
thdxr: @jaystation3x yeah that makes sense

00:35:26
<transcript>: I'm only running the Dynamo stream on the actual table, not the not the global replicas. So the DynamoDB global tables will not be they don't have their own stream. The stream will just be in US East one. That's where I'm going to be processing all the Asynchronous tasks. So when you tweet there's a Lambda function that will get invoked reading that Dynamo record actually in batches of a thousand.

00:35:26
<transcript>: dyna

00:35:37
<transcript>: Dynadb changes, but it'll be invoked with that particular change to the database, your new inserted Tweet, and it'll take that Tweet and distribute it to all your followers. Okay.

00:35:41
<transcript>: All their timelines so they can quickly read their timeline.

00:35:44
<transcript>: That is all happening in us east one.

00:35:44
<transcript>: so

00:35:48
<transcript>: So the only other Lambda functions I'm aware of.

00:35:48
<transcript>: in a high level that i

00:35:50
<transcript>: In a high level that I As I'm thinking through this.

00:35:50
<transcript>: we'll have

00:35:53
thdxr: maybe Adam should build all of this on top of email

00:35:53
<transcript>: We'll have a Lambda function.

00:35:53
<transcript>: for

00:35:54
<transcript>: For.

00:35:54
<transcript>: auth

00:35:57
<transcript>: Authorizer, which caches for five minutes.

00:35:57
<transcript>: you can set it

00:36:06
<transcript>: You can set it to whatever you want, but that's generally what I've done is a five minute cash. So a Lambda function gets invoked when you hit the API for the first time.

00:36:06
<transcript>: it

00:36:09
thdxr: cc 2M followers

00:36:12
<transcript>: It authorizes your job token in the authorization header, and then caches.

00:36:12
<transcript>: your

00:36:29
<transcript>: Your I don't know what it uses. Your IP address, whatever. Basically, when you make subsequent calls from your machine, it's cash. Or when you make substance calls with that authorization header, that's what it would be. Cash. That's the cash key. That authorization header is cash for five minutes. So it won't invoke the Lambda for another five minutes. Does that make sense.

00:36:35
<transcript>: What am I missing? Here? Oh, so many messages.

00:36:38
<transcript>: If Twitter.

00:36:40
<transcript>: Bitter is a.

00:36:40
<transcript>: good name because

00:36:43
<transcript>: Good name because people on Twitter are bitter. It's true.

00:36:43
<transcript>: we're bitter

00:36:44
<transcript>: We're bitter.

00:36:44
<transcript>: on twitter

00:36:45
<transcript>: On Twitter.

00:36:45
<transcript>: if twitter

00:36:52
<transcript>: If Twitter is 99% idle accounts it is it hard or it is hard to justify the Proactive timeline rights.

00:36:52
<transcript>: not

00:36:53
<transcript>: Not.

00:36:53
<transcript>: sure

00:36:56
<transcript>: Sure what to do about that, though.

00:36:56
<transcript>: i

00:37:06
<transcript>: I have to think they're updating my timeline when I look at it for roughly five minutes per week. Oh, you're hate to think, like doing all that Proactive writing.

00:37:14
<transcript>: When you may not be on the that's a great point, Jay. I don't know how you do it in a performant way. Otherwise, though like a relational or a sequel database.

00:37:14
<transcript>: would be

00:37:17
<transcript>: Would be a house of pain. Those joins.

00:37:27
<transcript>: Wait. You're using Lambda. So thought this was all detail. It is Zack. So the only two lambdas. I should start architecting this out. So let's say this is us east. One.

00:37:27
<transcript>: that's

00:37:31
<transcript>: That's my primary reason we're gonna have.

00:37:35
<transcript>: Can I can I select all that please.

00:37:35
<transcript>: so we're gonna

00:37:39
<transcript>: So we're gonna have us East.

00:37:39
<transcript>: or

00:37:41
<transcript>: Or us West.

00:37:46
<transcript>: Central one.

00:37:52
<transcript>: I've already done this exercise with public Dev. I have way over engineered.

00:37:52
<transcript>: the

00:37:56
<transcript>: The API and I'm already in these regions.

00:37:56
<transcript>: i think

00:37:59
stroopwafel26: bring back the BBS'

00:37:59
<transcript>: I think the if you're just gonna have five regions.

00:37:59
<transcript>: these

00:38:02
<transcript>: These are the Five to put them in.

00:38:02
<transcript>: to get

00:38:06
<transcript>: To get sort of like consistent global latencies.

00:38:08
<transcript>: Ap.

00:38:08
<transcript>: stat

00:38:10
<transcript>: Stat.

00:38:10
<transcript>: one

00:38:11
<transcript>: One, I think.

00:38:11
<transcript>: that looks

00:38:13
<transcript>: That looks.

00:38:16
<transcript>: East.

00:38:19
<transcript>: Yeah. Here we go.

00:38:27
<transcript>: This one you use Central One, US West, Two, Oregon, and AP South One, and then.

00:38:32
<transcript>: Ap. I don't really need to have the mall listed here. I guess I did it. So whatever.

00:38:35
<transcript>: Ap Southeast.

00:38:37
<transcript>: Two. Okay.

00:38:40
<transcript>: So here's our regions.

00:38:48
<transcript>: What's going on in each region? So we have an app Sync API.

00:38:50
<transcript>: I just remembered the proxy.

00:38:52
<transcript>: App sync.

00:38:56
<transcript>: That medium.

00:39:00
<transcript>: And not bad.

00:39:04
<transcript>: So, the AppSync API.

00:39:04
<transcript>: which

00:39:13
<transcript>: Which is largely just a bunch of ETL templates. And that's where this thing scales really well, because we're not running Lambda functions when you tweet.

00:39:13
<transcript>: the

00:39:19
<transcript>: The actual like transaction that happens when you tweet is all VTL there's no Lambda function involved.

00:39:33
<transcript>: So we write to the Dynamo table, and then the only Lambda function if it involved is asynchronously after the fact picked up off the stream. And we're doing that in batches of a thousand records, which is the maximum. So a thousand DynamoDB.

00:39:36
<transcript>: Rights or delete or update.

00:39:36
<transcript>: get batch

00:39:42
<transcript>: Get batched and sent to a Lambda function to handle those 10 operations.

00:39:42
<transcript>: that means

00:39:43
<transcript>: That means.

00:39:43
<transcript>: theoretically

00:39:44
<transcript>: Theoretically.

00:39:44
<transcript>: a thousand

00:39:49
<transcript>: A thousand the default Lambda concurrent limit is 10. Concurrent.

00:39:49
<transcript>: execution

00:39:53
<transcript>: Executions. Right. So if you can have a thousand Lambda functions.

00:39:56
<transcript>: Concurrently executing.

00:39:56
<transcript>: and each of them could

00:40:02
<transcript>: And each of them could have a thousand DynamoDB records executing in them. That's a million, right.

00:40:02
<transcript>: a million

00:40:04
<transcript>: A million.

00:40:17
<transcript>: Database operations that we can handle with our Lambda allocation. But we have 200 functions. We're fine on Lambda functions. I think the only other question is the off piece. So with a five minute cash, does that keep.

00:40:17
<transcript>: all

00:40:20
<transcript>: All the Jot token authorization.

00:40:20
<transcript>: lambda function

00:40:23
<transcript>: Lambda functions. The App Sync authorizer.

00:40:23
<transcript>: does that

00:40:26
<transcript>: Does that stay under our 200 current limit.

00:40:26
<transcript>: i don't know

00:40:28
<transcript>: I don't know, but I'm excited to find out.

00:40:28
<transcript>: this is

00:40:30
<transcript>: This is fun.

00:40:37
<transcript>: Is it for subscribing to the Diamond Stream? That's right.

00:40:51
foobfoob: so when invoking a lambda from sqs, its possible to batch this so multiple sqs messages are processed by a single lambda?

00:40:55
<transcript>: Mergin. I'm just a new mask. What is GraphQL for better explanation? I thought it's better than normal S API with requests, but I couldn't understand the reasons. Any better simplicity for news Anders to grab it. I wouldn't say it's better than rest. I only honestly I only use graphic because I think AppSync is.

00:40:55
<transcript>: i like

00:40:58
<transcript>: I like working with AppSync versus API gateway.

00:41:01
<transcript>: For a lot of reasons, but.

00:41:07
thdxr: can vtl verify jwt? can then skip the lambda auth if it's a bottleneck

00:41:09
<transcript>: That's really why I start using graphical was just because I like the apps eat service a lot, but GraphQL and rest are.

00:41:19
<transcript>: Like there's trade offs. I don't know if you like the tooling the graph field gives you on the front end and the way you can fetch your data that way. I think that's mostly people choose graphio for those reasons.

00:41:19
<transcript>: i don't know

00:41:22
<transcript>: I don't know there's a lot of reasons.

00:41:28
<transcript>: Is there a simple app? Anybody have a simple explanation explanation that could quickly.

00:41:33
<transcript>: Succinctly lay out the tradeoffs rest versus graphical.

00:41:37
<transcript>: See, maybe Adam should build all this on top of email.

00:41:39
jaystation3x: I am thinking that the feed does not have 100% fidelity. Upon load, maybe I see a few things that are popular and a maybe-not-so-realtime process then assembles the fit few "pages" of the timeline with greater fidelity. Not necessary for the purposes of this exercise, I think.

00:41:40
<transcript>: Cc 2 million followers.

00:41:43
thdxr: @foobfoob SQS does support batching windows

00:41:48
<transcript>: So when it invoking Lambda from SQS it's possible to bash this multiple SQL messages or process by single Lambda. Yes.

00:41:48
<transcript>: it

00:41:56
<transcript>: It is foodfoop. In my case, I'm talking about a DynamoDB stream. Thank you so much for the follows. Percyus and TS green.

00:42:02
<transcript>: Can vtlverify jot can then skip the land that no it can't.

00:42:02
<transcript>: can't

00:42:04
<transcript>: Can't do that in VTL.

00:42:07
<transcript>: Is limited I mean you don't have.

00:42:12
<transcript>: You basically have some utilities that they provide that they've written in Java that you can use.

00:42:22
<transcript>: You can like parse JSON string if I JSON you can you can do some stuff with like decoding base 64 strings, but there's no.

00:42:22
<transcript>: no

00:42:24
<transcript>: No parsing a jot token.

00:42:27
foobfoob: cool, thanks for the info

00:42:33
foobfoob: i need to try this

00:42:37
schrew: Graphql allows you to ask for what data you need. Which theoretically saves on payload sizes, but is practically popular because it's new. Kappa @mergin

00:42:42
daglee: As somebody that have done a lot of email parsing. Building anything on top of email: NO! NO! NO! OH GOD NO!

00:42:42
<transcript>: Or verifying a jot token. I'm thinking that the feed does not have 100% Fidelity upon load. Maybe I see a few things that are popular and maybe not so realtime. Process and assembles the fit few pages of the timeline with greater Fidelity, not necessarily for the purpose of this exercise. I think I see what you're saying. Jay.

00:42:48
<transcript>: Yeah, I think it the kind of scale Twitter operates.

00:42:51
<transcript>: I can't imagine they're using like a sequel database.

00:42:54
<transcript>: For for timelines.

00:43:00
<transcript>: I think I think the move is to denormalize it.

00:43:00
<transcript>: maybe there are

00:43:11
<transcript>: Maybe there are optimization strategies for accounts that aren't active, like not writing into their timelines, making them wait when they show up and do it kind of on demand. I'm not sure.

00:43:15
<transcript>: Sqs does support batching Windows. That's right, cool.

00:43:15
<transcript>: graphical allow

00:43:27
<transcript>: Graphical allows you to ask for what data you need, which theoretically stays on payload sizes. Practically popular because it's new. Exactly. Yeah. They overfetching. Thing I think was maybe the big sell early on that you never overfetch.

00:43:35
<transcript>: I don't know that it matters, though. Somebody that have done a lot of email parsing, building anything on top of the email. No, no. Oh, God, no.

00:43:40
<transcript>: It's funny. Okay, so we have app sync in each of these regions.

00:43:47
<transcript>: This is actually what's handling our APIs the our API request the problem.

00:43:49
<transcript>: Is we can't just handle.

00:43:49
<transcript>: okay

00:43:52
<transcript>: Okay. So Route 53.

00:43:52
<transcript>: why is

00:43:56
<transcript>: Why is my mouse? What is going on? There we go.

00:44:00
<transcript>: So we have Route 53 living out here.

00:44:00
<transcript>: not in

00:44:02
<transcript>: Not in a region.

00:44:11
<transcript>: So latency. Records in Route 53.

00:44:13
<transcript>: We can't point them.

00:44:13
<transcript>: at our

00:44:15
<transcript>: At our App sync.

00:44:19
<transcript>: Custom domain so if we want to have one API.

00:44:23
<transcript>: Which we do API bitter.

00:44:23
<transcript>: fy

00:44:26
<transcript>: Fyi we want to have this API.

00:44:26
<transcript>: and then slash

00:44:29
<transcript>: And then slash GraphQL.

00:44:32
<transcript>: This is what our load tester is going to be hitting.

00:44:35
<transcript>: The problem here is.

00:44:35
<transcript>: custom domain

00:44:41
<transcript>: Custom domains in App sync. It's just an implementation detail. Sort of like it's just a weird limitation.

00:44:41
<transcript>: but we

00:44:43
<transcript>: But we can't have.

00:44:43
<transcript>: multiple

00:44:44
<transcript>: Multiple.

00:44:52
<transcript>: Multiple API's with custom domains like in different regions using the same domain.

00:44:52
<transcript>: okay

00:44:58
<transcript>: Okay. So I have to use separate domains and for us to set up latency routes in route 53.

00:45:00
<transcript>: So Let's.

00:45:04
<transcript>: Hit us east. One.

00:45:04
<transcript>: hit

00:45:05
<transcript>: Hit.

00:45:08
<transcript>: US West.

00:45:08
<transcript>: so we

00:45:11
<transcript>: So we have these latency routes. And it's based on.

00:45:11
<transcript>: the user

00:45:15
<transcript>: The user hits this API API Bitter FYI.

00:45:15
<transcript>: and route

00:45:17
<transcript>: And Route 53 decide.

00:45:17
<transcript>: what region

00:45:27
<transcript>: What region are they closest to? And it distributes the load accordingly. So it pushes you to the closest API that requires that we have one.

00:45:27
<transcript>: url

00:45:32
<transcript>: Url One domain API update FY that points that all these regions.

00:45:32
<transcript>: and apps and can't do

00:45:35
foobfoob: what do you plan to use the DDB stream for? Do you want to listen for an INSERT (new beet?) and then run a lambda to create a new row for each follower?

00:45:36
<transcript>: And apps and can't do that. So we have to have an API gateway.

00:45:41
<transcript>: Proxy that sits in front of App sync. This is an important note.

00:45:41
<transcript>: when we

00:45:47
thdxr: @foobfoob yep

00:45:48
<transcript>: When we get to the scalability issues like once we start seeing stuff fail because we're hitting.

00:45:48
<transcript>: quotas

00:45:53
<transcript>: Quotas and stuff. This is going to be an unfortunate part of this setup.

00:46:06
<transcript>: That could be it could introduce pain. That would have been avoided if we just use API Gateway and didn't use AppSync at all. Now could we just use App State or could we just use API Gateway? Yes, we could write all this.

00:46:06
<transcript>: with

00:46:08
<transcript>: With just API. Gateway.

00:46:08
<transcript>: it

00:46:28
<transcript>: It sucks because they're VTL is so behind AppSync. So even just like transforming DynamoDB requests in apps or an API gateway, VTL is like you have to manually map all the fields. There is no utility. They don't have the utility functions. They have an app tank. I don't understand why. I don't know why those teams can't talk to each other and be able. Hey.

00:46:28
<transcript>: i'm gonna share

00:46:37
<transcript>: I'm gonna share some pizza and maybe merge these two worlds where we have one set of VTL features for both services. But anyway.

00:46:55
<transcript>: I would rather not write it in a API gateway. That's what I'm trying to say. The graph go piece is nice to for like, if you're Loading your timeline, it's a bunch of tweets and you want to just make separate queries to fetch the profile data. What are my kids doing up there? Like, are they jumping? Are they literally just standing above me and jumping up and down.

00:47:00
<transcript>: It's so loud.

00:47:12
<transcript>: What do you plan to use the DynamoDB stream for? Do you want to listen for an insert and new beat and then run a Lambda to create a new role for each row for each follower. Yes, Boob, food.

00:47:12
oetziofficial: oh I thought that at my place

00:47:16
oetziofficial: KEKW

00:47:16
<transcript>: That's that's basically that's basically right.

00:47:16
<transcript>: so

00:47:17
<transcript>: So.

00:47:20
<transcript>: App Sync We have an API gateway.

00:47:20
<transcript>: proxy

00:47:21
<transcript>: Proxy.

00:47:23
<transcript>: So let's do this.

00:47:33
<transcript>: This is dumb. I shouldn't have done all the regions because we could just kind of like summide that this is gonna be per region. We'll get back to this. I need to make this one bigger.

00:47:35
<transcript>: So this one.

00:47:35
<transcript>: is going

00:47:40
<transcript>: Is going to be our reference region. So really API Gateway is a proxy.

00:47:40
<transcript>: it sits in

00:47:43
<transcript>: It sits in front of AppSync.

00:47:43
<transcript>: it has

00:47:45
<transcript>: It has a custom domain.

00:47:47
<transcript>: Okay.

00:47:47
<transcript>: so

00:47:51
<transcript>: So this is where the request comes in.

00:47:55
<transcript>: Maybe I just draw, like a little arrow.

00:47:57
<transcript>: Nope. That's not what I want to do.

00:48:00
<transcript>: Arrow from.

00:48:03
<transcript>: How do I draw arrows.

00:48:03
<transcript>: here we go five

00:48:04
<transcript>: Here we go. Five.

00:48:04
<transcript>: yeah

00:48:06
<transcript>: Yeah, from this thing.

00:48:10
<transcript>: To this thing. Okay.

00:48:10
<transcript>: that didn't

00:48:12
<transcript>: That didn't work.

00:48:14
<transcript>: So.

00:48:14
<transcript>: april

00:48:18
<transcript>: April Requests hit this API. Gateway.

00:48:20
<transcript>: And the API gateway.

00:48:20
<transcript>: proxies

00:48:21
<transcript>: Proxies.

00:48:26
<transcript>: Requests Two App sync.

00:48:26
<transcript>: which means

00:48:33
spartangtr: !today

00:48:33
fossabot: working on awguess

00:48:33
<transcript>: Which means we're kind of double paying with sucks. And we're dealing with two different services. Quotas.

00:48:35
<transcript>: At the hole throughput.

00:48:38
<transcript>: Bummer but.

00:48:38
<transcript>: i think

00:48:48
<transcript>: I think we try. That's not what we're doing, Spartan. Sorry. How do I do that update thing? Frag. You know how to update that? Anybody? Jay. Anybody know how.

00:48:56
<transcript>: We're working on something weird.

00:48:56
<transcript>: something different

00:48:58
<transcript>: Something different and weird.

00:48:59
spartangtr: what's the repo for bitter

00:49:04
<transcript>: Okay, so let's draw. Let's see. We got a little user people.

00:49:06
<transcript>: Up here.

00:49:08
jaystation3x: missed the question

00:49:10
thdxr: adamdotdev/bitter

00:49:16
<transcript>: Okay.

00:49:20
<transcript>: And they're drawing. They're making requests.

00:49:24
<transcript>: This is kind of where around 53 comes in.

00:49:27
<transcript>: It wraps the various regions.

00:49:33
<transcript>: Just trying to kind of like lay out the architecture here. So this this will be helpful, I think.

00:49:35
<transcript>: Okay.

00:49:39
<transcript>: So you make requests to the API.

00:49:39
<transcript>: they

00:49:40
<transcript>: They.

00:49:40
<transcript>: flow

00:49:41
<transcript>: Flow.

00:49:42
spartangtr: must be private

00:49:53
<transcript>: Into the region specific APIs they're fronted by API Gateway, which then proxies to app sync. App sync. I should really diagram like a flow for like an actual.

00:49:55
<transcript>: Request.

00:49:57
<transcript>: So.

00:50:03
spartangtr: <insert rube goldberg machine gif>

00:50:04
<transcript>: Like if you do a tweet.

00:50:05
fragaverage: !today

00:50:06
fossabot: Today Adam is working on bitter, a serverless twitter. Built to test the limits of concurrency within the serverless world.

00:50:07
<transcript>: Okay.

00:50:11
<transcript>: What would that look like? It'd be like.

00:50:11
<transcript>: muta

00:50:12
fragaverage: Is that correct?

00:50:13
<transcript>: Mutation.

00:50:14
<transcript>: Beat.

00:50:20
<transcript>: Is that how that looks? I don't know. I don't remember. Grab kill. Looks like.

00:50:20
<transcript>: it'd be like

00:50:21
<transcript>: It'd be like.

00:50:24
<transcript>: Beat.

00:50:28
<transcript>: And then the text would be.

00:50:28
<transcript>: is it

00:50:30
<transcript>: Is it does it have name parameters like that.

00:50:34
<transcript>: Checking my bidder.

00:50:41
<transcript>: What is the Jack? The original Jack suite. It's like setting up my.

00:50:44
<transcript>: Bitter.

00:50:48
<transcript>: So you send that message.

00:50:55
<transcript>: And we're gonna specifically look at what happens on a beat.

00:50:58
vim_cerf: you have to spell it bttr to keep it original with Jack's first tweet

00:51:03
<transcript>: Okay, so AppSync is going to use a VTL template to write to we're gonna have a DynamoDB.

00:51:08
<transcript>: This is a DynamoDB.

00:51:08
<transcript>: table

00:51:09
<transcript>: Table.

00:51:14
<transcript>: Okay. Now the question is, are we going to need multiple tables.

00:51:14
<transcript>: are we doing

00:51:17
<transcript>: Are we doing this single table? That's the question.

00:51:17
<transcript>: when you're

00:51:20
<transcript>: When you're talking about these levels of traffic.

00:51:20
<transcript>: i think

00:51:22
<transcript>: I think.

00:51:22
<transcript>: thank you so much

00:51:23
<transcript>: Thank you so much. Frag.

00:51:23
<transcript>: for

00:51:26
<transcript>: For the Updated today.

00:51:30
<transcript>: Let's see.

00:51:30
<transcript>: the

00:51:32
<transcript>: The.

00:51:36
<transcript>: Bitter to keep the original yeah, yeah, that's a good call.

00:51:41
<transcript>: When you're talking about this level of traffic, I think things like single table matter.

00:51:41
<transcript>: or don't matter

00:51:42
<transcript>: Or don't matter.

00:51:46
<transcript>: What I mean is, I think it's an important decision, because.

00:51:52
<transcript>: If there's any moments where we can use single table principles to fetch.

00:51:52
<transcript>: multiple

00:51:53
<transcript>: Multiple.

00:51:53
<transcript>: types

00:51:56
<transcript>: Types of data in one queries.

00:51:56
<transcript>: that could

00:51:58
<transcript>: That could be a huge savings.

00:51:59
fragaverage: !github

00:51:59
fossabot: Adam's dotfiles live here: https://github.com/adamelmore/dotfiles \n The repository for bitter is here: https://github.com/adamelmore/bitter

00:52:10
<transcript>: I don't know what those would be, though, and I need to have a clear reason to do it because every if we do single table, that means all of our operations, all of our right and read units are.

00:52:10
<transcript>: quot

00:52:13
fragaverage: why no \n in fossabot commands NotLikeThis

00:52:22
<transcript>: Quota bound within that single table. So timeline rights are gonna be really heavy, like there's gonna be a lot of writing to that table. I almost think that has to be a separate table. We probably have to do.

00:52:22
<transcript>: the timeline

00:52:32
<transcript>: The timeline as a separate table. It also just made sense. If you would want to start using provision concurrency to save costs, you'd want to be able to handle those on a per table basis.

00:52:32
<transcript>: so this

00:52:35
<transcript>: So this is the We'll call this the.

00:52:37
<transcript>: Beats table.

00:52:37
<transcript>: okay

00:52:40
<transcript>: Okay. And we'll call this the.

00:52:40
<transcript>: timeline

00:52:46
<transcript>: Timeline table. I don't know if any of the other things I think I think like profiles.

00:52:46
<transcript>: you just keep

00:52:48
<transcript>: You just keep in the beat table.

00:52:57
<transcript>: Why is that text not centered? There we go. I think.

00:52:57
<transcript>: i think that makes

00:53:03
<transcript>: I think that makes sense. I think this is actually more like your single table. And then you just have timelines in a separate table. Maybe.

00:53:07
<transcript>: I think.

00:53:12
<transcript>: So, API Gateway, we've got the.

00:53:12
<transcript>: beats

00:53:16
<transcript>: Beats table and the timeline stable and these are globally replicated.

00:53:21
<transcript>: I'm actually going to let's see.

00:53:23
<transcript>: We're gonna make like.

00:53:28
<transcript>: A reference out of this us one. And then we'll.

00:53:32
<transcript>: Just kind of like, make it clear that there's multiple regions.

00:53:32
<transcript>: okay

00:53:33
<transcript>: Okay.

00:53:41
<transcript>: Why no slash in and fossilocks fossil commands. I don't know. Can't do new lines. That's a bummer.

00:53:51
<transcript>: That's today. Adam is working on Bitter, a serverless Twitter built to test the limits of concurrency within the service world. That's exactly right, Frank. Thank you so much.

00:53:55
<transcript>: Okay.

00:54:01
<transcript>: So you do this mutation you beat setting up my bidder.

00:54:03
<transcript>: And.

00:54:03
<transcript>: app

00:54:08
<transcript>: App sync is going to need way more room way more room.

00:54:15
<transcript>: Thank you for the follow Ahref, 404.

00:54:15
<transcript>: so

00:54:20
<transcript>: So we've got these two tables. We're gonna say this. App sync.

00:54:25
<transcript>: It's gonna be a VTL operation into the beats table, right.

00:54:31
fragaverage: is us-east-1 considered a "master", so if in the unlikely chance it goes down, do the other regions continue to work?

00:54:31
<transcript>: Vtl.

00:54:35
<transcript>: So it's it's a.

00:54:35
<transcript>: well it's actually

00:54:37
<transcript>: Well, it's actually a put item, right.

00:54:37
<transcript>: in

00:54:42
<transcript>: In VTL. So it's a DynamoDB put item operation.

00:54:42
<transcript>: just

00:54:44
<transcript>: Just a simple right.

00:54:44
<transcript>: i don't think

00:54:47
<transcript>: I don't think there's a transaction involved here. Well, I guess.

00:54:47
<transcript>: i guess

00:54:49
<transcript>: I guess there is.

00:54:49
<transcript>: yeah

00:54:52
<transcript>: Yeah, we would do this as a transaction.

00:54:52
<transcript>: and because

00:54:58
<transcript>: And because we would want to update some other things like your Tweet counts. Think of the follow.

00:54:58
<transcript>: follows

00:54:59
<transcript>: Follows.

00:54:59
<transcript>: bong

00:55:03
<transcript>: Bong Bangi and n'erdell's.

00:55:06
<transcript>: So it's really more it's more than the put item.

00:55:13
<transcript>: But let's just simplify and say it's a put item. So we're writing from our AppSync. We have the payload here.

00:55:13
<transcript>: this text

00:55:15
foobfoob: why VTL and not lambda? is it faster?

00:55:24
<transcript>: This text is passed in. We know we have the user's identity based on the authorization header. So the jot token and the authorization header gives us their username and their user ID. All that.

00:55:27
foobfoob: hope all the newbie questions are ok

00:55:30
<transcript>: Why VTL and not Lambda is it faster yet so VTL no cold starts.

00:55:36
<transcript>: It's free. It's just like doesn't cost anything. So Lambda invocations when you're talking about 100 tweets per second.

00:55:44
<transcript>: That's a lot of Lane to invocations so that's racking up more cost details completely free and there's no culture and super fast and.

00:55:44
<transcript>: i mean the only

00:55:54
<transcript>: I mean the only downside of ETL is the developer experience. The authoring experience is bad, but if you kind of put the time in and you learn VTL, it's really powerful at runtime.

00:55:54
<transcript>: also won't count

00:56:00
<transcript>: Also won't count toward our concurrency limits because we have to think about how many Lambda functions we're only allotted so many Lambda functions.

00:56:00
<transcript>: per second

00:56:01
<transcript>: Per second.

00:56:08
foobfoob: so VTL is just for data CRUD?

00:56:09
<transcript>: Concurrent invocations so if you have 15 minutes long running Lambda functions, you can have up to 10 of them running.

00:56:09
<transcript>: for those fifteen minutes

00:56:14
foobfoob: or what can you do with it?

00:56:17
<transcript>: For those 15 minutes, but then you can't run anymore Lambda functions like any more invocations unless you get your quotas increase so.

00:56:17
<transcript>: let's just go and talk about

00:56:21
<transcript>: Let's just go and talk about this because I was surprised by this.

00:56:35
<transcript>: They gave me 200. I requested 50 in US East one. The thing about it is though you immediately I can immediately get 30 so 1st second I can do 30 concurrent Lambda functions.

00:56:35
<transcript>: after

00:56:38
<transcript>: After that I can only scale up linearly.

00:56:38
<transcript>: linear

00:56:46
<transcript>: Linearly at a rate of 500 /minute so take 34 minutes to reach that 200 concurrent.

00:56:46
<transcript>: which is

00:56:49
<transcript>: Which is interesting and underlines.

00:56:49
<transcript>: a big point

00:56:57
<transcript>: A big point of all of this. With serverless architectures, you have to design the thing to assume every request is going to fail.

00:57:02
<transcript>: If I assume every time you try to invoke a Lambda function or every time you.

00:57:02
<transcript>: whatever

00:57:04
<transcript>: Whatever.

00:57:04
<transcript>: try to

00:57:07
<transcript>: Try to write to cloud Watch. You just have to assume everywhere requests.

00:57:07
<transcript>: can and

00:57:13
<transcript>: Can and will fail it'll. Get throttle that'll get something and you have to be resilient to that. So that's an interesting.

00:57:32
<transcript>: With DynamoDB streams because we're not actually controlling the function implications. But I think DynamoDB smart enough. I think the handling built into DynamoDB handles back off and retries. So if it fails to write to the stream because you've hit your concurrency limit with Lambda five functions, I'm assuming it just builds up. It just backs up.

00:57:32
<transcript>: which

00:57:34
<transcript>: Which is bad.

00:57:43
<transcript>: That's 34 minutes it takes to scale up to 200. I don't know if it'll matter. I still don't know what kind of levels we're gonna hit with that stream.

00:57:56
<transcript>: Yes. So VTL is just for the data cred that's right now the newbie questions are great. You're helping me think through it too is us. Each one considered a master. So it is in the unlike the chance it goes down to other regions, continue to work.

00:58:00
<transcript>: So frag all the other regions would continue to work. That's right.

00:58:00
<transcript>: laten

00:58:06
<transcript>: Latency routes would just send people to us west, etc. The problem is all of our.

00:58:17
<transcript>: Asynchronous handling will be happening in US East one so we would stop writing tweets the timelines. People would still be able to fetch whatever state their timeline was in prior to that and they'd still be able to tweet.

00:58:20
<transcript>: Right.

00:58:39
<transcript>: Yeah, you can write to all the global tables like all the DynamoDB global tables they're read. Write like you're. It's not you're not only able to write in USB Swan, so it would continue to work. You just all of our asynchronous stuff is in the east one. So stop working and I wouldn't have put it in each one. Honestly, the only reason I did is that I had already made the quota ring. The quota.

00:58:39
<transcript>: increase

00:58:51
lazic88: Damn, this live translation is wack LUL

00:58:51
<transcript>: Increase requests so hard to say I'd only I already made those quote increase requests and I made them for you SD one because I'm dumb. I wasn't thinking normally I do my primary go see Ohio.

00:58:51
<transcript>: okay

00:58:59
fragaverage: Ah okay

00:59:01
<transcript>: Okay, if I'm talking fast, it's because I have to pee. This live translation is Wack. What is the live translation? Oh, the captions.

00:59:01
<transcript>: is

00:59:04
<transcript>: Is it captioning? Because I'm sure they are.

00:59:04
<transcript>: bad

00:59:07
<transcript>: Bad. I'm Mumbling. I'm from the ozone.

00:59:07
<transcript>: i

00:59:12
lazic88: Yes, captions

00:59:12
ankit3009: Honesty is appreciated LUL

00:59:15
<transcript>: I already speak like a hillbilly and then when I get talking real fast and messing up my words and when I have to pee.

00:59:25
spartangtr: do you know the snells tho

00:59:25
<transcript>: Honestly is appreciated. Okay. I have to. I have to pee. Thank you for the follow. Obliss 59. I will be right back.

00:59:25
<transcript>: after

00:59:26
jaystation3x: This is fun but gtg start my new job as a... Java dev.

00:59:27
<transcript>: After I see.

00:59:32
fragaverage: @spartangtr LUL

00:59:37
<transcript>: You.

00:59:41
jaystation3x: Never thought I would say that.

00:59:55
fragaverage: glfh @jaystation3x

01:00:09
fragaverage: wow my typing today is wild. Good luck, have fun!

01:00:32
jaystation3x: thx Frag!

01:00:46
stroopwafel26: @jaystation3x have fun!

01:00:58
stroopwafel26: java is cool if you know what you're doing

01:02:15
cowfacedude99: !today

01:02:15
fossabot: Today Adam is working on bitter, a serverless twitter. Built to test the limits of concurrency within the serverless world.

01:02:15
vim_cerf: pepeD

01:02:42
<transcript>: Jay had to go see A. J. Did Jake get a job as a job developer? Did I miss that? If Jay is still here, he's not here. But if he's.

01:02:42
<transcript>: come on

01:02:46
<transcript>: Come on. The show. Jalface is here.

01:02:46
<transcript>: we're doing

01:02:48
<transcript>: We're doing weird stuff today. Coffee.

01:02:59
<transcript>: It's fun. It's weird, but it's fun right now. We're just diagramming because this is like it's a lot in my brain, and I need to write it all down.

01:03:02
<transcript>: Think for the Follow Zack David.

01:03:08
<transcript>: Okay, so we're building a bitter API, not Twitter. It's bitter.

01:03:08
<transcript>: and you

01:03:11
<transcript>: And you don't? Tweet you beat.

01:03:11
<transcript>: because beets are

01:03:14
<transcript>: Because beets are bitter, the vegetable you get it beat.

01:03:14
<transcript>: bitter

01:03:24
<transcript>: Bitter. Okay, so we have this API Bitter FYI GraphQL. You do a mutation, which is a beat.

01:03:24
<transcript>: i think

01:03:26
<transcript>: I think would follow the George.

01:03:26
<transcript>: the gorge

01:03:28
<transcript>: The Gorge.

01:03:32
<transcript>: And we're gonna route that to a region.

01:03:37
<transcript>: I might put in the concurrency limits here or not. The concurrency, the quotas.

01:03:37
<transcript>: just for

01:03:41
cowfacedude99: I am playing around qmk today. didn't think it would be hard but apparently it is :(

01:03:44
<transcript>: Just for reference so we can kind of think through the architecture and make sure we're not down. I mean, we are done, but make sure we're not too dumb.

01:03:50
<transcript>: And we're not missing a very key quota limit that we're gonna hit.

01:03:52
daglee: Beets by Dr.Adam

01:03:52
<transcript>: So before this can happen.

01:03:55
<transcript>: So before.

01:04:01
<transcript>: For the can happen. We have to call the authorizer.

01:04:01
<transcript>: okay

01:04:02
<transcript>: Okay.

01:04:04
<transcript>: I don't want that.

01:04:04
<transcript>: i'm

01:04:08
<transcript>: I'm way too OCPD to use this tool.

01:04:11
<transcript>: We'll get to the Timeline stable.

01:04:11
<transcript>: okay

01:04:20
<transcript>: Okay. So we were fronted by API Gateway, but the first thing that happens before it just hits AppSync is.

01:04:20
<transcript>: it

01:04:22
<transcript>: It calls.

01:04:22
<transcript>: a lambda function

01:04:23
<transcript>: A Lambda function.

01:04:27
<transcript>: And this Lambda function.

01:04:30
<transcript>: Authorizer.

01:04:34
<transcript>: Okay.

01:04:38
<transcript>: So there's an authorizer function. How do I make those two things, like live together.

01:04:38
<transcript>: to group

01:04:43
<transcript>: To group them. I want to make them one, one thing.

01:04:48
<transcript>: I'm okay.

01:04:53
<transcript>: Like this. And then kind of group them set a thing.

01:04:53
<transcript>: group

01:04:54
<transcript>: Group.

01:05:01
<transcript>: Selection. Okay. So here's our authorized function.

01:05:03
<transcript>: So the first thing it's going to do.

01:05:06
<transcript>: It's gonna call.

01:05:09
<transcript>: Our Authorizer function.

01:05:16
<transcript>: Which is going to be cash. So that's only once every five minutes per caller.

01:05:16
<transcript>: but we should

01:05:18
<transcript>: But we should just draw it in here. So we know.

01:05:21
<transcript>: We're So we're thinking about it.

01:05:21
<transcript>: so

01:05:25
<transcript>: So that calls the authorizer function and then.

01:05:28
foobfoob: what is the purpose of appsync if there is a lambda fn executed anyway?

01:05:31
<transcript>: Really absent is the one doing that so like this isn't wrong.

01:05:34
<transcript>: It is hitting app sync.

01:05:38
<transcript>: And then we'll just do this. We'll get real fancy. Okay.

01:05:38
<transcript>: app

01:05:43
<transcript>: App Sync Also not like lives inside that thing.

01:05:43
<transcript>: that's not

01:05:46
<transcript>: That's not a separate text thing. That's, like.

01:05:46
<transcript>: okay

01:05:47
<transcript>: Okay.

01:05:49
foobfoob: oh, okay

01:05:53
<transcript>: Appsink.

01:05:53
<transcript>: am i

01:05:58
<transcript>: Am I am I building bidder, or Am I learning excalidra. That's the question.

01:06:01
<transcript>: Thank you for the Follow Wilson.

01:06:01
<transcript>: beats

01:06:05
vagorge: both

01:06:06
<transcript>: Beats by Dr. Adam I love it, Player o, Cuemk today.

01:06:06
<transcript>: didn't think it would

01:06:10
<transcript>: Didn't think it would be Harvard. Apparently. Apparently, it is. What is QMK.

01:06:10
<transcript>: i'm

01:06:13
<transcript>: I'm so curious. Welcome to Chat, VA. George.

01:06:13
<transcript>: vagorge

01:06:14
<transcript>: Vagorge.

01:06:26
<transcript>: What is the purpose of that sync? If there's a Lambda function executed anyway, so food boob this Lambda function. The authorizer is only called once every five minutes. The result is cached.

01:06:26
<transcript>: it's so

01:06:35
daglee: qmk is an open source firmware for keyboards.

01:06:36
<transcript>: It's so it's because I do off. Like if you use I am auth or if you use an API key then there wouldn't be a Lambda function involved. I specifically use.

01:06:36
<transcript>: a custom

01:06:54
<transcript>: A custom authorizer because I just like to work with jot tokens coming from like my next Jas frontend or whatever. Like if I've authenticated with Nexo on the front end, I have this jot token and I like to just send that to my API, so I'm using the same off mechanism for both. Does that make sense.

01:07:04
foobfoob: yes it does, thanks!

01:07:14
<transcript>: That's just how I typically architect things. I think it's a simpler way. Like I hate Cognito. I don't like using Cognito off with my appsink APIs, because then I have to use Cognito, and then I have to deal with user pools and syncing data from user pools into my app databases. It's all just a mess. So instead I use this authorizer function, but it's only called once every five minutes. It's.

01:07:14
<transcript>: cached

01:07:16
<transcript>: Cached. Okay.

01:07:17
daglee: Which works a bit like a framework, where you make your own firmware.

01:07:18
<transcript>: So there's the authorizer function.

01:07:22
<transcript>: And then there's this.

01:07:27
<transcript>: We're doing a put item into the Beats table.

01:07:32
foobfoob: need to go now, but I will watch the replay, already really interesting, thanks! :)

01:07:35
<transcript>: Over simplified, but basically a put item. It's really gonna be a transaction because we're gonna do some other stuff too.

01:07:35
<transcript>: but we're gonna

01:07:37
stroopwafel26: Linux from scratch but for keyboard /s

01:07:40
<transcript>: But we're gonna do a put item into the beat stable, and then the stream.

01:07:45
<transcript>: So we're gonna have a DynamoDB, stream.

01:07:54
<transcript>: Which is going to stream into another Lambda function.

01:07:59
<transcript>: We'll call it stream.

01:07:59
<transcript>: handler

01:08:00
<transcript>: Handler.

01:08:03
<transcript>: Function.

01:08:03
<transcript>: i need

01:08:13
<transcript>: I need like a way to just like, signify. This is the function versus the thing. I guess this is what like actual service icons and stuff for.

01:08:15
<transcript>: But you know what.

01:08:15
<transcript>: we're just

01:08:26
<transcript>: We're just we're learning a scalar draw draw here. So this is our stream handler function. Okay, this Lambda function is gonna get in voked on every Dynamo operation, every WriteOut operation.

01:08:26
<transcript>: food

01:08:29
<transcript>: Food. See you later.

01:08:29
<transcript>: enjoy the reflue

01:08:30
<transcript>: Enjoy the reflue.

01:08:30
obelisk59: hi i'm a newbie learning nextjs 13, should I use apollo to fetch data from a cms or use fetch() from server component ?

01:08:37
<transcript>: Greetings from the past. No, that's everything's from the past.

01:08:41
<transcript>: I'm speaking to the future food boob food in the future.

01:08:49
<transcript>: Let's see. Qmk is an open source firmware for keyboards. Oh, I think I've used this.

01:08:59
<transcript>: I think which works a bit like a framework where you make your own firmware. Oh, no, I have it. I'm just used a thing where you when you build a mechanical keyboard and you have to test all the keys. What is that called.

01:08:59
<transcript>: linux

01:09:11
<transcript>: Linux from scratch, but for keyboards, welcome to Shadow Balis. I'm a newbie learning Nicksha 13. Should I use Apollo to fetch data from a CMS or use fetch from server component. I would use fetch.

01:09:11
<transcript>: apollo

01:09:14
<transcript>: Apollo, when you say Apollo, do you mean.

01:09:14
<transcript>: axios

01:09:16
<transcript>: Axios.

01:09:19
<transcript>: Should I use a Polo to fetch data from a CNN.

01:09:19
<transcript>: yeah i would

01:09:24
itsboek: Almost 1/10th to our 1:1 Adam I hope you’re ready

01:09:26
<transcript>: Yeah, I would use this fetch. I would just use the next JS fetch that they've like, overridden.

01:09:26
<transcript>: thank you for

01:09:28
<transcript>: Thank you for Follower Donna.

01:09:29
<transcript>: donnado

01:09:30
<transcript>: Donnado.

01:09:30
<transcript>: ardona

01:09:31
<transcript>: Ardona.

01:09:40
obelisk59: ty !

01:09:42
<transcript>: Almost 110 to our onetoone atom. Oh, I am ready. It's Boak one 10th of the way there. Keep working on it.

01:09:42
<transcript>: keep

01:09:44
<transcript>: Keep working can't wait.

01:09:44
<transcript>: newbie learning

01:09:46
<transcript>: Newbie learning Next year. 13.

01:09:46
<transcript>: yeah yeah

01:09:48
<transcript>: Yeah, yeah, so.

01:10:05
<transcript>: I just realized I've put out three YouTube videos. Two of them were about next JS 13. So I may be now looked at as someone who knows things about next year 13. I do know a few things, but that's not really when I have a lot of knowledge in so it's interesting. By the way, if you're watching this stream, I have a YouTube channel.

01:10:05
<transcript>: there's three videos

01:10:11
<transcript>: There's three videos on it, but I'd love if you gave me a follow, I'm gonna make a video about this very thing that we're talking about, which is serverless.

01:10:11
<transcript>: limits

01:10:14
<transcript>: Limits pushing it to the limit.

01:10:16
<transcript>: Okay.

01:10:16
<transcript>: stream handle

01:10:18
stroopwafel26: 100 viewers exactly!

01:10:23
obelisk59: I will check your ytb channel

01:10:23
<transcript>: Stream handler function here is going to do a bunch of things. But for the specific case, we're going to see that there was an insert.

01:10:31
<transcript>: An insert of a new beat. Okay, we're gonna have to think about our Dynamo schema as well.

01:10:33
<transcript>: Okay.

01:10:33
<transcript>: the stream handle

01:10:38
<transcript>: The stream handler function is going to write to the timelines table.

01:10:40
<transcript>: Okay.

01:10:43
<transcript>: So like this.

01:10:47
<transcript>: That's going to be a.

01:10:53
<transcript>: Also a bunch of put item calls, I guess probably in batch.

01:10:56
itsboek: Is the song push it to the limit royalty free? It might be worth the copyright strike

01:10:57
<transcript>: Okay.

01:11:06
<transcript>: And then like subsequent fetches like queries in your graphical API, where you're querying your timeline, they'll be hitting that timeline. Stable.

01:11:10
<transcript>: Okay, this is the main flow.

01:11:14
<transcript>: For inserting new beats.

01:11:19
<transcript>: It sounds like a musical thing. I got a I gotta get around that.

01:11:23
<transcript>: But bitter won't be confused.

01:11:23
<transcript>: bitter

01:11:24
<transcript>: Bitter.

01:11:24
<transcript>: doesn't

01:11:28
<transcript>: Doesn't sound like anything else. Just sounds like the word bitter.

01:11:31
<transcript>: Okay, stream.

01:11:34
<transcript>: Put item.

01:11:42
<transcript>: All right, so let's think about this. These are all of the services of oh, no, no. There's another one.

01:11:44
jamdotexe: Bitter sounds like beer

01:11:45
<transcript>: So let's see secrets.

01:11:45
<transcript>: manager

01:11:47
<transcript>: Manager.

01:11:53
<transcript>: Secrets.

01:11:55
<transcript>: Manager.

01:12:04
<transcript>: Okay secrets managers is going to have a shared secret for decoding for verifying the jot token.

01:12:10
<transcript>: So this thing is gonna have to call secrets manager.

01:12:12
<transcript>: Let's see.

01:12:12
<transcript>: will

01:12:18
<transcript>: Will the stream handler function also have to make any secrets manager calls.

01:12:23
<transcript>: Can I just add text to an arrow? That'd be cool.

01:12:23
<transcript>: get

01:12:26
<transcript>: Get secret value.

01:12:28
<transcript>: That would be super cool.

01:12:28
<transcript>: wish

01:12:31
<transcript>: Wish I knew Excel draw really well.

01:12:35
<transcript>: Okay. We're just going to leave it like this.

01:12:36
bausmeier: Is "jot" the pronounciation of JWT?

01:12:37
<transcript>: Okay.

01:12:37
<transcript>: let's see

01:12:44
<transcript>: Let's see. Just stream handler. No stream handler won't have to interact with Secrets manager at all. That's good.

01:12:44
<transcript>: this

01:12:49
<transcript>: This is the thing that's gonna be super high volume. This one is gonna get hit.

01:12:49
<transcript>: a lot

01:12:50
<transcript>: A lot.

01:12:59
<transcript>: Let's see 100 viewers. Exactly. Well, that was a hundred. Now there's 102, which is slightly less exciting.

01:13:06
<transcript>: Oh, well, thank you so much for checking. My YouTube channel is the song. Oh, my word. I'm not listening to music. What are we doing? People.

01:13:06
<transcript>: what are we doing

01:13:09
<transcript>: What are we doing? What are we doing.

01:13:16
<transcript>: Is the song Push it to the limit role to free it might be worth the Copyright strike.

01:13:26
<transcript>: Is John? The pronunciation of JWT. That's how I pronounce it. I could be wrong. I pronounce a lot of things wrong, so don't take my word for it.

01:13:29
<transcript>: Okay.

01:13:29
<transcript>: this i think

01:13:33
<transcript>: This, I think is all of the oh, oh, wait, let's think about this.

01:13:33
<transcript>: there are

01:13:38
<transcript>: There are stream limits. While I have to think about I'm not sure what the quotas on streams. We'll look at that.

01:13:44
<transcript>: There's also okay, so put item do we need invent bridge for anything.

01:13:44
<transcript>: we

01:13:46
schrew: I've always pronounced JWT, "JW I hate this T"

01:13:47
<transcript>: We will I guess once we start talking about.

01:13:54
<transcript>: Once we start talking about the I'm gonna move this up here just for space reasons.

01:14:03
<transcript>: We will need.

01:14:08
<transcript>: Event bridge for probably for the load testing infrastructure.

01:14:08
<transcript>: we'll

01:14:12
<transcript>: We'll just have a bunch of Crons. I don't know. We'll figure it out.

01:14:20
<transcript>: So this is the main API architecture. Just thinking about Beat specifically not thinking about rebates.

01:14:20
<transcript>: or

01:14:22
<transcript>: Or.

01:14:22
<transcript>: quote be

01:14:22
stroopwafel26: I always say "Jason's web token"

01:14:28
<transcript>: Quote, beats or likes or follows. All of that stuff is basically the same.

01:14:31
<transcript>: If you follow, let's say you do a follow mutation.

01:14:31
<transcript>: that's gonna

01:14:35
<transcript>: That's gonna also call the authorizer, then it's gonna do a.

01:14:35
<transcript>: put

01:14:38
<transcript>: Put item. We'll just have like a follow record.

01:14:38
<transcript>: in

01:14:42
<transcript>: In the same table. This is really like a single table.

01:14:42
<transcript>: that

01:14:47
<transcript>: That'll stream into our stream handler, which will then.

01:14:51
<transcript>: Write all of that person's tweets into your timeline.

01:14:53
<transcript>: Okay.

01:14:56
schrew: @stroopwafel26 were you modded recently? Congrats! ModLove

01:14:58
<transcript>: So then I can just say.

01:15:06
lazic88: @stroopwafel26 KEKW

01:15:08
<transcript>: Let's do like this.

01:15:20
stroopwafel26: @Schrew some time ago, thanks! @adamdotdev must trust me a lot

01:15:26
<transcript>: I make like.

01:15:28
<transcript>: This thing.

01:15:28
<transcript>: just be

01:15:30
<transcript>: Just be like behind it.

01:15:39
<transcript>: And I don't want to show whatever's. How do I let's see.

01:15:42
<transcript>: Send backward.

01:15:47
<transcript>: Is there a way to like not show the parts that are behind.

01:15:54
<transcript>: Oh, maybe I can make, like a background on this one. Like a black background.

01:15:54
<transcript>: yeah

01:15:55
<transcript>: Yeah.

01:15:56
stroopwafel26: or it's because I'm always here because I have no other friends MaxLOL

01:16:05
<transcript>: That's white? What.

01:16:09
<transcript>: Phil.

01:16:09
<transcript>: black

01:16:10
<transcript>: Black.

01:16:13
<transcript>: How do I do black.

01:16:13
<transcript>: i believe

01:16:17
<transcript>: I believe zero zero would be black.

01:16:20
<transcript>: Is it inverted.

01:16:23
<transcript>: Yes, did I do.

01:16:23
<transcript>: the edge

01:16:24
<transcript>: The edge. Okay, there we go.

01:16:26
<transcript>: Cool.

01:16:39
<transcript>: Send that to back.

01:16:47
itsboek: LUL  why would you need more than 102 friends?

01:16:52
<transcript>: Okay. So those are just more regions.

01:16:52
<transcript>: this needs

01:16:54
<transcript>: This needs it. Background.

01:16:59
stroopwafel26: ikr

01:17:02
<transcript>: Okay, so there is our multi region. Just get rid of all this.

01:17:06
<transcript>: All right? How we feelin.

01:17:06
<transcript>: like

01:17:09
<transcript>: Like this is too much.

01:17:12
<transcript>: I want to group these things.

01:17:25
<transcript>: Okay.

01:17:25
<transcript>: let's

01:17:28
<transcript>: Let's see, let's see, let's see.

01:17:28
<transcript>: some time ago

01:17:29
<transcript>: Some time ago.

01:17:36
<transcript>: Must trust me a lot. Oh, oh, the modded. Yeah, I would say JSON's web token.

01:17:36
<transcript>: jason

01:17:38
<transcript>: Jason's Web token.

01:17:41
<transcript>: Jw I hate this seat.

01:17:43
<transcript>: You people are funny.

01:17:50
<transcript>: Or is it because I'm always here? Because I have no other friends? It's okay, Stroop. I don't have any other friends, either.

01:17:50
<transcript>: why do you need more

01:17:54
<transcript>: Why do you need more than 102 friends? Exactly. Exactly.

01:17:54
<transcript>: we have all the

01:17:56
<transcript>: We have all the friends we need. Okay.

01:17:56
<transcript>: let's see

01:17:58
<transcript>: Let's see. I wanted to.

01:17:58
<transcript>: move

01:18:01
itsboek: So I have a week off between jobs and I can’t decide if I want to build something or actually relax

01:18:01
<transcript>: Move this up a little bit.

01:18:03
<transcript>: This up a little bit.

01:18:06
<transcript>: And then we're gonna, like.

01:18:06
<transcript>: think

01:18:09
<transcript>: Think this one come out of this guy.

01:18:18
itsboek: What should I do new friends

01:18:23
<transcript>: Okay. So there's our mutation.

01:18:25
stroopwafel26: do you video game?

01:18:25
<transcript>: Okay.

01:18:38
schrew: @itsboek the answer is relax. The answer is always relax

01:18:40
<transcript>: What about missing here? I think it's time to start diagramming our load testing infrastructure.

01:18:43
<transcript>: I think.

01:18:49
<transcript>: So this right here. The Secrets manager has a hard limit.

01:18:54
<transcript>: Hard limit to 5000 /second.

01:18:54
<transcript>: okay

01:18:55
<transcript>: Okay.

01:18:56
itsboek: I used to. Haven’t since last November though 😳

01:18:59
<transcript>: Let's just put that in there.

01:19:06
oskrm: @itsboek be like water

01:19:17
<transcript>: Okay, I cannot request more than 5000 secret values per second. I believe per region.

01:19:17
<transcript>: i believe

01:19:18
<transcript>: I believe.

01:19:21
<transcript>: I think that's periion.

01:19:25
itsboek: akawrDrink akawrDrink akawrDrink

01:19:27
<transcript>: Let's see.

01:19:27
<transcript>: the authorizer

01:19:29
<transcript>: The authorizer function.

01:19:29
<transcript>: as well as

01:19:34
<transcript>: As well as the stream handler function or operating on a 200.

01:19:38
stroopwafel26: r/hydrohomies

01:19:40
<transcript>: Soft.

01:19:40
<transcript>: twenty

01:19:42
<transcript>: Twenty K per second. Limit.

01:19:57
<transcript>: The dynamotal tables have up to 1500 right capacity units.

01:20:03
daglee: Have you tried pocketbase?

01:20:12
<transcript>: Let's talk about the load tester.

01:20:12
<transcript>: so

01:20:15
<transcript>: So this is.

01:20:20
<transcript>: Our actual API architecture.

01:20:28
<transcript>: Now let's how are we gonna build a system that can write or that can send 100 plus.

01:20:28
<transcript>: and bursting up to

01:20:28
oskrm: are you doin the whole twitter thing??

01:20:31
<transcript>: And bursting up to 1500 tweets per second.

01:20:53
<transcript>: And I'm not worried about any of the other.

01:20:58
<transcript>: Pieces of the API like I don't care about.

01:20:58
<transcript>: dms or

01:20:59
<transcript>: Dms or.

01:20:59
<transcript>: hashtag

01:21:01
<transcript>: Hashtags.

01:21:03
<transcript>: Any of that stuff.

01:21:06
<transcript>: I literally just care about tweets.

01:21:06
<transcript>: and

01:21:12
<transcript>: And the adjacent things that are required to support tweets. So like you have to be able to follow people.

01:21:12
<transcript>: to write to

01:21:12
stroopwafel26: I recently started playing Kirby and the forgotton land on Switch, it's wonderfully relaxing fyi

01:21:14
sockthedev: bitter, lol

01:21:16
<transcript>: To write to Timelines because I do care about being able to fetch a timeline.

01:21:16
<transcript>: it's not just about

01:21:18
<transcript>: It's not just about handling.

01:21:28
stroopwafel26: hey sock

01:21:29
<transcript>: If it were just about handling 1500 Tweets inbound into a Dynamo table, I feel like that's like one quota. And we could deal with that. But you got to get a little more complicated than that. You gotta build actually, read your tweets.

01:21:29
<transcript>: into your timeline right

01:21:31
<transcript>: Into your timeline. Right.

01:21:38
sockthedev: @stroopwafel26 👋

01:21:39
<transcript>: Why am I trying to do this in a week for a video. I feel like this is too much, but okay.

01:21:40
oskrm: how will you test it?

01:21:43
<transcript>: Here is our load testing.

01:21:43
<transcript>: load

01:21:46
<transcript>: Load testing architecture.

01:21:49
<transcript>: I wanted to be global. It's got to be able to test for multiple reasons.

01:21:53
vagorge: just copy Designing Data-Intensive Applications book for designing twitter Kappa

01:21:55
<transcript>: That's great question, Oscar. Here's how we'll test it. This is how.

01:21:55
<transcript>: i'm

01:21:59
<transcript>: I'm literally gonna do it right now.

01:21:59
<transcript>: okay

01:22:00
<transcript>: Okay.

01:22:03
<transcript>: I mean it's the it's the basic.

01:22:09
<transcript>: Like most basic explanation of how we'll do, the lowest thing is Lambda functions.

01:22:13
<transcript>: Triggered from EventBridge I believe.

01:22:13
<transcript>: think

01:22:15
<transcript>: Think of the follow.

01:22:15
<transcript>: followthy

01:22:16
<transcript>: Followthy.

01:22:24
<transcript>: Just copy Designing Data intensive applications book for designing Twitter. What is that? The Gorge.

01:22:24
<transcript>: designing

01:22:27
<transcript>: Designing dataintensive applications.

01:22:27
<transcript>: i've never heard of that book

01:22:28
<transcript>: I've never heard of that book.

01:22:31
<transcript>: Okay.

01:22:31
<transcript>: so low test

01:22:34
<transcript>: So low testing is going to be EventBridge.

01:22:37
<transcript>: Wait a minute. Why.

01:22:37
<transcript>: why

01:22:40
<transcript>: Why is this thing.

01:22:40
vagorge: a popular system design book

01:22:43
<transcript>: How do I just write the text in it.

01:22:43
<transcript>: is that in it

01:22:45
<transcript>: Is that in it.

01:22:48
<transcript>: Yeah. Okay.

01:22:50
<transcript>: So.

01:22:52
<transcript>: Event breathe.

01:22:56
<transcript>: Going to just fire off.

01:22:56
<transcript>: run

01:22:59
stroopwafel26: @sockthedev the graphics switch app didn't really work for me on my Intel macbook :( still running hot over here!

01:23:00
<transcript>: Run events like Crazy, I guess.

01:23:00
<transcript>: so

01:23:05
<transcript>: So I do need to know I do need to have some insight into this table.

01:23:07
<transcript>: So when.

01:23:07
<transcript>: users

01:23:09
<transcript>: Users are created.

01:23:09
<transcript>: i don't want to do this

01:23:10
<transcript>: I don't want to do this.

01:23:10
<transcript>: now i

01:23:13
<transcript>: Now I need to be able to fetch users.

01:23:17
<transcript>: Okay. So we'll have an entry point.

01:23:17
sockthedev: ah sorry to hear dude. :(

01:23:23
<transcript>: We'll have an entry point that is a Lambda function that we can invoke.

01:23:28
sockthedev: the intels are 💩

01:23:36
<transcript>: Okay. This is a function.

01:23:36
sockthedev: imma upgrade this xmas

01:23:38
sockthedev: over it

01:23:38
stroopwafel26: utter shit yeah

01:23:41
<transcript>: And this thing is going to have to fetch all the users.

01:23:45
<transcript>: Wait. Do I want to do that in memory? Now.

01:23:45
<transcript>: i want to

01:23:50
stroopwafel26: another 2 years for me, company laptop

01:23:51
<transcript>: I want to fetch all the users. We might have a hundred million users. I don't know. How do we want to do this.

01:24:00
oskrm: how expensive would a 150K/sec read?

01:24:00
stroopwafel26: love my m1 air tho

01:24:04
<transcript>: I also need to create all the fake users. I guess the load testing could start by creating okay. Yeah, yeah. The low testing creates the user and then goes through a whole flow with them. So each Lambda function can do that on its own. Okay.

01:24:04
<transcript>: so

01:24:05
<transcript>: So.

01:24:05
<transcript>: it's a

01:24:09
<transcript>: It's a basic it's a one function represents.

01:24:21
<transcript>: A user's journey, but it's gonna have to be more than one user, because if we only have a thousand concurrent Lambda function invocations that means we only have a thousand users if it was one to one, that one.

01:24:24
<transcript>: Work.

01:24:24
<transcript>: how expensive

01:24:27
<transcript>: How expensive would a read.

01:24:33
<transcript>: So the reads from Dynamo.

01:24:33
<transcript>: i mean

01:24:44
<transcript>: I mean, I did calculations on, like, the whole thing, this whole lot test I want to do. And it's something like seven or $800,000 a month, an infrastructure cost. We're not gonna run it for a month. We're gonna run it for, like.

01:24:44
<transcript>: two minutes

01:24:46
<transcript>: Two minutes.

01:24:46
<transcript>: we're

01:24:51
oskrm: LUL

01:24:53
<transcript>: We're gonna make sure this thing can stand up for maybe five minutes. I don't know. But if you run it for a very short amount of time, it'll be.

01:24:54
vagorge: 💀

01:24:59
<transcript>: Manageable costs. And I've got a lot of ABS credits. So that's the plan.

01:25:00
oskrm: or we go broke

01:25:02
<transcript>: Okay.

01:25:02
<transcript>: so this

01:25:04
bausmeier: Just don't forget to shut it down.

01:25:08
<transcript>: So this is our Lambda function. We're going to let's see. I want to kind of like, write out what this will do.

01:25:15
<transcript>: Is it as simple as just triggering a bunch of Lambda functions? What's orchestrating.

01:25:24
<transcript>: Is it just a Vint bridge? Is it just firing off these Lambda functions.

01:25:29
<transcript>: To keep a steady flow of them, but it needs to be per region.

01:25:32
<transcript>: Oh, this is hard.

01:25:43
<transcript>: So we're gonna deploy a stack. This will be a little testing architecture.

01:25:47
<transcript>: Stack.

01:25:48
bausmeier: There's always a lingering fear when I open my AWS invoice each month.

01:25:57
<transcript>: Floyd into multiple regions because I think no, it's the account wide thousand concurrent Lambda limit.

01:26:00
stroopwafel26: set up billing alerts! :)

01:26:02
<transcript>: And just don't forget to shut it down. Yeah, that's a good idea.

01:26:09
<transcript>: I don't know if billing alerts would be fast enough to catch this thing we're gonna do very quickly.

01:26:14
<transcript>: So I'm just thinking through.

01:26:20
<transcript>: The concurrency limit is an issue. The Lambda concurrency limit is going to be our biggest issue. Okay, okay.

01:26:20
<transcript>: multiple accounts

01:26:21
<transcript>: Multiple accounts.

01:26:24
sockthedev: they are delayed. we should all fathom a guess to how broke adam will be after this

01:26:26
stroopwafel26: no adam, you're just gonna burn through your credits :P

01:26:33
oskrm: multiple orgs?

01:26:34
<transcript>: Oh, in the current region. So it is per reader. Perfect. Okay, so we've got per region up. Easy. Too easy. This whole thing just got so easy. So if this is like a stack, it has an event bridge running a Cron.

01:26:36
<transcript>: Like.

01:26:36
<transcript>: whatever

01:26:37
<transcript>: Whatever.

01:26:40
<transcript>: Every second.

01:26:44
<transcript>: It's as firing one of these Lambda functions off.

01:26:44
<transcript>: okay

01:26:47
<transcript>: Okay. So we're ramping up.

01:26:52
<transcript>: Invoke Lambda up to.

01:26:56
<transcript>: Max. So we have some some Macs that we'll do.

01:27:01
<transcript>: But I guess each of these Lambda functions just gonna run for a short time and then be done.

01:27:01
<transcript>: executing

01:27:08
<transcript>: Executing or do we just have them all run for the full 15 minutes and keep pumping out tweets probably that. Yeah.

01:27:12
oskrm: you would think amazon would support such an experiment

01:27:22
<transcript>: All fathom I guess as to how broke I'll be? I'm gonna burn through my cuts? Oh, I'm for sure gonna burn through the credits? The goal is to not burn too fast past the credits.

01:27:25
<transcript>: We'll start slow.

01:27:31
<transcript>: You would think Amazon support such an experiment? Yeah. Maybe they'll just pay. They'll lose pay for it.

01:27:31
<transcript>: so

01:27:35
<transcript>: So per region, I've got a thousand concurrent Lambda functions.

01:27:35
<transcript>: each

01:27:40
<transcript>: Each Lambda function can just run for the full 15 minutes. Why not.

01:27:42
<transcript>: Is it cheaper to run.

01:27:53
stroopwafel26: as an aws hero, can you just apply for more credits?

01:27:54
<transcript>: 15 minutes Lambda functions or a bunch of short, tiny ones, because you pay per invocation as well. Right. Lambda pricing. I don't know. We'll look into it. But basically, this Lambda function is going to do a series of things.

01:27:54
<transcript>: one

01:27:55
<transcript>: One.

01:27:55
<transcript>: create user

01:27:56
<transcript>: Create user.

01:28:00
<transcript>: Return.

01:28:03
<transcript>: Get jot token.

01:28:03
<transcript>: okay

01:28:06
<transcript>: Okay. So it creates a new user with some fake data.

01:28:09
<transcript>: And then.

01:28:09
<transcript>: it's

01:28:10
<transcript>: It's going to.

01:28:24
<transcript>: Apply for more credits. Is a hero. No, but I do. I got a bunch of credits out of the give you, like, $2,000 in credits a year. And then I had a bunch of credits from other stuff.

01:28:24
<transcript>: i

01:28:37
<transcript>: I've got like $7,000 in credits. Actually, there's a call next Thursday. If I get on this 30 minutes call, it's like an office hours. They really want to get some feedback from heroes. I get $1,000 of credits for going to that call. So it's like a 30 minutes call. Thousands.

01:28:37
<transcript>: i'm gonna take that

01:28:41
<transcript>: I'm gonna take that I might need it to pay for this bill.

01:28:45
<transcript>: I think we've got some like $7,000.07 or 80. So.

01:28:45
<transcript>: i don't know

01:28:51
stroopwafel26: 1000$ for 30 minutes? pretty good rate

01:28:52
<transcript>: I don't know if I run this for just a few minutes. Once we get to peak load, I think we'll be okay. I think we can probably afford.

01:28:55
<transcript>: But we'll do the math just to make sure.

01:28:59
schrew: brb setting up my one on one call so i can get $1000 of credits

01:29:02
<transcript>: Yeah. That's pretty good rate. I'll take it. I'll take the $1,000 for 30 minutes. Call.

01:29:02
<transcript>: create

01:29:05
<transcript>: Create user gitjot token.

01:29:05
<transcript>: step

01:29:07
<transcript>: Step two.

01:29:09
<transcript>: You're going to follow.

01:29:12
<transcript>: Some other users.

01:29:16
<transcript>: Step three.

01:29:18
<transcript>: Get your timeline.

01:29:24
<transcript>: And mind you, after each of these steps, we need to we need to send off some metrics to Cloud watch.

01:29:24
<transcript>: so

01:29:31
<transcript>: So Cloud Watch is a big piece of this thing in order for us to know how our system is working, how many tweets per second is it handling etc.

01:29:31
<transcript>: we're gonna need

01:29:32
<transcript>: We're gonna need.

01:29:32
<transcript>: cloud

01:29:34
<transcript>: Cloud watch.

01:29:37
<transcript>: Custom metrics.

01:29:39
<transcript>: Okay.

01:29:44
<transcript>: So we'll have.

01:29:46
<transcript>: Tweets.

01:29:49
<transcript>: Tweets sorry beats.

01:29:49
<transcript>: per

01:29:50
<transcript>: Per second.

01:29:53
<transcript>: We'll have.

01:29:55
<transcript>: Git timeline.

01:30:01
<transcript>: We'll just call it timeline latency. So how long does it take to load.

01:30:01
<transcript>: your

01:30:06
<transcript>: Your timeline. I want to see that stays consistent.

01:30:06
<transcript>: like

01:30:18
<transcript>: Like that. We've we've designed a system that actually is usable. Like if you were actually people's front end for this thing, you started Loading your tweets. They would actually load in a performant way. So timeline latency is important.

01:30:20
<transcript>: Error rates.

01:30:22
<transcript>: What else.

01:30:26
<transcript>: Need error rates on all the different API endpoints.

01:30:32
<transcript>: I guess lately and error rates on all the different operations would be important.

01:30:35
<transcript>: That's pretty much it right.

01:30:38
<transcript>: Dollars.

01:30:41
<transcript>: Okay.

01:30:41
<transcript>: that's not something

01:30:44
<transcript>: That's not something we can calculate in custom metrics.

01:30:51
<transcript>: So some of that we've got this thing constantly feeding custom metrics at every turn.

01:30:54
<transcript>: So.

01:30:57
<transcript>: We're just gonna draw it like this.

01:31:02
<transcript>: What is that? What is this thing? Oh, I did a I didn't do an arrow.

01:31:09
<transcript>: Okay. And that's we got to think about the the Cloud Watch quotas. Right.

01:31:14
<transcript>: That's another thing I want to think about.

01:31:14
<transcript>: and cloud

01:31:17
<transcript>: And cloud watch cost that's gonna be expensive.

01:31:17
<transcript>: okay

01:31:22
<transcript>: Okay. Get your timeline. Okay. So follow some other users. Get your timeline.

01:31:24
<transcript>: Right.

01:31:27
<transcript>: Beat.

01:31:31
<transcript>: Write some beats.

01:31:33
<transcript>: What else.

01:31:37
<transcript>: Maybe like some beats.

01:31:43
<transcript>: Free beat, some beat.

01:31:44
stroopwafel26: cloudwatch charges per metric, so if every one of those lambda's is gonna push a metric... oooh boy

01:31:48
<transcript>: Whatever else? What are some things that we might want to do to simulate user activity.

01:31:51
<transcript>: Maybe delete some tweets.

01:31:54
<transcript>: I mean beats.

01:31:57
oskrm: view some 20 twets

01:32:00
<transcript>: What else.

01:32:05
daglee: Hmm. Maybe connect the answering machine to an AI and make it do the AWS meeting?

01:32:08
<transcript>: Okay. So we're doing this within this Lambda function invocation.

01:32:10
sockthedev: create some threads

01:32:11
<transcript>: And.

01:32:11
<transcript>: if we can have

01:32:14
<transcript>: If we can have a thousand per region.

01:32:17
srule: Building a bot net?

01:32:17
<transcript>: Do we just have a thousand users in each region.

01:32:22
<transcript>: Cloud watch? Charges.

01:32:22
<transcript>: per metrics

01:32:26
<transcript>: Per metrics. So if every one of those lambdas is going to push a metric, oh, boy.

01:32:31
<transcript>: Maybe connect the answering machine to an AI and make it do the AWS meeting.

01:32:35
<transcript>: Really maximize my return.

01:32:37
<transcript>: Create some threads.

01:32:37
<transcript>: i didn't think about

01:32:39
<transcript>: I didn't think about threaded beats.

01:32:39
<transcript>: building a botnet

01:32:49
<transcript>: Building a botnet. Sort of welcome to Chat Cerule. We're building we're trying to build a Twitter API clone with all serverless tech that can actually handle.

01:32:49
<transcript>: the

01:33:00
<transcript>: The same rates that Twitter.com handles, which I think based on everything I found on the Internet, is something like a steady 100 tweets per second, bursting up to 150 tweets per second.

01:33:07
<transcript>: Sorry, 150,000 tweets per second. So we're have to figure out how to build something to actually test at those levels.

01:33:07
<transcript>: this is

01:33:11
<transcript>: This is what I've got so far. I know. There's probably holes in it.

01:33:15
<transcript>: Let's see, what am I done.

01:33:22
<transcript>: I want that I want to say it's gonna fire off this Lambda function.

01:33:29
snakexix: what is a beat?

01:33:29
sockthedev: this is killer if you can prove it works

01:33:29
<transcript>: Test function.

01:33:35
<transcript>: So could I just have the invocation be really short.

01:33:35
<transcript>: could it just be a bunch

01:33:44
sockthedev: will work wonders to fight the negative sentiment against pure serverless

01:33:44
<transcript>: Could it just be a bunch of tiny little short invocations that all represent a single user session. Is that best? So we want any return repeat users.

01:33:49
<transcript>: These are all questions I have, but this is the basic architecture.

01:33:49
<transcript>: it's gonna have

01:33:50
oskrm: @sockthedev well, it can work, expensive it will be

01:33:53
<transcript>: It's gonna have to interact with secrets manager.

01:34:00
<transcript>: Right.

01:34:00
<transcript>: in order

01:34:02
<transcript>: In order to.

01:34:05
<transcript>: Get the jot token.

01:34:05
<transcript>: no

01:34:06
<transcript>: No.

01:34:06
<transcript>: we'll just have to

01:34:07
stroopwafel26: not as expensive as twitter

01:34:08
<transcript>: We'll just have to expose an API.

01:34:09
sockthedev: costing vs traditional too?

01:34:13
<transcript>: From our actual architecture for creating, like, just for a login, I have to have a login over here.

01:34:16
<transcript>: And.

01:34:16
<transcript>: i'm not

01:34:18
<transcript>: I'm not gonna have any way to like actually.

01:34:18
<transcript>: verify

01:34:29
<transcript>: Verify that people. It's just fake. It's all fake. This is not gonna be an actual login route. It's gonna be like behind the scenes admin route. This thing will have permissions to do things you can't do.

01:34:32
<transcript>: From the public. Api.

01:34:35
<transcript>: Like creating user.

01:34:35
<transcript>: okay

01:34:36
<transcript>: Okay.

01:34:40
<transcript>: Costing versus traditional.

01:34:45
<transcript>: Yeah. I mean, we could try we could try to come up with.

01:34:47
<transcript>: I don't know we could try.

01:34:47
<transcript>: to come up with what

01:34:52
<transcript>: To come up with what it would cost on a traditional architecture or can just look at Twitter's capex.

01:34:52
<transcript>: what is twitt

01:34:54
sockthedev: ping elon, adam replaces all their devs next week

01:34:57
<transcript>: What is Twitter spend on infra and it like all their in house. It a lot.

01:34:57
<transcript>: so

01:34:59
srule: Maybe if this works you can sell this for $44 billion.

01:35:03
<transcript>: So that we can compare it to that and it'll be really good. It'll compare very favorably.

01:35:03
<transcript>: first

01:35:08
spartangtr: lol

01:35:10
<transcript>: First time Chat. Welcome to Chat. Snake. Snakesix. What is a beat? It's like a Tweet. But it's on bitter.

01:35:10
<transcript>: instead

01:35:15
<transcript>: Instead of Twitter it's bitter and you beat instead of you instead of tweeting.

01:35:15
<transcript>: beating

01:35:15
h4msterbo1: herro

01:35:17
<transcript>: Beating.

01:35:17
<transcript>: okay

01:35:18
<transcript>: Okay.

01:35:18
<transcript>: this

01:35:25
<transcript>: This is pretty good. I think this is high level, pretty good. It's gonna have to create a user.

01:35:25
<transcript>: which i

01:35:31
<transcript>: Which I think about what that API will be. That's what we'll start with. We'll actually start building this. Let's build the test function.

01:35:38
<transcript>: And then work through each of the things we want it to be able to do. Thank you for the Follow Vox GPT four.

01:35:53
<transcript>: If I can prove it works, this is killer. I agree, Sock. I'm not sure it's gonna work. I'm sure we're gonna hit some quotas. Then we're gonna be like, we gotta figure out how to build it. How to increase the right quotas.

01:36:12
h4msterbo1: nice headphones

01:36:13
<transcript>: It may. I don't know. This may not be doable in a week. We'll see work wonders to fight the negative Cinnamon gets for your service. That's my hope. It's my hope. It can be expensive. It will be. Yeah, it'll be expensive, but it'll be less than Twitter spins. Not to say that this is like actually going to be a replacement for Twitter. Like, under it's like a very sliver, small sliver of the AP.

01:36:13
<transcript>: api that

01:36:15
<transcript>: Api that we're focused on here.

01:36:15
<transcript>: but

01:36:26
<transcript>: But it's just trying to, like, I really just want to know, how does serverless fare when you get to these kind of levels of scale? Because it's not. I've never seen it. I've never done it.

01:36:35
<transcript>: Ping Elon Adam replaces all their devs next Week. There you go, Sock. We're just gonna swap us. Let's just swap me. We'll trade.

01:36:35
<transcript>: just swap me in

01:36:38
<transcript>: Just swap me in for all of the Twitter. Now.

01:36:38
<transcript>: it's a terrible

01:36:42
<transcript>: It's a terrible idea. Maybe this works. You can sell for 44 billion.

01:36:42
<transcript>: hero

01:36:49
<transcript>: Hero. Hamster, Bull, hamster, bow. Welcome to my chat. And I said, Phones, thanks. Okay.

01:36:49
<transcript>: let's start building

01:36:50
<transcript>: Let's start building.

01:36:50
<transcript>: some stuff

01:36:52
<transcript>: Some stuff.

01:36:52
<transcript>: first thing

01:36:55
<transcript>: First thing we need to be able to create users.

01:37:01
stroopwafel26: @sockthedev make sure you have enough lines of code tho

01:37:02
<transcript>: Create users.

01:37:08
<transcript>: Create profile and get a jot token.

01:37:08
<transcript>: so we just need

01:37:10
<transcript>: So we just need a Lambda function.

01:37:21
<transcript>: This is not really part of the API. The API would have like actual author. You'd handle off outside of the API, and you just authenticate against the API with a shared secret.

01:37:21
<transcript>: so

01:37:23
oskrm: create user would be part of the trip?

01:37:23
<transcript>: So it's not really something.

01:37:28
<transcript>: That I'm thinking about in terms of the API architecture.

01:37:31
<transcript>: Let's see here.

01:37:36
<transcript>: Don't mind me just.

01:37:36
<transcript>: thinking

01:37:38
<transcript>: Thinking and diagramming.

01:37:40
<transcript>: Okay.

01:37:48
<transcript>: So I've already started.

01:37:51
<transcript>: Already started with.

01:37:56
<transcript>: This API stack.

01:38:00
<transcript>: I'm sorry with this API project.

01:38:00
<transcript>: it's turbo

01:38:05
<transcript>: It's turbo repo. I've got GitHub action setup to deploy it.

01:38:05
<transcript>: on comm

01:38:08
<transcript>: On commit we've got.

01:38:08
<transcript>: a single

01:38:11
<transcript>: A single CDK app right now.

01:38:17
<transcript>: And it has a single stack. The API stack. I think we're also going to have.

01:38:21
<transcript>: Load testing, stack.

01:38:21
<transcript>: how i'm gonna

01:38:23
<transcript>: How I'm gonna do this.

01:38:30
<transcript>: Do I want? Yeah, I think the low testing stack just needs to be within the same CDK app.

01:38:33
<transcript>: Because.

01:38:35
oskrm: ew

01:38:39
h4msterbo1: lmao

01:38:44
<transcript>: What is going on? You guys are doing stuff to me. Oh, hair days and deal with it.

01:38:47
<transcript>: That little noise. Just. I'm still not used to it.

01:38:57
<transcript>: Yeah. I think a stack within the same app. The reason I think that so if we look here, this is our.

01:38:57
<transcript>: here's where

01:38:59
<transcript>: Here's where we create our multi region.

01:38:59
<transcript>: architecture

01:39:05
<transcript>: Architecture we've got these are the regions we want to deploy into, and I just create this API stack.

01:39:05
<transcript>: we should

01:39:07
<transcript>: We should call this.

01:39:11
<transcript>: Create API Stack right.

01:39:15
<transcript>: Create API stack.

01:39:17
<transcript>: And then.

01:39:24
<transcript>: This would also be Create API stack.

01:39:27
<transcript>: Okay.

01:39:31
<transcript>: Oh, this one too.

01:39:40
reformedot: How to open a new file at the left in neovim? do u use plugins for that?

01:39:45
<transcript>: Okay.

01:39:45
<transcript>: so

01:39:55
<transcript>: So there if it's prod, I think I'm only doing this as one. I'm not I'm not gonna even have a testing environment so I can probably just do away with the idea of prod that would simply some things.

01:39:55
<transcript>: we

01:39:59
<transcript>: We don't pass in a certificate error in anymore.

01:39:59
<transcript>: wait why

01:40:02
<transcript>: Wait. Why don't we pass in this to bear in I don't remember.

01:40:02
<transcript>: okay

01:40:03
<transcript>: Okay.

01:40:03
<transcript>: we're gonna

01:40:06
<transcript>: We're gonna also then down here.

01:40:06
<transcript>: we're gonna

01:40:07
<transcript>: We're gonna have.

01:40:10
<transcript>: We're gonna have like.

01:40:13
vox_gpt4: these rewards are awesome

01:40:14
<transcript>: Create.

01:40:14
<transcript>: load

01:40:16
<transcript>: Load testing.

01:40:18
<transcript>: Stack.

01:40:22
<transcript>: US east one this kind of thing, right.

01:40:29
<transcript>: It'll be all our different regions that we wanted to deploy the load testing into more regions.

01:40:32
<transcript>: So comps testing regions.

01:40:36
thecatwasnot: Vim had a setting to default it left or right guessing neovim has something similar

01:40:40
<transcript>: I'm gonna I'm gonna actually we're gonna do as many regions as possible.

01:40:40
<transcript>: to

01:40:43
<transcript>: To maximize our.

01:40:43
<transcript>: let's see

01:40:46
<transcript>: Let's see. It'll be this regions.

01:40:51
<transcript>: Let's see. First time. Welcome to Chat Vox.

01:40:55
<transcript>: How to open a new file at the left and Neil them do use plugins for that.

01:40:59
<transcript>: Reform. You mean on the right here where I'm creating new files up here.

01:40:59
<transcript>: i just

01:41:02
<transcript>: I just do a in my inventory.

01:41:05
<transcript>: A. Creates a new.

01:41:05
<transcript>: thing

01:41:06
<transcript>: Thing.

01:41:06
<transcript>: file

01:41:08
<transcript>: File.

01:41:10
<transcript>: Let's see.

01:41:17
<transcript>: Make sure you have enough lines of code. Oh, Yeah.

01:41:18
<transcript>: I just saw that joke.

01:41:18
<transcript>: vim had

01:41:25
<transcript>: Vim had a setting to default that left or right guessing no of M has something similar? Yeah, yeah? I wanted mine on the right.

01:41:25
<transcript>: makes my

01:41:28
<transcript>: Makes my text jump less.

01:41:28
<transcript>: okay

01:41:33
<transcript>: Okay. Testing regions. We want all of the regions here.

01:41:37
<transcript>: We're gonna test it globally.

01:41:42
<transcript>: I need the region IDs. What's this.

01:41:46
<transcript>: I need some, some IDs.

01:41:48
<transcript>: Not what I need.

01:41:50
theruggedbear: great, we can see the browser Kappa

01:41:54
<transcript>: It'll lit. There we go.

01:41:56
<transcript>: There we go.

01:41:56
<transcript>: okay

01:42:00
<transcript>: Okay. We're just gonna do like all of these.

01:42:05
reformedot: You guys recommend coc.nvim or native lsp?

01:42:07
<transcript>: Right. Is there any reason not to do it in every.

01:42:09
<transcript>: Single region.

01:42:12
<transcript>: I can't think of a reason.

01:42:12
<transcript>: not

01:42:13
mattmancodes: Native

01:42:16
<transcript>: Not to do it in every single reason or every single region.

01:42:16
<transcript>: okay so

01:42:21
<transcript>: Okay. So I want to okay. Someone helped me out here. Kneel them.

01:42:21
<transcript>: i

01:42:23
daglee: Oh, I think stable windows landed in nvim-0.9-dev, so you can jump-free windows on the left now.

01:42:28
<transcript>: I want to like in vs. Code. I know how I would do this. I don't know how to select column or whatever.

01:42:32
<transcript>: Let's see or like this would be a macro. Probably.

01:42:32
<transcript>: could do this as a

01:42:32
theruggedbear: !summon Primeagen

01:42:34
<transcript>: Could do this as a macro.

01:42:35
oskrm: @Reformedot nvim lsp

01:42:36
bebenzer: hey! I'd use a macro

01:42:38
<transcript>: So here I'm just gonna do.

01:42:41
<transcript>: Like that.

01:42:41
<transcript>: and then i'm

01:42:42
uberrick: I'm 1/5 of my way to a 1-1 call :D stopped spending my Adam Bucks on rick rolls haha

01:42:44
<transcript>: And then I'm gonna try and just dot, Yes.

01:42:53
reformedot: Okay, I will try to move from coc to native, ty guys

01:42:55
<transcript>: This is one way to do it.

01:43:00
<transcript>: Not totally. Oh, not totally unhappy with it.

01:43:10
<transcript>: Sure there's about a way don't come at me with your better way it's too late. I've committed.

01:43:17
<transcript>: Oh committed.

01:43:17
<transcript>: okay

01:43:18
<transcript>: Okay.

01:43:19
bebenzer: or, select the whole block in visual, and `:norm f<space>D<CR>`I guess

01:43:19
oskrm: it's cool, adam

01:43:21
<transcript>: Now we need to.

01:43:25
<transcript>: Now we need to put some strings around all this.

01:43:28
<transcript>: So I'm gonna do see, I'm gonna do like.

01:43:31
<transcript>: Ins and surround. Okay, here we go.

01:43:33
<transcript>: I'm gonna do.

01:43:35
<transcript>: Ys.

01:43:35
<transcript>: ysa

01:43:37
<transcript>: Ysa.

01:43:40
<transcript>: Are these a single word? No.

01:43:44
<transcript>: We're gonna do YS.

01:43:46
<transcript>: A.

01:43:46
<transcript>: no

01:43:48
<transcript>: No, we're just gonna do control a.

01:43:51
<transcript>: Comma.

01:43:51
<transcript>: oh oh i

01:43:53
<transcript>: Oh, oh, I know we'll do.

01:43:53
<transcript>: we'll

01:43:54
<transcript>: We'll do.

01:43:56
<transcript>: Both.

01:43:56
<transcript>: then we'll

01:43:58
<transcript>: Then we'll do.

01:44:05
<transcript>: I can't repeat that edit, right? That's not gonna work.

01:44:11
<transcript>: I'm trying to do something repeatable without learning how to do macros.

01:44:13
stroopwafel26: THE EYES

01:44:18
<transcript>: Hey, I use a macro.

01:44:18
<transcript>: in vim

01:44:22
<transcript>: In vim. Lsp. Summon prime. Primagin.

01:44:23
noscik: yst,"

01:44:25
<transcript>: Stable windows.

01:44:33
<transcript>: Who's got my answer here? Do I just need to learn how to use macros.

01:44:37
<transcript>: Rick. One fifth of the way to the oneonone call. Alright.

01:44:43
<transcript>: Select the whole block invisible.

01:44:43
<transcript>: and do

01:44:47
<transcript>: And do norm F space DCR. I guess.

01:44:53
<transcript>: Yst comma quote. Okay. Yeah.

01:44:55
<transcript>: That is.

01:44:59
<transcript>: Ys two comma quote.

01:44:59
<transcript>: oh i did

01:45:08
<transcript>: Oh, I did something wrong. Ys two comma quote. There it is. And then period, period, period, Yes.

01:45:10
<transcript>: Thank you very much.

01:45:12
<transcript>: Except.

01:45:12
<transcript>: bummer

01:45:16
<transcript>: Bummer. It's got these like spaces that don't bother.

01:45:18
<transcript>: Oh, man.

01:45:18
<transcript>: i could have

01:45:22
<transcript>: I could have just written them all my now let's sit down.

01:45:26
<transcript>: That's not good.

01:45:36
<transcript>: This is working.

01:45:41
<transcript>: Figured it out, people, this isn't gonna work.

01:45:43
oskrm: visual select them and replace space with nothing

01:45:45
schrew: oh now we're gaming

01:45:49
<transcript>: Oh, man.

01:45:52
bebenzer: and here maybe `:s/ //g`

01:45:58
<transcript>: Of the spaces. That's a bummer. I think like Prettier did that. Maybe.

01:45:59
uberrick: visually select and : then / //g

01:46:00
<transcript>: Oh.

01:46:07
<transcript>: Putting my brain oh, I'm overheating.

01:46:07
<transcript>: i'm overheating people

01:46:09
<transcript>: I'm overheating people.

01:46:10
daglee: <,>s/ //g

01:46:11
<transcript>: Okay.

01:46:16
oskrm: now you doin it on purpose Kappa

01:46:18
<transcript>: This will practice your Vin skills. Okay, we did it. Testing regions. Done.

01:46:18
<transcript>: oh don't

01:46:23
<transcript>: Oh, don't tell me there was a fast way to do it. Visually select them and replace space with nothing.

01:46:30
<transcript>: Well, you know what? We did it. I did it the hard way.

01:46:33
<transcript>: Okay.

01:46:33
<transcript>: there

01:46:36
<transcript>: There's our testing regions, right.

01:46:36
<transcript>: you did it

01:46:38
<transcript>: You did it.

01:46:39
oskrm: you could undo and redo them

01:46:41
<transcript>: I wonder if any of those regions are super expensive.

01:46:41
<transcript>: probably

01:46:42
<transcript>: Probably.

01:46:43
oskrm: just sayin

01:46:49
<transcript>: Some super expensive regions. We might have run it in all of them, but we're gonna do that. I'm doing redo them now. I'm not gonna do that.

01:46:57
sondreal: adamdo8DealWithIt adamdo8DealWithIt

01:46:57
<transcript>: Okay, so we need to make a new stack. I'm just going to create a new stack here. We're gonna call this.

01:47:00
<transcript>: Test stack.

01:47:04
<transcript>: And I'm shortening load test or whatever.

01:47:08
<transcript>: Do we want to call it like.

01:47:11
<transcript>: Yeah, test stack. I don't know.

01:47:16
<transcript>: And then let's see.

01:47:21
<transcript>: I'm a copy.

01:47:24
<transcript>: What did I just do.

01:47:53
<transcript>: Constructs.

01:47:56
<transcript>: We're gonna call this.

01:47:59
<transcript>: Stack crops.

01:48:03
<transcript>: Test.

01:48:05
<transcript>: Props.

01:48:15
<transcript>: That props, that I spell it wrong.

01:48:15
<transcript>: test

01:48:18
<transcript>: Test stack of text.

01:48:33
<transcript>: Extends that crops. I guess I need to do that. Oh, and uses an interface.

01:48:43
<transcript>: Extend stack props.

01:48:49
<transcript>: Oh, we did it.

01:48:49
<transcript>: okay

01:48:55
<transcript>: Okay. This stack is going to have what it's going to have a event bridge.

01:48:58
<transcript>: Cron.

01:49:07
<transcript>: Equals.

01:49:12
<transcript>: Okay, we're gonna have to look up some CDK stuff. Cdk EventBridge.

01:49:15
<transcript>: Prawn. Lambda.

01:49:21
<transcript>: Let's see running a scheduled event.

01:49:24
<transcript>: Did I say CDK? Yeah.

01:49:29
<transcript>: I just wanted the Docs. Yeah. Events module. Here we go.

01:49:42
<transcript>: I think it's time to go to shuffle? We're gonna venture off into this wild world of this.

01:49:42
<transcript>: playlist

01:49:44
<transcript>: Playlist and see what we find.

01:49:48
<transcript>: Aws, events.

01:49:52
<transcript>: Drawn options.

01:49:52
<transcript>: there we go

01:49:54
<transcript>: There we go. That's what I want.

01:49:59
<transcript>: Ecs task what we'll have a Lambda task, but otherwise.

01:50:03
<transcript>: Okay. So just copy all this.

01:50:10
<transcript>: Cluster.

01:50:14
<transcript>: What.

01:50:17
<transcript>: It's gonna land a task.

01:50:21
<transcript>: Ask target equals.

01:50:21
<transcript>: new

01:50:24
<transcript>: New Lambda task.

01:50:30
<transcript>: Is that where is that task? Ets. A. Tobis events, targets.

01:50:35
<transcript>: The file that no.

01:50:43
<transcript>: Guessing on the name actually I can't remember.

01:50:46
<transcript>: From.

01:50:46
<transcript>: aws

01:50:49
<transcript>: Aws, CDK, Lib.

01:50:53
<transcript>: Aws, Events, targets.

01:51:00
<transcript>: Lambda.

01:51:04
<transcript>: Lambda Lambda pass.

01:51:05
<transcript>: And the function.

01:51:07
<transcript>: Oh okay.

01:51:11
<transcript>: That seems like a poor name. I don't know.

01:51:23
<transcript>: What handler? I function, and then some props.

01:51:23
<transcript>: so we're

01:51:27
<transcript>: So we're gonna have a cops, handler.

01:51:30
<transcript>: New node JS.

01:51:30
<transcript>: function

01:51:31
<transcript>: Function.

01:51:34
<transcript>: Test.

01:51:34
<transcript>: test

01:51:36
<transcript>: Test handler.

01:51:43
<transcript>: And then we're gonna say, handler.

01:51:44
<transcript>: Okay.

01:51:49
<transcript>: Okay. And then new rule. Right here.

01:51:52
<transcript>: Let's see let's just do.

01:51:58
<transcript>: Here.

01:52:03
<transcript>: Federal rule.

01:52:03
<transcript>: cron

01:52:05
<transcript>: Cron every hour. Now we want to do.

01:52:08
<transcript>: Second.

01:52:13
<transcript>: What.

01:52:21
<transcript>: Is this? Can I do a second.

01:52:21
<transcript>: run

01:52:23
<transcript>: Run options.

01:52:29
<transcript>: Minute.

01:52:29
<transcript>: second

01:52:31
<transcript>: Second I can't do.

01:52:36
<transcript>: Okay. What minute or second I can't do.

01:52:40
<transcript>: Scheduleing.

01:52:47
<transcript>: Can you not do every second? Oh, you might not be able to do every second.

01:52:49
<transcript>: Uhoh.

01:52:49
<transcript>: can we not do

01:52:51
<transcript>: Can we not do every second.

01:52:54
<transcript>: Event, bridge.

01:53:07
<transcript>: Vintage does not provide second accuracy.

01:53:10
uberrick: lowest schedule is a minute

01:53:13
oskrm: does it accept cron string?

01:53:14
<transcript>: You know what we could do.

01:53:18
<transcript>: What we could do.

01:53:28
<transcript>: We could just fire off. I could just have a CLI. A local CLI that fires off the test.

01:53:28
<transcript>: hand

01:53:30
<transcript>: Handlers.

01:53:35
<transcript>: Have to think about the different regions.

01:53:35
<transcript>: so

01:53:36
<transcript>: So.

01:53:43
<transcript>: I guess we could just run this every minute for now if each of the lambdas just keeps running.

01:53:49
<transcript>: What is minute? A string.

01:53:55
<transcript>: Default is every minute. Oh, so I don't have to do this.

01:53:58
<transcript>: Oh, come on.

01:54:06
<transcript>: Can I do this? No, I have to say.

01:54:08
<transcript>: What's the default.

01:54:09
uberrick: guess you could loop every second within the lambda

01:54:18
<transcript>: What.

01:54:20
<transcript>: I have to do that.

01:54:24
<transcript>: Is it a second.

01:54:25
<transcript>: String.

01:54:35
<transcript>: Oh cross account and cross region target so I could have all my event bridge events flowing from one region. I don't want to do that. Each one's gonna have its own.

01:54:35
<transcript>: which means

01:54:40
<transcript>: Which means to shut this thing off. I have to, like, do a cloud formation update. That's terrifying. But.

01:54:42
<transcript>: Yeah, that's terrifying.

01:54:48
<transcript>: Minutes, hours or days.

01:54:54
<transcript>: Oh, I need to do rate, not Cron. This is dumb.

01:54:54
<transcript>: this

01:54:57
<transcript>: This is this should be rate.

01:54:59
<transcript>: And then.

01:55:07
<transcript>: Duration okay.

01:55:13
<transcript>: Can I do seconds now as prime. Two minutes.

01:55:17
<transcript>: Something like that.

01:55:27
<transcript>: Every minute 1 minute yeah yeah okay so far off our task target.

01:55:31
<transcript>: We'll call this.

01:55:34
<transcript>: Lambda.

01:55:37
<transcript>: Our function, target.

01:55:44
<transcript>: So we've got a handler. We're gonna put some details in on that. We've got the function, target.

01:55:46
<transcript>: And.

01:55:49
<transcript>: What are the options in here.

01:55:53
<transcript>: Thank you for the follow.

01:55:53
<transcript>: fuck

01:55:55
<transcript>: Fuck.

01:55:56
<transcript>: fuckir

01:55:56
<transcript>: fuckiri

01:55:58
<transcript>: Fuckirik here. I.

01:56:00
<transcript>: izat

01:56:01
<transcript>: Izat.

01:56:13
<transcript>: Lois, schedule is a minute. Does it accept Cron string loop every second within a Lambda? Exactly. Rick. We're just each Lambda's just gonna do work. You know, I'm saying it's just gonna be firing off stuff like crazy.

01:56:13
<transcript>: so

01:56:16
<transcript>: So every minute we'll keep firing a new one.

01:56:16
<transcript>: sounds fine

01:56:17
<transcript>: Sounds fine.

01:56:22
<transcript>: In each region, too. So we'll be doing this in like ten regions or whatever.

01:56:22
<transcript>: i

01:56:27
<transcript>: I think this will work. I think we can get up to some pretty absurd levels of.

01:56:29
<transcript>: Requests. I think.

01:56:29
<transcript>: i guess we'll

01:56:31
<transcript>: I guess we'll find out.

01:56:31
<transcript>: how many

01:56:35
<transcript>: How many? Yeah, in a node process. How many Http requests can I make per second.

01:56:41
<transcript>: Http. Request.

01:56:41
<transcript>: per second

01:56:42
<transcript>: Per second.

01:56:46
<transcript>: I want outgoing though it can handle 15 in.

01:56:49
<transcript>: Http.

01:56:53
<transcript>: Outbound requests per second.

01:57:02
<transcript>: How many of them can I make it a second. In a second.

01:57:02
<transcript>: maybe no the answer

01:57:03
<transcript>: Maybe no. The answer.

01:57:10
<transcript>: To quest in a second.

01:57:17
uberrick: probably "depends" :D

01:57:19
<transcript>: Next question is how many from a Lambda function.

01:57:24
<transcript>: Depends. Okay. But it's a lot, I would think. Right.

01:57:26
<transcript>: Probably.

01:57:32
<transcript>: It's. Yeah. I guess it depends on a number of sockets. Like the Lambda function might have limit.

01:57:37
<transcript>: We will find out.

01:57:42
<transcript>: Okay.

01:57:45
<transcript>: Let's see, let's see.

01:57:45
<transcript>: so

01:57:52
<transcript>: So here is our basic we call every minute we fire off a new one of these things.

01:57:56
<transcript>: I gotta think about the kill switch on this whole thing. The kill switch.

01:57:56
<transcript>: is

01:57:58
<transcript>: Is.

01:58:01
oskrm: https://www.serverlessguru.com/blog/scaling-aws-lambda-to-30k-request-per-second

01:58:03
<transcript>: What this? Shut off the API.

01:58:03
<transcript>: if i just

01:58:11
<transcript>: If I just tour if I change the routing the DNS routing on the API that would kill all my expensive infrastructure.

01:58:12
<transcript>: Right.

01:58:20
<transcript>: I could disable the stream on the Dynamo table. I gotta think about this. I need to be able to if it's racking up like a or something.

01:58:20
<transcript>: i need to be

01:58:25
<transcript>: I need to be able to kill it quickly. Or $10,000 a minute. Who knows what it'll be.

01:58:32
<transcript>: 300 requests per second.

01:58:39
<transcript>: That's a Lambda function is that outbound request. This is kind of a weird use case. Most people are concerned with incoming requests.

01:58:43
<transcript>: 10,000 requests per second.

01:58:46
<transcript>: Get endpoint nodes application.

01:58:49
<transcript>: Are they're using Artillery? J meter.

01:58:49
<transcript>: serverless

01:58:52
<transcript>: Serverless? Artillery? What is this.

01:58:57
<transcript>: Not still a thing, I guess serverless, artillery.

01:59:06
<transcript>: Can you hear my son screaming.

01:59:09
vagorge: ye

01:59:10
<transcript>: Bad day. Apparently it's a bad day for my boy.

01:59:13
<transcript>: Let's see.

01:59:15
<transcript>: What is this thing.

01:59:19
<transcript>: Serverless artillery.

01:59:31
<transcript>: If there's something I can like, not have to build the load testing part and I can multiregion blast my API with it. I would rather use that, you know.

01:59:32
oskrm: performance tester

01:59:33
<transcript>: So if this is.

01:59:37
<transcript>: What is this.

01:59:37
<transcript>: use a serverless

01:59:39
<transcript>: Use a serverless framework.

01:59:45
<transcript>: Killing in progress Performance test.

01:59:45
<transcript>: that stop of mine for me

01:59:47
<transcript>: That stop of mine for me.

01:59:56
uberrick: I've used artillery before to load test Lambda's from local so this sounds promising

01:59:57
<transcript>: This is so many so much information.

02:00:00
<transcript>: This is a local thing.

02:00:09
<transcript>: I don't want to run it from just my machine.

02:00:13
<transcript>: Also it uses our Tillery.

02:00:17
<transcript>: I don't know.

02:00:22
<transcript>: I think we can just ride our own. I don't think this is gonna be a big deal.

02:00:29
<transcript>: But it's important that I'm hitting it from global like multiple regions.

02:00:34
<transcript>: Before we started, I've used artillery for low test lambdas from lowcl. So this sounds promising.

02:00:36
<transcript>: What's? Jamie.

02:00:40
<transcript>: If I could avoid the cloud watch work.

02:00:45
<transcript>: Also, Software load, test, functional behavior, and measure performance.

02:00:45
uberrick: although the serverless part seems like it's just tailored to load test lambda

02:00:52
<transcript>: Simulate a heavy load on a server, group, servers, network, or object.

02:00:52
<transcript>: can just

02:00:54
uberrick: not from a lambda ;D

02:00:55
<transcript>: Can just make http requests. Yeah. Okay.

02:00:55
<transcript>: let's just

02:00:56
uberrick: :D *

02:00:59
<transcript>: Let's just see what this article says here. So.

02:01:06
<transcript>: The problem is I don't want to hit from one place, right? Regional soft limits.

02:01:09
caiocodes: Hi Adam! I've seen that you have 15 years in the industry. How do you stay motivated? I've been into it only 1 year (formally), and I have already left for sick leave due to burnout. (sorry for the offtopic)

02:01:10
<transcript>: How many requests Lama can handle with default software supplied.

02:01:16
<transcript>: Oh, so are they just using cloud watch? Like I'm gonna be using cloud watch. Okay.

02:01:21
<transcript>: Increased Regional soft limits.

02:01:25
<transcript>: Oh, they got to 200. That's exactly what I did.

02:01:31
<transcript>: Expecting by the Lemon increased Lambda can process 100.

02:01:41
<transcript>: Throttle Di. We just read this. Once it gets to 3000, it slowly.

02:01:41
<transcript>: starts

02:01:44
<transcript>: Starts ramping up to 200.

02:01:51
<transcript>: So apparently this information was publicly available. I just never heard of that.

02:01:55
<transcript>: Low testing with provision currency.

02:02:00
<transcript>: And this is how it can get around that slow scaling.

02:02:09
<transcript>: So let's see.

02:02:09
<transcript>: no

02:02:11
<transcript>: No throttling.

02:02:19
<transcript>: They generated 9250 requests per second. Lando is able to execute all that request without throttling any of the requests.

02:02:19
<transcript>: some five hundred

02:02:25
<transcript>: Some 500 errors on by API gateways Some of the Lambda's timed out or failed to read from DynamoDB.

02:02:25
<transcript>: okay

02:02:32
<transcript>: Okay. Yeah. See, we're gonna be running into stuff like that. And we're gonna figure out how to figure out where things are breaking down.

02:02:35
<transcript>: Okay.

02:02:42
<transcript>: So that's all about MB. But that is useful because it's very similar to what we're getting ready to do. Right.

02:02:45
<transcript>: Okay.

02:02:48
<transcript>: Hello? Welcome to check.

02:02:48
<transcript>: chow code

02:03:06
<transcript>: Chow codes. I've seen that you have 15 years in the industry. How do you stay motivated? I've been into it only one year and I've already left for Cyclive due to burnout. Oh, no, not off topic at all. I felt burnt out, like a week ago. I said so on. Maybe on this stream, I think. Yeah, yeah. It was when I had.

02:03:06
<transcript>: when i

02:03:08
<transcript>: When I had trashed over.

02:03:15
<transcript>: Like the day before that I felt some severe burnout. I got over it pretty quickly this time, but it happens, I think.

02:03:15
<transcript>: over

02:03:32
<transcript>: Over 15 years. I think the key is for me. I just work on a lot of different things, and I think the more I can not just stick to one thing, the easier it is to get excited about some new things and bounce to that. Obviously. Like, I forgot how to wait. Forgot a way to make that sustainable.

02:03:32
<transcript>: like

02:03:33
<transcript>: Like.

02:03:33
<transcript>: income

02:03:36
oskrm: and got this crazy idea of testing the limits of serverless Kappa

02:03:37
<transcript>: Income wise meeting your financial needs but.

02:03:37
<transcript>: just kind of

02:03:43
<transcript>: Just kind of like doing a lot of different things of technology has helped me stay motivated. I think over this long.

02:03:49
<transcript>: Got this crazy idea of testing the limits of serverless. Yeah, yeah, like that's. One of the ways I stayed motivated.

02:03:49
<transcript>: thank you for the follow

02:03:52
<transcript>: Thank you for the follow checkouts.

02:03:52
<transcript>: several of the parts

02:03:58
<transcript>: Several of the parts apart. Seems like it's just tailored. Load test Lambda. Yeah, they're testing canolam to handle.

02:04:06
<transcript>: Those requests we're more interested in Cannibole system a whole API handle Twitter sized load.

02:04:14
<transcript>: Okay, so we got our regions. Here's what we're gonna do. We're gonna write this function.

02:04:17
<transcript>: So this node JS function right here.

02:04:21
<transcript>: Let's see.

02:04:22
reformedot: how serverless works? no db?

02:04:27
<transcript>: Let's go into our API stack.

02:04:33
<transcript>: And there's some function boilerplate here.

02:04:40
<transcript>: What function? There we go.

02:04:46
<transcript>: Let's do.

02:04:57
<transcript>: It.

02:04:59
<transcript>: Okay.

02:05:03
<transcript>: Main.

02:05:05
<transcript>: Test.

02:05:05
<transcript>: handler

02:05:06
<transcript>: Handler.

02:05:11
<transcript>: Runtime.

02:05:22
<transcript>: I'll see. Do they need to know the table name? No. They'll need an API.

02:05:26
<transcript>: Api. Url, or something.

02:05:35
<transcript>: Which could just be it could just be a known thing. I'm not deploying this and like.

02:05:38
<transcript>: Let's see.

02:05:44
<transcript>: This function will need to be able to.

02:05:52
<transcript>: Do things you can't do from the public API. I don't know if we need this. I don't think we're gonna need to pass anything in it's. Just gonna be a known API URL. I guess I could pass it in.

02:05:56
<transcript>: Like just pass in here.

02:06:00
<transcript>: Api. Bitter. Fyi.

02:06:00
<transcript>: graphql

02:06:02
<transcript>: Graphql like that.

02:06:05
<transcript>: Just hard code. It.

02:06:08
<transcript>: Okay, we're gonna do ESM.

02:06:08
<transcript>: no

02:06:10
<transcript>: Node 16.

02:06:14
<transcript>: Okay, let's write our function.

02:06:17
<transcript>: So it's gonna be.

02:06:20
<transcript>: Test handler.

02:06:28
<transcript>: Let's let's copy some stuff.

02:06:37
<transcript>: Okay.

02:06:53
<transcript>: I think I'll.

02:06:53
<transcript>: result

02:06:54
uberrick: @Reformedot serverless is just a service you can use to run code without having to think about deploying servers and managing the images they use etc

02:06:54
<transcript>: Result.

02:06:54
<transcript>: not

02:06:56
<transcript>: Not that.

02:06:56
<transcript>: okay we'll

02:06:58
<transcript>: Okay. We'll get to all this.

02:07:01
<transcript>: Let's just go ahead and.

02:07:07
<transcript>: What is this event? Bridge.

02:07:09
<transcript>: Handler.

02:07:16
<transcript>: Context. We don't have that.

02:07:16
<transcript>: we're not doing any

02:07:18
<transcript>: We're not doing any secrets.

02:07:21
<transcript>: Right.

02:07:26
<transcript>: No.

02:07:31
uberrick: it's still a container like solution you just don't configure it

02:07:31
<transcript>: Handler is.

02:07:32
reformedot: Thanks Rick! <3

02:07:34
<transcript>: Event.

02:07:34
<transcript>: bridge

02:07:37
<transcript>: Bridge handler.

02:07:40
<transcript>: And then I can just, oh, I can just.

02:07:58
uberrick: so you can hit DB's all the same although usually you want to work with "Serverless" DB's like DynamoDB that operate over http

02:07:59
<transcript>: Type, but I don't know. No, I said EventBridge handler.

02:07:59
<transcript>: what

02:08:01
<transcript>: What? I.

02:08:03
<transcript>: Handler.

02:08:05
<transcript>: Join us. Spell it.

02:08:11
<transcript>: Oh, that's right. What's wrong with this.

02:08:14
<transcript>: Event, bridge handler.

02:08:17
<transcript>: Oh, it needs tights in these types.

02:08:20
<transcript>: Okay.

02:08:23
<transcript>: I don't know what these need to be.

02:08:23
uberrick: ones that require connections like MySQL you have to worry about No. connections and DB proxies etc

02:08:30
<transcript>: Detail. Type extend string and then detail and then result.

02:08:32
<transcript>: So.

02:08:32
<transcript>: the

02:08:33
<transcript>: The.

02:08:33
<transcript>: detail

02:08:38
<transcript>: Detail type extend string. This is going to be like.

02:08:45
<transcript>: It doesn't. I don't I don't care, actually.

02:08:45
<transcript>: this is

02:08:48
<transcript>: This is just an event. Bridge.

02:08:55
<transcript>: I don't it doesn't matter.

02:08:57
<transcript>: Does that satisfy now.

02:09:03
reformedot: Okay okay

02:09:07
<transcript>: Think I need to know the shape of this thing. It's just a Cron, right? In fact, in fact, I don't need to type this thing at all.

02:09:08
reformedot: sounds cool

02:09:17
<transcript>: Yeah. Don't need to tie it. It doesn't matter. The event. I don't even need the event.

02:09:19
<transcript>: I don't need any of this.

02:09:22
<transcript>: Promise is void.

02:09:23
oskrm: infact ts-ignore says hello

02:09:24
<transcript>: Right.

02:09:27
<transcript>: Yeah.

02:09:28
princejoogie: set cmdheight=0

02:09:30
<transcript>: Okay.

02:09:30
<transcript>: cool

02:09:31
<transcript>: Cool.

02:09:31
<transcript>: that was all out of

02:09:32
<transcript>: That was all out of.

02:09:35
<transcript>: Nothing.

02:09:42
<transcript>: Okay, there's our function. This is all nothing.

02:09:42
<transcript>: oh

02:09:44
<transcript>: Oh.

02:09:48
<transcript>: The twelve day. Okay.

02:09:55
<transcript>: Don't need that. We did all that just to write cons handler equals async promise voice.

02:10:01
<transcript>: So I'm gonna hit? Let's see.

02:10:01
<transcript>: serverless

02:10:04
<transcript>: Serverless has a serverless work.

02:10:09
reformedot: Which autocomplete plugin are u using Adam? Or that comes from lsp?

02:10:18
<transcript>: Rick is handling some questions.

02:10:18
<transcript>: ts

02:10:20
<transcript>: Ts. Ignores says Hello.

02:10:28
<transcript>: Which autocomplete plugin are you using Adam? Or that comes from LSP. It'd just be the LSP. I'm just using the TypeScript LSP.

02:10:28
<transcript>: okay so

02:10:36
<transcript>: Okay. So in this handler, we're gonna do all those things. We said we're gonna create a user. We're going to.

02:10:36
<transcript>: follow

02:10:40
<transcript>: Follow some people profiles.

02:10:40
<transcript>: we're going

02:10:41
<transcript>: We're going to.

02:10:41
<transcript>: let's

02:10:43
<transcript>: Let's.

02:10:43
<transcript>: profile

02:10:44
<transcript>: Profile.

02:10:44
<transcript>: and

02:10:46
<transcript>: And then we're going to.

02:10:49
<transcript>: File some profiles. We're going to.

02:10:49
<transcript>: write

02:10:52
<transcript>: Write some beats.

02:10:56
<transcript>: And rebate some beats.

02:10:59
<transcript>: Like some beats.

02:11:02
<transcript>: Etc. Okay.

02:11:05
oskrm: @Reformedot https://github.com/hrsh7th/nvim-cmp

02:11:07
<transcript>: So create a pro file is the most important first step. This is where.

02:11:12
<transcript>: We need like a special API.

02:11:15
<transcript>: Creating a user.

02:11:19
<transcript>: It needs to both create it in the Dynamo table.

02:11:19
<transcript>: at create a prof

02:11:23
<transcript>: At create a profile for them, and it also needs to.

02:11:32
<transcript>: Create a jot token that's gonna be used by the custom authorizer. I want the custom authorizer to really authenticate.

02:11:32
<transcript>: i want it to actually

02:11:44
<transcript>: I want it to actually do the work in that Lambda function of decoding and verifying the jot token. I don't want to just take it because I feel like that's an important like it's actual compute that's happening. And I don't want to gloss over that.

02:11:47
<transcript>: Although.

02:11:48
oskrm: you can use this https://dropmail.me/en/

02:11:50
<transcript>: Although I think for the ball Quan.

02:11:54
<transcript>: Although.

02:11:58
oskrm: to generate throwaway emails

02:12:00
oskrm: it has API

02:12:03
<transcript>: Like off as a weird thing. Like who knows how awesome for Twitter. This is how I would do it if I built a front end, I would use Jot tokens.

02:12:06
<transcript>: Like probably from next up.

02:12:06
<transcript>: or something

02:12:08
<transcript>: Or something. Okay.

02:12:14
<transcript>: Like if we just did Twitter OAuth, and then we created a jot token for that identity.

02:12:14
<transcript>: and then

02:12:21
<transcript>: And then the user has that in their browser, and they're sending that Jot token and the authorization header to our API. That's that's what I want to simulate.

02:12:25
<transcript>: Okay. So to do that.

02:12:27
reformedot: nvim-cmp is better than nvim-lspconfig oskrM?

02:12:30
<transcript>: Test main test handler Lib functions.

02:12:33
<transcript>: It's gonna be test handler.

02:12:33
<transcript>: okay

02:12:35
<transcript>: Okay, it's running on all.

02:12:39
<transcript>: 16 memory size It's fine timeout 15 minutes.

02:12:39
<transcript>: environment

02:12:44
<transcript>: Environment. We've got our API URL, but we're also going to have.

02:12:47
<transcript>: A special.

02:12:52
<transcript>: Let's think about this. It the thing it needs to call has access.

02:12:52
<transcript>: to

02:12:55
<transcript>: To the shared secret.

02:13:01
<transcript>: Or it could just grab the shared secret.

02:13:01
<transcript>: and create

02:13:04
<transcript>: And create the Jot token itself.

02:13:04
<transcript>: yeah

02:13:08
<transcript>: Yeah, let's just do that. This function will create its own jot token.

02:13:08
<transcript>: yeah

02:13:09
oskrm: @Reformedot you use both

02:13:10
<transcript>: Yeah. Why not.

02:13:12
<transcript>: Okay. Okay.

02:13:12
<transcript>: secrets manage

02:13:15
<transcript>: Secrets Manager Client DynamoDB.

02:13:23
<transcript>: This thing's not going to do anything with Dynamo, is it? Oh, yeah. We'll just create the profile ourselves. Cool, easy.

02:13:23
<transcript>: thanks for the follow

02:13:25
<transcript>: Thanks for the follow trujinx.

02:13:32
<transcript>: We're not gonna do any emailing. We're definitely not gonna do any emailing.

02:13:38
<transcript>: Let's see here.

02:13:42
<transcript>: So we need to import the secret.

02:13:47
<transcript>: Off seek.

02:13:52
<transcript>: Secret from let's see, secret.

02:13:58
<transcript>: Oh, not from ECS. Nope, definitely not that.

02:14:01
<transcript>: Oh, I have all this down here.

02:14:01
<transcript>: i can delete

02:14:01
oskrm: @Reformedot you can use this to get a config goin  https://github.com/nvim-lua/kickstart.nvim

02:14:02
<transcript>: I can delete all this.

02:14:15
<transcript>: Yup.

02:14:21
<transcript>: That one comes from Secrets manager.

02:14:23
<transcript>: Secret from secret name.

02:14:27
<transcript>: Off secret.

02:14:30
<transcript>: And the secret name is bitter.

02:14:34
<transcript>: Already I've already put a secret in my account.

02:14:34
<transcript>: but

02:14:37
<transcript>: But is that regional? Yes.

02:14:39
<transcript>: Yes.

02:14:42
<transcript>: Secrets manager.

02:14:49
<transcript>: Open up regret using secrets manager helping I wish I had just done this with.

02:14:56
<transcript>: Am I gonna wish I had done this with parameter store.

02:15:00
<transcript>: We're gonna add this to every region.

02:15:19
fragaverage: !dotfiles

02:15:19
fossabot: Adam's dotfiles live here: https://github.com/adamelmore/dotfiles The repository for bitter is here: https://github.com/adamelmore/bitter

02:15:27
<transcript>: Don't mind me just adding this secret to every region. Replicating into every region. I guess we need to remove the regions that I can't replicate the secret into.

02:15:33
<transcript>: I think there's disabled for my account probably.

02:15:33
<transcript>: so

02:15:35
<transcript>: So all of these regions.

02:15:35
<transcript>: cap

02:15:40
<transcript>: Cape Town, Hong Kong, Jakarta, Milan, and Bahrain.

02:15:40
<transcript>: i need to

02:15:41
reformedot: @oskrM Thanks! :>

02:15:42
<transcript>: I need to remove.

02:15:44
<transcript>: From here.

02:15:46
<transcript>: So.

02:15:51
<transcript>: Let's see AF south one with Cape town.

02:15:54
<transcript>: Vp east, one.

02:15:59
<transcript>: And.

02:15:59
<transcript>: if

02:16:01
<transcript>: If you Southeast, three.

02:16:08
<transcript>: I don't see an AP Southeast three. Yeah, there it is. I'm literally on the line.

02:16:11
vatodeharina: there is no way you need to add every one manually

02:16:12
<transcript>: You use south one.

02:16:15
<transcript>: And Lastly.

02:16:15
<transcript>: bah

02:16:18
<transcript>: Bahrain, Emmy, south one.

02:16:22
<transcript>: So those are all the regions we can test in.

02:16:25
<transcript>: Let's replicate it into all those regions.

02:16:27
<transcript>: Cool, cool.

02:16:27
<transcript>: let's

02:16:29
<transcript>: Let's see.

02:16:40
<transcript>: That oh, there is no way you need to add everyone manually.

02:16:46
<transcript>: Yeah, I think so. I mean, I need to replicate into all these regions.

02:16:50
<transcript>: Because I'm using secrets manager and.

02:16:52
<transcript>: That's how you do it.

02:16:54
<transcript>: Okay.

02:17:01
<transcript>: So let's see. We have our node JS function. We need to import.

02:17:12
<transcript>: Thank you for the follow, not solo.

02:17:13
vatodeharina: but the ui seems very unfriendly lol

02:17:18
<transcript>: I do a lot of things manually around here. Vato the UI seems very infringely. Yeah, definitely.

02:17:18
<transcript>: the a tobis

02:17:21
<transcript>: The A Tobis Console Best avoided.

02:17:21
<transcript>: this is

02:17:25
stroopwafel26: @VatoDeHarina This is just AWS

02:17:31
oskrm: thats AWS

02:17:33
<transcript>: This is why we interact with the AWS. Api is mostly through things like the CDK and the CLI. Okay, so there's our all secrets. I need to let's see do like this.

02:17:38
<transcript>: Need to do like this.

02:17:40
<transcript>: As secret.

02:17:40
<transcript>: er

02:17:42
<transcript>: Erin.

02:17:56
<transcript>: And we need your permission. This is what I love about CDK I can just say off secret grain.

02:17:56
<transcript>: read

02:17:59
<transcript>: Read to our handler.

02:18:02
<transcript>: Lambda function can read.

02:18:04
<transcript>: Read that thing.

02:18:11
<transcript>: What goes in these Lambda function? Props.

02:18:19
<transcript>: Event.

02:18:19
<transcript>: the event

02:18:23
<transcript>: The event to send to the Lambda. This will be the payload to the Lambda function. I don't need it.

02:18:23
<transcript>: don't need it

02:18:25
<transcript>: Don't need it.

02:18:25
<transcript>: right

02:18:27
<transcript>: Right, thanks for the follow, whatever.

02:18:27
<transcript>: it tech

02:18:29
<transcript>: It tech.

02:18:33
<transcript>: Whatever it takes? I want to say whatever it takes there.

02:18:36
<transcript>: But it's whatever it tech.

02:18:39
<transcript>: Okay.

02:18:39
<transcript>: can i just delete

02:18:41
<transcript>: Can I just delete that.

02:18:44
vatodeharina: last time I went to the aws console was like 5 years ago, I can't believe they haven't Make it better

02:18:47
<transcript>: Yeah. Lambda function target. I don't like the way to name that. Like Lambda function.

02:18:47
<transcript>: that's not

02:18:51
<transcript>: That's not clear that that's actually a target for EventBridge.

02:18:56
<transcript>: 1 minute rule.

02:18:59
the_true_jinx: Are you building on AWS because you wanted to learn it, or was there a better trade-off than something like Vercel?

02:19:00
<transcript>: This is the thing. I got a kill.

02:19:00
<transcript>: if it

02:19:04
<transcript>: If it starts exceeding my expectations around cost.

02:19:10
<transcript>: Okay, so that's our test handler, it now has this shared secret.

02:19:10
<transcript>: so

02:19:15
<transcript>: So it can actually do the jot. It can create the jot token itself.

02:19:15
<transcript>: we

02:19:26
<transcript>: We have the API URL. We also need the table because we're just going to create the user directly in the table instead of using the API because again, there wouldn't be an API for creating a user.

02:19:29
<transcript>: That would just be.

02:19:29
<transcript>: like

02:19:32
<transcript>: Like the front end would have its own off.

02:19:32
<transcript>: you would

02:19:36
<transcript>: You would like, oh, off of Twitter or something to log into bidder.

02:19:36
<transcript>: and then you

02:19:41
<transcript>: And then you'd have a jot token. And the jot token is shared. There's a shared secret for that job token.

02:19:43
<transcript>: But I do need the table name.

02:19:46
<transcript>: Oh.

02:19:46
<transcript>: what's the table

02:19:49
<transcript>: What's the table name? We're gonna have to pass it in.

02:19:54
<transcript>: We're gonna pass in the table name.

02:19:56
<transcript>: Oh.

02:19:56
<transcript>: regions

02:19:58
<transcript>: Regions.

02:20:03
<transcript>: Hey.

02:20:08
<transcript>: Actually, I think this is easier.

02:20:12
<transcript>: I think it's just hang on.

02:20:17
<transcript>: Let's go to DynamoDB.

02:20:24
<transcript>: I think.

02:20:26
stroopwafel26: AWS is very much "API first, UI later" and it shows MaxLOL

02:20:27
<transcript>: It's just going to be a fixed name.

02:20:27
<transcript>: bidder table

02:20:29
<transcript>: Bidder Table Yes.

02:20:29
<transcript>: it's

02:20:33
<transcript>: It's the Bitter Table. And we're just working with us east one.

02:20:36
<transcript>: Let's see.

02:20:38
<transcript>: Dinner table.

02:20:43
<transcript>: We're hardcoding a couple of these things, and that's okay.

02:20:50
<transcript>: So now the test handler has everything it needs to create a new user.

02:20:54
<transcript>: Create a Jot token. The API will work with.

02:20:54
<transcript>: pass it in

02:21:08
<transcript>: Pass it in the authorization header and make an API request. Let's do it right after IP. Oh, what is this, averse. Oh, hey, versus rating me favors. Thank you so much for the raid. I literally just said I had to go pee.

02:21:08
<transcript>: so welcome

02:21:10
<transcript>: So welcome all 44 of you.

02:21:14
<transcript>: This is the moment where I take a quick break.

02:21:14
<transcript>: and i'm

02:21:16
aivarsmeijers: hey, hey!

02:21:34
<transcript>: And I'm sorry, I want to answer true drinks your question here. Are you building a welcome chat? By the way, true Jinx, are you building on a Tobis because you wanted to learn it, or was there a better tradeoff than something like yourself? So the point, true Jinx, what we're doing today. And this is a good introduction to the Raiders. We're trying to test the limits of serverless infrastructure. And to do that, we're trying to build a Twitter API clone that can handle.

02:21:34
<transcript>: ten

02:21:36
<transcript>: 100 concurrent.

02:21:36
<transcript>: tweets

02:21:49
<transcript>: Tweets per second with burst up to 1500 tweets per second. You can't do that for you. Just can't. And I don't even know what you would use what API routes on Versaille and store in your plant scale database. Good luck.

02:21:51
<transcript>: This is where you dip into.

02:21:51
<transcript>: lower

02:21:53
<transcript>: Lower level primitives.

02:22:04
<transcript>: We're just trying to test this. I want to see, like, can serverless scale cost effectively to those types of levels that sort of load. Okay, now I'm swimming.

02:22:04
<transcript>: and

02:22:10
<transcript>: And I have to pee. But thank you so much for the raid. Avers. I appreciate it. And I'll be alright back, everybody.

02:27:15
<transcript>: Alright.

02:27:17
<transcript>: Sorry.

02:27:22
<transcript>: There's all the excitement of a big race. And then I just left.

02:27:22
<transcript>: just took off

02:27:23
the_true_jinx: bro that transition is cool

02:27:23
<transcript>: Just took off.

02:27:26
<transcript>: Okay. How we doing.

02:27:34
<transcript>: Am I still making sense? I'm gonna jump straight into it. One question I have for you all is what do you use if you're NodeJS.

02:27:34
<transcript>: you'll

02:27:35
<transcript>: You'll.

02:27:40
<transcript>: Fake data like mock data like if you want to create a bunch of fake.

02:27:43
<transcript>: Usernames and stuff like that.

02:27:43
<transcript>: what do i use

02:27:45
<transcript>: What do I use.

02:27:45
<transcript>: i know there

02:27:50
<transcript>: I know there used to be something like Faker. And then it got like hacked or something. And GitHub. I don't know.

02:27:55
<transcript>: I've used Macharoo, but it's not like a NodeJS thing. I need something in no death.

02:27:57
uberrick: still faker

02:27:57
<transcript>: True Jinx thanks so much.

02:27:57
<transcript>: we built

02:27:57
uberrick: https://www.npmjs.com/package/faker

02:27:58
qtipbluedog: a test file :)

02:28:01
<transcript>: We built out all my Twitch overlays stuff a long time ago.

02:28:03
schrew: https://github.com/faker-js/faker

02:28:12
<transcript>: On stream a few months ago. I just broke. My topic is wrong, so still Faker. Okay. A test file. Well, I want to, like, generate a bunch of fake names and stuff.

02:28:12
<transcript>: top

02:28:14
<transcript>: Topic testing.

02:28:18
<transcript>: Trying let's see we're building.

02:28:18
<transcript>: a load

02:28:20
<transcript>: A Load testing.

02:28:22
<transcript>: Thing.

02:28:22
the_true_jinx: faker is still around. the owner deleted the repo but the community brought that back

02:28:25
<transcript>: The Multi region.

02:28:28
adamdotdev: !topic building a multi-region load testing thing

02:28:29
<transcript>: Multi multiregion.

02:28:29
<transcript>: load testing

02:28:31
<transcript>: Load testing thing.

02:28:31
<transcript>: acry

02:28:36
<transcript>: Acry still around the owner deleted the Repuba with the community, brought that back cool Faker JS okay.

02:28:41
<transcript>: Welcome to Chat. Qtip. Blue Dog. Appreciate you joining us.

02:28:46
<transcript>: Okay, Faker JS. Let's do it.

02:28:48
<transcript>: Let's do it.

02:28:58
<transcript>: So this this function has everything I think it needs. Oh, the table. We don't have permissions to write to the table.

02:29:05
<transcript>: So the problem is this table is a globally.

02:29:05
<transcript>: it's got global

02:29:10
<transcript>: It's got global tables enabled. It's a global DynamoDB table.

02:29:10
<transcript>: and

02:29:12
<transcript>: And.

02:29:12
<transcript>: we can't

02:29:15
uberrick: yeah that faker not the one I linked ^^ :D

02:29:16
<transcript>: We can't do cross region stack import.

02:29:16
<transcript>: so i can't

02:29:17
<transcript>: So I can't.

02:29:23
<transcript>: I don't want to give this Lambda function permission.

02:29:31
<transcript>: To write to our table.

02:29:44
<transcript>: Well, we could do it manually.

02:29:46
<transcript>: Manually.

02:29:48
the_true_jinx: I have used `mockaroo.com` before

02:30:04
<transcript>: I'm policies.

02:30:04
<transcript>: initial

02:30:06
<transcript>: Initial policy.

02:30:16
<transcript>: And what type is that.

02:30:23
<transcript>: Policy statements, array.

02:30:25
<transcript>: Okay.

02:30:33
<transcript>: New statement or something.

02:30:37
<transcript>: A new policy statement.

02:30:43
<transcript>: Actions. Yeah. Okay.

02:30:46
<transcript>: Actions.

02:30:49
<transcript>: Care.

02:30:51
<transcript>: Resources.

02:30:55
<transcript>: This I do care about so the AR in.

02:30:59
<transcript>: For the Table is here.

02:31:14
<transcript>: Where's the. Oh, here we go. Erin. Here.

02:31:18
<transcript>: Can I do this? Wait a minute.

02:31:23
<transcript>: What is this.

02:31:29
<transcript>: Associated.

02:31:40
<transcript>: On that Actions list.

02:31:52
<transcript>: What is it.

02:31:55
<transcript>: To say it's allowed.

02:31:55
<transcript>: that's buddy fault

02:31:56
<transcript>: That's buddy fault.

02:32:00
<transcript>: Why is this? So why is this hurting my brain.

02:32:03
<transcript>: I've not been enough AWS stuff lately.

02:32:08
<transcript>: Why am I struggling to figure out if I can just give my Lambda function this permission.

02:32:16
<transcript>: Yeah, because it's gonna create the role.

02:32:20
<transcript>: It's gonna create the role my CDK.

02:32:20
<transcript>: the

02:32:23
<transcript>: The police that has all the permissions it needs.

02:32:30
<transcript>: To give this Lambda function execution role. The permission is to write to my table. Yeah, yeah. Okay.

02:32:36
<transcript>: Got it. Baker Nappicker. Not the one I linked. Oh, okay. Moving.

02:32:36
<transcript>: distinction

02:32:37
<transcript>: Distinction here.

02:32:42
<transcript>: This Baker.

02:32:47
<transcript>: Cool.

02:32:55
<transcript>: Exactly what I'm looking for.

02:33:08
<transcript>: Let's go ahead and add.

02:33:13
<transcript>: Faker? What is it.

02:33:16
<transcript>: App. Baker, JS.

02:33:18
<transcript>: Baker.

02:33:25
<transcript>: And I don't think I need to do it as a Dev dependency. I think it's kind of like a runtime dependency in this Lambda function. Right.

02:33:30
<transcript>: Missing Pier Oh, I don't need next off.

02:33:35
<transcript>: Before I realized what I was gonna do here.

02:33:37
<transcript>: Okay.

02:33:37
<transcript>: so

02:33:39
<transcript>: So then here we need to.

02:33:39
<transcript>: specify that

02:33:40
<transcript>: Specify that.

02:33:45
<transcript>: At Faker JS.

02:33:45
<transcript>: baker

02:33:52
<transcript>: Baker, we don't want to try. Yes, Bills. We'll try and like, bundle that in. And I don't know if it can be bundled in the SM.

02:33:59
<transcript>: Okay. And initial policy. We're saying that table.

02:34:01
<transcript>: Do any action.

02:34:01
<transcript>: this all feels

02:34:03
<transcript>: This all feels fine.

02:34:12
<transcript>: Okay.

02:34:19
<transcript>: So now in our five function, we can actually create a user in this table. Right.

02:34:21
<transcript>: Off secret we granted.

02:34:21
<transcript>: reads

02:34:24
<transcript>: Reads the off secret.

02:34:39
<transcript>: Function, out, now.

02:34:39
<transcript>: so the first thing

02:34:46
<transcript>: So the first thing we need to do, I actually do need to copy some code from here because we are doing secrets. I was wrong.

02:34:49
<transcript>: Let's see.

02:34:54
<transcript>: Excuse me.

02:34:58
<transcript>: That.

02:35:02
<transcript>: Give us a follow. Amber. Dev.

02:35:08
<transcript>: Where am I? I need to be in the API.

02:35:13
<transcript>: Stream, listener.

02:35:23
<transcript>: Dynamodb stream handler client DynamoDB. So I'm using the SDK version three, but I wonder if I shouldn't.

02:35:27
<transcript>: Purposes use the SDA version two.

02:35:30
<transcript>: Is built in.

02:35:32
<transcript>: Why am I doing that.

02:35:35
oskrm: are you gonna make multiple videos documenting what you doing, or just one video after?

02:35:38
<transcript>: So secret manager here we go I need to.

02:35:42
<transcript>: All the way down to there.

02:35:44
<transcript>: Ink. All that.

02:35:49
<transcript>: And then here. Nope.

02:35:57
<transcript>: Here it's by that end. Okay? Ado? S? Region secret AR? N secret string.

02:36:01
<transcript>: Get secret value command okay.

02:36:06
<transcript>: And then the shape of my secret. It's actually just a string.

02:36:06
<transcript>: it's just

02:36:07
<transcript>: It's just a string.

02:36:13
<transcript>: Let's just rename that secret.

02:36:13
<transcript>: okay

02:36:17
<transcript>: Okay, we have the secret value at this point.

02:36:20
<transcript>: In our Lambda function.

02:36:20
<transcript>: we do it at

02:36:24
<transcript>: We do it at the top level. Top level await. Sees good.

02:36:24
<transcript>: right

02:36:25
<transcript>: Right there.

02:36:29
<transcript>: And then here we have the secret available to us.

02:36:29
<transcript>: we can

02:36:31
<transcript>: We can.

02:36:31
<transcript>: we

02:36:33
<transcript>: We can do our jot token.

02:36:36
<transcript>: How many to use some kind of library for creating the Jot token.

02:36:43
<transcript>: Okay. So.

02:36:45
<transcript>: Here's, our profile.

02:36:51
<transcript>: What's it gonna have in it.

02:36:54
<transcript>: I started to work on the schema.

02:36:58
<transcript>: Hired by something I'll show you in a minute.

02:37:06
<transcript>: So my profile.

02:37:09
<transcript>: All this.

02:37:27
<transcript>: Is a string.

02:37:34
<transcript>: This is also a string.

02:37:37
<transcript>: Also a string.

02:37:47
<transcript>: Also a string birthday would be.

02:37:50
<transcript>: Also a string.

02:37:52
<transcript>: Or string.

02:37:56
<transcript>: Some of these would be optional. We'll get to that beats not a thing.

02:37:58
<transcript>: Follower count. Nothing.

02:38:02
<transcript>: Okay.

02:38:02
<transcript>: what's wrong here

02:38:08
<transcript>: What's wrong here? String alerts are Typed as you use. Oh, oh, because this is actually I'm making the object right, right.

02:38:10
<transcript>: Oh, in fact.

02:38:10
<transcript>: that i have

02:38:13
<transcript>: That I have this generated.

02:38:13
<transcript>: my i've been

02:38:15
<transcript>: My I've been already have this.

02:38:17
<transcript>: I have profile in here.

02:38:17
<transcript>: user

02:38:18
<transcript>: User.

02:38:27
<transcript>: What.

02:38:27
<transcript>: what

02:38:28
<transcript>: What.

02:38:32
<transcript>: Just generating some GraphQL stuff.

02:38:32
<transcript>: i don't actually

02:38:39
<transcript>: I don't actually want to run the CDK simply, but I guess I'm doing. Are you gonna make multiple videos documenting what you're doing, or just one video after.

02:38:43
jbasisbasovs: Hi. First time here. Come from Aivars redirect :) . I wonder how do we integrate Amplify into the new Nextjs13 where everything is ”serverside first” in mind? Is there something specific to think avout or just continue as in previous Nextjs projects? Auth,DB,S3 and so on. :)

02:38:45
<transcript>: I was just gonna make one after and then try, like, well, the things that were learned.

02:38:47
<transcript>: Maybe that's a bad idea.

02:38:47
<transcript>: i thought i would

02:38:52
<transcript>: I thought I would just like hit record and start building it. Then I thought like that would be a nightmare to edit.

02:38:59
<transcript>: I don't know. Do you have any any recommendations.

02:39:02
<transcript>: My profile.

02:39:06
<transcript>: What type I profile.

02:39:11
<transcript>: Is there a My profile? Yeah.

02:39:13
<transcript>: Okay.

02:39:24
<transcript>: Just like this. Let's say this is a I profile.

02:39:27
<transcript>: I'm generated.

02:39:30
<transcript>: Import.

02:39:32
<transcript>: I profile.

02:39:32
<transcript>: from

02:39:34
<transcript>: From.

02:39:36
<transcript>: Generated.

02:39:39
<transcript>: Where is it.

02:39:44
<transcript>: Generated? Yeah.

02:39:44
<transcript>: i need

02:39:46
<transcript>: I need to say.

02:39:49
<transcript>: That.

02:39:53
<transcript>: Say index.

02:39:55
oskrm: idk, but diff explain what you actually did or at least try to

02:40:01
<transcript>: Now.

02:40:04
<transcript>: I need to do that.

02:40:07
<transcript>: What's wrong? Why can't I do that.

02:40:12
<transcript>: Want to import from here.

02:40:16
<transcript>: Oh, I actually have to use, like relative paths. Probably. Yeah.

02:40:26
<transcript>: Here we go. High profile. Okay. So this is an I profile.

02:40:34
<transcript>: I'm going to let me.

02:40:36
<transcript>: Things.

02:40:41
<transcript>: Beats beats count. Okay, so those I can't use eye profile. That's not the right type.

02:40:48
<transcript>: My profile. Maybe I should just define profile input. I think I had it in there at one time.

02:40:51
<transcript>: Let's see.

02:40:54
<transcript>: Profile here.

02:40:57
<transcript>: It is still in the buffer.

02:41:00
<transcript>: Okay, let's just do.

02:41:00
<transcript>: pmpm

02:41:02
oskrm: you could have Partial

02:41:03
<transcript>: Pmpm. Run GraphQL.

02:41:06
<transcript>: In my code generation.

02:41:13
<transcript>: Back in my day before we had TRPC, we use graph field code generation to give us a.

02:41:16
<transcript>: Back in my day.

02:41:19
<transcript>: This is gonna be.

02:41:19
<transcript>: prof

02:41:22
<transcript>: Profile input.

02:41:22
<transcript>: and

02:41:26
<transcript>: And then this is also going to be a profile input. Okay.

02:41:26
<transcript>: so now

02:41:30
<transcript>: So now it's gonna give us a legitimate error that we're missing.

02:41:36
<transcript>: Oh profile input doesn't have an ID.

02:41:39
<transcript>: Good point.

02:41:51
<transcript>: Let's see. First time chat. Welcome to Chat Jay. Basis. First time here come from Average Redirect. I wonder, how do we integrate Amplify into the new Nexus 13, where everything is serverside first in mind.

02:41:55
<transcript>: I.

02:42:06
<transcript>: Don't use Amplify, but I do use all the services that amplify sort of packages up so AppSync I've used Cognito in the past. I try to avoid it these days.

02:42:14
<transcript>: I have not played with Next 13 and React server components from an AWS perspective yet.

02:42:14
<transcript>: i

02:42:21
<transcript>: I probably will very soon because there's some stuff coming for hosting your next JS apps on AWS.

02:42:23
<transcript>: I'll leave it at that.

02:42:29
<transcript>: But I have it yet so I don't I don't really know.

02:42:33
<transcript>: Like they have the client SDK devil I thank you so much for the raid.

02:42:38
delvoid: heyoo buddy

02:42:39
<transcript>: Also welcome Del, Void, and friends.

02:42:45
<transcript>: Yeah, I don't really have good advice yet basis. I just haven't had time to play with it yet.

02:42:51
<transcript>: But I imagine you asked, Is there something to think about or just continuous previous.

02:42:51
<transcript>: it's gonna be

02:42:54
<transcript>: It's gonna be different if you're doing stuff from the server.

02:42:54
<transcript>: like inter

02:42:59
<transcript>: Like interacting with App Sync, for instance, which is the main Amplify API.

02:43:03
<transcript>: And the default to AppSync as opposed to like an API gateway.

02:43:03
<transcript>: it's

02:43:06
<transcript>: It's weird server side like it's just different.

02:43:09
<transcript>: So different libraries for interacting with.

02:43:09
<transcript>: that i

02:43:13
<transcript>: That. I don't know if the ample Fi, the amplify.

02:43:13
<transcript>: like

02:43:19
<transcript>: Like client libraries if they work on the server. I just don't know. I imagine they would, but.

02:43:19
<transcript>: diff

02:43:27
<transcript>: Diff explain what you actually did or at least try to do? Oh, definitely explain what you actually did? Or at least try to? Yeah.

02:43:27
<transcript>: you could have partial

02:43:28
<transcript>: You could have partial.

02:43:31
<transcript>: partialin

02:43:32
<transcript>: Partialin.

02:43:36
<transcript>: We're doing weird stuff today.

02:43:36
<transcript>: so

02:43:39
<transcript>: So profile input actually doesn't have an ID.

02:43:42
<transcript>: But I think I'm gonna add an ID.

02:43:45
<transcript>: Because I think.

02:43:51
<transcript>: Eddie.

02:43:51
<transcript>: id

02:43:52
<transcript>: Id.

02:43:52
<transcript>: this is

02:43:53
delvoid: my brain be fried today...

02:43:56
<transcript>: This is only using this for the type generation which is kind of dumb.

02:43:59
<transcript>: But.

02:44:04
<transcript>: I'm doing.

02:44:10
<transcript>: Okay. Profile, profile input. So now we can say.

02:44:16
<transcript>: Need to import elives.

02:44:22
<transcript>: From Mulid.

02:44:22
<transcript>: thank you so much

02:44:24
<transcript>: Thank you so much for the follow.

02:44:30
<transcript>: Your brain be fine. Be fried today. Yeah, mine's getting that way.

02:44:33
<transcript>: A little early.

02:44:43
<transcript>: My confused on you lid.

02:44:48
<transcript>: You lid? No. Yes.

02:44:52
<transcript>: You mean I can't just import it.

02:44:56
<transcript>: You lid. Oh, it's like barrel import.

02:45:02
<transcript>: I tried to do a little Ysa W.

02:45:02
<transcript>: there it

02:45:02
bigtdesigns: HeyGuys

02:45:04
<transcript>: There it is.

02:45:04
<transcript>: okay

02:45:05
<transcript>: Okay.

02:45:08
<transcript>: So you lid there's a.

02:45:08
<transcript>: id

02:45:09
<transcript>: Id.

02:45:15
<transcript>: And then name is going to be fake.

02:45:18
<transcript>: What is required here.

02:45:22
<transcript>: So let's see. Id is required.

02:45:25
<transcript>: Name is required, that's it.

02:45:32
<transcript>: Id and name. Okay. I will probably generate some let's see what Faker can do for us, so let's import.

02:45:37
<transcript>: Faker.

02:45:41
<transcript>: From.

02:45:45
<transcript>: Faker JS slash figure.

02:45:50
<transcript>: I need to add types.

02:45:57
<transcript>: Pipes. Is it just typesaker. I know the whole thing.

02:46:09
<transcript>: Do I not need them for types? Is this just an LSB issue.

02:46:17
<transcript>: But not find declaration file for fake or JS.

02:46:34
<transcript>: I don't know if I did like that. It'll work.

02:46:37
<transcript>: All it's Faker.

02:46:40
<transcript>: Try it.

02:46:52
<transcript>: So let's do.

02:46:57
<transcript>: What.

02:46:59
<transcript>: Do I need types.

02:47:03
<transcript>: It's written in TypeScript. Why do I need type.

02:47:05
<transcript>: Right.

02:47:21
<transcript>: Let's get music on.

02:47:25
<transcript>: Welcome to Chat. Bigt designs.

02:47:32
<transcript>: Okay. Well, whatever I'm gonna import types Faker, I guess.

02:47:32
<transcript>: feels

02:47:36
<transcript>: Feels bad. But that's what we're doing.

02:47:38
<transcript>: It's deprecated.

02:47:41
<transcript>: Cool.

02:47:48
<transcript>: She don't need it. What.

02:47:55
<transcript>: I don't need it. It says.

02:48:02
<transcript>: Favorite club.

02:48:04
<transcript>: That's funny.

02:48:15
<transcript>: Faker JS. Faker. I don't know why it's complaining about types that bothers me.

02:48:22
<transcript>: I want.

02:48:28
<transcript>: To how do I get the ESM version.

02:48:55
<transcript>: Well, I don't know.

02:49:00
<transcript>: We're just gonna start using it, and I'm gonna just hope.

02:49:00
<transcript>: this

02:49:02
<transcript>: This resolves itself.

02:49:04
<transcript>: Seems logical.

02:49:04
<transcript>: so name

02:49:07
<transcript>: So name is gonna be.

02:49:07
<transcript>: specifically

02:49:09
<transcript>: Specifically Faker.

02:49:13
yaourtgg: hey, can you try to restart your lsp ?

02:49:13
<transcript>: Internet username.

02:49:13
<transcript>: internet

02:49:14
<transcript>: Internet.

02:49:17
<transcript>: That's a username.

02:49:33
<transcript>: Like this should be handle.

02:49:33
<transcript>: you should

02:49:36
<transcript>: You should have a name in a handle, right.

02:49:45
<transcript>: Handle.

02:49:52
<transcript>: Every profile has a handle.

02:49:59
<transcript>: Okay, so you passed in the handle and the name. We gotta make sure that's unique.

02:50:08
<transcript>: Username.

02:50:14
<transcript>: Not username I need types any types people.

02:50:14
<transcript>: what's going on

02:50:15
<transcript>: What's going on.

02:50:20
<transcript>: What is going on? Try and restart your LSP.

02:50:20
<transcript>: yeah

02:50:23
<transcript>: Yeah? Go, Yort.

02:50:23
<transcript>: you read my mind

02:50:24
<transcript>: You read my mind.

02:50:27
<transcript>: That's exactly what I just did.

02:50:27
<transcript>: it's network

02:50:28
<transcript>: It's network.

02:50:28
<transcript>: thing for

02:50:31
<transcript>: Thing for the follow free doom.

02:50:36
<transcript>: Well.

02:50:42
<transcript>: Why, why.

02:50:45
<transcript>: Are the types not working.

02:50:46
looperduper: The stack overflow had. from “faker”

02:50:59
<transcript>: Type definitions.

02:51:06
<transcript>: Someone has had this issue, right? I'm not alone.

02:51:09
looperduper: Import * as faker from “faker”

02:51:12
<transcript>: No less than twelve.

02:51:18
<transcript>: I try yeah, I tried that Looper duper.

02:51:23
<transcript>: From Faker. Yeah, no, this is the new Faker.

02:51:27
<transcript>: The new Faker.

02:51:39
<transcript>: No support anymore for us by for node like 14.

02:51:42
<transcript>: What.

02:51:46
<transcript>: If she needs support legacy software.

02:51:54
<transcript>: I'm not using nodes. What? No to my using.

02:51:57
<transcript>: 16.

02:52:06
<transcript>: Hurting my head Faker.

02:52:06
<transcript>: is there an alternative

02:52:08
<transcript>: Is there an alternative to Faker.

02:52:11
<transcript>: I feel like this is my fault, because.

02:52:11
<transcript>: people would make a bigger

02:52:17
<transcript>: People would make a bigger deal of it if this were common. But like, what's going on? Also, this is my question.

02:52:36
<transcript>: Secretary S, Seven, six.

02:52:52
<transcript>: Is it because I'm not doing a Dev dependency that seems wrong.

02:52:56
<transcript>: I can use it at runtime right.

02:52:56
<transcript>: yeah

02:52:58
<transcript>: Yeah.

02:53:05
<transcript>: Or if you're using common JS.

02:53:05
<transcript>: i

02:53:09
<transcript>: I didn't do required it. I no from thicker. Yeah.

02:53:20
<transcript>: Typescript, Figures First Types of the box. You don't have to Select.

02:53:24
<transcript>: You need to check if these compile options are set correctly. Oh.

02:53:26
<transcript>: Just config.

02:53:31
<transcript>: Yes module Interop true.

02:53:35
<transcript>: Es Module interap.

02:53:35
<transcript>: true

02:53:39
<transcript>: True. You know what? It's not this one. It's.

02:53:44
<transcript>: Just config it's in my function. Cs config so es my.

02:53:44
<transcript>: interaut is

02:53:48
<transcript>: Interaut is true correct module resolution is node.

02:53:53
<transcript>: Maybe I'll set it.

02:53:54
<transcript>: In the other.

02:53:57
<transcript>: Ts config just in case.

02:54:03
<transcript>: Let's do that. Let's say.

02:54:06
<transcript>: Yes module InterOpera.

02:54:08
<transcript>: interoperab

02:54:11
<transcript>: Interoperab and module resolution.

02:54:15
<transcript>: Node.

02:54:25
<transcript>: Come on. No. Aminoamy. No. I mean, stop.

02:54:38
<transcript>: It is using the common JS. See that this common JS index JS. Why is it doing that.

02:54:38
<transcript>: shouldn't be

02:54:41
<transcript>: Shouldn't be using ESM.

02:54:56
<transcript>: Let's see.

02:55:01
<transcript>: Like this function. Live next to this TS? Config.

02:55:05
<transcript>: Got module resolution node.

02:55:05
<transcript>: module

02:55:07
<transcript>: Module Es. Next.

02:55:12
<transcript>: Module interoperap is true.

02:55:15
<transcript>: What is the problem.

02:55:24
fragaverage: capital N on node? dumb suggestion but heck

02:55:34
<transcript>: Yeah, we can try that. That's a great question. I did notice that they capitalized it, and I did not.

02:55:37
<transcript>: Maybe.

02:55:37
yaourtgg: you changed the "types" array, might have something to do

02:55:46
<transcript>: Not.

02:55:46
<transcript>: i

02:55:47
<transcript>: I.

02:55:50
<transcript>: Changed the types array might have something to do.

02:55:55
<transcript>: Oh oh, I did I did I did.

02:55:58
<transcript>: I did.

02:56:00
<transcript>: Me back there.

02:56:03
<transcript>: I did.

02:56:10
<transcript>: Here. Node modules, types, node modules.

02:56:10
<transcript>: node

02:56:12
<transcript>: Node, modules, types.

02:56:17
<transcript>: I don't override it.

02:56:24
<transcript>: Let's just try that.

02:56:39
<transcript>: Declaration file Faker JS.

02:56:39
<transcript>: do i

02:56:39
phpeepee: HeyGuys

02:56:45
<transcript>: Do I need to oh, do I need to put, like, because it's not in a tight oh, oh, is that it.

02:56:45
<transcript>: i'm getting really

02:56:49
<transcript>: I'm getting really excited, but I have no idea if that's it.

02:56:55
<transcript>: Sake or JS.

02:56:55
<transcript>: is this dumb

02:56:57
<transcript>: Is this dumb.

02:57:11
<transcript>: Right average leaves us yet.

02:57:18
alexzam: I have no idea about AWS. What would you suggest I start learning first?

02:57:24
<transcript>: I TypeScript. Oh, my word. I hate it. I hate, I hate, I hate it. I love it. It's the best I have no idea about. Aws. What would you suggest I start learning first.

02:57:28
<transcript>: I would suggest.

02:57:28
<transcript>: the building some

02:57:29
<transcript>: The building some thing.

02:57:29
<transcript>: something you

02:57:36
<transcript>: Something you want to build something you're excited to build something that you want to exist, you know.

02:57:39
<transcript>: I would start there.

02:57:39
<transcript>: some module

02:57:42
phpeepee: Its not only TS. I also have these problems with phpconfig.json all the time

02:57:44
<transcript>: Some modules node yes, I'll do interrupt true. Now type roots.

02:57:45
<transcript>: Let's see.

02:57:47
<transcript>: Node, modules.

02:57:52
<transcript>: Faker JS.

02:57:54
<transcript>: Baker.

02:57:54
<transcript>: okay

02:57:59
<transcript>: Okay, this is dumb, but I'm using pnpm and I wonder.

02:58:02
<transcript>: If is it not.

02:58:02
<transcript>: at the top level

02:58:03
<transcript>: At the top level, isn't it.

02:58:09
<transcript>: Faker JS. Baker, this is so annoying.

02:58:09
<transcript>: so ugly

02:58:10
<transcript>: So ugly.

02:58:10
<transcript>: but

02:58:12
<transcript>: But let's see if it works.

02:58:17
<transcript>: Let's see if it works.

02:58:22
<transcript>: I don't think it will. I need to restart TypeScript.

02:58:28
<transcript>: How do you restart the TypeScript server.

02:58:34
<transcript>: Restart type script.

02:58:35
mattmancodes: Doesn't TS just improve the DX massively? FailFish

02:58:51
<transcript>: Yeah, I love type script. I was just being stupid. I don't hate it, but I do want to restart it.

02:58:55
<transcript>: Not with vs code.

02:59:03
<transcript>: Coming? What.

02:59:06
<transcript>: Anyone know.

02:59:14
<transcript>: A command.

02:59:18
<transcript>: Like there's a TypeScript. Lsp. Right. Mason.

02:59:24
<transcript>: I script language server. This one right here. How do I restart it.

02:59:32
<transcript>: Install it again.

02:59:37
intohimos: LspRestart?

02:59:37
<transcript>: This works.

02:59:39
<transcript>: I don't know what else.

02:59:42
<transcript>: I'll be happier, sad.

02:59:45
<transcript>: I really don't.

02:59:45
amberdev: Is Mason good?

02:59:55
<transcript>: Use Mason. Good. I like it. Welcome to chat.

02:59:55
<transcript>: amber

02:59:56
mattmancodes: Isn't that what :LspRestart does?

02:59:58
alexzam: reopen vim

02:59:59
<transcript>: Amber and also welcome to chat in to Hemos.

03:00:06
alexdev___: Yes Mason is pretty good

03:00:07
<transcript>: Isn't that what LSP restart does? Does it actually restart the TypeScript server or does it just restart.

03:00:07
<transcript>: your like

03:00:13
<transcript>: Your like neovem LSP or something? I don't know. Reopen vim. We try that.

03:00:18
<transcript>: Oh, oh, what's going on here.

03:00:29
<transcript>: I really hope that's not the solution.

03:00:32
<transcript>: If it is.

03:00:32
<transcript>: i'm gonna be a little

03:00:34
<transcript>: I'm gonna be a little sad.

03:00:40
<transcript>: Okay. So we're trying to delete all that because I don't think that's the thing.

03:00:49
fragaverage: cant you just install that package anyway?

03:00:50
<transcript>: But I do wonder if it's the type roots in my higher level TS configure an issue because if we go like wait a minute.

03:01:00
<transcript>: It's gonna be in here, isn't it? No.

03:01:09
intohimos: Usually LspRestart works I think it restarts nvim-lsp aka lsp server that you're using

03:01:10
<transcript>: I.

03:01:10
<transcript>: faker js

03:01:11
amberdev: I saw it. I think i use some other plugin from the same author. Tried some other installer and eventually went back to manual management.

03:01:12
<transcript>: Faker JS.

03:01:17
<transcript>: Why I'm just gonna use something else. Honestly, I do.

03:01:25
<transcript>: Faker alternative. I'm just. I'm not gonna mess with it.

03:01:28
<transcript>: Can you just install that package anyway.

03:01:28
<transcript>: you mean

03:01:31
<transcript>: You mean the the types Baker, the deprecated one.

03:01:31
<transcript>: did it work i don't

03:01:33
<transcript>: Did it work? I don't think it worked.

03:01:33
<transcript>: thank you for

03:01:38
<transcript>: Thank you for the follows the cat was not and Papa Gaboo.

03:01:47
<transcript>: I thought I think I used some other plugin for the same author. Yeah, I think Mason's, the newer one, right.

03:01:51
<transcript>: What is a Faker.

03:01:54
<transcript>: Replacement falseho.

03:01:58
<transcript>: Here's when there was all the Faker stuff.

03:01:58
<transcript>: people coming up

03:02:00
<transcript>: People coming up with.

03:02:03
<transcript>: Baker. Replacement.

03:02:05
rosidae0: hello adam! you may not remember me, i am lon_lol. i changed my username to avoid confusion and stuff and i havent been in stream cause ive been busy

03:02:05
<transcript>: Chance.

03:02:09
<transcript>: Okay.

03:02:09
<transcript>: casual

03:02:10
<transcript>: Casual.

03:02:16
<transcript>: Let's try chance.

03:02:16
<transcript>: what do you say

03:02:18
<transcript>: What do you say.

03:02:23
<transcript>: Hello, Rosio. Rosie day.

03:02:23
<transcript>: i remember me i

03:02:30
<transcript>: I remember me. I am Lala. Oh, of course I changed my username to vocusions stuff and I haven't been in stream because I've been busy. Totally understand.

03:02:42
<transcript>: Welcome back. It's always good to see an old face. An old username but I haven't seen in a while. Welcome back. Of course I remember Lawn. I remember lawn.

03:02:47
<transcript>: Okay. Is this gonna work with that script? That's the question.

03:02:52
<transcript>: Change JS the pool.

03:02:52
<transcript>: fake json

03:02:54
<transcript>: Fake JSON schema drop dream.

03:02:57
<transcript>: Place tokens.

03:03:01
<transcript>: Minimal JSON data Gent. What.

03:03:04
<transcript>: Is this thing.

03:03:04
<transcript>: that's what i want

03:03:06
<transcript>: That's what I want.

03:03:08
<transcript>: Thank you for the follow in the.

03:03:13
<transcript>: Rd her oh, what? I just click node.

03:03:15
<transcript>: Just get lucky.

03:03:15
<transcript>: install

03:03:17
<transcript>: Install chance require chance.

03:03:22
<transcript>: String. So these won't be realistic looking. Maybe.

03:03:26
<transcript>: There's no like chance username or something.

03:03:31
<transcript>: Oh, here we go person.

03:03:38
<transcript>: Name Cool. Okay.

03:03:39
<transcript>: I think the source.

03:03:39
<transcript>: i don't know why

03:03:42
<transcript>: I don't know why the docs are this bad.

03:03:42
<transcript>: i

03:03:45
<transcript>: I mean like the format, what is going? What's going on here? There we go.

03:03:45
<transcript>: that's better

03:03:52
<transcript>: That's better. Okay in the no in node we're gonna NPM install so PMPM remove.

03:03:56
<transcript>: Typesaker PMPM remove.

03:03:56
<transcript>: faker

03:03:59
<transcript>: Faker JS shaker.

03:04:12
<transcript>: Faker import.

03:04:14
<transcript>: Chance.

03:04:16
<transcript>: From James.

03:04:22
<transcript>: Mpm ad.

03:04:22
whoa_dood: beat it faker LUL

03:04:24
<transcript>: Heights chants.

03:04:28
<transcript>: Sometimes I hate no JS.

03:04:29
<transcript>: Sometimes.

03:04:29
<transcript>: okay

03:04:31
<transcript>: Okay chance.

03:04:33
<transcript>: Now we can say.

03:04:33
mattmancodes: LUL

03:04:38
<transcript>: What.

03:04:48
<transcript>: So this one is like this. And then I need to say comp chance equals.

03:04:48
<transcript>: new chan

03:04:49
<transcript>: New chants.

03:04:53
<transcript>: Why not.

03:04:55
<transcript>: So then down here.

03:04:58
<transcript>: Name equals chance.

03:05:03
<transcript>: That name? What name.

03:05:07
<transcript>: Okay.

03:05:09
<transcript>: Handle.

03:05:09
<transcript>: chance

03:05:12
<transcript>: Chance that username.

03:05:21
<transcript>: Need a user username.

03:05:25
<transcript>: Twitter.

03:05:29
<transcript>: A random Twitter handle.

03:05:33
<transcript>: Are they real.

03:05:37
<transcript>: Are they real Twitter handles? Or they fake.

03:05:39
rosidae0: how has streaming been going since i disappeared

03:05:52
<transcript>: House.

03:05:52
<transcript>: streaming

03:05:57
<transcript>: Streaming been going. It's been going good. We I'm only streaming like a couple days a week now.

03:05:57
<transcript>: because

03:06:00
<transcript>: Because I've worked on I've started working on a YouTube channel.

03:06:05
<transcript>: So find me on YouTube. I'm not Dev.

03:06:10
<transcript>: This I'm streaming right here is going to be a YouTube video.

03:06:10
<transcript>: i mean i'm not

03:06:15
<transcript>: I mean, I'm not using this video, but what I'm building is the basis of a YouTube video.

03:06:22
<transcript>: I think we can just do Twitter chance that.

03:06:22
<transcript>: twitter

03:06:23
<transcript>: Twitter.

03:06:25
<transcript>: Okay.

03:06:28
<transcript>: I'm here.

03:06:28
<transcript>: handle

03:06:31
<transcript>: Handle is not sizable.

03:06:31
<transcript>: handle does not

03:06:34
<transcript>: Handle does not exist. Oh, did I not rerun.

03:06:37
easy_game_easy_iife: what is chancejs? :)

03:06:38
<transcript>: Thank you for the follow Raimy.

03:06:44
<transcript>: What is Chance? Js. Welcome to Chat. Easy game.

03:06:44
<transcript>: it is

03:06:47
<transcript>: It is like Faker but the title.

03:06:58
<transcript>: And then even then they don't really work so much as there is a types library that's not deprecated. I don't know. I couldn't get Faker working, so we're using chance.

03:07:03
<transcript>: Okay, chance that Twitter. And then what else.

03:07:03
<transcript>: i think

03:07:08
<transcript>: I think for the follow easy game Easy life came into chat you followed me.

03:07:08
<transcript>: that

03:07:11
<transcript>: That is like a double whammy.

03:07:11
<transcript>: i'm not gonna put anything

03:07:15
<transcript>: I'm not gonna put anything else in here right now. Just an ID and a name.

03:07:24
<transcript>: And a handle. Okay, so that's our profile. We're gonna add it to the database now, to do that.

03:07:27
<transcript>: We're going to.

03:07:30
<transcript>: Oh, what did I do.

03:07:30
<transcript>: uhoh

03:07:32
<transcript>: Uhoh, I need a team mucks expert.

03:07:35
<transcript>: Maybe maybe not.

03:07:38
<transcript>: Doing that.

03:07:48
<transcript>: What? I don't want to nest. I suspended my my teammak session. How do I get it back? Somebody. I accidentally hit this key. This key command. Sometimes.

03:07:48
<transcript>: how do i

03:07:49
<transcript>: How do I get it back.

03:07:52
rainy_day_tomorrow: tmux attach

03:07:52
<transcript>: If I just suspended it.

03:07:55
<transcript>: Because I'm dumb.

03:07:58
<transcript>: T. Max attach? Are you sure.

03:08:01
amberdev: fg?

03:08:03
<transcript>: This session should be nested with care.

03:08:05
<transcript>: Fg.

03:08:08
agiaagiaagia: fg

03:08:08
<transcript>: Ha, thank you so much.

03:08:08
<transcript>: also welcome to

03:08:11
<transcript>: Also welcome to Chat Rainy Day tomorrow.

03:08:14
<transcript>: Okay.

03:08:14
<transcript>: let's see

03:08:15
<transcript>: Let's see.

03:08:15
<transcript>: so we

03:08:17
agiaagiaagia: foreground :)

03:08:18
<transcript>: So we have our test handler.

03:08:26
<transcript>: Oh, yeah? I want to go in here. Stream, listener.

03:08:26
<transcript>: i kind of regret

03:08:30
<transcript>: I kind of regret already that I'm gonna use the client.

03:08:33
<transcript>: Dynamodb.

03:08:33
<transcript>: let's see

03:08:34
<transcript>: Let's see.

03:08:38
<transcript>: I just use the builtin AWS SDK. That's the question.

03:08:51
<transcript>: Public.

03:08:54
<transcript>: Dev public.

03:08:56
<transcript>: Dev.

03:09:01
<transcript>: Get a function here that does stuff with Diamond.

03:09:04
<transcript>: Publisher.

03:09:07
<transcript>: So I use these.

03:09:21
<transcript>: We're gonna have the transact, right? No.

03:09:25
<transcript>: We're gonna have.

03:09:25
<transcript>: put

03:09:27
<transcript>: Put command.

03:09:35
<transcript>: And then let's see. Thank you for the follow. Jean.

03:09:40
<transcript>: That stands for foreground. Thank you so much. How did I put it in the background? How do I keep doing that.

03:09:47
rosidae0: I was your 500th sub :)

03:09:50
<transcript>: Okay. We're gonna have our database.

03:09:52
<transcript>: Here we go.

03:09:52
<transcript>: our dynamo

03:09:55
<transcript>: Our DynamoDB client thing.

03:09:58
<transcript>: Table name.

03:10:00
<transcript>: Client.

03:10:00
<transcript>: and then

03:10:01
<transcript>: And then.

03:10:06
<transcript>: Remove undefined values. Okay, DynamoDB, we got it.

03:10:06
<transcript>: so first thing

03:10:10
<transcript>: So, first thing we're gonna do is we're gonna do? Dynamo, DB.

03:10:11
<transcript>: Sign.

03:10:11
<transcript>: mo db

03:10:17
<transcript>: Mo DB dot send new Put item command.

03:10:19
<transcript>: Able name.

03:10:23
<transcript>: Item.

03:10:28
<transcript>: Just item, right.

03:10:34
<transcript>: What put on command.

03:10:34
<transcript>: is that on it

03:10:35
<transcript>: Is that on it.

03:10:39
mattmancodes: ctrl+z puts nvim into the background

03:10:48
<transcript>: I.

03:10:53
<transcript>: Think with the follow rainy day tomorrow.

03:10:57
<transcript>: You were my 500 sub.

03:10:57
<transcript>: law

03:10:59
<transcript>: Lawn. I didn't know this.

03:11:05
<transcript>: I had 500 subs, I guess. Yeah. One time there were a lot of gifts flying around.

03:11:05
<transcript>: control

03:11:09
<transcript>: Control. Z puts them into the background. That's what it was. Thank you, Matt. Man.

03:11:12
<transcript>: My 500 sub.

03:11:17
<transcript>: That's so cool on I didn't. I didn't remember getting 500 subs.

03:11:33
<transcript>: Her profile is the item. Okay, we're gonna put.

03:11:33
<transcript>: that

03:11:35
<transcript>: That.

03:11:40
<transcript>: I have to say promise. No, these are just automatically.

03:11:40
<transcript>: promised

03:11:41
<transcript>: Promised.

03:11:43
<transcript>: Yes.

03:11:46
<transcript>: So.

03:11:46
<transcript>: oh

03:11:47
<transcript>: Oh.

03:11:51
<transcript>: Wait.

03:11:53
<transcript>: Okay.

03:11:53
<transcript>: so we

03:11:56
abdullahi_dev: hey Adam

03:11:58
abdullahi_dev: whatsapp

03:11:59
<transcript>: So we created our profile. This is the slow. We're just pretending this one handler is just doing.

03:12:06
rainy_day_tomorrow: I'm a few years out of date when it comes to web frontend. What do people like these days?

03:12:06
<transcript>: One user at a time, but really, we're gonna parallelize this and do like a lot of them at once. Right.

03:12:16
<transcript>: Let's see. So we created an ID for this user, a name and a handle. Now we need to create a jot token.

03:12:19
<transcript>: So we added them to the database.

03:12:19
<transcript>: and let's

03:12:21
<transcript>: And let's see.

03:12:27
abdullahi_dev: @rainy_day_tomorrow what do u do ?

03:12:28
<transcript>: Abdulley? What's up.

03:12:30
oskrm: @rainy_day_tomorrow remix, next, svelte, vue

03:12:36
<transcript>: A few years out of date when it comes to Web frontend, what do people like these days.

03:12:36
<transcript>: i think the deal

03:12:36
tayloreddev: jQuery forever LUL

03:12:44
<transcript>: I think the dealacto choice on the front end seems to be react and then because of that next day.

03:12:49
<transcript>: But there's like a kind of a sea change going on right now.

03:12:49
<transcript>: yeah

03:12:51
abdullahi_dev: what do u think of ruby rails? @adamdotdev

03:12:57
<transcript>: Yeah. I guess if you're talking about what do people actually use? Like if you looked at real production data? Jquery's probably pretty far out there.

03:12:57
<transcript>: still

03:13:01
<transcript>: Still but if you're talking about, like, what do the people on Twitter talk about.

03:13:03
<transcript>: Then it's a lot of react.

03:13:14
<transcript>: And yeah, there's some like there's some interesting turns of events. What do I think of Ruby on Rails? So ability. Or. Abdul? Sorry.

03:13:17
<transcript>: My opinions on Ruby on Rails. So.

03:13:21
<transcript>: I'm just gonna take a little break.

03:13:25
<transcript>: I mean not. I'm not leaving. I'm just gonna talk.

03:13:25
<transcript>: for a sec

03:13:33
<transcript>: For a SEC. Take a little break from the screen. In fact, I should look somewhere 20ft away for 20 seconds. They say you should do that every 20 minutes. Right.

03:13:35
<transcript>: So, Ruby on rails.

03:13:37
<transcript>: I think.

03:13:37
<transcript>: a lot

03:13:41
<transcript>: A lot of the full stack. So take like Ruby on Rails. Take layer of.

03:13:46
<transcript>: They're like very like complete back end.

03:13:46
<transcript>: solutions

03:13:48
<transcript>: Solutions. Right.

03:13:48
<transcript>: my

03:13:52
<transcript>: My problem with them is okay, so let's stop with the good things first.

03:13:52
<transcript>: my

03:14:02
oskrm: find a break app to remind you to look away

03:14:02
<transcript>: My the reason I liked them is they end a lot of questions you just can't get answered in JavaScript land these days like there is no framework that matches.

03:14:09
<transcript>: The robustness of Ruby on Rails or Laravel like they allow you to build.

03:14:13
<transcript>: The whole thing, right? The whole back end.

03:14:13
<transcript>: be productive

03:14:14
<transcript>: Be productive.

03:14:14
<transcript>: they're very well

03:14:18
<transcript>: They're very well known and understood. Like there's huge communities.

03:14:34
<transcript>: That doesn't exist in JavaScript land yet JavaScript Lane is so much more fragmented back in is such a weird afterthought in JavaScript land it's like people still think Versell and next JS are about end and I get it.

03:14:34
<transcript>: i get

03:14:42
<transcript>: I get what I get the confusion or not confusion. But be like, no, things should be this simple. Just hit like third party services.

03:14:47
<transcript>: But they don't offer like that whole listic like you want to do email.

03:14:47
<transcript>: here's how you do

03:14:49
<transcript>: Here's how you do email.

03:14:49
<transcript>: opinions

03:15:09
neondactyl: peepoArrive

03:15:09
<transcript>: Opinions on file structure, all that like there is no equivalent in JavaScript Lane yet. I think the closest things like what someone reminds me, Redwood JS, I think, is trying to be that I don't know where it's at today. I think people love it already, so it might be on its way. The thing I don't like about RubyOn Rails or Lareville, not even.

03:15:09
<transcript>: larry ville so much

03:15:19
<transcript>: Larry Ville so much because he's actually got hosting solutions. I think the thing I don't like about Ruby on Rails is the hosting picture. It's like it's been 15 years or whatever, right? Like.

03:15:22
<transcript>: These days I really prefer building.

03:15:22
<transcript>: with

03:15:24
<transcript>: With serverless.

03:15:24
<transcript>: technologies

03:15:28
<transcript>: Technologies. That's what we're doing right here. We're trying to build this, like, Serverless API for handling.

03:15:28
<transcript>: crazy

03:15:32
<transcript>: Crazy volumes of beats per second.

03:15:32
<transcript>: instead of

03:15:34
<transcript>: Instead of Tweets per second.

03:15:34
<transcript>: so i

03:15:38
<transcript>: So I like building with like very modern.

03:15:38
<transcript>: cuttingedge

03:15:44
<transcript>: Cuttingedge cloud Tech, and that all that sounded awful when I said it out loud.

03:15:44
<transcript>: but i like

03:15:46
<transcript>: But I like building with.

03:15:46
<transcript>: these

03:16:00
<transcript>: These serverless API offerings like API, Gateway and AppSync. And that's where, like, a Rails framework breaks down. You can't really like you just the way you deploy Rails is you like, put it on a VM, and that limits your options in terms of.

03:16:05
<transcript>: Like modern infrastructure.

03:16:05
<transcript>: it's

03:16:20
<transcript>: It's like the way we did it 15 years ago that's the thing I keep coming back to is like, if you're building with rails, you're kind of stuck deploying rails the way we've always deployed rails, you can use managed services, but at the end of the day, it's like this big running process, right? That's my problem is like.

03:16:20
<transcript>: people say

03:16:25
<transcript>: People say the term monolith, and I don't like to get into that because I'm not like.

03:16:25
<transcript>: i'm not against

03:16:27
abdullahi_dev: yes that's why I liked them, the robustness and the productivity, faster development.

03:16:34
<transcript>: I'm not against monoliths. I like monorepos. Where all your codes in one place. But I like the infrastructure to be a little more like fine grained.

03:16:34
<transcript>: and rails

03:16:42
<transcript>: And Rails isn't you can't do that, right. And the reason I left Blairva out of that is that Taylor has, like, created options for every way you want to deploy.

03:16:42
amberdev: Cloud-Native WebAssembly workloads?

03:16:46
<transcript>: Laravel. So he's kind of like provided.

03:16:46
<transcript>: modern

03:16:51
<transcript>: Modern deployment methods four layer Vell so you don't have to just be stuck with.

03:16:53
<transcript>: Sticking in on a VM.

03:16:53
<transcript>: that's

03:16:59
apizf: @TayloredDev true xD

03:17:00
<transcript>: That's why I like them. The robustness and the productivity fast Development cloud Native WebAssembly workloads.

03:17:00
<transcript>: yeah

03:17:01
<transcript>: Yeah, so.

03:17:01
<transcript>: now you're talking

03:17:07
<transcript>: Now you're talking like when you say cloudnative, Amber, I think a lot of people use Cloud native.

03:17:07
<transcript>: to mean

03:17:09
<transcript>: To mean.

03:17:09
<transcript>: like i think

03:17:11
<transcript>: Like I think the Kubernetes.

03:17:11
<transcript>: community is kind of

03:17:13
<transcript>: Community is kind of like claimed.

03:17:13
<transcript>: the cloud native

03:17:16
<transcript>: The Cloud native term. Right.

03:17:19
amberdev: True

03:17:20
<transcript>: So when you say Cloud native, do you just mean like stuff.

03:17:20
<transcript>: that's built

03:17:22
<transcript>: That's built to run on the cloud.

03:17:28
amberdev: yeah

03:17:28
cazcik: dhh right now > LUL

03:17:32
<transcript>: Because that's how I like to say it. But then I'm always reminded that like, oh, yeah, that means something to the community. The Kubernetes community.

03:17:34
<transcript>: Dhh. Right now.

03:17:37
intohimos: We're migrating quite a few of our older services to lambdas and it has been great so far.

03:17:38
<transcript>: I did a whole podcast tomorrow. Fm.

03:17:43
<transcript>: Dax and I did a podcast.

03:17:48
<transcript>: Bonding to the DHH.

03:17:48
<transcript>: i think

03:17:48
adamdotdev: tomorrow.fm/4

03:17:51
<transcript>: I think it was Episode Four. I think.

03:17:54
<transcript>: Yeah, renting computers.

03:17:57
<transcript>: So that's kind of my thoughts on like.

03:18:00
cazcik: oh nice, i'll check it out

03:18:02
<transcript>: I don't know people that scoff at the idea of cloud.

03:18:03
abdullahi_dev: now we have adonisjs.com

03:18:05
<transcript>: Yeah.

03:18:10
<transcript>: Adonis. Yeah, that's another one. That's another JavaScript.

03:18:10
<transcript>: or like a

03:18:13
<transcript>: Or like a newcomer trying to be the rails for JavaScript.

03:18:34
<transcript>: Yeah. So that's my thoughts. I don't know some of it. I don't hold too hard. Like I'm not holding a lot of those beliefs too firmly. I think like, a lot of people build very productively with race, and they ship stuff iterate then I could never ship. So who am I to criticize them? I do think like, you build your thing with rails, because that's what you know. And I've seen this.

03:18:34
<transcript>: with startups i've done a lot

03:18:35
oskrm: have u used vercel's micro?

03:18:37
<transcript>: With startups. I've done a lot of consulting for startups. You build your thing with Rails and then.

03:18:37
<transcript>: at some point

03:18:43
<transcript>: At some point good problem you grow into situations where it's not working as your team grows.

03:18:43
<transcript>: as

03:18:51
abdullahi_dev: which one would u take, rails vs laravel?

03:18:57
<transcript>: As your customer base grows and you have to kind of like start breaking things up and writing stuff and new like that. I like to think you can avoid that. Today. In 2022, it's possible to build with one stack from like, your tiny one person.

03:18:57
<transcript>: bootstraps

03:19:04
<transcript>: Bootstraps startup to your a successful company. I think you could stick with one side of technologies. You couldn't do that 15 years ago.

03:19:15
<transcript>: And I hope the developer trains gets better. The only reason people don't do that now, the reason people hate Serverless or the reason people don't adopt Serverless is it's a terrible developer experience and hopefully it gets better.

03:19:15
<transcript>: okay

03:19:16
intohimos: @Abdullahi_Dev neither :D

03:19:16
<transcript>: Okay.

03:19:16
<transcript>: which one would

03:19:20
<transcript>: Which one would I take? Rails versus Lareville Laravel.

03:19:20
<transcript>: because

03:19:21
<transcript>: Because.

03:19:23
<transcript>: The Laribelle community.

03:19:32
<transcript>: Seems fantastic. They're so cool, Taylor's, so cool. Everyone that uses Lareville is so cool. Like Adam Wazen is like, My hero.

03:19:32
<transcript>: he's

03:19:32
amberdev: Laravel for sure

03:19:36
<transcript>: He's in the He's in Delairville. They've just got, like a really great community.

03:19:36
<transcript>: and

03:19:39
<transcript>: And I would choose Larryville.

03:19:43
<transcript>: Have you used Versailles micro.

03:19:43
<transcript>: what's micro

03:19:46
<transcript>: What's micro. I don't even know what that is.

03:19:48
<transcript>: Micro.

03:19:48
<transcript>: okay

03:19:54
<transcript>: Okay, so we've got a put command. Thanks so much for follow azerban.

03:19:58
glamshatterskull: grav is kewl too

03:19:59
<transcript>: Let's see created a profile.

03:19:59
<transcript>: now we

03:20:01
mattmancodes: Rails devs are expensive in the UK. So I always say Rails because you'll end up paying people like me more LUL

03:20:02
oskrm: https://www.npmjs.com/package/micro

03:20:08
<transcript>: Now we need to create a jot token so that we can hit the actual API because the rest of this, the rest of this thing's gonna look a lot like a weight fetch.

03:20:08
<transcript>: let's

03:20:11
<transcript>: Let's get a node fetch.

03:20:18
<transcript>: Windows node gets fetched built in is like node 18 or something.

03:20:25
<transcript>: Is it not 18? I think.

03:20:31
<transcript>: I might be looking for the version two. Docs. I don't know. Am I? Is this version three or version one.

03:20:39
<transcript>: Pmpm Add node, fetch.

03:20:39
uberrick: I started with Laravel and moved away to Node/TS

03:20:42
<transcript>: What happened by playlist? Here.

03:20:43
uberrick: now Rust

03:20:45
<transcript>: Is this actually still playing in the playlist.

03:20:45
<transcript>: or did

03:20:47
<transcript>: Or did it just.

03:20:53
<transcript>: Yeah. Okay. There's just a lot of postal service in here. Wow.

03:20:54
oskrm: node 18

03:20:57
<transcript>: Okay. So we added node, fetch.

03:20:57
<transcript>: i've got

03:21:00
<transcript>: I've got to import, fetch.

03:21:02
uberrick: Laravel is nice for small projects for sure

03:21:04
<transcript>: From node, fetch.

03:21:09
abdullahi_dev: @mattmancodes actually, I was recommended by a friend who gets many offers and relocated to Uk from Africa. I'm following his steps.

03:21:11
<transcript>: Okay. So like a lot of the rest of this is going to look like.

03:21:11
<transcript>: let's see

03:21:13
<transcript>: Let's see. We need to.

03:21:25
<transcript>: Right here. We're gonna say, Const API URL equals process.

03:21:25
<transcript>: in

03:21:27
<transcript>: In API. Url.

03:21:35
<transcript>: So down here we're going to say.

03:21:39
<transcript>: Api. Url. And it's going to be like.

03:21:41
<transcript>: Post.

03:21:43
<transcript>: Method.

03:21:45
<transcript>: Post.

03:21:48
<transcript>: Body JSON. String of.

03:21:48
<transcript>: i

03:21:49
<transcript>: I.

03:21:52
<transcript>: ice is going to look

03:21:52
<transcript>: ice is going to look like a lot of

03:21:54
uberrick: Come on over @Abdullahi_Dev :)

03:21:55
<transcript>: Ice is going to look like a lot of this, but we're gonna have to include.

03:21:55
<transcript>: head

03:21:55
oskrm: @mattmancodes part of the rails propaganda movement, i see

03:21:57
<transcript>: Header.

03:21:59
<transcript>: Authorization.

03:22:09
<transcript>: And that token is going to be our jot token. Right.

03:22:11
oskrm: UK doesn't look so hot rn

03:22:20
<transcript>: Okay.

03:22:23
<transcript>: What's wrong with this.

03:22:23
<transcript>: that

03:22:24
<transcript>: That.

03:22:30
uberrick: everything is more expensive with rails. Even have to build your own servers ;) can't use cloud

03:22:42
<transcript>: We're gonna do, like, follows it's how we're gonna do writing our beats. This is the basis for the whole thing. Everything I'm doing is about load testing, serverless infrastructure. So this is the thing. We're in the thick of it now.

03:22:42
<transcript>: into the th

03:22:43
progi_games: hi, its you make bride and witness games?

03:22:44
<transcript>: Into the thick of it.

03:22:45
abdullahi_dev: @UberRick I do Node/React too.

03:22:49
<transcript>: Note 18. Cool. Can't wait can't wait for that.

03:22:50
mattmancodes: The UK is a mess, but the work for Devs is still there so we're kinda alright at the moment.

03:23:11
rainy_day_tomorrow: Definitely a noticeable slowdown in software engineering jobs everywhere.

03:23:11
<transcript>: Everything's more expensive with Rails. Even have to build your own servers can't use the cloud.

03:23:14
<transcript>: Welcome to Chat Pro G.

03:23:14
<transcript>: it's you

03:23:20
<transcript>: It's you make Bride and Witness Games. What? Sure. No, I think you got the wrong Adam. Dev.

03:23:22
<transcript>: device

03:23:24
<transcript>: Device the UK is a mess.

03:23:24
<transcript>: definitely

03:23:32
<transcript>: Definitely a noticeable slowdown in software engineering jobs. Everywhere. Yeah, I'm afraid. For what's? Coming. I'm a little afraid.

03:23:34
<transcript>: I don't know.

03:23:37
<transcript>: It's like not knowing if worth the very beginning.

03:23:37
<transcript>: of

03:23:38
<transcript>: Of.

03:23:48
<transcript>: This mess, or if this is the thick of it, or if it's the end of it and we should start seeing things level out. I don't know, a little nervous about what this might look like.

03:23:49
abdullahi_dev: @UberRick rails hosting got better. they have hatchbox.io

03:23:51
<transcript>: Okay.

03:23:56
<transcript>: We need to generate a jot token in NodeJS.

03:23:56
<transcript>: so

03:23:58
<transcript>: So node JS.

03:23:58
<transcript>: jot

03:23:58
glamshatterskull: and the twitter business flooded the market

03:24:00
<transcript>: Jot library.

03:24:06
glamshatterskull: with talent

03:24:08
<transcript>: Use this before looks like JSON web token PMPM, and JSON web token.

03:24:08
<transcript>: that's the one

03:24:10
<transcript>: That's the one I want.

03:24:10
<transcript>: they tell me

03:24:11
oskrm: @GlamShatterskull twitter and meta

03:24:12
<transcript>: They tell me if they've used this.

03:24:13
uberrick: haha I was only joking from the recent DHH tweet about moving away from the cloud :D

03:24:14
<transcript>: This is a good one.

03:24:21
<transcript>: Seems like the good one.

03:24:24
techxtalks: everywhere has just announced hiring freezes, its the beginning

03:24:27
<transcript>: Oh, it's written by Alt Zero. Sure.

03:24:44
<transcript>: It's the beginning. Tech talks. That's not good.

03:24:47
<transcript>: Okay.

03:24:47
<transcript>: import

03:24:50
<transcript>: Import. Did I do it? Did I add? Oh, I didn't add it.

03:24:50
<transcript>: import

03:24:53
rainy_day_tomorrow: If 2008 was any indication, this downturn is going to be at least 3-4 more years.

03:24:57
<transcript>: Import J, or Add JSON web token. We're gonna go up here and we're gonna say, Import JSON.

03:24:57
<transcript>: i just call

03:24:59
<transcript>: I just call it Jot. Yeah.

03:24:59
<transcript>: from

03:25:04
<transcript>: From JSON. Web token come on, type, come on types come on.

03:25:07
rainy_day_tomorrow: But, who knows? Maybe this time is different.

03:25:10
abdullahi_dev: if u have been following twitter trend in nextjs, remix. looks like we are going back to php and ruby

03:25:14
<transcript>: You can add Dev, pipes.

03:25:16
<transcript>: On web token.

03:25:18
<transcript>: These.

03:25:18
<transcript>: lots to do that

03:25:23
<transcript>: Lots to do that's. 2022. Why do people not ship types with their libraries? I don't understand.

03:25:27
<transcript>: Okay.

03:25:31
<transcript>: Jot. So how do we do it? We say Jot site.

03:25:31
<transcript>: and i can just

03:25:36
<transcript>: And I can just pass in the secret, and I can pass in a payload. Okay.

03:25:39
<transcript>: Seems pretty straightforward.

03:25:41
<transcript>: So let's see.

03:25:45
abdullahi_dev: people have moved away from SSR and now they want it too bad

03:25:46
<transcript>: Let's do job.

03:25:46
<transcript>: sign

03:25:47
<transcript>: Sign.

03:25:47
<transcript>: jot

03:25:49
<transcript>: Jot sign.

03:25:53
<transcript>: There's our actual payload. And then the secret.

03:25:53
<transcript>: is

03:25:55
<transcript>: Is just called secret.

03:25:57
oskrm: @Abdullahi_Dev following, but people won't give up their J/TS

03:25:58
amberdev: I hope some day to learn RxJS. I like that reactivity idea.

03:25:59
<transcript>: Oh, it's string. We're undefined.

03:25:59
<transcript>: let's see

03:26:00
<transcript>: Let's see.

03:26:00
<transcript>: secret

03:26:02
<transcript>: Secret.

03:26:05
<transcript>: Can be on the find that would be bad.

03:26:08
<transcript>: So let's just say.

03:26:08
<transcript>: if not

03:26:10
<transcript>: If not secret.

03:26:10
<transcript>: road

03:26:13
<transcript>: Road new error.

03:26:15
<transcript>: Is it throat error.

03:26:18
<transcript>: No secret.

03:26:21
<transcript>: Environment variable.

03:26:21
<transcript>: set

03:26:22
<transcript>: Set.

03:26:26
<transcript>: Okay.

03:26:30
<transcript>: Jot sign, and then we need to do our payload.

03:26:30
<transcript>: this is

03:26:32
<transcript>: This is gonna have an ID.

03:26:35
<transcript>: Same handle.

03:26:38
<transcript>: And they also need to put it in there.

03:26:38
<transcript>: oh i guess

03:26:41
<transcript>: Oh, I guess I need to let's see.

03:26:41
<transcript>: oh i

03:26:45
<transcript>: Oh, I just do it's. The profile, it's the profile.

03:26:55
<transcript>: Okay, sign the profile. Now. We have a token. We're passing it to our thing.

03:27:00
<transcript>: Do we use bearer? Thank you for the followup door.

03:27:03
<transcript>: Do we use.

03:27:03
<transcript>: bearer

03:27:05
<transcript>: Bearer. Let's see.

03:27:11
<transcript>: Thank you for the following Web man.

03:27:11
<transcript>: demand

03:27:12
<transcript>: Demand.

03:27:22
<transcript>: Es to the Versaille API same.

03:27:26
<transcript>: I don't know if.

03:27:26
<transcript>: appsync

03:27:27
<transcript>: Appsync.

03:27:27
<transcript>: author

03:27:29
<transcript>: Authorization.

03:27:29
<transcript>: i don't think

03:27:32
<transcript>: I don't think it actually is bearer. I think it's just.

03:27:42
<transcript>: Authorization token.

03:27:42
<transcript>: what's the head

03:27:48
<transcript>: What's the header look like? Here we go. Authorization. Yeah. You just put it in there.

03:27:48
<transcript>: so this

03:27:50
<transcript>: So this is not not this.

03:28:05
<transcript>: Okay. So that should work. Now we should be able to okay, let's just get this working. Let's get it where we're adding items. So I guess this thing right here.

03:28:08
<transcript>: It's not just profile, right.

03:28:08
<transcript>: so it's

03:28:09
<transcript>: So it's gonna be.

03:28:12
<transcript>: Ysa? W.

03:28:14
<transcript>: Gonna be.

03:28:14
<transcript>: data prof

03:28:17
<transcript>: Data profile but also.

03:28:25
<transcript>: We got to add some other stuff. Pk is gonna be ID.

03:28:30
<transcript>: Sk is going to be.

03:28:33
<transcript>: What.

03:28:38
<transcript>: Type.

03:28:42
<transcript>: Going to be user no profile.

03:28:46
rdonadono: will you publish a video on youtube of this project?

03:28:47
<transcript>: I think for the follow Zoe.

03:28:47
<transcript>: zo

03:28:49
<transcript>: Zoe.

03:28:49
<transcript>: we publish

03:28:54
<transcript>: We publish a video on YouTube. Yes, that's exactly why I'm doing this. Ardana.

03:28:58
rdonadono: NICE

03:29:08
<transcript>: The whole reason I'm making this stupid thing is for YouTube video. I thought it was gonna be for this week. I don't know if I'm gonna get it done. I might have to make something else this week, and this might be next week's. Video just depends on how far I get, but we might be able to get further. And I think.

03:29:08
<transcript>: also welcome to chat

03:29:20
<transcript>: Also, welcome to Chat. Also, thank you for the following gustavago. Ms. Rebecca Burro. I tried. I wanted to finish that one. I started it. And when I started something, I want to finish it and let this eye project.

03:29:23
<transcript>: Okay.

03:29:25
theruggedbear: hey Adam, news for the aws course ?

03:29:26
<transcript>: Let's see type.

03:29:37
<transcript>: Do I put type? Yeah type.

03:29:41
<transcript>: Should I see how I typically do this in my.

03:29:46
<transcript>: My single table design. Okay.

03:29:46
<transcript>: so

03:29:49
<transcript>: So the next question is.

03:29:57
<transcript>: I need to I need to add more to this. So there's created app.

03:29:57
<transcript>: created

03:30:00
<transcript>: Created app is date dot.

03:30:00
<transcript>: now

03:30:01
<transcript>: Now.

03:30:06
<transcript>: To ISO.

03:30:08
<transcript>: Okay.

03:30:08
<transcript>: created

03:30:14
<transcript>: Created app. It's a profile. I don't know what the SK would be. I guess just the ID.

03:30:14
<transcript>: is

03:30:20
<transcript>: Is well I don't need to sort these by any in any in any way.

03:30:20
<transcript>: i'm probably gonna

03:30:25
<transcript>: I'm probably gonna need a global secondary index, PK and S. K, but I don't know what those would be right now.

03:30:25
<transcript>: what

03:30:31
<transcript>: What would profile? What would you ever search and want to get with your profile you'd want to get.

03:30:35
<transcript>: We'll get to it.

03:30:38
<transcript>: But that's good for now. Okay.

03:30:46
<transcript>: So from this point, I can wire up my authorization.

03:30:50
<transcript>: At sync authorizer. So this is the function.

03:30:50
<transcript>: that gets

03:30:52
<transcript>: That gets called.

03:30:52
<transcript>: when you try

03:31:03
<transcript>: When you try and hit the API with an authorization header, it calls this function. It passes that authorization header in and you can ver you can authenticate the user. You can say you can authorize them. You can say here's what you're allowed to do.

03:31:03
<transcript>: and so

03:31:05
theruggedbear: any recommendation for sortable unique ids like uuid ?

03:31:09
<transcript>: And so the way I used to do that is with next off. But now we're gonna do import.

03:31:09
<transcript>: jot

03:31:12
<transcript>: Jot from JSON. Web token.

03:31:16
<transcript>: Secret JSON that's no longer true.

03:31:19
<transcript>: Subscriber. What is that? Resolver. Contact.

03:31:22
<transcript>: Manager.

03:31:24
<transcript>: Secret AR in.

03:31:24
<transcript>: get

03:31:26
<transcript>: Get the secret.

03:31:26
<transcript>: as secret j

03:31:28
<transcript>: As secret JSON no.

03:31:31
<transcript>: That.

03:31:38
<transcript>: Okay. So the secret is just no, the secret is just a secret string.

03:31:52
<transcript>: Secret handler. Okay, it's not secret. That's bad throw. We just did that.

03:31:54
endingwithali: bonjour

03:31:56
<transcript>: Save you the Follow ending with Allie.

03:31:56
<transcript>: hey adam

03:32:03
endingwithali: hih ihihih

03:32:04
adamdotdev: ulid

03:32:05
<transcript>: Hey, Adam, news for the AWS course. Any recognitions for sortable unique IDs. Like UUID. Yeah, U L ID. You're gonna want.

03:32:05
<transcript>: you

03:32:06
<transcript>: You lid.

03:32:06
<transcript>: thank you

03:32:16
endingwithali: ali

03:32:18
endingwithali: iTS ALI

03:32:18
<transcript>: Thank you and welcome to Chat. Ending with Holly. Ending with how? Ending with Ally Bajor. Hi. Hello. Does that mean you are from France.

03:32:20
endingwithali: KAFJWadefjkalw;efj

03:32:22
<transcript>: Any news for the AWS course working on it.

03:32:22
<transcript>: in kind of around

03:32:26
endingwithali: no im in nyc lmao

03:32:28
<transcript>: In kind of around about way I'm teaching AWS, that's for sure what forms it will be in.

03:32:28
<transcript>: unclear

03:32:31
<transcript>: Unclear. It's Ali.

03:32:36
<transcript>: No, I'm in New York City. Okay.

03:32:43
<transcript>: Not sure what the the Kafja Wade. All that stuff was.

03:32:45
endingwithali: i just like the word bonjour

03:32:46
<transcript>: Okay.

03:32:46
<transcript>: let's see

03:32:50
endingwithali: it was a keyboard smash lol

03:32:54
<transcript>: Let's see. We don't have a secret here. We have authorization token, which is what the token is called in the event payload.

03:32:57
<transcript>: This stuff. The cookie stuff can go away.

03:32:59
sockthedev: new yorkers

03:32:59
<transcript>: This. All of this.

03:33:02
<transcript>: And go away.

03:33:03
endingwithali: i love sharing aws secrets live on stream its my favorite thing to do

03:33:05
<transcript>: If token equals secret.

03:33:05
<transcript>: we say you

03:33:06
endingwithali: :D

03:33:08
<transcript>: We say you are the system.

03:33:10
<transcript>: At sub.

03:33:10
sockthedev: :P

03:33:19
endingwithali: ending9Scream ending9Scream ending9Scream ending9Scream ending9Scream

03:33:19
<transcript>: Okay.

03:33:19
<transcript>: is

03:33:25
<transcript>: Is authorized sub system Do I want to do sub or don't want to do.

03:33:32
<transcript>: That's kind of a common convention.

03:33:32
<transcript>: in aws

03:33:34
<transcript>: In AWS land.

03:33:34
<transcript>: here's

03:33:37
<transcript>: Here's where we're gonna decode it.

03:33:43
<transcript>: Goes to comps. Decoded equals JWT. Decode.

03:33:47
<transcript>: And we pass? What.

03:33:59
<transcript>: Token and options. Where do I pass the string? So the token is going to be cocon and then secret.

03:34:01
<transcript>: What's in this thing.

03:34:02
jeroabra: Hi Sir adam anytips im having a hard time studying because of online ga,mes im currently studying Automation Testing

03:34:10
endingwithali: !keyboard

03:34:10
fossabot: Adam uses a custom Mode Eighty mechanical keyboard, and has a collection of other Mode keyboards!

03:34:15
<transcript>: The code options complete, and JSON.

03:34:18
tommyluco: what tiling assistant are you using?

03:34:28
<transcript>: Do I only pass the secret from verify. Oh, okay. So I verify with verify. So comp verified equals.

03:34:28
<transcript>: verify

03:34:29
<transcript>: Verify.

03:34:36
<transcript>: Does this return a promise? Or is it no. So verify.

03:34:36
<transcript>: does it do a dec

03:34:39
<transcript>: Does it do a decode as well.

03:34:41
endingwithali: at least tell us what switches ur using :'(

03:34:47
<transcript>: Synchronously verify given token using secret or public key to get decoded token. Yeah, it gives me the token back so I don't need to do decode. Okay.

03:34:47
<transcript>: verify

03:34:51
<transcript>: Verify token and then what.

03:34:54
<transcript>: The secret or public key.

03:34:54
<transcript>: j

03:34:57
<transcript>: Jwt. Secret.

03:35:00
<transcript>: Can I just do that as a string.

03:35:06
<transcript>: Decoded.

03:35:09
<transcript>: And what is this? Return.

03:35:10
<transcript>: returns

03:35:10
<transcript>: returns a jw

03:35:12
<transcript>: Returns. A. Jwt. Does it throw? Does it just throw.

03:35:15
<transcript>: If it's not valid.

03:35:27
<transcript>: What am I looking for? I'm looking for the docs.

03:35:27
<transcript>: for

03:35:30
<transcript>: For this JSON web token. Yeah.

03:35:30
<transcript>: verify

03:35:32
<transcript>: Verify.

03:35:36
<transcript>: If a callback is supply function act asynchronously.

03:35:43
<transcript>: If not, it will throw the error.

03:35:47
<transcript>: What is the error.

03:35:48
nillhiam: @jeroabra which game do you play ?

03:35:52
<transcript>: It will throws the error. I'm.

03:35:52
<transcript>: error is

03:35:53
<transcript>: Error is.

03:35:55
<transcript>: But it will throw it.

03:36:01
<transcript>: So down here we catch all errors we say is authorized as false.

03:36:06
<transcript>: falselying

03:36:06
<transcript>: falselying any field

03:36:08
<transcript>: Falselying any fields.

03:36:08
<transcript>: so what are we

03:36:12
<transcript>: So what are we doing here? We're saying no token. Decoded. Returning. Unauthorized.

03:36:12
<transcript>: so here's

03:36:13
<transcript>: So here's our token.

03:36:17
<transcript>: We're going to return.

03:36:20
<transcript>: We're turn.

03:36:29
<transcript>: Is authorized, is true, and the Resolver context is our decoded token.

03:36:29
<transcript>: and no

03:36:32
<transcript>: And no deny fields. So all this stuff.

03:36:37
<transcript>: What I was I doing here? I was trying to get the user. I don't need to do any of that.

03:36:52
<transcript>: I don't need to return that. Okay. It's simple. It's a simple little authorization authorization. We check that the token is valid, and then we add it to the Resolver context so we can access it in our VTL template. I know that in mixing.

03:36:52
<transcript>: basically

03:36:55
<transcript>: Basically anybody but.

03:36:55
<transcript>: just

03:36:57
<transcript>: Just hang in Hey.

03:37:02
<transcript>: We're done here.

03:37:02
<transcript>: authorize

03:37:04
<transcript>: Authorizer, works.

03:37:04
<transcript>: kind of we

03:37:07
<transcript>: Kind of. We haven't tested it, but it probably works.

03:37:10
<transcript>: Let's see keyboard.

03:37:10
<transcript>: hi sir

03:37:13
<transcript>: Hi, sir. Welcome to Chat Jiro.

03:37:14
cowfacedude99: just for fun, how many credits are you throwing at this side project?

03:37:20
<transcript>: Any tips? I'm having a hard time studying because of online games. I'm currently setting automation testing. Yeah, don't play games. There's my tip.

03:37:31
fragaverage: Get a mac, cant play games then LUL

03:37:31
endingwithali: @jeroabra use blocking software

03:37:34
<transcript>: Another seriously. I got so addicted to video games in College, I filled that out of College. I stopped going to class altogether. I'm a very addictive personality. Sounds like you might, too. So you just have to stop. And the way I stopped was.

03:37:34
<transcript>: i

03:37:37
endingwithali: i know on ur phone theres apps like opal

03:37:39
<transcript>: I married someone who wanted nothing to do with me playing video games.

03:37:39
<transcript>: and that's my

03:37:42
<transcript>: And that's my motivation to never play video games again.

03:37:42
<transcript>: so maybe try that

03:37:47
<transcript>: So maybe try that maybe just get married. I don't know. Or find a significant other of some sort.

03:37:52
<transcript>: I love sharing it to be a secrets live on streams my favorite thing to do.

03:37:55
<transcript>: Does that keyboard smash. Got it.

03:37:55
<transcript>: new yorkers

03:37:56
<transcript>: New Yorkers.

03:37:58
thesirfry: Just try to have balance, completely stopping seems like not dealing with some underline issues

03:38:04
<transcript>: Tommy Luko. First I'm Chat. Welcome to Chat. What Tyling Assistant are using it is you buy.

03:38:04
<transcript>: at least

03:38:05
cowfacedude99: @jeroabra use pihole to block the websites.

03:38:05
uberrick: in short, get married to help studying

03:38:07
endingwithali: no king dont get women to fix ur problems

03:38:11
uberrick: adamdo8DealWithIt adamdo8DealWithIt

03:38:11
endingwithali: please just go to THERAPY

03:38:24
<transcript>: At least tell us what switches you're using. My switches are mode signal switches to mode keyboard with mode signal switches. Did I put that in the keyboards command? I should have? Which game do you play? Just for fun? How many credits are you throwing at this side project? So calf face. I've got something like seven or $8,000 in AWS credits and I expect to burn through them.

03:38:26
glamshatterskull: therapy rules

03:38:31
<transcript>: I expect to burn them all, and I'm okay with that, because otherwise I won't use them, and they'll expire.

03:38:35
<transcript>: Yeah. Get a Mac can't play games then.

03:38:38
endingwithali: @GlamShatterskull i love therapy too :'(

03:38:38
<transcript>: Try to balance completely. Stopping.

03:38:38
<transcript>: issues

03:38:43
<transcript>: Issues. Pie hold. There's an idea. I've set up a pie hole once upon time.

03:38:46
sockthedev: all too often games are described as "a great way to kill time". one day that phrase really hit home with me, and i haven't been able to justify playing them since.

03:38:49
webmandman: Maybe ya'll can help me. I want to build a fun web app for my family (me, my lady and 3 daughters). Any ideas? this app has to use web sockets - my only tech requirement for learning.

03:38:51
<transcript>: Don't get women to fix your problems. Please just go to therapy. Therapy is good, too. I can recommend therapy.

03:38:59
endingwithali: MEN WOULD RATHER BUY TWITTER THAN GO TO THERAPY

03:39:01
<transcript>: All too often games are described as a great way to kill time. One day that Frase really hit home with me and I have a little just by playing them since, yeah, that's great.

03:39:01
<transcript>: when you think

03:39:16
cowfacedude99: @FragAverage get arch. You it's much worse.

03:39:19
dnbull: but then whats the difference between wanting to game vs watching a show lol

03:39:21
<transcript>: When you think about the fact that it you're not getting that time back. I think about that. Everything I do. Maybe y'all can help me. Welcome to Chat, Web and Webendee Web Man. Demand. I want to build a fun Web app for my family. Me, my lady, and three daughters. Any ideas? This app has to use WebSockets, my only tech requirement for learning.

03:39:21
blakegreendev: Hi Adam!

03:39:23
<transcript>: Anybody have ideas.

03:39:23
<transcript>: men would rather

03:39:26
<transcript>: Men would rather buy Twitter than go to therapy.

03:39:28
sockthedev: therapy changed my life. really wish i started earlier

03:39:38
<transcript>: Get arch. It's much worse.

03:39:39
fragaverage: @FragAverage I have standards 👀

03:39:45
rdrapwr: updog

03:39:45
<transcript>: What's the difference between wanting to game versus watching a show.

03:39:49
<transcript>: Blake, Green is here. Hey, Blake.

03:40:01
glamshatterskull: a show is potentially less interactive?

03:40:03
<transcript>: Therapy changed my life. Really wish I started earlier. Yeah, no. Same. I didn't go to therapy for the first time until like I was 34, 35 years old, but like that. And I wish I would have done it a long time ago. Welcome to Chat Rdrap. Up dog. What's up, dog.

03:40:08
<transcript>: See how I just played right into that shows potentially less interactive.

03:40:14
<transcript>: Yeah, I don't watch. I don't really watch shows anymore. My wife and I, we get like an hour together every night.

03:40:14
<transcript>: and

03:40:21
<transcript>: And we a while back decided it's kind of a waste time for us to watch a show in that hour. And granted, our kids would grow up and eventually.

03:40:21
<transcript>: we'll not have

03:40:31
cezikos: do you suffer from back pain?

03:40:32
<transcript>: We'll not have so many demands on our time. And like we'll sit around and watch Netflix all the time. So what we did before we had kids. But once you have kids, it's harder and harder. You have less time for things like that.

03:40:33
fragaverage: an hour together? and you call that marriage? I'll take it

03:40:37
<transcript>: Thank you for the follow Arson and Tommy Luko and GDG.

03:40:37
<transcript>: enduro

03:40:44
<transcript>: Endurobrah. I don't know if I saw all those. Do I suffer from back pain? I'm so glad you asked.

03:40:47
<transcript>: An hour together. And you call that marriage.

03:40:47
<transcript>: yeah fr

03:40:51
<transcript>: Yeah, frag. It's not great. It's not great.

03:40:51
<transcript>: we have kids

03:40:52
<transcript>: We have kids.

03:40:52
<transcript>: and

03:40:53
endingwithali: !chair

03:40:55
<transcript>: And they go to bed at a certain time.

03:40:55
<transcript>: and

03:40:59
<transcript>: And I go to bed at a certain time. Not that far.

03:40:59
<transcript>: not

03:41:03
<transcript>: Not that much longer after they do. We don't get a lot of time to get there.

03:41:08
<transcript>: So my back has been killing me.

03:41:08
<transcript>: i

03:41:14
<transcript>: I've worked from home in my home office for, like 15 years. I've never had back issues.

03:41:14
<transcript>: and

03:41:23
<transcript>: And I don't know what I did. I don't know if it's the way I'm sleeping on it, but in the last, like couple weeks, like I can hardly bend over at times.

03:41:23
<transcript>: i was like

03:41:27
uberrick: Not an herman miller

03:41:31
uberrick: haha

03:41:35
noctumsempra: back pain is horrible

03:41:38
<transcript>: I was like, screwed something up really bad. And I've decided I'm not very comfortable at my desk. And I've always had a really comfortable, ergonomic setup. I used to spend a lot of time, like, figuring out the right heights and all that my chair is it's a Herman Miller and body.

03:41:42
<transcript>: I've always had really nice chairs. I've had really great.

03:41:42
<transcript>: all the angles

03:41:42
endingwithali: if you cant bend over how will u twerk

03:41:43
endingwithali: jk jk

03:41:47
<transcript>: All the angles. And I've realized, like I'm not using an adjustable height desk anymore.

03:41:49
<transcript>: And how will I twice.

03:41:51
fragaverage: Its the weight of all that video gear lmao

03:41:56
<transcript>: My desk is fixed. It's a fixed height because I'm really into aesthetics.

03:41:56
<transcript>: and

03:41:57
<transcript>: And.

03:41:58
uberrick: no way, brand deal out of the window haha

03:42:04
dnbull: do you at least stretch everyday ?

03:42:08
<transcript>: It's stuck at this high and I can't seem to find the right height on a chair to get my wrist and everything in my back. I just started like I've had some bad habits lately.

03:42:08
<transcript>: do i at least

03:42:21
<transcript>: Do I at least stretch every day. I do. And my wife reminded me the Embole I have been lately because it's been in so much pain. But I've gotten through a lot of the pain, and I've ordered a different chair, so I'm not gonna be using my Herma Miller and body. I've been using it for a couple years.

03:42:26
whoa_dood: i use a yoga wheel every day, great way to decompress your back

03:42:29
dnbull: stretching for 10-30mins can do wonders if you sit all day

03:42:31
<transcript>: I've got a chair. It's like made by chiropractors or something. It doesn't have a bad. It's like this stool thing. And it gives you like, pelvic support.

03:42:31
<transcript>: and

03:42:36
noctumsempra: maybe an ergonomic chair instead a gamer one

03:42:38
endingwithali: oh the rocky chair

03:42:39
<transcript>: And it's like, wobbles around a little bit. Kind of like, doesn't it's like an active sitting chair is called, I don't know. We're gonna see.

03:42:40
endingwithali: i had that

03:42:41
<transcript>: I can't remember what it's called.

03:42:41
<transcript>: it's called

03:42:42
endingwithali: i got rid of it

03:42:43
<transcript>: It's called.

03:42:43
<transcript>: what is

03:42:44
<transcript>: What is it called.

03:42:45
endingwithali: the kneeling one

03:42:47
noctumsempra: with lumbar support etc

03:42:51
<transcript>: Active sitting chair.

03:42:54
<transcript>: Is it called.

03:42:55
endingwithali: i had it for a lil bit too

03:42:57
<transcript>: It's common. It'll be here tomorrow. Actually.

03:43:03
<transcript>: I can't find it.

03:43:06
<transcript>: But we'll see we'll see if that helps.

03:43:06
<transcript>: i don't know why i came

03:43:11
<transcript>: I don't know why I came over here to talk about this. It's like it's a chair and it's sitting. I don't know.

03:43:15
<transcript>: You had the kneeling one. Oh, this is an Annealing one.

03:43:16
cezikos: I cannot sit from a few days, I have to work laying on the bed

03:43:20
neondactyl: Yay

03:43:23
fragaverage: Chairs are important!

03:43:28
mason31415: Thoughts on standing desks?

03:43:28
<transcript>: It is a. I don't know. I forget what it's called. I don't know. It's a chair. It's. It moves. It doesn't just stay stationaries. So like, you have to actively use your legs and stuff. Chairs are important.

03:43:28
<transcript>: and being

03:43:31
<transcript>: And being comfortable at your desk is very important.

03:43:31
<transcript>: thoughts i'm saying that

03:43:36
dnbull: i dont believe chairs can fix your back though they can certainly help but sitting down for too long is bad for you anyway

03:43:38
neondactyl: good days at work; people can't log in on our lower environments for testing

03:43:39
<transcript>: Thoughts. I'm saying that I think they're great. I used to bounce up and down like I'd go to standing for a while and I'd go to sitting. That was probably a lot better for my body.

03:43:39
<transcript>: i just don't like

03:43:45
fragaverage: currently standing :3

03:43:47
<transcript>: I just don't like the aesthetics, and I'm so into aesthetics. I just care a lot about how things look. And I really like these artifacts best.

03:43:47
<transcript>: and they don't

03:43:53
<transcript>: And they don't make like an adjustable height one. And if they did, it probably wouldn't look as good. So.

03:44:01
<transcript>: Don't believe chairs can fix your back, though they can certainly help, but sitting down for too long. As bad for you anyway. Yeah, that's the other thing to do in bowl. I think we figured out the reason.

03:44:05
andreccosta: sacrifices for looks

03:44:10
uberrick: do you have a sit/stand?

03:44:15
<transcript>: In the last couple weeks, my back start hurting is because I stopped taking break. I used to take an hour break and have breakfast with my family, and then we decided we'd rather me just get off earlier, so I don't take a break. And then I just like, sit here for hours and I don't move. That's the problem.

03:44:15
<transcript>: like that

03:44:17
<transcript>: Like that's the problem.

03:44:18
endingwithali: did you complete rebrand when the dot dev domains dropped

03:44:21
<transcript>: Thank you for the following Shob, Ham and arson.

03:44:24
glamshatterskull: i have an uplift because they quoted me the most weight supported

03:44:25
dnbull: sitting down for too long can also cause blood clots :(

03:44:26
<transcript>: Did you complete Rebrand when the dot Dev domains dropped.

03:44:31
endingwithali: i bought my dot dev domain too

03:44:33
andreccosta: i've been wanting to get a fully one forever now

03:44:34
<transcript>: Wait. I didn't understand that sentence. Did you complete rebrand when the dot Dev domain is dropped.

03:44:34
<transcript>: what

03:44:37
<transcript>: What are the Dot Dev domains.

03:44:49
<transcript>: Oh, you bought your dot domain. I got you. Yeah, I did not. I did not buy it directly from Google. I wish I had. I bought it from the Adam who bought it before me. And it was more excited.

03:44:52
<transcript>: It would have been less had I bought it straight from Google.

03:44:53
endingwithali: but like when you got it

03:44:57
endingwithali: you renamed everything to adam dot dev

03:45:02
endingwithali: i got mine direct from google

03:45:06
<transcript>: I have an upload because they quoted me the most weight supported. Okay, uplift desk. I've heard of this. I think uplift desk sitting there for too long can cause blood clots. Oh, Geez, okay. Now I gotta move. I gotta move around.

03:45:10
glamshatterskull: yes... correct

03:45:11
<transcript>: I've been wanting to get a fully one forever now.

03:45:22
<transcript>: You renamed everything to Adam Dev? Yeah, no. My handle on everything now, is that about Dev? Except forget how it's not available on Get Up. I'm actually gonna stand up for a second because I gotta close the blind. I'll be right back.

03:45:25
glamshatterskull: men's butt health is a big deal

03:45:32
dnbull: ^ true

03:45:35
dnbull: pls  get that check

03:45:36
<transcript>: Got to close the blind and prevent blood clots apparently.

03:45:41
<transcript>: Okay, let's get some of this stuff running. I've been building too long without running stuff.

03:45:41
<transcript>: right

03:45:43
<transcript>: Right.

03:45:45
<transcript>: Okay.

03:45:53
dnbull: in your 30s i wouldn't recommend waiting until you are 40 but im only 13 years old Kappa

03:45:53
<transcript>: So this authorizer, I think, is pretty good. Now we can just pass our token after we sign it with the shared secret.

03:45:53
<transcript>: and that should

03:45:55
<transcript>: And that should authenticate.

03:45:55
<transcript>: now we can

03:45:57
<transcript>: Now we can write our queries. Here.

03:46:15
<transcript>: Got my direct from Google. Yes. Correct. Mins butthealth is a big deal. It's true. It's true. Please get that check in your thirty S. I wouldn't recommend waiting until you're 40, but I'm only 13 years old. Wait. Dmbell you're 13.

03:46:19
<transcript>: Kids are getting more and more.

03:46:20
dnbull: no

03:46:21
glamshatterskull: kappa

03:46:23
<transcript>: Coherent on the internet. Like you just. You're good at. No, you're not 13. Okay.

03:46:27
<transcript>: I fell for it.

03:46:27
neondactyl: lmfao

03:46:28
andreccosta: LUL

03:46:31
mason31415: Gottem

03:46:32
<transcript>: I just like when I was 13, I don't think I put together a full sentence. I'm pretty sure.

03:46:34
dnbull: I can be though if you want

03:46:38
jamdoughnutxd: Jebaited

03:46:43
<transcript>: Got him. Okay. You can be. Yeah, please do. Well, I'd like it if you if you just go with the 13 years old thing.

03:46:43
<transcript>: debated

03:46:45
<transcript>: Debated.

03:46:45
<transcript>: welcome to chat

03:46:46
dnbull: k im 13

03:46:47
<transcript>: Welcome to Chat Jam, Donuts.

03:46:49
dnbull: !accountage

03:46:50
fossabot: @dnbull dnbull created their account 13 years, 3 months, 24 days and 18 hours ago

03:46:51
<transcript>: Thanks for the fall, Mason. Okay. Nbl 13, everybody.

03:46:52
dnbull: dont forget adam LUL

03:47:01
dnbull: see even fossabot told me im 13

03:47:02
caffeineworm: kids these days are weird..

03:47:04
schrew: !accountage

03:47:04
fossabot: @Schrew Schrew created their account 5 years, 10 months, 13 days and 12 hours ago

03:47:07
<transcript>: Let's see, we want to we gotta actually have a thing. Now let's see. We have to actually have an API call that we want to hit. So what is a simple API that we can implement the resolvers for so on our Schema, we have Git profile. Let's see.

03:47:07
<transcript>: have

03:47:07
schrew: woah

03:47:13
<transcript>: Have get my profile and get profile, get my profiles the way to go. That's the first thing we're gonna implement.

03:47:17
<transcript>: So in resolvers, I'm gonna say, query.

03:47:20
<transcript>: Get my profile.

03:47:23
<transcript>: Request BTL.

03:47:23
<transcript>: all right

03:47:27
<transcript>: All right. Are you already for this? You're ready to see some VTL slinging.

03:47:27
<transcript>: and then we're gonna

03:47:30
<transcript>: And then we're gonna have query.

03:47:34
<transcript>: Get my profile.

03:47:34
<transcript>: response

03:47:37
<transcript>: Response ETL you are gonna hate VTL when I'm done.

03:47:39
<transcript>: Okay.

03:47:43
<transcript>: Where I write VTL is.

03:47:45
blakegreendev: V-T-HELL

03:47:46
<transcript>: I can see.

03:47:49
<transcript>: The rear.

03:47:49
<transcript>: oh your account

03:47:53
<transcript>: Oh, your account is 13. I got ya.

03:47:53
<transcript>: i got you

03:47:55
<transcript>: I got you I forgot again.

03:48:00
uberrick: vot the

03:48:04
mattmancodes: @blakegreendev Truth

03:48:11
<transcript>: Vt hell exactly. Blake Green The way I write VTL and I've written probably as much detail as the next guy. Like I've done a lot of ETL. Still, the way I always write VTL is I go to other projects that I've done and I copy VTL.

03:48:31
<transcript>: Like, I don't think I've started a retail template from scratch ever in my life. I think I've all I literally always on my main branches are protected. I think I've always just gone in. And like, at some point when I wrote my first detail template, I copied it from somewhere. And ever since every VTL template I write is just some variation of that original template. It's like evolution.

03:48:35
<transcript>: Like my VTL gene pool just keeps them.

03:48:36
sockthedev: broken telephone

03:48:42
<transcript>: Let's see.

03:48:44
<transcript>: We're gonna get.

03:48:44
<transcript>: something

03:48:46
mason31415: I'm procrastinating configuring/setting up a redux store right now. Your stream is a good distraction

03:48:46
<transcript>: Something equivalent.

03:48:53
<transcript>: Function query available. Query get user something like this, right? It's gonna be similar.

03:49:04
<transcript>: But it's not gonna be the same. So what are we gonna have here? Id is going to be user. It's gonna be profile.

03:49:09
<transcript>: Do you have to pee? Unfortunately, ARGs ID that is not.

03:49:09
<transcript>: a shape

03:49:13
rudixworld: wth is vtl VoHiYo

03:49:16
<transcript>: A shape of our query. It's gonna be oh, there is no Arg, there is no R people.

03:49:16
<transcript>: so

03:49:18
<transcript>: So there will be no ARGs.

03:49:18
<transcript>: got pete

03:49:22
<transcript>: Got Pete it'll be on the identity. We'll get to that in a second of bear back.

03:49:41
sockthedev: @mason31415 if you can try to avoid. if all you are doing is server state sync, react-query.

03:49:46
neondactyl: beautifmus transition

03:49:47
uberrick: @RudixWorld Velocity Template Language

03:49:48
sockthedev: changed my react life

03:50:14
uberrick: it's a language you can use to write more efficient code within API Gateway to query the DB direct without a Lambda inbetween

03:50:40
techxtalks: wow binance acquiring ftx

03:50:43
uberrick: API Gateway and DynamoDB scale much faster than Lambda so to remove that bottleneck you can go direct

03:50:45
rudixworld: like all db's or dynamodb?

03:51:08
uberrick: DynamoDB mainly

03:51:11
mason31415: @sockthedev I wish lol, we do utilize useSWR for our server-side state, but this part of the application is a complex client side state module

03:51:17
uberrick: IDK if you can hook it into others yet

03:51:48
blakegreendev: yeah there's definitely tradeoffs with config (VTL) vs code (lambda)

03:52:02
uberrick: yeah like testing it is basically impossible :D

03:52:34
blakegreendev: testing....ain't nobody got time for that

03:52:37
rudixworld: where the request comes from with vtl , client-side?

03:52:53
morded__: hey people of twitch

03:53:57
uberrick: @Morded__ Hello

03:53:59
<transcript>: Vts.

03:53:59
<transcript>: on my vtl

03:54:00
<transcript>: On my VTL.

03:54:05
schrew: the larabar has arrived PraiseIt

03:54:08
<transcript>: You're procrastinating setting up a Redux store right now.

03:54:10
<transcript>: Oof, that sounds awful.

03:54:14
<transcript>: I stopped using Redux. Like not a long time ago.

03:54:16
<transcript>: It just. It pained my brain.

03:54:24
<transcript>: Explaining what VTL is.

03:54:27
<transcript>: This catching up.

03:54:27
<transcript>: don't

03:54:29
<transcript>: Don't mind me.

03:54:43
<transcript>: Yeah, it's harder to test it is harder to test VTL but you know what you also don't know needed very many tests because details so good. There are no bugs.

03:54:45
<transcript>: That's right.

03:54:45
<transcript>: no bugs

03:54:47
<transcript>: No bugs when you write VTL.

03:54:50
<transcript>: It's almost impossible. Not really.

03:54:51
neondactyl: anyone wanna fix networking issues at my company for me? Kappa

03:55:01
<transcript>: Profile.

03:55:01
<transcript>: mr

03:55:02
<transcript>: Mr. Reminds me.

03:55:05
uberrick: @RudixWorld yeah HTTP call to an API Gateway endpoint

03:55:05
<transcript>: Here our ID.

03:55:10
prithu__: why do you look russian to me?

03:55:10
<transcript>: Used to be like.

03:55:16
<transcript>: No.

03:55:18
sockthedev: @mason31415 if you are absolutely stuck with redux, then redux-toolkit or easy-peasy.

03:55:19
<transcript>: And Here's.

03:55:22
neondactyl: I'm a dev, I don't have time to figure out infrastructure's problems

03:55:23
<transcript>: The.

03:55:40
<transcript>: Pk.

03:55:41
<transcript>: This one.

03:55:52
blakegreendev: adam loves aesthetics but writes VTL... go figure

03:56:00
<transcript>: Profile ID.

03:56:12
mattmancodes: LUL

03:56:23
<transcript>: Okay.

03:56:26
<transcript>: Pk Profile ID.

03:56:27
rudixworld: is this Mac OS ?

03:56:29
<transcript>: So the ID.

03:56:29
<transcript>: itself

03:56:33
<transcript>: Itself here. I think we should call it sub.

03:56:37
<transcript>: It should be done here.

03:56:37
mason31415: @sockthedev yeah we use toolkit. I have the root Store setup, I was talking about a specific Slice. A lot people don't like redux but it's still the #1 used state management library for react by a good bit

03:56:40
<transcript>: Yeah.

03:56:50
<transcript>: And then sub.

03:56:50
<transcript>: is

03:56:52
<transcript>: Is Profile ID.

03:56:54
<transcript>: Okay.

03:57:05
prithu__: blink twice if you are forced into using VTL

03:57:09
<transcript>: There's Mac OS.

03:57:17
<transcript>: I love a settings, but I write VTL exactly.

03:57:22
mason31415: How long have you been using vim for?

03:57:24
<transcript>: Welcome to Chat Prethoop. Why do I look rushing to you? I don't know.

03:57:26
sockthedev: i don't hate it, but it's often a hammer used against more than it should be

03:57:27
<transcript>: I'm very much not rushing.

03:57:27
<transcript>: i am

03:57:28
<transcript>: I am.

03:57:28
<transcript>: some weird

03:57:32
<transcript>: Some weird mix of lots of things.

03:57:34
neochromer: Hi hi am I late? :D

03:57:36
<transcript>: I live in the Ozarks in the middle of America.

03:57:39
<transcript>: How long have you been using them for.

03:57:39
<transcript>: what has

03:57:42
<transcript>: What has it been? Guys? Two months.

03:57:42
<transcript>: three three months

03:57:46
<transcript>: Three, three months? I don't know. I learned it on screen. I've been streaming for four months. So.

03:57:49
<transcript>: Something like two or three months.

03:57:50
fragaverage: 2 months-ish

03:57:53
<transcript>: Neo Grammar You're late.

03:57:54
rudixworld: full stack breed Kappa

03:58:00
schrew: Feels like yesterday Kappa

03:58:03
<transcript>: I don't hate it. It's often a hammer using it's more than it should be. What was it, sock? What's? Oh, you guys saw about Redux or something.

03:58:06
<transcript>: Okay.

03:58:06
<transcript>: full

03:58:09
<transcript>: Full stack breed. That's right.

03:58:09
<transcript>: i'm a mutt

03:58:10
<transcript>: I'm a mutt.

03:58:11
neondactyl: missouri devs are OP

03:58:13
sockthedev: @prithu__ haha yeah, is adam signalling that we should send help?

03:58:17
mason31415: @sockthedev I definitely agree, easy to over utilize, still a good fit for certain projects

03:58:18
<transcript>: I guess I'm gonna do anything with the response now, but I will I will. I will probably do something with the response.

03:58:21
<transcript>: Probably.

03:58:25
<transcript>: Okay. Now we can go back to our VTL here.

03:58:25
<transcript>: profile

03:58:26
<transcript>: Profile.

03:58:30
<transcript>: And then Wait, did I do that.

03:58:32
<transcript>: I do.

03:58:41
<transcript>: That's gonna be context. Excuse me.

03:58:44
<transcript>: Identity.

03:58:46
<transcript>: Sub.

03:58:51
<transcript>: Right. I believe.

03:58:55
ialexreis: nice neovim setup

03:58:55
<transcript>: Let's call this.

03:59:02
<transcript>: And then.

03:59:10
<transcript>: We're just doing a get item.

03:59:10
<transcript>: on

03:59:12
rudixworld: speaking of Redux , what's better - recoil or Jotai ?

03:59:12
<transcript>: On our table.

03:59:20
rudixworld: Kappa

03:59:22
<transcript>: Welcome to Chat. I Alex. Alex. Nice new of him. Said thanks.

03:59:26
<transcript>: Speaking of Redux, what's better recoiler? Okay, now I gotta just check out that conversation.

03:59:37
glamshatterskull: got them dots?

03:59:38
<transcript>: Missouri. Desert Op Neon DAX, are you from Missouri? I don't remember somebody else's from Missouri. Oh, yeah, somebody was from Missouri. They were like, from Springfield. And we're gonna hang out. Did they send me a DM.

03:59:41
<transcript>: Oh, did I miss a whisper.

03:59:41
<transcript>: i did

03:59:42
glamshatterskull: !dotfiles

03:59:42
fossabot: Adam's dotfiles live here: https://github.com/adamelmore/dotfiles The repository for bitter is here: https://github.com/adamelmore/bitter

03:59:43
<transcript>: I did miss a whisper.

03:59:44
mason31415: I've been wanting to use vim more. I know enough I can do what I want, albiet very slowly. the vscode keyboard shortcuts are ingrained in my muscle memory

03:59:53
neondactyl: I'm from missouri, Cape G :)

03:59:57
<transcript>: Sorry just don't mind me just responding to a whisper.

03:59:58
andreccosta: we can see what you're typing btw

04:00:00
mason31415: makes it hard to switch

04:00:02
<transcript>: Okay.

04:00:06
<transcript>: Somebody showed up in my stream.

04:00:08
fragaverage: key strokes giving the message away

04:00:10
fragaverage: KEKW

04:00:13
creativenull: dont forget your screenkey is on Kappa

04:00:16
<transcript>: A few days ago. And they live, like five minutes for me. Ten minutes for me? Oh, yeah, neon, you're from Cape Dorotho. That's right.

04:00:16
neondactyl: @adamdotdev might wanna turn off key strokes on stream :)

04:00:17
mattmancodes: LUL

04:00:23
<transcript>: You can see what I'm typing. Oops.

04:00:26
<transcript>: Well.

04:00:26
<transcript>: there

04:00:28
<transcript>: There you go.

04:00:34
neondactyl: LUL

04:00:34
<transcript>: You guys are funny. You're all seeing it at the same time? Well, I don't know. I didn't say something weird.

04:00:34
<transcript>: i just said

04:00:37
<transcript>: I just said, Well, let's do it.

04:00:40
andreccosta: you didn't. yet.

04:00:44
<transcript>: So there you go. You guys read my DMs. I don't care.

04:00:44
<transcript>: ever

04:00:45
<transcript>: Ever.

04:00:45
<transcript>: okay

04:00:47
neochromer: What are we doing

04:00:49
<transcript>: Okay, profile. And then we have the actual ID.

04:00:49
<transcript>: we

04:00:53
<transcript>: We do a get item. This should all work right? Should just work.

04:00:53
<transcript>: i need to

04:00:54
creativenull: same ting happened to me when I was typing my password on stream

04:00:55
<transcript>: I need to write the response template.

04:00:55
<transcript>: which is just

04:00:59
neochromer: Starting to Doxx yourself like Primagean

04:01:01
neochromer: nice

04:01:03
andreccosta: @CreativeNull oh nice :D

04:01:06
<transcript>: Which is just gonna be the default. I don't even need to write it. Get out of here. I have it where defaults are just handled. Okay, this thing is should work. It should work.

04:01:11
<transcript>: The Get My product query should work.

04:01:13
creativenull: 😅

04:01:17
<transcript>: So let's do this. Let's go into our test stack or our test handler. Sorry.

04:01:20
<transcript>: Thank you for the follow dug.

04:01:28
<transcript>: And presu and wizard days. I don't know if I saw those. Rickabik. Did I see any of these? Jonas Mason.

04:01:28
<transcript>: sho

04:01:29
<transcript>: Sho.

04:01:29
<transcript>: shot

04:01:32
<transcript>: Shot I can't go any higher so I hope there's no more.

04:01:34
<transcript>: Arson.

04:01:40
rudixworld: Theo is like exposing every password hi has

04:01:41
<transcript>: Tommy. Luca. I saw Tommy. I probably saw all of those. I probably already said all this. I'm sorry. I'm sorry. Everyone.

04:01:41
<transcript>: starting to knock yourself

04:01:43
<transcript>: Starting to knock yourself like primevision.

04:01:55
<transcript>: I mean, I live. I live in Southern Missouri. I'm okay with telling people that Nixon, Missouri. It's like a big enough place where you can just, like, walk door to door, find me.

04:01:58
<transcript>: Okay.

04:01:58
<transcript>: fetch

04:01:58
rudixworld: ^he

04:01:59
<transcript>: Fetch.

04:02:02
uberrick: Is Adam even your name?

04:02:05
<transcript>: This is where we need to write a query.

04:02:08
<transcript>: You need to write a query, and we're gonna do that.

04:02:10
neochromer: I can pay a few people to go door to dorr

04:02:11
<transcript>: Like this.

04:02:11
<transcript>: i don't know

04:02:11
neochromer: why not :D

04:02:13
<transcript>: I don't know how to write GraphQL.

04:02:15
neochromer: door

04:02:17
uberrick: or was the domain available?

04:02:19
<transcript>: You can pay a few bill to go to order door. Is it Adam? Even my name.

04:02:19
<transcript>: that'd be pretty

04:02:19
neochromer: kubernetes cluster of people

04:02:25
<transcript>: That'd be pretty dumb to like, make my whole brand. Adam Dev. If my name wasn't even Adam, wouldn't that be pretty stupid.

04:02:25
<transcript>: kind

04:02:26
<transcript>: Kind of funny, though.

04:02:30
<transcript>: Is it this one.

04:02:33
<transcript>: This one.

04:02:37
<transcript>: Let's go to let's run a query.

04:02:37
<transcript>: queries

04:02:39
<transcript>: Queries.

04:02:39
<transcript>: here we go

04:02:40
neochromer: been working with kubernetes.. sorry brain is fried

04:02:40
<transcript>: Here we go.

04:02:44
<transcript>: Someone who knows how to actually write.

04:02:48
uberrick: I've just bought eve.dev to be your sidekick

04:02:50
<transcript>: Graphical would be like this is this is stupid. Why would you hope I didn't just leak something.

04:02:50
<transcript>: can i connect

04:02:51
<transcript>: Can I connect.

04:02:54
<transcript>: Authorization token. Oh, it is an authorization token.

04:03:04
<transcript>: I think. I think I just bought over in here. I think it worked right now. Yeah. Okay. So me. No. That's this is not it. This is not up to date.

04:03:04
<transcript>: what is this

04:03:06
<transcript>: What is this.

04:03:09
<transcript>: What am I looking at.

04:03:13
<transcript>: Bummer. Well, I've got to deploy this thing.

04:03:15
rudixworld: for the sake of sounding like ADD Kappa

04:03:21
<transcript>: I wanted to write the query. Who can help me just ride a basic graphical query GraphQL query.

04:03:29
<transcript>: Is it just like this.

04:03:39
zilahir: { query name (params) { nodes } } pretty much

04:03:40
<transcript>: Oh, doesn't like that.

04:03:40
<transcript>: because

04:03:43
<transcript>: Because it just needs to be a string, doesn't it.

04:03:43
<transcript>: no

04:03:47
<transcript>: No. What is the shape of this? I got it.

04:03:56
<transcript>: Query http. I don't know.

04:03:58
<transcript>: Http results.

04:04:01
<transcript>: I just want to test it.

04:04:03
<transcript>: Make for the following.

04:04:09
<transcript>: Also welcome to Chat Zeela, and thank you so much for.

04:04:09
<transcript>: the rus

04:04:12
<transcript>: The rusketch.

04:04:12
<transcript>: eve

04:04:17
<transcript>: Eve, Dev, Rick, are you serious? That is awesome. Please tell me you're serious.

04:04:17
<transcript>: i want

04:04:19
<transcript>: I want to make a request.

04:04:19
<transcript>: i want to make a post

04:04:21
<transcript>: I want to make a post request.

04:04:21
<transcript>: i need to remember

04:04:25
<transcript>: I need to remember the shape of the body, etc. Etc.

04:04:32
zilahir: a post request is a mutation

04:04:33
<transcript>: Yeah. Here we go. From the command line. Sure.

04:04:38
<transcript>: Application JSON API key and then.

04:04:40
zilahir: queries are usually GETs

04:04:42
<transcript>: Is the body just. Yeah, it's like this.

04:04:42
<transcript>: so

04:04:46
<transcript>: So query, so I need to say query.

04:04:48
<transcript>: Query.

04:04:48
<transcript>: and

04:04:50
<transcript>: And then.

04:04:56
<transcript>: It's not those.

04:04:56
<transcript>: no

04:04:57
<transcript>: No.

04:05:02
<transcript>: It's triple quotes, right.

04:05:04
<transcript>: Oh.

04:05:09
<transcript>: That hurt me query.

04:05:09
<transcript>: and then quote on

04:05:11
<transcript>: And then quote on quote.

04:05:15
<transcript>: Quote quote.

04:05:21
<transcript>: Now. No, it was the other kind.

04:05:26
<transcript>: Of pain. The pain.

04:05:28
<transcript>: Oh, my word.

04:05:28
<transcript>: there we go

04:05:29
zilahir: i dont think you need that

04:05:29
uberrick: I think `` is good enough :D

04:05:29
<transcript>: There we go.

04:05:29
<transcript>: and then like this

04:05:31
<transcript>: And then like this.

04:05:31
<transcript>: or do i not even have

04:05:34
fragaverage: I thought it was a single backtick at begining and end

04:05:38
<transcript>: Or do I not even have to do three of them? Why am I imagine I have to do three of these? Why am I so dumb? Someone tell me why.

04:05:38
<transcript>: my third

04:05:40
<transcript>: My third dumb.

04:05:42
<transcript>: I can just do like that.

04:05:49
<transcript>: So the.

04:05:49
<transcript>: body

04:05:54
<transcript>: Body. Is there's a key called query, and then you type your query.

04:05:56
<transcript>: Like this.

04:05:59
<transcript>: Get my profile.

04:06:03
<transcript>: Does that simple.

04:06:07
<transcript>: That simple people.

04:06:10
<transcript>: Okay.

04:06:18
<transcript>: There's the host.

04:06:22
<transcript>: I just need to make sure there's an application. Json.

04:06:23
<transcript>: Header.

04:06:26
<transcript>: So content type.

04:06:28
<transcript>: Application.

04:06:28
<transcript>: json

04:06:30
<transcript>: Json.

04:06:33
<transcript>: Okay. This should work. Then.

04:06:33
<transcript>: my profile

04:06:35
<transcript>: My profile should return.

04:06:35
<transcript>: let's

04:06:37
<transcript>: Let's see.

04:06:43
<transcript>: My profile equals, and then we'll just do.

04:06:44
zilahir: btw, i am new here, but you should use some graphql client, that would help you a lot

04:06:46
<transcript>: Console, log.

04:06:46
<transcript>: my profile

04:06:47
<transcript>: My profile.

04:06:51
<transcript>: Do I need to do like Jason or something.

04:06:51
rudixworld: isn't getMyprofile ${getMyprofile} ?

04:06:53
<transcript>: Yeah.

04:06:53
<transcript>: const

04:06:58
<transcript>: Const. Json? Equals await my profile. Json.

04:07:03
<transcript>: Json.

04:07:05
<transcript>: Click that maybe.

04:07:10
<transcript>: All right, let's see if we actually built something that works. Endtoend.

04:07:14
<transcript>: What am I missing? Here? Package. Tsp. Okay.

04:07:21
<transcript>: Oh, I didn't actually Crit. I didn't actually create the stack.

04:07:21
<transcript>: so we're gonna

04:07:23
<transcript>: So we're gonna have to do a Loading stack here.

04:07:23
<transcript>: load

04:07:26
<transcript>: Load testing, stack.

04:07:34
<transcript>: We'll just do this. Let's do ya.

04:07:39
<transcript>: And then we're gonna call this one.

04:07:47
<transcript>: Pre create test back in a region.

04:07:52
<transcript>: Main region. There is no main region distinction.

04:07:52
<transcript>: stack

04:07:54
<transcript>: Stack name is going to be.

04:08:01
<transcript>: Test stack with the scope on it.

04:08:01
<transcript>: there

04:08:04
<transcript>: There is no main so that's going to be.

04:08:04
<transcript>: with

04:08:07
<transcript>: With the region suffix.

04:08:11
<transcript>: And.

04:08:20
<transcript>: Okay. That's hard to read.

04:08:22
<transcript>: But okay.

04:08:26
blakegreendev: this might help your query https://docs.amplify.aws/guides/functions/graphql-from-lambda/q/platform/js/#query

04:08:27
<transcript>: I think I can actually simplify this.

04:08:30
<transcript>: Yeah.

04:08:36
<transcript>: Like that.

04:08:38
<transcript>: Yeah.

04:08:38
<transcript>: always gonna have reaches

04:08:43
<transcript>: Always gonna have reaches. Okay, no more. That this is gonna be test stack.

04:08:43
<transcript>: we

04:08:46
<transcript>: We have the app, we have the Stack name.

04:08:46
<transcript>: we

04:08:48
<transcript>: We no longer have.

04:08:52
<transcript>: We no longer have prod. We don't have any parameters.

04:08:57
<transcript>: Oh, Prams, Wait, what's the missing.

04:08:59
<transcript>: Missing.

04:09:02
<transcript>: What phone.

04:09:10
<transcript>: Need that stuff.

04:09:14
<transcript>: Props. Test props. There's nothing in it.

04:09:16
<transcript>: Hit me.

04:09:24
<transcript>: Missing the following properties from API stack.

04:09:28
<transcript>: What? Oh, it says it's gonna return an API stack.

04:09:28
<transcript>: test

04:09:34
<transcript>: Test. This is why you just implicitly. You don't use TypeScript. This way. Don't do things that I do. People.

04:09:38
<transcript>: We're just gonna create one test stack for now.

04:09:40
<transcript>: In US East one.

04:09:48
<transcript>: And the reason for that is I don't want to have to turn this thing off in like 20 regions right now.

04:09:48
<transcript>: okay

04:09:49
<transcript>: Okay.

04:09:49
<transcript>: let's do it

04:09:50
sockthedev: have fun ya'll. excited to see where this goes

04:09:51
<transcript>: Let's do it.

04:09:52
<transcript>: Yep status.

04:09:56
<transcript>: Get, Add, get, commit.

04:09:59
sockthedev: oh, is this code going oss?

04:10:01
<transcript>: Feet testac.

04:10:07
<transcript>: Finish your Lara bar. Look at chat.

04:10:13
<transcript>: This code is open source. Sock.

04:10:16
<transcript>: It is all open source.

04:10:18
neondactyl: test stack feet EZ

04:10:23
sockthedev: zing ty

04:10:26
<transcript>: Single back text shoulder should have looked at that along the time ago. Thank you for the follow snot not.

04:10:27
sockthedev: will go through it

04:10:30
<transcript>: We'll see if I got my GitHub actions working.

04:10:32
sockthedev: adios

04:10:37
<transcript>: Here we go.

04:10:40
<transcript>: What do we think? Do you think it's gonna work? I don't think it worked.

04:10:43
<transcript>: Hints of it yet.

04:10:47
<transcript>: Executable file pnpm.

04:10:48
spartangtr: is that ohmyzsh

04:10:52
<transcript>: I guess I've never used.

04:10:55
<transcript>: Pnpm.

04:10:55
<transcript>: in the github

04:10:57
<transcript>: In the GitHub action.

04:11:11
<transcript>: Code setup node.

04:11:16
<transcript>: We'll see.

04:11:16
<transcript>: pmp

04:11:18
<transcript>: Pmpm.

04:11:22
<transcript>: Action setup. I just need to do this first.

04:11:27
<transcript>: Maybe.

04:11:27
<transcript>: check

04:11:32
<transcript>: Check out first and then wait. Check out is version three now OOH.

04:11:35
<transcript>: Cool.

04:11:40
<transcript>: Pnpm Action Setup Version two.

04:11:40
<transcript>: thank you for the follow

04:11:42
<transcript>: Thank you for the Follow mafia.

04:11:46
<transcript>: Doesn't get my profile get my profile.

04:11:51
<transcript>: We'll check that rudix? Not sure.

04:11:56
<transcript>: Oh, see a sock. I think Sock was leaving by sock.

04:11:57
spartangtr: !song

04:12:02
<transcript>: Is that Omizh? It is Spartan. It is on my zsh.

04:12:06
<transcript>: Install node first. I should do that first.

04:12:07
spartangtr: oh nvm it's right there at the bottom

04:12:09
<transcript>: Maybe I don't do the cash thing.

04:12:14
<transcript>: Get PMPM Store directory.

04:12:18
<transcript>: So this is everything I should do.

04:12:18
ccyy88: LUL

04:12:23
<transcript>: Let's just do this.

04:12:28
snotknot: @spartangtr happens to the best of us

04:12:41
<transcript>: Okay. All that. Then we're gonna delete.

04:12:51
<transcript>: Wait. That is sleep. No, I'm done.

04:12:54
<transcript>: Here we go.

04:12:57
<transcript>: Thanks all this.

04:13:02
<transcript>: So check out version Three Install node.

04:13:02
<transcript>: pmp

04:13:04
<transcript>: Pmpm Action setup.

04:13:04
<transcript>: pm

04:13:06
<transcript>: Pmpm, install.

04:13:10
<transcript>: Running so I'll get PM Store directory.

04:13:12
<transcript>: Sounds good.

04:13:18
<transcript>: Actions cash set up PMPM cache looks good install dependencies.

04:13:23
<transcript>: And then we're good.

04:13:27
<transcript>: Yeah.

04:13:29
<transcript>: Good.

04:13:37
<transcript>: Fix GitHub, actions.

04:13:48
<transcript>: I know that I've never once had a single fixed GitHub actions commit. That always is followed by about six more fixed GitHub actions commits. Am I right.

04:13:48
<transcript>: am i right

04:13:50
<transcript>: Am I right.

04:13:58
<transcript>: Welcome to Chat Ccy and it's not not as well happens to the best of us.

04:14:04
<transcript>: I'm gonna have to wrap up here pretty soon, but.

04:14:04
<transcript>: i'm having fun

04:14:05
<transcript>: I'm having fun.

04:14:07
<transcript>: Don't want to be done.

04:14:20
<transcript>: Man I love the GitHub o IDC provider that works in it is now so I don't have to do like stupid. I am users and stuff.

04:14:20
<transcript>: i can just

04:14:25
<transcript>: I can just do this, and it just gets my credentials. Feels good.

04:14:31
<transcript>: It's building. What's good.

04:14:31
<transcript>: we're getting

04:14:33
<transcript>: We're getting somewhere.

04:14:35
<transcript>: Oh, no, it failed.

04:14:38
<transcript>: What did it do.

04:14:42
<transcript>: Generated.

04:14:49
<transcript>: New error. What do we have here? Oh, I need to.

04:14:53
<transcript>: What can I expect version for module next off.

04:14:57
<transcript>: Yeah, I need to fix some stuff. I know what it is.

04:15:05
<transcript>: Then the test stack and the API stack, actually. So this thing now has some different node modules.

04:15:11
<transcript>: Client secret manager client DB util no longer using Faker.

04:15:11
<transcript>: we

04:15:16
<transcript>: We are using EW. Lid, and we are using chants.

04:15:16
<transcript>: and we

04:15:18
<transcript>: And we are using.

04:15:21
<transcript>: Oh, what are we using.

04:15:28
<transcript>: Alright Secrets Manager Eulid Chants DynamoDB.

04:15:28
<transcript>: node fe

04:15:31
<transcript>: Node, Fetch, and JSON web token.

04:15:31
<transcript>: so

04:15:34
<transcript>: So a node fetch.

04:15:34
<transcript>: and j

04:15:36
mason31415: Is there a reason you're not using faker anymore?

04:15:37
<transcript>: And JSON. Web token.

04:15:39
<transcript>: This is kind of annoying that we have to do this.

04:15:39
<transcript>: everything

04:15:40
blakegreendev: OIDC is awesome... have you seen act for running GHA locally? https://github.com/nektos/act

04:15:41
cowfacedude99: I tend to go a lot more in that. mainly because I like a good feedback loop and all this actions stuff isn't good at the feedback loop.

04:15:45
<transcript>: Everything was just goodies and stuff. It would all just bundle with you build and it'd be fine. But it's not.

04:15:45
<transcript>: it's not

04:15:47
<transcript>: It's not now, is it.

04:15:52
<transcript>: Okay, let's go to.

04:15:56
<transcript>: I need to know it'll. Go. Grant it access there. Okay.

04:15:56
<transcript>: let's

04:15:58
<transcript>: Let's see.

04:15:58
<transcript>: oh it's

04:16:03
<transcript>: Oh, it's gonna try and hit API bitter. So we have to have that set up in the API stack.

04:16:03
<transcript>: i think

04:16:04
<transcript>: I think I already did.

04:16:07
cowfacedude99: especially the special stuff we run at my office

04:16:14
<transcript>: So what are we using.

04:16:14
<transcript>: let's see

04:16:19
<transcript>: Let's see. I've got some functions in here. We need a six. Here's. A stream, listener.

04:16:22
<transcript>: Let's see what it's using.

04:16:27
<transcript>: That's it okay. Cool. And then.

04:16:34
<transcript>: Here's the authorizer. And this is where we're gonna have to change. Yeah. Next off, not a thing.

04:16:34
<transcript>: but

04:16:38
<transcript>: But JSON web token is.

04:16:42
<transcript>: Let's just see if there's any other.

04:16:45
<transcript>: Secrets manager.

04:16:45
<transcript>: jason

04:16:46
<transcript>: Jason Wipoken. That's it.

04:16:51
<transcript>: Actually need.

04:16:55
<transcript>: These. Okay, cool. Thank you for the follow.

04:16:55
<transcript>: pa

04:16:57
<transcript>: Papa.

04:17:00
<transcript>: Oh, IDC is awesome. Have you seen.

04:17:03
<transcript>: Act for Running GitHub.

04:17:03
<transcript>: what

04:17:08
<transcript>: What is this? Oh, GitHub actions. Locally. I have heard of this.

04:17:18
<transcript>: Is there a reason you're not using Faker anymore? Yeah, it's because I couldn't get the types to work. I don't know. I couldn't get TypeScript to work in my thing, and I gave up.

04:17:22
<transcript>: Didn't try very hard if I'm being honest but.

04:17:26
mattmancodes: too soon

04:17:28
<transcript>: Six nodes, Modules in functions.

04:17:40
<transcript>: Oh, how many? How many tries? What do we think? People? How many times? How many tries? Till I get a working GitHub action deploying into my Devs account.

04:17:47
<transcript>: We're not getting hung up on the credentials part, which is great. Again, the OIDC provider is fantastic.

04:17:53
<transcript>: I need to go a lot more in that mainly because.

04:18:03
<transcript>: I tend to go a lot more in that mainly because I like a good feedback loop. And all this action stuff isn't good at the feedback loop. Yeah. I should run it locally.

04:18:07
<transcript>: I should I should I should But I did.

04:18:16
<transcript>: Why there's so much friction for me to use a new thing.

04:18:16
<transcript>: unless

04:18:20
<transcript>: Unless it's just like NPM install if I can't just Impy them install it.

04:18:20
<transcript>: there's a lot of friction

04:18:22
<transcript>: There's a lot of friction.

04:18:22
<transcript>: and i

04:18:24
<transcript>: And I tend to not do new things.

04:18:43
<transcript>: Oh, what happens.

04:18:43
<transcript>: missing

04:18:45
<transcript>: Missing script deploy.

04:18:45
<transcript>: so it built

04:18:47
<transcript>: So it built successfully. That's a good step.

04:18:50
<transcript>: Step in the right direction.

04:18:51
<transcript>: Deploy, though.

04:18:54
<transcript>: How did it not deploy.

04:18:56
pappakassinn: 2 more tries

04:19:00
<transcript>: We have a deploy script. It's right there.

04:19:02
<transcript>: Build.

04:19:02
<transcript>: succeeded

04:19:03
<transcript>: Succeeded.

04:19:03
<transcript>: pmpm

04:19:06
<transcript>: Pmpm. Run Deploy Scope, API Node desk.

04:19:12
<transcript>: Oh, I have to add it to the top level. The turbo.

04:19:16
<transcript>: We need to have a no, we have it.

04:19:16
<transcript>: so i

04:19:18
<transcript>: So I have to have a deploy.

04:19:22
<transcript>: Depends on build and deploy.

04:19:25
<transcript>: What.

04:19:29
<transcript>: Run, PMPM, Run, deploy.

04:19:35
<transcript>: Missing script deploy.

04:19:43
<transcript>: So let's see if this actually built API. Build successful. Yeah. All the regions and the test stack. Cool.

04:19:43
<transcript>: i'm actually really

04:19:45
<transcript>: I'm actually really surprised that built.

04:19:45
<transcript>: and because

04:19:47
<transcript>: And because it's servo. Repo.

04:19:54
<transcript>: Oh, you know what? I'm not using. I'm probably not using the Turbo repo shared cache.

04:19:57
<transcript>: How do I use the shared cash in here.

04:20:08
<transcript>: Turbo run Build I bet I'm not using the Turbo shared cache. That's a bummer.

04:20:08
<transcript>: but

04:20:10
<transcript>: But.

04:20:15
<transcript>: But why is it not running? Deploy.

04:20:21
<transcript>: Scope API do you go into the API when we have a deploy script.

04:20:21
<transcript>: do i have

04:20:27
<transcript>: Do I have to have in this top level package JSON do I have to have a deploy? Do I that would be dumb.

04:20:27
<transcript>: i guess

04:20:29
<transcript>: I guess so. Yeah.

04:20:31
<transcript>: Deploy.

04:20:34
<transcript>: Her bow. Run the Floy.

04:20:39
<transcript>: That's not dumb. I'm done.

04:20:39
wattnvolt: Hey, I think, your sound is gone

04:20:49
<transcript>: Of course. Yeah. Okay. I had to have that because that's what it's running. I'm trying to run PMPM run to Ploy and that doesn't exist. And then it defers to Turbo run. Yeah, Yeah.

04:20:54
<transcript>: Get commit.

04:20:55
<transcript>: Six.

04:20:59
<transcript>: On.

04:21:01
<transcript>: But I'm not sure.

04:21:02
wattnvolt: Or did you mute manually?

04:21:08
<transcript>: If I'm using the shared cache and how I would.

04:21:11
<transcript>: How did I do in public.

04:21:26
<transcript>: This is how? Right here.

04:21:35
<transcript>: Cash dependencies. So am I doing like a turbo link or anything or that's just if I have these in there.

04:21:38
<transcript>: Yeah. I just didn't put these in there.

04:21:41
zombjay: @wattnvolt Sounds good check ur end

04:21:48
<transcript>: Actions.

04:21:48
<transcript>: no

04:21:50
<transcript>: No, the Floy.

04:21:54
<transcript>: Was just there.

04:21:58
<transcript>: And.

04:21:59
<transcript>: Why.

04:22:02
<transcript>: Here.

04:22:07
<transcript>: I need to add those secrets to my secrets.

04:22:12
<transcript>: Let's see if it worked this time.

04:22:12
<transcript>: oh

04:22:13
wattnvolt: @zombJay Thanks! My Browser failed :D

04:22:15
<transcript>: Oh, it's still working people. It's still working.

04:22:19
<transcript>: My sound is gone? What.

04:22:19
<transcript>: me all night here me

04:22:20
<transcript>: Me all night here me.

04:22:24
<transcript>: Think your sound is gone? Or did you mute manually.

04:22:29
<transcript>: Oh, it sounds something else's. End. Welcome to Chat wattonvolt.

04:22:29
<transcript>: and pop

04:22:31
<transcript>: And Popa.

04:22:34
<transcript>: And Zach, Zomb. J.

04:22:38
<transcript>: Your browser failed. It's okay. We all fail sometimes.

04:22:47
mvd_dev: I can hear ya

04:22:51
<transcript>: Oh, did it fail? It fail? Speaking of failing.

04:22:56
<transcript>: Oh, it filled the build node. Didn't run. Deployed. Scope.

04:22:56
<transcript>: packages

04:22:58
<transcript>: Packagescope.

04:23:02
<transcript>: Catch it cool build cache was hit.

04:23:09
<transcript>: Current credentials could not be used to assume.

04:23:09
<transcript>: if

04:23:16
<transcript>: If you south one proceeding anyway, building assets failed. Uhoh Uhoh.

04:23:19
uberrick: was opportunity to troll by saying we could also not hear him

04:23:20
<transcript>: Not authorized forum Describe Stacks on resources.

04:23:20
<transcript>: that

04:23:21
<transcript>: That.

04:23:24
<transcript>: Oh, I've got to give my oh, Yeah.

04:23:24
<transcript>: we're

04:23:29
<transcript>: We're good. I've just got to give my GitHub let's see.

04:23:32
<transcript>: Cdk GitHub.

04:23:38
<transcript>: Cdk GitHub OIDC.

04:23:42
<transcript>: This package from.

04:23:42
<transcript>: airy

04:23:43
<transcript>: Airy Paulo.

04:23:47
<transcript>: And I need to give.

04:23:51
<transcript>: Grant. Here we go.

04:23:51
<transcript>: administrator

04:23:54
<transcript>: Administrator access. That'd be about it. Yeah.

04:24:03
<transcript>: This is for an example. What I want to do is give the ability to assume all the CDK roles.

04:24:03
<transcript>: how do i do that

04:24:05
<transcript>: How do I do that in public.

04:24:05
<transcript>: i do

04:24:07
<transcript>: I do that in public. Somewhere.

04:24:09
<transcript>: Let's see.

04:24:12
<transcript>: Package.

04:24:15
<transcript>: Meta.

04:24:17
<transcript>: Lib.

04:24:21
<transcript>: Constructs GitHub, roll.

04:24:25
<transcript>: I kind of did my own Airy Paolo thing here just was way more jank.

04:24:28
<transcript>: And I give it.

04:24:33
<transcript>: Here CDK. Assume roll. Okay, let's go to.

04:24:37
<transcript>: What is that? In.

04:24:40
<transcript>: Where some of my API stack, I think.

04:24:43
<transcript>: Github.

04:24:49
<transcript>: Here we go. There's my provider. And then I create the roll right here.

04:24:55
<transcript>: So I'm gonna say, actions, roll, dot.

04:25:00
<transcript>: Attach in line policy or I bet I can just do.

04:25:03
<transcript>: Inline policies.

04:25:03
<transcript>: yeah

04:25:05
<transcript>: Yeah.

04:25:08
<transcript>: I can just copy this whole thing outright.

04:25:09
<transcript>: Copy.

04:25:22
<transcript>: All that.

04:25:25
<transcript>: Oh, cool, cool.

04:25:29
wattnvolt: Have to learn some python for Data Analytics (for an event) and procrastinate by watching sth, that I understand less :D

04:25:31
<transcript>: It was opportunity to troll that thing. We could also not hear how you guys could have told me so good.

04:25:31
<transcript>: so bad

04:25:35
<transcript>: So bad. So good. So bad? What's wrong? Here.

04:25:43
<transcript>: That's the policy document. Oh, I just need to add like that.

04:25:43
<transcript>: no

04:25:45
<transcript>: No.

04:25:48
<transcript>: Yeah.

04:25:48
<transcript>: what

04:25:49
<transcript>: What.

04:25:52
<transcript>: Say what new policy document.

04:25:56
<transcript>: Why is there comma expected.

04:26:02
<transcript>: Oh, I need another Oof. This is tough. There we go.

04:26:16
<transcript>: Okay, so now I can assume all the CDK roles. I might as well get administrator access like this is just as bad, but I feel a little better about it because it doesn't say administrator access. It's not rich in my repo.

04:26:24
<transcript>: Get commit.

04:26:27
<transcript>: Fix.

04:26:27
<transcript>: cdk

04:26:29
<transcript>: Cdk GitHub.

04:26:29
<transcript>: roll

04:26:30
<transcript>: Roll.

04:26:36
<transcript>: Didn't add the secrets, my Versailles. Secrets.

04:26:36
<transcript>: but

04:26:39
<transcript>: But it seems to be working with a cache. I don't know.

04:26:44
<transcript>: Probably just won't work when the thing is reset or whatever.

04:26:55
<transcript>: Have to learn some Python for data analytics for an event and procrastinate by watching something that I understand less.

04:26:55
<transcript>: that's funny

04:26:57
<transcript>: That's funny.

04:27:04
<transcript>: If we get this thing deployed, what's gonna happen is we're gonna be creating.

04:27:04
<transcript>: fake users

04:27:23
<transcript>: Fake users in the database. We should see those and we should be seeing some log output that shows profiles being returned through the API. That means we've kind of got everything wired up in end. And I've been working on this since yesterday and it's first thing I'm actually run then running a lot of stuff. Haven't run it yet. Should probably run it. Thanks for a follow dread scheme ski.

04:27:34
<transcript>: I don't have any calls. There anything good.

04:27:46
anitrogen: this looks really hard to understand and work with hats off to you

04:27:51
blakegreendev: what limits are you trying to test?

04:28:06
<transcript>: What limits my transest? So. Oh, did it fail? Hang on one SEC. Blake.

04:28:09
<transcript>: Think for the Follow Watton Bolt.

04:28:25
<transcript>: Bundling. Bundling. I'm actually gonna be surprised if Pnpm works because I've never gotten into work with Lambda functions that are bundled via this build. Building assets failed. Uhoh, access denied. Describe stacks. Wait. Is this not the same error.

04:28:29
<transcript>: That's the air. I just I just got.

04:28:37
<transcript>: Rebuilding.

04:28:44
<transcript>: Or that's a cache. It's just replaying the output. Okay, so that was the cash hit. It built successfully.

04:28:44
<transcript>: and

04:28:45
blakegreendev: shoulda went with Admin Access lol

04:28:46
<transcript>: And put it in CDK, out.

04:28:46
<transcript>: and then

04:28:49
<transcript>: And then we just deployed.

04:28:55
<transcript>: So you can pull a Cdik out PowerPool never.

04:29:02
<transcript>: Current credentials could not be used to assume that.

04:29:08
<transcript>: What's the problem here? Building assets failed.

04:29:08
<transcript>: access

04:29:10
<transcript>: Accesside.

04:29:10
<transcript>: github

04:29:15
<transcript>: Github Actions Roll Not authorized to perform Describes Acts on resource.

04:29:15
<transcript>: cdk

04:29:17
<transcript>: Cdk toolkit.

04:29:17
<transcript>: no identity

04:29:21
<transcript>: No identitybased Policy allows the CloudFormation description to action.

04:29:28
<transcript>: So it can access the I bootstrap the CDK toolkit and it can access it. So to sign.

04:29:32
<transcript>: What.

04:29:34
<transcript>: What's from here.

04:29:44
<transcript>: So my get up action role can't do describe stacks on the CDK toolkit stack, which is the bootstrap stack.

04:29:49
<transcript>: Did I not give it enough.

04:29:49
<transcript>: ro

04:29:50
<transcript>: Role CDK.

04:29:54
<transcript>: Assume roll.

04:29:54
<transcript>: the cd

04:29:58
<transcript>: The CDK rolls not give it rolls for that, I guess.

04:29:58
<transcript>: should i just get

04:30:01
<transcript>: Should I just get administrator? What do we think.

04:30:01
<transcript>: should have went

04:30:03
<transcript>: Should have went with Admin access.

04:30:03
<transcript>: yeah

04:30:18
<transcript>: Yeah. Maybe I should. It feels real bad to give this. I mean, it's like it can only be code that's running in my GitHub Actions. That's all I'm giving access to. But any code that can run on my GitHub actions has administrator access into this account that's feels bad.

04:30:22
<transcript>: Feels kind of bad.

04:30:22
<transcript>: let me think

04:30:23
<transcript>: Let me think.

04:30:26
<transcript>: What do we think? What do we think.

04:30:26
<transcript>: i wonder

04:30:28
<transcript>: I wonder why.

04:30:31
blakegreendev: but you have a lot of AWS credits :)

04:30:31
<transcript>: Scribe stacks. Let's just search this.

04:30:45
<transcript>: Do I need to reboot strap.

04:30:56
<transcript>: Might have been an old CDK, bootstrap.

04:30:56
<transcript>: what if i

04:30:58
<transcript>: What if I should wipe.

04:30:58
<transcript>: let's

04:31:01
<transcript>: Let's see let's go into CloudFormation here.

04:31:04
<transcript>: Cloud for.

04:31:08
<transcript>: Delete some stuff.

04:31:10
<transcript>: Like.

04:31:10
<transcript>: the api

04:31:14
<transcript>: The API stack that's in here. Let's delete that.

04:31:18
<transcript>: Oh, that's gonna delete my GitHub roll.

04:31:37
<transcript>: Just thinking just thinking just things.

04:31:44
<transcript>: Delete failed.

04:31:54
<transcript>: So I think I actually updated. Yeah, I got to delete this stack. I think I updated a stack that was already named API Stack in here.

04:32:01
<transcript>: And I shouldn't have, so we're deleting that API stack. We have to redo the GitHub thing.

04:32:01
<transcript>: i also might

04:32:03
<transcript>: I also might just delete.

04:32:07
<transcript>: The CDK toolkit and reboot strap.

04:32:14
<transcript>: Oh, I guess that's just for this region. So I've also got to do it in us less two.

04:32:17
<transcript>: Whatabama.

04:32:23
<transcript>: And let's delete.

04:32:23
<transcript>: the

04:32:28
<transcript>: The toolkit stack, man. I just did this yesterday.

04:32:32
<transcript>: Let's just delete all the API stacks, and then we'll go from there.

04:32:34
<transcript>: That was.

04:32:34
<transcript>: the

04:32:37
<transcript>: The EU Central One, Frankfurt.

04:32:46
<transcript>: Okay.

04:32:55
<transcript>: I can see if I can deploy it locally, not in GitHub actions.

04:32:55
<transcript>: it's another option

04:32:56
<transcript>: It's another option.

04:33:00
<transcript>: Then we got what else.

04:33:07
<transcript>: There's a couple more Sydney.

04:33:19
<transcript>: I'm gonna have to delete it, or I'm gonna have to install it manually now, because I don't have a GitHub, Broll.

04:33:24
<transcript>: I wonder if that's what happened. I wonder if my GitHub roll didn't actually get amended.

04:33:24
<transcript>: singapore

04:33:28
<transcript>: Singapore. Maybe Where's my other one? Singapore.

04:33:31
<transcript>: Thank you for the follow.

04:33:34
<transcript>: Gurga.

04:33:41
<transcript>: Someone tell me. What is it.

04:33:44
<transcript>: US east, one.

04:33:54
<transcript>: Ap, South One, cancel.

04:34:00
<transcript>: Mumbai.

04:34:02
<transcript>: Alright.

04:34:02
<transcript>: let's get ready to

04:34:04
<transcript>: Let's get ready to get interesting here.

04:34:04
<transcript>: delete that one

04:34:06
<transcript>: Delete that one.

04:34:11
<transcript>: I don't know if I want to reboot sharper sharpen on or just assume it's gonna work now.

04:34:14
<transcript>: Let's go back to USC, Swans, see if it deleted.

04:34:18
<transcript>: No delete in progress.

04:34:41
<transcript>: Okay, Let's.

04:34:46
<transcript>: Just come over here while I'm waiting.

04:34:55
<transcript>: You been doing a good job.

04:34:58
<transcript>: Thanks for the follow.

04:34:58
<transcript>: code

04:35:00
<transcript>: Code with code.

04:35:00
<transcript>: gun

04:35:03
<transcript>: Gun and the Terde.

04:35:10
<transcript>: What is it? Tuesday, says Tuesday.

04:35:14
<transcript>: It's Tuesday.

04:35:21
<transcript>: Still the leading stuff.

04:35:21
<transcript>: takes

04:35:28
<transcript>: Takes a while? It's got to delete all the replicas. Oh, Geez, I know I did my secret outside of the stack. Yeah.

04:35:29
neondactyl: TACO TUESDAY

04:35:35
<transcript>: So once I get this Taco Tuesday, Once I get this.

04:35:42
<transcript>: First Sac before we've got a test stack. We've got the API deployed.

04:35:42
<transcript>: the api

04:35:47
<transcript>: The API is wired up to a DynamoDB table. We should be writing new profiles to it.

04:35:47
<transcript>: and creating

04:35:49
neondactyl: @adamdotdev go get some Rama Thai for me please, I miss that restaurant

04:35:50
<transcript>: And creating Jot tokens with a shared set.

04:35:50
<transcript>: that the

04:35:51
uberrick: I never make mistakes. I thought I did once; but I was wrong.

04:35:53
<transcript>: That the App Sync API is authorizing against.

04:35:53
<transcript>: go get some

04:35:57
<transcript>: Go get some ramen tie for me, please. I miss that restaurant Ramadan.

04:35:57
<transcript>: a ram

04:36:00
<transcript>: A Rama was that in Springfield.

04:36:05
<transcript>: Rick. You never make mistakes.

04:36:05
<transcript>: saw you did

04:36:07
uberrick: straight from my dad jokes book next to me

04:36:07
<transcript>: Saw you did you're wrong.

04:36:12
neondactyl: Yessir

04:36:15
<transcript>: Straight from my dad joked book. Do you really have a dad jokes book? That's too funny. I hope that's true.

04:36:19
<transcript>: Rahmat. I've heard of that. I do love Thai food.

04:36:20
uberrick: yeah I do :D

04:36:21
<transcript>: Love me sometimes.

04:36:27
<transcript>: That's awesome. Where do you get a dad joke book.

04:36:30
uberrick: fathers day present

04:36:32
<transcript>: Amazon, I guess.

04:36:32
<transcript>: father's

04:36:36
<transcript>: Father's Day Present that's sitting makes sense.

04:36:36
uberrick: probably amazon yeah

04:36:40
<transcript>: Still deleting the lead in progress.

04:36:47
<transcript>: I'm gonna start a new bootstrap. Just a make sure.

04:36:50
<transcript>: Mpm run.

04:36:52
<transcript>: Cdk, loopstrap.

04:36:54
<transcript>: This thing.

04:36:59
<transcript>: For the Follow Greck. Grecool.

04:37:05
<transcript>: It looks like it's already.

04:37:05
<transcript>: that's doing stuff

04:37:09
<transcript>: That's doing stuff. No changes. Okay. Bootstrapped. No changes.

04:37:10
uberrick: started my tmux journey today

04:37:17
<transcript>: Yes. So what do we think? Can I make a video about this this week.

04:37:17
<transcript>: can i actually

04:37:23
neondactyl: I need to change from screen to tmux

04:37:24
<transcript>: Can I actually get this thing written doing a high zero Tweets per second? I'm sorry. Beats per second.

04:37:28
<transcript>: And make a video about it before Friday.

04:37:34
neondactyl: but the keybinds for screen are embedded into my brain at this time

04:37:34
cowfacedude99: @UberRick welcome to the cult LUL

04:37:35
<transcript>: T. Max is great. Rick, I'm so glad you jumped into tmux. I'm so glad I jumped into tmux.

04:37:35
<transcript>: a few weeks

04:37:35
wattnvolt: I see your stream the first time. In your background, are these 1. houses, 2. robots or 3. espresso machines?

04:37:37
<transcript>: A few weeks ago.

04:37:41
<transcript>: Key binds for screener embedded into my brain at this time.

04:37:50
<transcript>: I see your stream the first time in your background are these one houses two robots or three Espresso machines.

04:37:50
<transcript>: these

04:37:52
<transcript>: These are houses.

04:37:52
<transcript>: right here

04:37:55
<transcript>: Right here. Their Lego Modular buildings.

04:37:55
<transcript>: i built them

04:38:00
<transcript>: I built them with my seven year old son. And we lit them.

04:38:00
<transcript>: very

04:38:02
<transcript>: Very tediously.

04:38:02
<transcript>: there's a

04:38:05
wattnvolt: Ahhh cool

04:38:12
cowfacedude99: @NeonDactyl I think you can actually migrate without any issues.

04:38:12
<transcript>: There's a lot of work that went into lighting those buildings, drilling holes and bricks, which is sacrilege, I think, for Lego, but we did it. We hid the wires in the walls.

04:38:12
<transcript>: it's pretty

04:38:21
<transcript>: It's pretty cool. A lot of time a lot of times spent on this thing actually migrate without any issues from screen to tmux. I never even heard a screen.

04:38:23
<transcript>: So I built into Linux.

04:38:38
<transcript>: Come on, Delete. This stuff. Let's go.

04:38:38
<transcript>: get out of here

04:38:39
<transcript>: Get out of here.

04:38:43
neondactyl: I might have to look into that

04:38:43
<transcript>: Api stack? What was API stack.

04:38:43
<transcript>: what

04:38:45
uberrick: yeah you can override all keybindings to what you're used to @NeonDactyl

04:38:45
<transcript>: What did I just delete.

04:38:47
neondactyl: I don't have to use screen very often

04:38:48
<transcript>: Wait a minute.

04:38:52
<transcript>: Oh, wait a minute.

04:38:57
<transcript>: What was this.

04:38:59
<transcript>: Something with Cognito.

04:38:59
<transcript>: and search

04:39:01
<transcript>: And search.

04:39:03
<transcript>: Oh, Geez.

04:39:03
<transcript>: i don't

04:39:05
<transcript>: I don't know what this was.

04:39:05
<transcript>: i don't know

04:39:07
<transcript>: I don't know what I just deleted.

04:39:09
neondactyl: I mostly use it to run a modded minecraft server for the family so I can reconnect

04:39:18
<transcript>: Don't have to use screen very often and mostly use it to run a modded Minecraft server for my family so I can reconnect that sounds fun.

04:39:21
<transcript>: If I played games, I'd probably play Minecraft.

04:39:21
<transcript>: that sounds

04:39:23
<transcript>: That sounds fun.

04:39:27
<transcript>: Alright.

04:39:27
<transcript>: is it done

04:39:28
cowfacedude99: I have been on tmux for nearly as long as I have been using nvim. so it's about 2+ years.

04:39:28
<transcript>: Is it done.

04:39:33
<transcript>: We still doing stuff over here. Still deleting.

04:39:52
<transcript>: Delete in progress. What is the latest event? What are we doing right now? What is it working on? Table table replicas. So deleting replicas. It is crazy to me while I'm over here. It's nuts to me that right now I'm deleting tables that I stood up in a data Center.

04:39:52
<transcript>: in frankfurt

04:39:56
uberrick: yeah screen is nice to use. used it a lot when I used to physically have to ssh onto servers and run long running jobs which took longer than my ssh timeout :D

04:39:59
<transcript>: In Frankfurt, Germany, and also one in Sydney, Australia. I just Typed some keys.

04:40:06
<transcript>: Like this sitting in my little Ozarks home office and I made stuff move all over the globe.

04:40:11
<transcript>: Like the amount of leverage that developers have today.

04:40:11
<transcript>: it's

04:40:12
<transcript>: It's nuts.

04:40:12
<transcript>: the

04:40:16
<transcript>: The things we can build that used to take teams of people.

04:40:19
<transcript>: Pretty crazy.

04:40:21
neochromer: lets hack the FBI next!

04:40:24
<transcript>: And on TMX for nearly.

04:40:35
<transcript>: I missed it nearly as long as I've been using Envy. About two plus years. Wow, cow face. After two years of neovem. Do you just like.

04:40:35
<transcript>: do you just like

04:40:40
<transcript>: Do you just like, Think and Neil them do you not even have to like, do, is there just so fast.

04:40:45
<transcript>: That was not a very coherent question.

04:40:48
<transcript>: Do you just do, like all the vim commands.

04:40:48
<transcript>: without even thinking

04:40:51
<transcript>: Without even thinking about it. I bet that feels nice.

04:40:54
<transcript>: I'm excited for two years.

04:40:56
<transcript>: That'll feel good.

04:40:59
<transcript>: Still the leading.

04:40:59
<transcript>: this global

04:41:02
<transcript>: This global infrastructure that I stood up.

04:41:02
<transcript>: table

04:41:05
<transcript>: Table? What is that table? Delete. Skipped.

04:41:05
<transcript>: probably

04:41:08
<transcript>: Probably best.

04:41:08
<transcript>: now

04:41:12
<transcript>: Now we're deleting some nested stacks.

04:41:12
<transcript>: this

04:41:12
vox_gpt4: do you think it's actually feasible to build something like twitter solo today?

04:41:16
<transcript>: This was good. I should have deleted this, right? Yes.

04:41:16
<transcript>: i'm glad i

04:41:18
<transcript>: I'm glad I deleted this.

04:41:21
<transcript>: I am.

04:41:21
<transcript>: just

04:41:23
uberrick: I wasn't ready for using nvim and tmux at the same time. Starting with tmux now after feeling more comfortable with nvim

04:41:24
<transcript>: Just wish it would be faster.

04:41:24
<transcript>: do you

04:41:28
creativenull: 3 years here, I want everything to have  vim keybinds LUL

04:41:30
<transcript>: Do you think it's actually feasible to build something like Twitter Solo today? You know, Vox? I don't know.

04:41:46
<transcript>: Some version of it. Yeah. Like a knockoff version. Like to build all the features would take some time, but like, look what Jared built with bun. Like, if one person can build bun, I think one person who built Twitter now the infrastructure side is.

04:41:46
<transcript>: i'm like

04:41:47
glamshatterskull: @UberRick def best to do things like that in a screen cause the screen drawing can make things chug

04:41:47
cowfacedude99: the abstractions have gotten better although we are getting distant from the basics.

04:41:50
<transcript>: I'm like I'm kind of glossing over the fact that Twitter does.

04:41:50
<transcript>: sometimes does

04:41:54
<transcript>: Sometimes does 1500 tweets per second. That's a lot.

04:41:54
<transcript>: but

04:41:56
<transcript>: But.

04:41:56
<transcript>: i think it's

04:42:02
<transcript>: I think it's possible. That's what I'm trying to prove this week. I'm trying to prove can an individual developer with an AWS account.

04:42:02
<transcript>: build a serverless

04:42:06
<transcript>: Build a serverless Twitter API that handles.

04:42:15
<transcript>: Globally that kind of scale and still gives good latencies with reads and all that. That's what we're trying to figure out. We'll see if it's possible.

04:42:29
<transcript>: Screen drawing can make things chug if Shaq's have gotten better although we are getting distant from the basics yeah, that's true. Cafes.

04:42:32
<transcript>: That's true.

04:42:37
wattnvolt: I have to go, your stream looks very interesting to me, I'm looking forward for further interesting stuff, thx for new content in my brain ;)

04:42:39
<transcript>: Yeah. At some point like these abstractions are getting so high level.

04:42:45
<transcript>: Like, what does that mean for the developer that comes into the ecosystem.

04:42:45
<transcript>: and

04:42:49
<transcript>: And they only look these very, very high level of tractions. Like, are they.

04:42:49
<transcript>: i guess

04:42:53
uberrick: Cya @wattnvolt good to have you here :)

04:42:58
<transcript>: I guess it's just when things start breaking down, it's harder for them to figure out what's going on. What? Volt. See you later. Thank you so much for coming.

04:42:58
<transcript>: looking

04:43:01
<transcript>: Looking forward to further interview stuff. Thanks for the new concept. My brain. You bet.

04:43:01
<transcript>: anytime

04:43:06
<transcript>: Anytime watch Well, any Tuesday or Thursday from these hours.

04:43:06
<transcript>: good to

04:43:09
<transcript>: Good to be here. You're good to have you here, though. Thank you so much for coming.

04:43:16
<transcript>: I think we're almost done deleting this stack, and then I'll go back to my screen. Oh, we're done, Billy, complete. Here we go.

04:43:16
<transcript>: here we

04:43:22
<transcript>: Here we go. Here we go. Here we go. Okay. So now I'm going to.

04:43:24
wattnvolt: good to know, have a nice evening!

04:43:24
<transcript>: Run it.

04:43:26
<transcript>: Build.

04:43:26
<transcript>: let's run the

04:43:28
<transcript>: Let's run the build. Oh, no, no.

04:43:33
<transcript>: Not CDK bill just CDK or Mpmpm run build.

04:43:43
neondactyl: he delete; he complete; most importantly, he create feat

04:43:44
<transcript>: This should be able to synthesize the whole thing. And then we're going to deploy it to manually, not in GitHub actions.

04:43:47
<transcript>: Right.

04:43:49
neochromer: @cowfacedude99 I dont think thats a bad thing..

04:43:50
<transcript>: Might have to manually delete a table.

04:43:59
neochromer: Else we would drite assembly today

04:44:02
<transcript>: Delete that.

04:44:05
neochromer: write*

04:44:05
<transcript>: Deleted.

04:44:18
<transcript>: New caramel. I don't think that's a bad thing else. We would write assembly today. Yeah. No, I think like, there are points.

04:44:20
neochromer: or use FTP

04:44:25
<transcript>: There are points when you no longer need to dip lower into the abstractions. The question is.

04:44:25
neochromer: or things like that

04:44:29
<transcript>: Like.

04:44:34
<transcript>: All this stuff we can do with Cloud and with some of these web frameworks.

04:44:34
<transcript>: are they

04:44:51
<transcript>: Are they, like, baked enough yet that you never have to dip it like we never have to dip into assembly. If you're an application developer, you just don't. You never have to dip into the assembly level. What is the moment in time where these abstractions become so foundational that you no longer need.

04:44:51
<transcript>: to dip below

04:45:01
<transcript>: To dip below it if you're like operating at that level. Obviously, some people are dipping to that level, but like if you're an application developer, you don't have to today, like, there's always a solution.

04:45:01
<transcript>: without going

04:45:05
<transcript>: Without going that low. So I guess I don't know what I'm asking. I think I'm asking.

04:45:05
<transcript>: when does

04:45:07
neochromer: I mean I dont know how nginx works but I know how to configure it to work how I want it to work

04:45:08
<transcript>: When does an abstraction become that baked.

04:45:19
neochromer: am i a bad "engineer" for not know ing it?

04:45:19
<transcript>: I don't know how NGINX works, but I know how to configure it to work out to work, yeah, Yeah.

04:45:19
<transcript>: so now we're

04:45:22
<transcript>: So now we're deploying it from my machine.

04:45:22
<transcript>: which is fine

04:45:27
<transcript>: Which is fine. I don't really care if my CI CD works right now.

04:45:32
<transcript>: We're creating a whole bunch of stuff like, this is nuts. This is crazy.

04:45:32
<transcript>: the things

04:45:36
<transcript>: The things that are happening right now because I typed a command.

04:45:40
<transcript>: We're deploying infrastructure.

04:45:43
<transcript>: In five A Tobis Regions all over the globe.

04:45:44
neochromer: but thats just me :D I always love to make things easier for me and my team

04:45:50
<transcript>: I'm gonna be able to hit a button here in a second. I'm not gonna have to hit a button. It's just gonna start every minute.

04:45:50
<transcript>: creating new user

04:45:52
<transcript>: Creating new user.

04:45:54
<transcript>: And then we can iterate.

04:45:54
<transcript>: we can change

04:46:03
<transcript>: We can change it, and we can see if we can create a million users, and if we can hit our API at crazy, absurd levels. And what breaks first.

04:46:03
<transcript>: this is kind of

04:46:21
<transcript>: This is kind of an observability problem. Boris would be happy to hear this is like with serverless. How do I determine what things are breaking down? Like, I can go in the cloud watch and create a dashboard. But like, do I have enough visibility into the throttling and the quotas that are being hit to build, address them quickly.

04:46:21
<transcript>: just a big

04:46:25
<transcript>: Just a big learning exercise. I'm excited about this. This is fun.

04:46:32
<transcript>: And I've just never built a serverless app with this kind of a load.

04:46:32
<transcript>: like

04:46:38
<transcript>: Like, I've never I've never tested the upper bounds of some of this stuff, so I'm excited to see what it looks like.

04:46:57
<transcript>: The only thing I have to do is make sure I don't rack up a $50,000 bill. This will be the moment. This will be the moment I'll go back and edit this part of the video out and like I'll chop this part and put it into the YouTube video. When I accidentally did blow through all my credits and burn up a huge bill like, hope I don't do that.

04:47:01
<transcript>: He did that. Now. I'm not gonna do that.

04:47:02
cowfacedude99: I think I sit somewhere in the middle. I do like the vim keybindings hjkl but since I use workman those are not accessible so I don't ever use them now. Although my workflow has been changing for a quiet a long time. So I tend to have a set of keybindings per month or year and those maybe change as my needs chang.

04:47:03
<transcript>: Probably.

04:47:12
<transcript>: I think I sit somewhere in the middle. I do like the Vim key bindings, but since I use workmen, those are not accessible, so I don't ever use them now.

04:47:30
<transcript>: Although my workflow has been changing for quite a long time tend to have a set of keyboards. So am I gonna be like, changing my my workflow, my text editor workflow indefinitely. I thought I'd, like, kind of got it like I did it. Spent a month got my workflow down beer, saying, cafes over two years, you've just continued.

04:47:30
<transcript>: you keep

04:47:32
<transcript>: You keep changing it.

04:47:32
<transcript>: i don't know how i feel about that

04:47:35
<transcript>: I don't know how I feel about that. I want it to be settled. I think.

04:47:47
<transcript>: Something really weird noise.

04:47:52
glamshatterskull: i change mine all the time... it always gets better

04:48:09
<transcript>: 1 second.

04:48:10
vox_gpt4: narcos in your backyard

04:48:22
schrew: this song does have some weird noises

04:48:23
cowfacedude99: wait till you get some new plugin that blows your mind @adamdotdev

04:48:24
dore95: FBI OPEN UP

04:48:30
<transcript>: Oh, no, I walked away and it's rolling back. What happened.

04:48:32
<transcript>: What happened.

04:48:39
<transcript>: So there's, like a little, like fluttering noise happening in my wall. And I just banged the wall. And it stopped.

04:48:39
<transcript>: i know what it was

04:48:41
<transcript>: I know what it was.

04:48:45
<transcript>: It was not the song, though.

04:48:45
<transcript>: wait to get

04:48:48
<transcript>: Wait to get some new plugin that blows your mind.

04:48:48
<transcript>: oh rollback

04:48:51
spartangtr: giant bug

04:48:53
<transcript>: Oh rollbacks are terrible when you have complicated infrastructure because this now it's got to delete all that stuff.

04:48:53
<transcript>: replica

04:48:56
morded__: sound good

04:48:59
<transcript>: Replica replica specified in the replica update or replica delete action of the request was not found.

04:48:59
<transcript>: what

04:48:59
morded__: sounds*

04:49:00
<transcript>: What.

04:49:05
creativenull: so youre saying it wasnt a banger

04:49:21
<transcript>: 's go over here and let's see.

04:49:30
<transcript>: Let's see, let's see.

04:49:37
<transcript>: Events.

04:49:42
<transcript>: So what does it do? Receive, response.

04:49:50
<transcript>: From Customer Resource replicas to the side in the Replica update. This is for our Table Replica EU central.

04:49:54
<transcript>: Was it not deleted? Yet.

04:50:01
<transcript>: Replica specify the Roka update. I wonder if it wasn't deleted yet.

04:50:07
<transcript>: There's our bitter table.

04:50:07
<transcript>: let's go

04:50:09
<transcript>: Let's go to.

04:50:11
<transcript>: Frankfurt.

04:50:15
<transcript>: And.

04:50:25
<transcript>: So did it create it in any of them us West.

04:50:34
<transcript>: No, it's didn't create my replicas. But why would it have? I don't know.

04:50:34
<transcript>: what

04:50:35
<transcript>: What.

04:50:41
<transcript>: Shouldn't the CloudFormation stack be doing that, sustain anything about global tables.

04:50:45
<transcript>: If you need to use version.

04:50:51
<transcript>: Replicas.

04:50:53
<transcript>: Delete failed.

04:51:01
<transcript>: Oh, that's during the leap that that error was not the create error. Hang on.

04:51:01
<transcript>: that's just

04:51:08
<transcript>: That's just what it was trying to delete. This is way after create failed response is not valid. Json.

04:51:08
<transcript>: so

04:51:13
<transcript>: So it failed to create my replica. I don't know what happened.

04:51:18
<transcript>: I wonder if it wasn't done deleting yet. That's my best guess.

04:51:18
<transcript>: so

04:51:24
<transcript>: So let's go, let's duplicate this. Let's go to Frankfurt.

04:51:27
<transcript>: Is it still deleting.

04:51:30
<transcript>: Now.

04:51:33
<transcript>: Okay.

04:51:36
<transcript>: Sure thing. It wasn't a banger.

04:51:36
<transcript>: i think for the

04:51:40
<transcript>: I think for the follow jester and done stable Ramsey.

04:51:40
<transcript>: ramsay

04:51:41
<transcript>: Ramsay.

04:51:46
<transcript>: Okay. So that fails.

04:51:49
<transcript>: That's okay. Let's try again.

04:51:49
<transcript>: i think that

04:51:54
<transcript>: I think that could have been just a while. Maybe rollback failed. Let's delete.

04:51:55
cowfacedude99: @NeoChromer don't get me wrong. I do like the abstractions. but at some point I would like to peel those abstractions away and interact a layer or two lower. And some of the abstractions make some design choices that kind of make it hard to migrate after you have bought into the system

04:51:58
<transcript>: Like, what is this? This.

04:51:58
<transcript>: failed to delete

04:52:00
<transcript>: Failed to delete? Why.

04:52:05
<transcript>: Following resources. Create register.

04:52:11
<transcript>: What are these.

04:52:13
<transcript>: I really don't know what this used to be.

04:52:16
<transcript>: But I'm gonna delete it.

04:52:24
<transcript>: Right.

04:52:26
<transcript>: Okay.

04:52:28
<transcript>: Stacks.

04:52:38
<transcript>: Okay, API stack is gone.

04:52:38
<transcript>: so let's do

04:52:40
<transcript>: So let's do it again.

04:52:43
<transcript>: Try it again.

04:52:45
<transcript>: If at first she's done succeed.

04:52:45
<transcript>: you get

04:52:49
<transcript>: You get a cryptic error from a custom resource.

04:52:49
<transcript>: try

04:52:51
<transcript>: Try, try, try again.

04:53:02
<transcript>: I I could pull back and not do so many regions up front just while we're testing this whole thing.

04:53:02
<transcript>: we

04:53:05
<transcript>: We could just do it in USD One, even.

04:53:09
<transcript>: This doesn't work. That's what we'll try.

04:53:20
<transcript>: That anymore.

04:53:25
<transcript>: I'm actually gonna clean up some tabs the graphical query.

04:53:27
<transcript>: Don't need that anymore.

04:53:27
<transcript>: oh

04:53:30
<transcript>: Oh failing to create the certificate.

04:53:30
<transcript>: that was

04:53:32
<transcript>: That was fast.

04:53:32
<transcript>: resource

04:53:35
<transcript>: Resource of type oh the table already exists.

04:53:40
<transcript>: Got it. Got to delete that table.

04:53:44
<transcript>: I definitely got to delete the table first.

04:53:46
<transcript>: Because it does not delete it.

04:53:52
<transcript>: If you're watching.

04:53:52
<transcript>: why

04:53:58
<transcript>: Why have a fixed name for the table? There's a reason there is a reason.

04:54:08
<transcript>: That reason is the leading. That reason is the global table set up the way I structured my stack. It just makes it a lot easier to do the global tables.

04:54:08
<transcript>: roll

04:54:14
<transcript>: Roll back in progress shouldn't have much to do we barely got started right. Four out of 38 steps.

04:54:20
<transcript>: Okay. That's deleted. Let's go back over here. US east. One.

04:54:30
<transcript>: Okay. I actually am going to let's see Delete. I am going to do less regions. I think it may.

04:54:39
<transcript>: Just do USD switch one for now.

04:54:51
<transcript>: Delete. There we go. Now let's rebuild.

04:54:54
<transcript>: And then.

04:54:54
<transcript>: we'll

04:55:00
<transcript>: We'll deploy this time it doesn't have to create any global tables.

04:55:09
<transcript>: I don't know if this is gonna work. Actually, I'm gonna have to do one other region. Let's do, actually, let's do a let's do us west. Two.

04:55:19
<transcript>: What.

04:55:23
<transcript>: 's let's try that.

04:55:36
<transcript>: I think there's too many assumptions made about it being a global table that I can't just get rid of all the regions, but we'll stay in the US. I'll speed things up for now.

04:55:39
blakegreendev: re:Invent wishlist: faster cloudformation

04:55:40
<transcript>: Deploy.

04:55:52
<transcript>: Witchlist. Faster CloudFormation, yes, perpetually.

04:55:52
<transcript>: that

04:55:55
<transcript>: That's perpetually on the wish list, isn't it.

04:56:03
<transcript>: Someday. Maybe. Maybe I'm actually gonna pee while this is doing this. I'll be right back.

04:59:06
neochromer: @cowfacedude99 Sure, some stuff needs tinkering, but I like to build and make stuff which people will use so my goal is a bit different. I do love to get into some of the abstractions ex. PrismaJS and how does it work / generate the sql in the background but then again I use prisma all the time I don't relaly wanna change anything

04:59:25
<transcript>: I get you.

04:59:25
<transcript>: i

04:59:26
<transcript>: I.

04:59:27
neochromer: @adamdotdev did you camera just move?

04:59:30
<transcript>: Just saw your big reply. There.

04:59:34
<transcript>: Door. I don't know if I said welcome to chat.

04:59:34
<transcript>: also solid

04:59:38
<transcript>: Also solid thanks for the follow and gesture.

04:59:45
<transcript>: Did your camera just move at did neocromer.

04:59:45
<transcript>: are you kid

04:59:47
<transcript>: Are you kidding me.

04:59:50
neochromer: holy

04:59:51
<transcript>: What failed? Here? What failed? What failed.

04:59:51
<transcript>: table

04:59:56
<transcript>: Table replica us Wes two response is not valid. Json what's going on.

05:00:06
<transcript>: Replica.

05:00:08
neochromer: No more money in the account? Kappa

05:00:11
<transcript>: Response.

05:00:17
<transcript>: Was not that valid? Json. Is there a bug? Something just get broken.

05:00:26
morded__: first time checking my app in chrome and it gives all kinds of errors... nothing in firefox wtf?

05:00:29
<transcript>: So an update to resource the table existed before adding the replica room.

05:00:44
neochromer: @Morded__ maybe you use some JS features that ar enot supported by Firefox

05:00:56
<transcript>: Possible here. Looks like the Dynamodba API responds with plain text messages in case of an error.

05:00:56
<transcript>: okay

05:00:57
<transcript>: Okay.

05:01:01
<transcript>: So I might find the error.

05:01:09
<transcript>: First I'm checking my app and Chrome, and it gives all kinds of errors. Nothing in Firefox.

05:01:15
<transcript>: I wonder if there's a DynamoDB error that we could trace down.

05:01:15
<transcript>: it's just not

05:01:17
<transcript>: It's just not being returned.

05:01:20
<transcript>: What would it be, though.

05:01:35
<transcript>: Oh, oh. Is this it? No, that's rocket. So it's trying to delete it, and that fails. But earlier, is this is the issue right here.

05:01:35
<transcript>: the response

05:01:37
<transcript>: The response is not valid. Json.

05:01:37
<transcript>: interesting

05:01:38
<transcript>: Interesting.

05:01:41
morded__: shouldn't be but I'll look into it

05:01:50
<transcript>: So when there's an error, when it tries to create the replica, it returns plain text instead of JSON. So that's what this issue is. But can I find the error that occurred? Is the question.

05:01:54
<transcript>: The custom resource is a Lambda function.

05:01:58
<transcript>: Delete in progress. See here.

05:02:00
<transcript>: Resources.

05:02:00
<transcript>: custom resource

05:02:01
<transcript>: Custom resource.

05:02:05
<transcript>: Is this It replica provider.

05:02:09
<transcript>: Is this a custom resource? That's a stack.

05:02:13
<transcript>: Thank you for the follow. Brown.

05:02:16
<transcript>: Resources.

05:02:19
<transcript>: Yeah, this is it.

05:02:24
<transcript>: Where is the function.

05:02:35
<transcript>: I don't like this new UI. Here.

05:02:39
<transcript>: First Framework complete.

05:02:46
<transcript>: Where? Where is it? Where is it? Where is it? Let's just go to Lambda.

05:02:50
<transcript>: Wonder if I can find the log somewhere in cloud watch.

05:03:05
<transcript>: It's not deleted yet, or it is deleted now. So I'm gonna have to run it again.

05:03:16
<transcript>: What is going on? This is such a bummer. I guess I could try doing with no replicas for a minute, but I want to get the replicas working. We had them deployed. I had these all deployed.

05:03:23
<transcript>: And then I deleted stack. I wonder if I caused issues when I delete the stack.

05:03:52
<transcript>: Oh, flat view. Here we go. This is the view I'm looking for.

05:04:01
<transcript>: Here we go.

05:04:01
<transcript>: no

05:04:03
<transcript>: No DynamoDB.

05:04:05
<transcript>: Service, roll.

05:04:08
<transcript>: Nested stack.

05:04:13
<transcript>: Is this one replica provider? Nest stack? Yeah.

05:04:35
<transcript>: It's like it's not creating the functions for the custom resource. Is that possible? No, that's not it.

05:04:44
<transcript>: Okay. What do we think? What do we think? What do we think.

05:04:44
<transcript>: i can delete this

05:04:47
<transcript>: I can delete this again. That's not getting us anywhere.

05:04:50
<transcript>: But I can delete the stack.

05:05:13
<transcript>: I'd leave the table. Yeah, I don't know. This is. This is annoying. And.

05:05:17
<transcript>: I'm just tired of waiting on cloud formation.

05:05:20
<transcript>: And thank you for the follow. Richard.

05:05:24
<transcript>: We've now done 5 hours and five minutes.

05:05:29
<transcript>: And I should probably call it at some point here.

05:05:34
<transcript>: I guess Thursday I'm on stream till Thursday. So.

05:05:34
<transcript>: thursday

05:05:38
<transcript>: Thursday. Where will we be? I'll probably work on this some tomorrow morning.

05:05:40
<transcript>: Just not on stream.

05:05:45
<transcript>: And hopefully I'll get past the annoying cloud formation stuff.

05:05:49
<transcript>: I'll probably try it with out any.

05:05:49
<transcript>: any

05:05:51
<transcript>: Any replica regions. Next.

05:05:55
<transcript>: Which seems dumb. I shouldn't have to do that. But.

05:05:57
<transcript>: Okay.

05:06:02
<transcript>: It's been fun. It's always fun. I love streaming.

05:06:02
<transcript>: it's such a good time

05:06:03
<transcript>: It's such a good time.

05:06:05
cowfacedude99: you can call it now, coz prime is on LUL

05:06:14
<transcript>: And because prime is on yeah, now this is the time of day. I do not stream.

05:06:14
<transcript>: like it's getting

05:06:23
<transcript>: Like it's getting close to the end of my day, actually. And this is when like people like prime and Tiege start streaming. And that's when I'm done for the day.

05:06:26
<transcript>: So thank you all again for coming.

05:06:26
<transcript>: always

05:06:28
<transcript>: Always enjoy having you here.

05:06:28
<transcript>: i'll be back on thursday

05:06:34
<transcript>: I'll be back on Thursday, and hopefully Thursday will actually be like doing some stress testing. That'd be cool.

05:06:37
<transcript>: Actually have stuff deployed.

05:06:41
<transcript>: Cool. It's been fun. Maybe we could do again sometime.

05:07:13
cowfacedude99: raiding prime?

05:07:19
cowfacedude99: or finiteSingularity?

05:07:29
adamdotdev: was just letting the random choice roll

05:07:35
cowfacedude99: cool.

05:07:40
cowfacedude99: see you on thursday

05:07:47
adamdotdev: can't wait!